[
    {
        "input": "¡Hola!",
        "output": "¡Hola! ¿Cómo estás?"
    },
    {
        "input": "Buenos días",
        "output": "¡Buenos días! ¿Cómo puedo ayudarte hoy?"
    },
    {
        "input": "¡Hey! ¿Cómo estás?",
        "output": "¡Hey! Estoy bien, gracias por preguntar. ¿Y tú?"
    },
    {
        "input": "¿Qué tal?",
        "output": "¡Todo bien! ¿Y tú, qué tal?"
    },
    {
        "input": "¡Buenas tardes!",
        "output": "¡Buenas tardes! ¿Cómo te va?"
    },
    {
        "input": "¡Buenas noches!",
        "output": "¡Buenas noches! ¿En qué te puedo ayudar hoy?"
    },
    {
        "input": "¡Hola, ¿cómo estás?",
        "output": "¡Hola! Estoy bien, gracias. ¿Y tú?"
    },
    {
        "input": "¡Qué tal todo?",
        "output": "Todo muy bien, gracias. ¿Y tú, qué tal?"
    },
    {
        "input": "¿Cómo estás?",
        "output": "Estoy bien, gracias. ¿Y tú?"
    },
    {
        "input": "¡Qué onda!",
        "output": "¡Qué onda! ¿Cómo te va?"
    },
    {
        "input": "¡Hola, qué gusto saludarte!",
        "output": "¡El gusto es mío! ¿Cómo te va?"
    },
    {
        "input": "¡Qué tal, todo bien?",
        "output": "¡Todo excelente! ¿Y tú, cómo estás?"
    },
    {
        "input": "¡Hola, ¿cómo te va?",
        "output": "¡Hola! Todo bien, ¿y tú?"
    },
    {
        "input": "¡Qué hay de nuevo?",
        "output": "Todo tranquilo. ¿Y tú, qué hay de nuevo?"
    },
    {
        "input": "¡Hola, ¿cómo va todo?",
        "output": "Todo bien, gracias por preguntar. ¿Y tú, cómo va todo?"
    },
    {
        "input": "¡Buenas, ¿todo bien?",
        "output": "¡Buenas! Todo bien. ¿Qué tal tú?"
    },
    {
        "input": "¡Hola, ¿cómo estás hoy?",
        "output": "¡Hola! Estoy bien, ¿y tú? ¿Cómo te sientes hoy?"
    },
    {
        "input": "¡Qué pasa!",
        "output": "¡Qué pasa! ¿Cómo estás?"
    },
    {
        "input": "¡Saludos!",
        "output": "¡Saludos! ¿Cómo te puedo ayudar?"
    },
    {
        "input": "¡Hola, cómo andas?",
        "output": "¡Hola! Todo bien, ¿y tú cómo andas?"
    },
    {
        "input": "¡Hola, qué gusto verte!",
        "output": "¡El gusto es mío! ¿Cómo te va?"
    },
    {
        "input": "¡Qué tal, cómo está todo?",
        "output": "Todo bien, gracias. ¿Y tú, cómo está todo?"
    },
    {
        "input": "¡Hola, todo bien?",
        "output": "¡Hola! Sí, todo bien. ¿Y tú?"
    },
    {
        "input": "¡Hola, cómo te va en el día de hoy?",
        "output": "¡Hola! Todo tranquilo. ¿Y tú cómo vas hoy?"
    },
    {
        "input": "¡Qué tal tu día?",
        "output": "Mi día va bien, gracias. ¿Y el tuyo?"
    },
    {
        "input": "¡Hola, qué tal la vida?",
        "output": "¡Todo bien! ¿Y tú, qué tal la vida?"
    },
    {
        "input": "¡Hola! ¿Cómo te ha ido?",
        "output": "¡Hola! Todo ha ido bien, ¿y tú? ¿Cómo te ha ido?"
    },
    {
        "input": "¡Saludos, cómo estás?",
        "output": "¡Saludos! Estoy bien, gracias. ¿Cómo estás tú?"
    },
    {
        "input": "¡Buenas! ¿Cómo va todo?",
        "output": "¡Buenas! Todo tranquilo. ¿Y tú, cómo va todo?"
    },
    {
        "input": "¡Hola! ¿Cómo va tu día?",
        "output": "¡Hola! Todo tranquilo. ¿Y el tuyo?"
    },
    {
        "input": "¡Qué tal! ¿Todo bien por ahí?",
        "output": "¡Todo bien! ¿Y por allá, qué tal?"
    },
    {
        "input": "¡Hola, ¿cómo te encuentras?",
        "output": "¡Hola! Estoy bien, ¿y tú cómo te encuentras?"
    },
    {
        "input": "¡Hola, qué gusto saludarte hoy!",
        "output": "¡El gusto es mío! ¿Cómo va todo?"
    },
    {
        "input": "¡Hola! ¿Qué tal el día?",
        "output": "¡Hola! Todo bien, gracias. ¿Y el tuyo?"
    },
    {
        "input": "¡Hola, qué tal por aquí?",
        "output": "¡Todo tranquilo! ¿Y por allá, qué tal?"
    },
    {
        "input": "¡Hola! ¿Qué novedades tienes?",
        "output": "¡Hola! Todo tranquilo, ¿y tú, qué novedades tienes?"
    },
    {
        "input": "¡Hola, ¿cómo te encuentras hoy?",
        "output": "¡Hola! Estoy bien, ¿y tú?"
    },
    {
        "input": "¡Hola, qué gusto verte de nuevo!",
        "output": "¡El gusto es mío! ¿Cómo te va?"
    },
    {
        "input": "¡Buenas, ¿cómo va todo por ahí?",
        "output": "¡Buenas! Todo tranquilo, ¿y por ahí, qué tal?"
    },
    {
        "input": "¡Hola! ¿Cómo te está yendo?",
        "output": "¡Hola! Todo va bien, ¿y a ti?"
    },
    {
        "input": "¡Qué onda, cómo te va?",
        "output": "¡Qué onda! Todo bien, ¿y tú, cómo te va?"
    },
    {
        "input": "¡Hola! ¿Qué tal te encuentras hoy?",
        "output": "¡Hola! Todo bien, ¿y tú cómo estás hoy?"
    },
    {
        "input": "¡Hola! ¿Todo en orden?",
        "output": "¡Sí, todo bien! ¿Y tú, todo en orden?"
    },
    {
        "input": "¡Buenas, cómo estás hoy?",
        "output": "¡Buenas! Todo bien, ¿y tú?"
    },
    {
        "input": "¡Hola! ¿Todo bien contigo?",
        "output": "¡Sí, todo bien! ¿Y tú, todo bien?"
    },
    {
        "input": "¡Hola, ¿cómo te ha ido en el día?",
        "output": "¡Hola! Ha ido bien, gracias. ¿Y tú cómo has estado?"
    },
    {
        "input": "¡Saludos! ¿Todo bien por ahí?",
        "output": "¡Saludos! Sí, todo tranquilo. ¿Y por allá?"
    },
    {
        "input": "¿Hasta luego?",
        "output": "¡Hasta luego! Espero que tengas un gran día."
    },
    {
        "input": "Nos vemos pronto",
        "output": "¡Nos vemos pronto! No dudes en volver si necesitas algo más."
    },
    {
        "input": "Adiós",
        "output": "¡Adiós! Cuídate mucho."
    },
    {
        "input": "Gracias por tu ayuda",
        "output": "¡De nada! Me alegra haber podido ayudarte. ¡Hasta la próxima!"
    },
    {
        "input": "¿Nos hablamos luego?",
        "output": "Claro, ¡nos hablamos luego! Estaré aquí cuando me necesites."
    },
    {
        "input": "Chao",
        "output": "¡Chao! Espero que tengas un buen día."
    },
    {
        "input": "Hasta la próxima",
        "output": "¡Hasta la próxima! No dudes en volver."
    },
    {
        "input": "Cuídate",
        "output": "¡Cuídate mucho! Nos vemos pronto."
    },
    {
        "input": "Nos vemos",
        "output": "¡Nos vemos! Estaré aquí si necesitas más ayuda."
    },
    {
        "input": "Gracias, adiós",
        "output": "¡Gracias a ti! ¡Adiós y que tengas un excelente día!"
    },
    {
        "input": "Te veo luego",
        "output": "¡Te veo luego! ¡Hasta pronto!"
    },
    {
        "input": "Bueno, me voy",
        "output": "¡Que tengas un buen día! ¡Hasta luego!"
    },
    {
        "input": "¿Puedes despedirte?",
        "output": "¡Claro! ¡Adiós y que tengas un buen día!"
    },
    {
        "input": "Fue un placer",
        "output": "¡El placer fue mío! ¡Hasta pronto!"
    },
    {
        "input": "Nos vemos en otro momento",
        "output": "¡Nos vemos pronto! Cuídate mucho."
    },
    {
        "input": "¿Hasta pronto?",
        "output": "¡Hasta pronto! No dudes en volver cuando necesites algo más."
    },
    {
        "input": "Me voy, gracias por todo",
        "output": "¡De nada! Fue un placer ayudarte. ¡Hasta la próxima!"
    },
    {
        "input": "Adiós, cuídate",
        "output": "¡Adiós y cuídate también! Hasta la próxima."
    },
    {
        "input": "Que descanses",
        "output": "¡Igualmente! Que tengas una excelente tarde o noche."
    },
    {
        "input": "Hasta otro día",
        "output": "¡Hasta otro día! Estaré esperando tu regreso."
    },
    {
        "input": "Gracias por tu tiempo",
        "output": "¡De nada! Fue un placer. ¡Nos vemos!"
    },
    {
        "input": "Me tengo que ir",
        "output": "¡Entendido! Cuídate y hasta pronto."
    },
    {
        "input": "Adiós, que tengas un buen día",
        "output": "¡Gracias! Te deseo lo mismo. ¡Hasta luego!"
    },
    {
        "input": "Bueno, me retiro",
        "output": "¡Que tengas un excelente día! Nos vemos pronto."
    },
    {
        "input": "Nos vemos, gracias",
        "output": "¡Nos vemos! Un placer ayudarte."
    },
    {
        "input": "Te agradezco mucho",
        "output": "¡Gracias a ti! ¡Hasta pronto!"
    },
    {
        "input": "Es hora de irme",
        "output": "¡Está bien! Cuídate mucho. ¡Nos vemos!"
    },
    {
        "input": "Gracias, que estés bien",
        "output": "¡Gracias! Que estés muy bien también. ¡Hasta la próxima!"
    },
    {
        "input": "Hasta luego, amigo",
        "output": "¡Hasta luego, amigo! Nos vemos pronto."
    },
    {
        "input": "Ya me voy, ¡gracias por todo!",
        "output": "¡De nada! ¡Hasta pronto!"
    },
    {
        "input": "Que tengas un buen descanso",
        "output": "¡Gracias! Igualmente, que descanses bien."
    },
    {
        "input": "Me voy a descansar",
        "output": "¡Que tengas una excelente noche! Nos vemos pronto."
    },
    {
        "input": "Hasta el próximo encuentro",
        "output": "¡Hasta el próximo encuentro! Nos vemos en breve."
    },
    {
        "input": "Vuelvo luego",
        "output": "¡Te espero! Vuelve cuando quieras."
    },
    {
        "input": "Nos vemos, que descanses",
        "output": "¡Nos vemos! Que tengas un buen descanso."
    },
    {
        "input": "Gracias por estar aquí",
        "output": "¡Gracias a ti por conversar conmigo! ¡Hasta pronto!"
    },
    {
        "input": "Hasta luego, nos vemos pronto",
        "output": "¡Hasta luego! Espero verte pronto."
    },
    {
        "input": "Que todo te vaya bien",
        "output": "¡Gracias! Que a ti también te vaya de maravilla."
    },
    {
        "input": "Hasta la vista",
        "output": "¡Hasta la vista! Cuídate mucho."
    },
    {
        "input": "Hasta pronto, que tengas buen día",
        "output": "¡Hasta pronto! Igualmente, que tengas un excelente día."
    },
    {
        "input": "Adiós, buen día",
        "output": "¡Adiós! Que tengas un día fantástico."
    },
    {
        "input": "Hasta mañana",
        "output": "¡Hasta mañana! Que tengas un excelente día."
    },
    {
        "input": "Me tengo que ir ya",
        "output": "¡Está bien! Cuídate mucho, nos vemos pronto."
    },
    {
        "input": "Chao, nos vemos pronto",
        "output": "¡Chao! Nos vemos pronto."
    },
    {
        "input": "Hasta luego, cuídate mucho",
        "output": "¡Cuídate también! Hasta luego."
    },
    {
        "input": "Hasta luego, amigo",
        "output": "¡Hasta luego! Cuídate mucho."
    },
    {
        "input": "Nos vemos en otra ocasión",
        "output": "¡Nos vemos! Será un placer ayudarte otra vez."
    },
    {
        "input": "Bueno, me despido",
        "output": "¡Que tengas un excelente día! ¡Hasta pronto!"
    },
    {
        "input": "Hasta luego, que te vaya bien",
        "output": "¡Que te vaya muy bien! Nos vemos luego."
    },
    {
        "input": "Adiós, cuídate",
        "output": "¡Cuídate mucho! Nos vemos pronto."
    },
    {
        "input": "Hasta la próxima, ¡gracias por todo!",
        "output": "¡Hasta la próxima! Fue un placer ayudarte."
    },
    {
        "input": "Te veo luego",
        "output": "¡Te veo luego! Que todo te vaya bien."
    },
    {
        "input": "Nos vemos pronto, que te vaya bien",
        "output": "¡Nos vemos pronto! Que tengas un excelente día."
    },
    {
        "input": "Gracias, ¡hasta pronto!",
        "output": "¡Hasta pronto! Que tengas un buen día."
    },
    {
        "input": "Me voy, adiós",
        "output": "¡Adiós! Nos vemos pronto."
    },
    {
        "input": "Gracias por todo, cuídate",
        "output": "¡De nada! Cuídate mucho, hasta la próxima."
    },
    {
        "input": "Nos vemos después",
        "output": "¡Nos vemos después! Cuídate mucho."
    },
    {
        "input": "quiero aprender Python",
        "output": "¡Genial! Python es un gran lenguaje. ¿Qué te interesa aprender primero?"
    },
    {
        "input": "¿me puedes enseñar a usar Python?",
        "output": "¡Claro que sí! ¿Por dónde quieres empezar? Puedo explicarte desde lo básico hasta temas avanzados."
    },
    {
        "input": "¿cómo hago un programa en Python?",
        "output": "Para empezar, abre un editor de texto o IDE, escribe tu código Python y guárdalo con la extensión `.py`. Luego ejecútalo con `python nombre_del_archivo.py`."
    },
    {
        "input": "muéstrame un ejemplo básico de Python",
        "output": "Por supuesto, aquí tienes: print('¡Hola, mundo!')"
    },
    {
        "input": "oye, ¿cómo sumo dos números en Python?",
        "output": "Es súper sencillo, así: resultado = 2 + 3; print(resultado)"
    },
    {
        "input": "¿qué es un bucle en Python?",
        "output": "Un bucle en Python es una forma de repetir código. Por ejemplo, con un `for` o `while`."
    },
    {
        "input": "explícame qué es una función en Python",
        "output": "Una función es un bloque de código reutilizable que realizas cuando necesitas ejecutar tareas específicas. Ejemplo: def saludar(): print('Hola')"
    },
    {
        "input": "¿cómo creo un archivo en Python?",
        "output": "Usa la función `open()` con el modo `w`. Ejemplo: with open('archivo.txt', 'w') as archivo: archivo.write('Hola, mundo')"
    },
    {
        "input": "¿puedes explicarme qué es una lista en Python?",
        "output": "¡Claro! Una lista es una colección ordenada de elementos. Ejemplo: mi_lista = [1, 2, 3]"
    },
    {
        "input": "bro, ¿cómo manejo errores en Python?",
        "output": "Usa bloques try-except. Ejemplo: try: print(1/0) except ZeroDivisionError: print('Error: División por cero')"
    },
    {
        "input": "¿qué librerías me recomiendas en Python?",
        "output": "Depende de lo que necesites. Para análisis de datos: pandas y numpy. Para gráficos: matplotlib. Para web: Flask o Django."
    },
    {
        "input": "enséñame a instalar una librería",
        "output": "Es fácil: abre la terminal y escribe `pip install nombre_libreria`. Por ejemplo, `pip install requests`."
    },
    {
        "input": "quiero aprender sobre pandas",
        "output": "¡Excelente! Pandas es genial para manejar datos. Empieza importándolo: `import pandas as pd`. Luego puedes cargar datos con `pd.read_csv()`."
    },
    {
        "input": "¿puedes mostrarme un ejemplo usando pandas?",
        "output": "Claro, aquí tienes: `import pandas as pd; df = pd.DataFrame({'Columna': [1, 2, 3]}); print(df)`"
    },
    {
        "input": "¿cómo empiezo con Django?",
        "output": "Primero instala Django: `pip install django`. Luego, crea un proyecto con `django-admin startproject nombre_proyecto`."
    },
    {
        "input": "¿qué puedo hacer con Python?",
        "output": "¡Muchas cosas! Desarrollo web, análisis de datos, inteligencia artificial, scripts automáticos y mucho más."
    },
    {
        "input": "¿puedes ayudarme con un problema en mi código?",
        "output": "¡Claro! Pásame tu código o describe el problema, y con gusto te ayudo."
    },
    {
        "input": "oye, ¿cómo escribo en un archivo?",
        "output": "Usa `open()` en modo escritura: `with open('archivo.txt', 'w') as archivo: archivo.write('Hola')`."
    },
    {
        "input": "¿cómo conecto Python a una base de datos?",
        "output": "Usa librerías como sqlite3, psycopg2 (para PostgreSQL) o pymongo (para MongoDB). ¿Qué base de datos quieres usar?"
    },
    {
        "input": "explícame qué es una clase en Python",
        "output": "Una clase es un modelo para crear objetos. Ejemplo: `class Perro: def __init__(self, nombre): self.nombre = nombre`"
    },
    {
        "input": "¿puedo usar Python para hacer aplicaciones web?",
        "output": "¡Sí! Con frameworks como Flask o Django puedes crear aplicaciones web robustas."
    },
    {
        "input": "ayúdame con loops anidados",
        "output": "Aquí tienes un ejemplo: `for i in range(3): for j in range(2): print(i, j)`"
    },
    {
        "input": "¿qué es un decorador en Python?",
        "output": "Un decorador es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador` sobre la función que quieres modificar."
    },
    {
        "input": "¿cómo hago un programa interactivo?",
        "output": "Usa `input()` para recibir datos del usuario. Ejemplo: `nombre = input('¿Cómo te llamas? '); print('Hola,', nombre)`"
    },
    {
        "input": "me ayudas con expresiones regulares",
        "output": "Por supuesto, usa la librería `re`. Ejemplo: `import re; re.match(r'\\d+', '123')`."
    },
    {
        "input": "quiero aprender sobre gráficos en Python",
        "output": "Para gráficos, te recomiendo matplotlib. Ejemplo básico: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()`."
    },
    {
        "input": "oye, ¿puedo automatizar tareas con Python?",
        "output": "¡Claro! Usa librerías como `os`, `shutil` o `subprocess` para automatizar tareas."
    },
    {
        "input": "¿Qué es Python?",
        "output": "Python es un lenguaje de programación de alto nivel, interpretado y de propósito general."
    },
    {
        "input": "¿Para qué sirve Python?",
        "output": "Python se usa para desarrollo web, análisis de datos, inteligencia artificial, desarrollo de software, automatización y más."
    },
    {
        "input": "¿Es Python un lenguaje difícil?",
        "output": "Python es conocido por ser fácil de aprender gracias a su sintaxis clara y legible."
    },
    {
        "input": "¿Quién creó Python?",
        "output": "Python fue creado por Guido van Rossum en 1991."
    },
    {
        "input": "¿Qué es una variable en Python?",
        "output": "Una variable es un contenedor para almacenar datos en un programa."
    },
    {
        "input": "¿Python es gratuito?",
        "output": "Sí, Python es gratuito y de código abierto."
    },
    {
        "input": "¿Qué es un IDE para Python?",
        "output": "Un IDE es un entorno de desarrollo integrado donde puedes escribir y ejecutar código Python, como PyCharm o VS Code."
    },
    {
        "input": "¿Qué son las bibliotecas de Python?",
        "output": "Son colecciones de módulos preescritos que facilitan tareas específicas, como NumPy para matemáticas o Pandas para análisis de datos."
    },
    {
        "input": "¿Qué es una función en Python?",
        "output": "Una función es un bloque de código reutilizable que realiza una tarea específica."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Un módulo es un archivo que contiene definiciones y funciones que pueden ser reutilizadas en otros programas."
    },
    {
        "input": "¿Qué es un bucle en Python?",
        "output": "Un bucle permite ejecutar un bloque de código repetidamente, como con 'for' o 'while'."
    },
    {
        "input": "¿Qué es una lista en Python?",
        "output": "Una lista es una colección de elementos ordenados y mutables."
    },
    {
        "input": "¿Cómo se declara una lista en Python?",
        "output": "Usando corchetes, por ejemplo: lista = [1, 2, 3]."
    },
    {
        "input": "¿Qué es un diccionario en Python?",
        "output": "Es una colección de pares clave-valor que permite acceder a datos mediante claves."
    },
    {
        "input": "¿Qué son las excepciones en Python?",
        "output": "Las excepciones son errores que ocurren durante la ejecución de un programa y pueden manejarse con bloques 'try-except'."
    },
    {
        "input": "¿Python es compilado o interpretado?",
        "output": "Python es un lenguaje interpretado."
    },
    {
        "input": "¿Qué es un string en Python?",
        "output": "Un string es una secuencia de caracteres encerrada entre comillas."
    },
    {
        "input": "¿Cómo se comentan líneas en Python?",
        "output": "Usando el símbolo # para comentarios de una línea."
    },
    {
        "input": "¿Qué es una clase en Python?",
        "output": "Una clase es una plantilla para crear objetos, que define atributos y métodos."
    },
    {
        "input": "¿Qué es un objeto en Python?",
        "output": "Un objeto es una instancia de una clase."
    },
    {
        "input": "¿Qué es un decorador en Python?",
        "output": "Un decorador es una función que modifica el comportamiento de otra función o método."
    },
    {
        "input": "¿Qué es Python Flask?",
        "output": "Flask es un microframework para desarrollar aplicaciones web con Python."
    },
    {
        "input": "¿Qué es Python Django?",
        "output": "Django es un framework completo para el desarrollo web con Python."
    },
    {
        "input": "¿Qué es NumPy?",
        "output": "NumPy es una biblioteca de Python para realizar cálculos matemáticos y trabajar con arrays."
    },
    {
        "input": "¿Qué es Pandas en Python?",
        "output": "Pandas es una biblioteca para análisis y manipulación de datos."
    },
    {
        "input": "¿Qué es un paquete en Python?",
        "output": "Un paquete es una colección de módulos organizados en un directorio."
    },
    {
        "input": "¿Qué es el pip en Python?",
        "output": "Pip es una herramienta para instalar y gestionar paquetes de Python."
    },
    {
        "input": "¿Qué es una tupla en Python?",
        "output": "Una tupla es una colección de elementos ordenados e inmutables."
    },
    {
        "input": "¿Cómo se crea una tupla en Python?",
        "output": "Usando paréntesis, por ejemplo: tupla = (1, 2, 3)."
    },
    {
        "input": "¿Qué es un conjunto en Python?",
        "output": "Un conjunto es una colección no ordenada de elementos únicos."
    },
    {
        "input": "¿Qué es un archivo .py?",
        "output": "Es un archivo de texto que contiene código Python."
    },
    {
        "input": "¿Qué es un archivo .pyc?",
        "output": "Es un archivo compilado de Python que se genera automáticamente al ejecutar un programa."
    },
    {
        "input": "¿Cómo ejecutar un script Python?",
        "output": "Usando el comando 'python nombre_del_archivo.py' en la terminal."
    },
    {
        "input": "¿Qué es un intérprete de Python?",
        "output": "Es el programa que ejecuta código Python línea por línea."
    },
    {
        "input": "¿Python soporta programación orientada a objetos?",
        "output": "Sí, Python soporta programación orientada a objetos."
    },
    {
        "input": "¿Qué es una lista por comprensión en Python?",
        "output": "Es una forma compacta de crear listas usando una expresión en un bucle."
    },
    {
        "input": "¿Qué es la recursión en Python?",
        "output": "Es una técnica donde una función se llama a sí misma para resolver un problema."
    },
    {
        "input": "¿Python es case-sensitive?",
        "output": "Sí, Python distingue entre mayúsculas y minúsculas."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Un iterador es un objeto que permite recorrer elementos de una colección."
    },
    {
        "input": "¿Qué es un generador en Python?",
        "output": "Un generador es una función que produce una secuencia de valores de forma perezosa."
    },
    {
        "input": "¿Cómo instalar Python?",
        "output": "Puedes descargarlo desde la página oficial de Python: https://www.python.org/."
    },
    {
        "input": "¿Qué es un breakpoint en Python?",
        "output": "Un breakpoint es un punto en el código donde se detiene la ejecución para depuración."
    },
    {
        "input": "¿Qué es un string multilínea en Python?",
        "output": "Es un string encerrado entre tres comillas dobles o simples."
    },
    {
        "input": "¿Qué es la indentación en Python?",
        "output": "La indentación es el espacio al inicio de una línea que define bloques de código."
    },
    {
        "input": "¿Qué es la función 'print' en Python?",
        "output": "La función 'print' se utiliza para mostrar información en la pantalla."
    },
    {
        "input": "¿Qué es la función 'input' en Python?",
        "output": "La función 'input' se utiliza para recibir datos del usuario."
    },
    {
        "input": "¿Cómo manejar archivos en Python?",
        "output": "Usando funciones como 'open', 'read', 'write', y 'close'."
    },
    {
        "input": "¿Qué es el Zen de Python?",
        "output": "Es un conjunto de principios que guían el diseño de Python, accesible con 'import this'."
    },
    {
        "input": "¿Cómo instalar bibliotecas en Python?",
        "output": "Usando el comando 'pip install nombre_biblioteca'."
    },
    {
        "input": "¿Qué es programación?",
        "output": "La programación es el proceso de escribir y diseñar código para crear aplicaciones o software."
    },
    {
        "input": "¿Para qué sirve programar?",
        "output": "Programar sirve para desarrollar soluciones digitales, automatizar tareas y construir sistemas informáticos."
    },
    {
        "input": "¿Qué lenguajes de programación existen?",
        "output": "Algunos lenguajes de programación comunes son Python, Java, C++, y JavaScript."
    },
    {
        "input": "¿Es difícil aprender a programar?",
        "output": "Aprender a programar puede ser desafiante al principio, pero con práctica se vuelve más fácil."
    },
    {
        "input": "¿Qué necesito para empezar a programar?",
        "output": "Para empezar a programar necesitas una computadora, un editor de código y aprender los conceptos básicos."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es un conjunto de pasos organizados para resolver un problema o realizar una tarea."
    },
    {
        "input": "¿Qué es un lenguaje de programación?",
        "output": "Es un lenguaje utilizado para escribir instrucciones que las computadoras puedan entender."
    },
    {
        "input": "¿Qué es un bucle en programación?",
        "output": "Un bucle es una estructura que permite repetir un bloque de código varias veces."
    },
    {
        "input": "¿Qué es un error de sintaxis?",
        "output": "Un error de sintaxis ocurre cuando el código no sigue las reglas del lenguaje de programación."
    },
    {
        "input": "¿Qué es un IDE?",
        "output": "Un IDE (Entorno de Desarrollo Integrado) es un software que proporciona herramientas para programar más eficientemente."
    },
    {
        "input": "¿Qué significa depuración?",
        "output": "Depuración es el proceso de identificar y corregir errores en un programa."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Un framework es un conjunto de herramientas y bibliotecas que facilita el desarrollo de software."
    },
    {
        "input": "¿Qué es un lenguaje compilado?",
        "output": "Es un lenguaje cuyos programas se traducen a código máquina antes de ejecutarse."
    },
    {
        "input": "¿Qué es un lenguaje interpretado?",
        "output": "Es un lenguaje cuyo código se ejecuta línea por línea sin necesidad de compilarlo previamente."
    },
    {
        "input": "¿Qué es una variable?",
        "output": "Una variable es un espacio en memoria donde se almacena un valor que puede cambiar durante la ejecución del programa."
    },
    {
        "input": "¿Qué es un condicional?",
        "output": "Un condicional es una estructura que permite ejecutar código dependiendo de si una condición es verdadera o falsa."
    },
    {
        "input": "¿Qué es una función?",
        "output": "Una función es un bloque de código reutilizable que realiza una tarea específica."
    },
    {
        "input": "¿Qué es programación orientada a objetos?",
        "output": "Es un paradigma de programación basado en el uso de objetos que contienen datos y métodos."
    },
    {
        "input": "¿Qué es un objeto en programación?",
        "output": "Un objeto es una instancia de una clase que contiene propiedades y métodos."
    },
    {
        "input": "¿Qué es una clase en programación?",
        "output": "Una clase es una plantilla para crear objetos que define sus propiedades y comportamientos."
    },
    {
        "input": "¿Qué es un archivo fuente?",
        "output": "Es el archivo donde se escribe el código de un programa."
    },
    {
        "input": "¿Qué es la programación funcional?",
        "output": "Es un paradigma que se basa en funciones matemáticas y evita el uso de estados mutables."
    },
    {
        "input": "¿Qué es un array?",
        "output": "Un array es una estructura de datos que almacena múltiples valores en una sola variable."
    },
    {
        "input": "¿Qué es una lista enlazada?",
        "output": "Es una estructura de datos en la que cada elemento apunta al siguiente en la lista."
    },
    {
        "input": "¿Qué es un compilador?",
        "output": "Un compilador es un programa que traduce código fuente a código máquina."
    },
    {
        "input": "¿Qué es un intérprete?",
        "output": "Un intérprete ejecuta el código línea por línea sin necesidad de compilarlo previamente."
    },
    {
        "input": "¿Qué es un repositorio de código?",
        "output": "Un repositorio es un lugar donde se almacena y gestiona el código fuente de un proyecto."
    },
    {
        "input": "¿Qué es control de versiones?",
        "output": "Es un sistema que registra los cambios realizados en el código fuente a lo largo del tiempo."
    },
    {
        "input": "¿Qué es Git?",
        "output": "Git es un sistema de control de versiones ampliamente utilizado en el desarrollo de software."
    },
    {
        "input": "¿Qué es un commit en Git?",
        "output": "Un commit es un registro de cambios realizados en el código."
    },
    {
        "input": "¿Qué es una rama en Git?",
        "output": "Una rama es una línea de desarrollo independiente en un repositorio de código."
    },
    {
        "input": "¿Qué es un merge en Git?",
        "output": "Un merge combina los cambios de una rama con otra."
    },
    {
        "input": "¿Qué es la programación web?",
        "output": "Es la creación de sitios y aplicaciones que se ejecutan en navegadores web."
    },
    {
        "input": "¿Qué es HTML?",
        "output": "HTML es un lenguaje de marcado utilizado para estructurar contenido en la web."
    },
    {
        "input": "¿Qué es CSS?",
        "output": "CSS es un lenguaje de estilos que define la apariencia de elementos HTML."
    },
    {
        "input": "¿Qué es JavaScript?",
        "output": "JavaScript es un lenguaje de programación utilizado para añadir interactividad a sitios web."
    },
    {
        "input": "¿Qué es un backend?",
        "output": "El backend es la parte del software que se ejecuta en el servidor y maneja la lógica y datos."
    },
    {
        "input": "¿Qué es un frontend?",
        "output": "El frontend es la parte visual e interactiva de una aplicación que se ejecuta en el navegador."
    },
    {
        "input": "¿Qué es una API?",
        "output": "Una API es una interfaz que permite a diferentes aplicaciones comunicarse entre sí."
    },
    {
        "input": "¿Qué es una base de datos?",
        "output": "Una base de datos es un sistema organizado para almacenar, gestionar y recuperar datos."
    },
    {
        "input": "¿Qué es SQL?",
        "output": "SQL es un lenguaje utilizado para gestionar bases de datos relacionales."
    },
    {
        "input": "¿Qué es NoSQL?",
        "output": "NoSQL es un tipo de base de datos que no usa tablas relacionales para organizar datos."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es una computadora que proporciona servicios o recursos a otras computadoras."
    },
    {
        "input": "¿Qué es una librería en programación?",
        "output": "Una librería es un conjunto de funciones y utilidades reutilizables que facilitan el desarrollo."
    },
    {
        "input": "¿Qué es una prueba unitaria?",
        "output": "Es una técnica para probar partes individuales de un programa."
    },
    {
        "input": "¿Qué es el ciclo de vida del software?",
        "output": "Es el proceso que abarca desde la planificación hasta el mantenimiento del software."
    },
    {
        "input": "¿Qué es una red neuronal?",
        "output": "Es un modelo computacional inspirado en el funcionamiento del cerebro humano."
    },
    {
        "input": "¿Qué es inteligencia artificial?",
        "output": "Es la simulación de procesos de inteligencia humana por parte de sistemas computacionales."
    },
    {
        "input": "¿Qué es el aprendizaje automático?",
        "output": "Es un subcampo de la inteligencia artificial que permite a los sistemas aprender de datos."
    },
    {
        "input": "¿Qué es un entorno de desarrollo?",
        "output": "Es el conjunto de herramientas y software que se utiliza para escribir y probar código."
    },
    {
        "input": "¿Qué es la inteligencia artificial?",
        "output": "Es la simulación de procesos de inteligencia humana por parte de sistemas computacionales."
    },
    {
        "input": "¿Cuáles son las aplicaciones de la inteligencia artificial?",
        "output": "Algunas aplicaciones incluyen asistentes virtuales, análisis de datos, visión por computadora y robots autónomos."
    },
    {
        "input": "¿Qué es el aprendizaje automático?",
        "output": "Es un subcampo de la inteligencia artificial que permite a las máquinas aprender de datos y mejorar su rendimiento con el tiempo."
    },
    {
        "input": "¿Qué es el aprendizaje supervisado?",
        "output": "Es un enfoque de aprendizaje automático donde los modelos son entrenados con datos etiquetados."
    },
    {
        "input": "¿Qué es el aprendizaje no supervisado?",
        "output": "Es un enfoque de aprendizaje automático donde los modelos encuentran patrones en datos no etiquetados."
    },
    {
        "input": "¿Qué es el aprendizaje por refuerzo?",
        "output": "Es una técnica de aprendizaje donde un agente toma decisiones para maximizar una recompensa acumulada."
    },
    {
        "input": "¿Qué es una red neuronal artificial?",
        "output": "Es un modelo computacional inspirado en la estructura del cerebro humano, utilizado en tareas como reconocimiento de patrones."
    },
    {
        "input": "¿Qué es el procesamiento del lenguaje natural?",
        "output": "Es un campo de la IA que se centra en la interacción entre las computadoras y el lenguaje humano."
    },
    {
        "input": "¿Qué es visión por computadora?",
        "output": "Es un campo de la IA que permite a las computadoras interpretar y procesar imágenes del mundo real."
    },
    {
        "input": "¿Qué es un modelo de lenguaje?",
        "output": "Es un modelo de IA diseñado para procesar y generar texto en lenguaje natural."
    },
    {
        "input": "¿Qué es un chatbot?",
        "output": "Es un programa de IA diseñado para simular conversaciones humanas."
    },
    {
        "input": "¿Qué es un asistente virtual?",
        "output": "Es una aplicación de IA que ayuda a los usuarios con tareas mediante comandos de voz o texto."
    },
    {
        "input": "¿Qué es el reconocimiento de voz?",
        "output": "Es una tecnología de IA que convierte el habla en texto."
    },
    {
        "input": "¿Qué es el análisis de sentimientos?",
        "output": "Es el uso de IA para identificar y analizar emociones en textos."
    },
    {
        "input": "¿Qué es un modelo generativo?",
        "output": "Es un modelo de IA que puede generar nuevos datos similares a los datos de entrenamiento."
    },
    {
        "input": "¿Qué es GAN?",
        "output": "Una red generativa adversarial (GAN) es un tipo de modelo de IA que utiliza dos redes que compiten para generar datos realistas."
    },
    {
        "input": "¿Qué es un algoritmo de clustering?",
        "output": "Es un método de aprendizaje no supervisado para agrupar datos similares."
    },
    {
        "input": "¿Qué es la transferencia de estilo?",
        "output": "Es una técnica de IA que aplica el estilo artístico de una imagen a otra imagen."
    },
    {
        "input": "¿Qué es un sistema experto?",
        "output": "Es un sistema de IA que utiliza conocimiento especializado para tomar decisiones o resolver problemas."
    },
    {
        "input": "¿Qué es la robótica?",
        "output": "Es un campo que combina IA y mecatrónica para diseñar y operar robots."
    },
    {
        "input": "¿Qué es un agente inteligente?",
        "output": "Es un programa de IA que percibe su entorno y actúa para alcanzar metas específicas."
    },
    {
        "input": "¿Qué es la ética en inteligencia artificial?",
        "output": "Es el estudio de los principios éticos relacionados con el diseño y uso de sistemas de IA."
    },
    {
        "input": "¿Qué son los datos de entrenamiento?",
        "output": "Son datos utilizados para enseñar a un modelo de IA a realizar una tarea específica."
    },
    {
        "input": "¿Qué es el sobreajuste?",
        "output": "Es un problema donde un modelo de IA aprende demasiado los detalles de los datos de entrenamiento y no generaliza bien."
    },
    {
        "input": "¿Qué es la subestimación?",
        "output": "Es un problema donde un modelo de IA no captura suficientemente la complejidad de los datos."
    },
    {
        "input": "¿Qué es la regresión?",
        "output": "Es una técnica de aprendizaje automático para predecir valores continuos."
    },
    {
        "input": "¿Qué es la clasificación?",
        "output": "Es una técnica de aprendizaje automático para asignar categorías a datos."
    },
    {
        "input": "¿Qué es el análisis predictivo?",
        "output": "Es el uso de técnicas de IA para hacer predicciones basadas en datos históricos."
    },
    {
        "input": "¿Qué es la computación cognitiva?",
        "output": "Es el uso de IA para simular procesos cognitivos humanos como el aprendizaje y el razonamiento."
    },
    {
        "input": "¿Qué es la automatización de procesos?",
        "output": "Es el uso de IA para realizar tareas repetitivas sin intervención humana."
    },
    {
        "input": "¿Qué es la minería de datos?",
        "output": "Es el proceso de descubrir patrones y relaciones en grandes conjuntos de datos."
    },
    {
        "input": "¿Qué es la inteligencia artificial fuerte?",
        "output": "Es un concepto de IA capaz de realizar cualquier tarea intelectual que un humano pueda hacer."
    },
    {
        "input": "¿Qué es la inteligencia artificial débil?",
        "output": "Es una IA diseñada para realizar tareas específicas, como jugar al ajedrez o recomendar películas."
    },
    {
        "input": "¿Qué es una función de costo?",
        "output": "Es una medida utilizada en el aprendizaje automático para evaluar el rendimiento de un modelo."
    },
    {
        "input": "¿Qué es el reconocimiento facial?",
        "output": "Es una aplicación de IA que identifica o verifica identidades a partir de imágenes faciales."
    },
    {
        "input": "¿Qué es un sesgo algorítmico?",
        "output": "Es un problema donde un modelo de IA produce resultados sesgados debido a datos desequilibrados o diseño deficiente."
    },
    {
        "input": "¿Qué es la transparencia en IA?",
        "output": "Se refiere a la capacidad de entender cómo y por qué un sistema de IA toma decisiones."
    },
    {
        "input": "¿Qué es un modelo preentrenado?",
        "output": "Es un modelo de IA que ya ha sido entrenado en un conjunto de datos y puede ajustarse para tareas específicas."
    },
    {
        "input": "¿Qué es el aprendizaje profundo?",
        "output": "Es un subcampo del aprendizaje automático que utiliza redes neuronales profundas para procesar datos."
    },
    {
        "input": "¿Qué es un modelo secuencial?",
        "output": "Es un modelo de IA diseñado para procesar datos en secuencia, como texto o series temporales."
    },
    {
        "input": "¿Qué es un hiperparámetro?",
        "output": "Es un parámetro cuyo valor se establece antes del entrenamiento de un modelo de IA."
    },
    {
        "input": "¿Qué es la computación distribuida?",
        "output": "Es el uso de múltiples computadoras para procesar grandes volúmenes de datos de manera colaborativa."
    },
    {
        "input": "¿Qué es un grafo de conocimiento?",
        "output": "Es una estructura que organiza información en nodos y relaciones para facilitar la búsqueda y el razonamiento."
    },
    {
        "input": "¿Qué es el reconocimiento óptico de caracteres?",
        "output": "Es una tecnología de IA que convierte imágenes de texto en texto editable."
    },
    {
        "input": "¿Qué es la inteligencia de enjambre?",
        "output": "Es un enfoque de IA inspirado en el comportamiento colectivo de organismos como abejas o hormigas."
    },
    {
        "input": "¿Qué es la regularización?",
        "output": "Es una técnica utilizada para prevenir el sobreajuste en modelos de IA."
    },
    {
        "input": "¿Qué es el procesamiento en tiempo real?",
        "output": "Es la capacidad de un sistema de IA para procesar y analizar datos instantáneamente."
    },
    {
        "input": "¿Qué es la inteligencia aumentada?",
        "output": "Es el uso de IA para ampliar las capacidades humanas en lugar de reemplazarlas."
    },
    {
        "input": "¿Qué es un conjunto de datos sintético?",
        "output": "Es un conjunto de datos generado artificialmente para entrenar modelos de IA cuando los datos reales son limitados."
    },
    {
        "input": "¿Qué es Python?",
        "output": "Python es un lenguaje de programación de alto nivel, fácil de aprender y ampliamente utilizado en desarrollo web, análisis de datos, inteligencia artificial, entre otros."
    },
    {
        "input": "¿Para qué se usa Python?",
        "output": "Python se usa para muchas cosas: desarrollo web, análisis de datos, aprendizaje automático, automatización de tareas, y más."
    },
    {
        "input": "¿Cómo empiezo a usar Python?",
        "output": "Descarga Python desde python.org, instálalo y abre un editor como VS Code o PyCharm para empezar a escribir código."
    },
    {
        "input": "¿Qué editor de texto recomiendas para Python?",
        "output": "Te recomiendo Visual Studio Code, PyCharm o incluso Jupyter Notebook para empezar."
    },
    {
        "input": "¿Cómo instalo librerías en Python?",
        "output": "Usa el gestor de paquetes pip. Por ejemplo: `pip install requests`."
    },
    {
        "input": "¿Qué es pip?",
        "output": "Pip es el gestor de paquetes de Python que te permite instalar y gestionar librerías de terceros."
    },
    {
        "input": "¿Qué hago si pip no funciona?",
        "output": "Intenta actualizar pip con `python -m pip install --upgrade pip` o verifica que Python esté correctamente instalado."
    },
    {
        "input": "¿Cómo creo un programa en Python?",
        "output": "Escribe tu código en un archivo con extensión `.py` y ejecútalo en la terminal con `python archivo.py`."
    },
    {
        "input": "¿Cómo ejecuto Python en la terminal?",
        "output": "Abre tu terminal, escribe `python` para acceder al intérprete interactivo, o `python archivo.py` para ejecutar un archivo."
    },
    {
        "input": "¿Qué es una lista en Python?",
        "output": "Una lista es una colección ordenada de elementos. Puedes crear una lista usando corchetes: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Puedo tener listas dentro de listas?",
        "output": "¡Sí! Son listas anidadas. Ejemplo: `mi_lista = [[1, 2], [3, 4]]`."
    },
    {
        "input": "¿Cómo accedo a un elemento de una lista?",
        "output": "Usa índices. Ejemplo: `mi_lista[0]` para acceder al primer elemento."
    },
    {
        "input": "¿Qué es un bucle en Python?",
        "output": "Un bucle es una forma de ejecutar un bloque de código varias veces. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Qué es un rango en Python?",
        "output": "Es una función que genera una secuencia de números. Ejemplo: `range(5)` genera 0, 1, 2, 3, 4."
    },
    {
        "input": "¿Cómo detengo un bucle en Python?",
        "output": "Usa la palabra clave `break`. Ejemplo: `for i in range(5): if i == 3: break`."
    },
    {
        "input": "¿Qué es una función en Python?",
        "output": "Una función es un bloque de código reutilizable que realiza una tarea específica. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Qué es un parámetro en una función?",
        "output": "Es un valor que pasas a una función para personalizar su comportamiento. Ejemplo: `def saludar(nombre): print('Hola', nombre)`."
    },
    {
        "input": "¿Cómo retorno un valor de una función?",
        "output": "Usa la palabra clave `return`. Ejemplo: `def sumar(a, b): return a + b`."
    },
    {
        "input": "¿Qué es un archivo en Python?",
        "output": "Un archivo es un recurso donde puedes almacenar datos. Ejemplo: `with open('archivo.txt', 'w') as archivo: archivo.write('Hola')`."
    },
    {
        "input": "¿Qué significa 'w' en open?",
        "output": "Significa que estás abriendo el archivo en modo escritura. Si el archivo no existe, se crea."
    },
    {
        "input": "¿Qué es una excepción en Python?",
        "output": "Es un error que ocurre durante la ejecución. Puedes manejarlo con bloques try-except."
    },
    {
        "input": "¿Cómo manejo una excepción?",
        "output": "Usa `try` y `except`. Ejemplo: `try: print(1/0) except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué es un diccionario en Python?",
        "output": "Es una colección de pares clave-valor. Ejemplo: `mi_diccionario = {'nombre': 'Juan', 'edad': 25}`."
    },
    {
        "input": "¿Cómo accedo a un valor en un diccionario?",
        "output": "Usa la clave. Ejemplo: `mi_diccionario['nombre']` devuelve 'Juan'."
    },
    {
        "input": "¿Cómo puedo eliminar un elemento de un diccionario?",
        "output": "Usa `del`. Ejemplo: `del mi_diccionario['nombre']`."
    },
    {
        "input": "¿Qué librerías me recomiendas?",
        "output": "Para análisis de datos: pandas, numpy. Para gráficos: matplotlib, seaborn. Para IA: tensorflow, pytorch."
    },
    {
        "input": "¿Qué es pandas?",
        "output": "Pandas es una librería para manipulación y análisis de datos en Python."
    },
    {
        "input": "¿Cómo cargo datos en pandas?",
        "output": "Usa `pd.read_csv()` para archivos CSV. Ejemplo: `df = pd.read_csv('datos.csv')`."
    },
    {
        "input": "¿Qué es matplotlib?",
        "output": "Matplotlib es una librería para crear gráficos en Python. Ejemplo: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "¿Qué es Flask?",
        "output": "Flask es un framework ligero para crear aplicaciones web en Python."
    },
    {
        "input": "¿Cómo creo una API con Flask?",
        "output": "Define una ruta con un decorador: `@app.route('/')`. Ejemplo: `from flask import Flask; app = Flask(__name__); @app.route('/'): return 'Hola'`."
    },
    {
        "input": "¿Dónde se encuentra Guatemala?",
        "output": "Guatemala está en América Central, al sur de México."
    },
    {
        "input": "¿Cuál es la capital de Guatemala?",
        "output": "La capital de Guatemala es Ciudad de Guatemala."
    },
    {
        "input": "¿Cuál es la moneda de Guatemala?",
        "output": "La moneda de Guatemala es el quetzal."
    },
    {
        "input": "¿Qué idioma se habla en Guatemala?",
        "output": "El idioma oficial de Guatemala es el español, pero también se hablan 22 idiomas mayas."
    },
    {
        "input": "¿Cuál es el ave nacional de Guatemala?",
        "output": "El ave nacional de Guatemala es el quetzal."
    },
    {
        "input": "¿Qué significa el nombre Guatemala?",
        "output": "Guatemala proviene del náhuatl 'Quauhtlemallan', que significa 'lugar de muchos árboles'."
    },
    {
        "input": "¿Qué es el fiambre?",
        "output": "El fiambre es un plato tradicional guatemalteco que se come el Día de los Santos."
    },
    {
        "input": "¿Cuándo se celebra la independencia de Guatemala?",
        "output": "La independencia de Guatemala se celebra el 15 de septiembre."
    },
    {
        "input": "¿Qué es el Popol Vuh?",
        "output": "El Popol Vuh es un libro sagrado de los mayas quichés."
    },
    {
        "input": "¿Qué es el huipil?",
        "output": "El huipil es una prenda tradicional utilizada por las mujeres indígenas de Guatemala."
    },
    {
        "input": "¿Cuál es el sitio arqueológico más famoso de Guatemala?",
        "output": "El sitio arqueológico más famoso es Tikal, una antigua ciudad maya."
    },
    {
        "input": "¿Qué es el marimba?",
        "output": "La marimba es el instrumento musical nacional de Guatemala."
    },
    {
        "input": "¿Qué es el Rincón del Café?",
        "output": "Guatemala es conocida por producir algunos de los mejores cafés del mundo."
    },
    {
        "input": "¿Qué es la Semana Santa en Guatemala?",
        "output": "Es una celebración religiosa famosa por sus alfombras de aserrín y procesiones."
    },
    {
        "input": "¿Qué es el lago Atitlán?",
        "output": "El lago Atitlán es un lago volcánico rodeado de pueblos indígenas y volcanes."
    },
    {
        "input": "¿Cuántos departamentos tiene Guatemala?",
        "output": "Guatemala tiene 22 departamentos."
    },
    {
        "input": "¿Qué son las ruinas de Quiriguá?",
        "output": "Son un sitio arqueológico maya conocido por sus estelas de piedra tallada."
    },
    {
        "input": "¿Quién fue Miguel Ángel Asturias?",
        "output": "Miguel Ángel Asturias fue un escritor guatemalteco que ganó el Premio Nobel de Literatura en 1967."
    },
    {
        "input": "¿Qué son los barriletes gigantes?",
        "output": "Son cometas enormes que se vuelan durante el Día de los Santos en Sumpango y Santiago Sacatepéquez."
    },
    {
        "input": "¿Qué es la comida típica de Guatemala?",
        "output": "Algunos platos típicos son el pepián, los tamales, los chuchitos y el kak'ik."
    },
    {
        "input": "¿Qué es el Monumento a Tecún Umán?",
        "output": "Es un monumento en honor al héroe nacional y último líder maya k'iche'."
    },
    {
        "input": "¿Qué es Antigua Guatemala?",
        "output": "Antigua Guatemala es una ciudad colonial y Patrimonio de la Humanidad por la UNESCO."
    },
    {
        "input": "¿Qué es el jade en la cultura guatemalteca?",
        "output": "El jade era una piedra sagrada para los antiguos mayas y sigue siendo importante en Guatemala."
    },
    {
        "input": "¿Qué es el Rabinal Achí?",
        "output": "Es una obra teatral maya reconocida como Patrimonio Oral e Inmaterial de la Humanidad."
    },
    {
        "input": "¿Qué son los volcanes de Guatemala?",
        "output": "Guatemala tiene más de 30 volcanes, siendo el Volcán de Fuego y el Pacaya los más activos."
    },
    {
        "input": "¿Qué es el paabanc?",
        "output": "El paabanc es una ceremonia tradicional maya celebrada en Alta Verapaz."
    },
    {
        "input": "¿Qué es el cacao para los mayas?",
        "output": "El cacao era considerado una bebida sagrada y se usaba como moneda."
    },
    {
        "input": "¿Qué es Chichicastenango?",
        "output": "Es un pueblo famoso por su mercado tradicional y su iglesia, Santo Tomás."
    },
    {
        "input": "¿Qué es el Museo Ixchel?",
        "output": "Es un museo en Ciudad de Guatemala dedicado al arte textil indígena."
    },
    {
        "input": "¿Qué son los tejidos guatemaltecos?",
        "output": "Son textiles coloridos hechos a mano que reflejan la cultura indígena."
    },
    {
        "input": "¿Qué es el Parque Nacional Tikal?",
        "output": "Es un parque que alberga ruinas mayas y es Patrimonio de la Humanidad."
    },
    {
        "input": "¿Qué representa la bandera de Guatemala?",
        "output": "Sus franjas azules representan los océanos Atlántico y Pacífico, y el blanco la paz."
    },
    {
        "input": "¿Qué es el Palo Volador?",
        "output": "Es una danza ceremonial maya practicada en Joyabaj, Quiché."
    },
    {
        "input": "¿Qué es el Carnaval de Mazatenango?",
        "output": "Es una de las festividades más importantes del país, celebrada con desfiles y música."
    },
    {
        "input": "¿Qué es el festival de Santiago Atitlán?",
        "output": "Es una celebración en honor a Maximón, una figura sincrética venerada localmente."
    },
    {
        "input": "¿Qué es la zona arqueológica de Yaxhá?",
        "output": "Es una antigua ciudad maya ubicada cerca del lago Yaxhá."
    },
    {
        "input": "¿Qué son los chiles rellenos guatemaltecos?",
        "output": "Son chiles poblanos rellenos de carne y verduras, servidos con salsa de tomate."
    },
    {
        "input": "¿Qué es el Día del Ejército en Guatemala?",
        "output": "Es una festividad nacional que se celebra el 30 de junio."
    },
    {
        "input": "¿Qué es el río Dulce?",
        "output": "Es un río importante que conecta el lago de Izabal con el mar Caribe."
    },
    {
        "input": "¿Qué es el Palacio Nacional de la Cultura?",
        "output": "Es un edificio histórico en Ciudad de Guatemala que simboliza la unidad nacional."
    },
    {
        "input": "¿Qué son los mayas?",
        "output": "Los mayas son una civilización precolombina que dejó un legado cultural significativo en Guatemala."
    },
    {
        "input": "¿Qué es el calendario maya?",
        "output": "Es un sistema complejo de calendarios utilizado por la civilización maya."
    },
    {
        "input": "¿Qué es la música de marimba?",
        "output": "Es un estilo musical tradicional interpretado con marimbas, muy popular en Guatemala."
    },
    {
        "input": "¿Qué es el Día de los Difuntos en Guatemala?",
        "output": "Es una celebración donde las familias honran a sus muertos con comida y ofrendas."
    },
    {
        "input": "¿Qué es el parque Semuc Champey?",
        "output": "Es un lugar natural famoso por sus pozas de agua turquesa en Alta Verapaz."
    },
    {
        "input": "¿Qué es el festival de barriletes gigantes?",
        "output": "Es un evento cultural en el que se vuelan cometas enormes durante el Día de Todos los Santos."
    },
    {
        "input": "¿Qué es el tamal guatemalteco?",
        "output": "Es una masa de maíz rellena de carne y salsa, envuelta en hojas y cocida al vapor."
    },
    {
        "input": "¿Qué es el café de Antigua?",
        "output": "Es un café de alta calidad cultivado en las montañas de Antigua Guatemala."
    },
    {
        "input": "¿Qué es la Ceiba?",
        "output": "La Ceiba es el árbol nacional de Guatemala, sagrado para los mayas."
    },
    {
        "input": "¿Qué es la feria de Cobán?",
        "output": "Es una festividad en Alta Verapaz conocida por el concurso de la Rabin Ajaw, 'Hija del Rey'."
    },
    {
        "input": "¿Cómo descargo Python?",
        "output": "Ve a la página oficial de Python en python.org, selecciona tu sistema operativo y descarga el instalador."
    },
    {
        "input": "¿Qué versión de Python debería usar?",
        "output": "Te recomiendo usar la última versión estable, a menos que estés trabajando en un proyecto que requiera una versión específica."
    },
    {
        "input": "¿Cómo verifico si Python está instalado en mi computadora?",
        "output": "Abre la terminal y escribe `python --version` o `python3 --version`."
    },
    {
        "input": "¿Cómo instalo Visual Studio Code?",
        "output": "Descárgalo desde code.visualstudio.com, sigue las instrucciones de instalación y luego agrega la extensión de Python."
    },
    {
        "input": "¿Qué es Jupyter Notebook?",
        "output": "Es una herramienta interactiva para escribir y ejecutar código Python, ideal para análisis de datos y aprendizaje."
    },
    {
        "input": "¿Qué diferencia hay entre listas y tuplas en Python?",
        "output": "Las listas son mutables, puedes cambiarlas después de crearlas. Las tuplas son inmutables."
    },
    {
        "input": "¿Cómo convierto una lista en una tupla?",
        "output": "Usa la función `tuple()`. Ejemplo: `mi_tupla = tuple(mi_lista)`."
    },
    {
        "input": "¿Qué es una comprensión de listas?",
        "output": "Es una forma concisa de crear listas. Ejemplo: `cuadrados = [x**2 for x in range(5)]`."
    },
    {
        "input": "¿Cómo funciona un bucle while en Python?",
        "output": "Un bucle while repite el código mientras una condición sea verdadera. Ejemplo: `while x < 5: print(x); x += 1`."
    },
    {
        "input": "¿Cómo detengo un bucle infinito?",
        "output": "Usa la combinación de teclas `Ctrl + C` en la terminal para detenerlo."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Es un objeto que permite recorrer elementos uno a uno. Ejemplo: `iterador = iter([1, 2, 3])`."
    },
    {
        "input": "¿Cómo declaro una función con parámetros opcionales?",
        "output": "Define valores predeterminados para los parámetros. Ejemplo: `def saludar(nombre='Amigo'): print('Hola', nombre)`."
    },
    {
        "input": "¿Qué es un decorador?",
        "output": "Es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador` antes de la definición de una función."
    },
    {
        "input": "¿Cómo manejo múltiples excepciones?",
        "output": "Usa múltiples bloques except o agrupa las excepciones. Ejemplo: `except (ValueError, TypeError):`."
    },
    {
        "input": "¿Qué tipos de datos soporta un diccionario?",
        "output": "Las claves deben ser inmutables (como cadenas, números o tuplas), y los valores pueden ser de cualquier tipo."
    },
    {
        "input": "¿Cómo verifico si una clave existe en un diccionario?",
        "output": "Usa el operador `in`. Ejemplo: `if 'nombre' in mi_diccionario:`."
    },
    {
        "input": "¿Cómo agrego un elemento a un diccionario?",
        "output": "Asignando una nueva clave-valor. Ejemplo: `mi_diccionario['edad'] = 30`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista?",
        "output": "Usa el método `remove()` o la instrucción `del`. Ejemplo: `mi_lista.remove(2)`."
    },
    {
        "input": "¿Qué es un DataFrame en pandas?",
        "output": "Es una estructura tabular de datos similar a una tabla en una base de datos o una hoja de cálculo."
    },
    {
        "input": "¿Cómo elimino columnas en pandas?",
        "output": "Usa `drop()`. Ejemplo: `df = df.drop('columna', axis=1)`."
    },
    {
        "input": "¿Cómo filtro datos en pandas?",
        "output": "Usa condiciones. Ejemplo: `df_filtrado = df[df['columna'] > 10]`."
    },
    {
        "input": "¿Cómo instalo pandas?",
        "output": "Ejecuta `pip install pandas` en la terminal."
    },
    {
        "input": "¿Qué otros frameworks web hay además de Flask?",
        "output": "Puedes usar Django, FastAPI o Tornado, dependiendo de tus necesidades."
    },
    {
        "input": "¿Cómo inicio un servidor en Flask?",
        "output": "Ejecuta `python app.py` y Flask iniciará el servidor local."
    },
    {
        "input": "¿Cómo manejo rutas dinámicas en Flask?",
        "output": "Usa variables en las rutas. Ejemplo: `@app.route('/usuario/<nombre>')`."
    },
    {
        "input": "¿Qué es matplotlib?",
        "output": "Es una librería para crear gráficos en Python. Ejemplo: `plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "¿Cómo guardo un gráfico en matplotlib?",
        "output": "Usa `plt.savefig('grafico.png')` antes de `plt.show()`."
    },
    {
        "input": "¿Qué otros paquetes hay para gráficos?",
        "output": "Prueba seaborn para gráficos más estéticos o plotly para gráficos interactivos."
    },
    {
        "input": "¿Qué es una librería en Python?",
        "output": "Es un conjunto de funciones y herramientas que puedes usar para facilitar tu trabajo. Ejemplo: requests para trabajar con APIs."
    },
    {
        "input": "¿Cómo creo mi propia librería en Python?",
        "output": "Escribe tus funciones en un archivo `.py` y luego impórtalas con `import`. Para algo más avanzado, crea un paquete con `setup.py`."
    },
    {
        "input": "¿Qué es una API?",
        "output": "Es una interfaz que permite que dos aplicaciones se comuniquen entre sí. Puedes usar APIs para obtener o enviar datos."
    },
    {
        "input": "¿Cómo llamo a una API en Python?",
        "output": "Usa la librería `requests`. Ejemplo: `import requests; response = requests.get('https://api.ejemplo.com'); print(response.json())`."
    },
    {
        "input": "¿Cuál es la diferencia entre Python 2 y Python 3?",
        "output": "Python 3 es la versión actual y tiene mejoras significativas sobre Python 2, como mejor soporte para Unicode y funciones más modernas."
    },
    {
        "input": "¿Por qué debería aprender Python?",
        "output": "Python es fácil de aprender, versátil y tiene una gran comunidad de apoyo. Es ideal para principiantes y para proyectos avanzados."
    },
    {
        "input": "¿Qué puedo hacer con Python además de desarrollo web?",
        "output": "Puedes usar Python para análisis de datos, aprendizaje automático, automatización de tareas, videojuegos y mucho más."
    },
    {
        "input": "¿Python es más lento que otros lenguajes?",
        "output": "Python puede ser más lento que lenguajes compilados como C o Java, pero su simplicidad y bibliotecas compensan esto en muchos casos."
    },
    {
        "input": "¿Cómo verifico el tipo de una variable en Python?",
        "output": "Usa la función `type()`. Ejemplo: `print(type(mi_variable))`."
    },
    {
        "input": "¿Cómo convierto una cadena en un número?",
        "output": "Usa `int()` para enteros o `float()` para decimales. Ejemplo: `numero = int('123')`."
    },
    {
        "input": "¿Qué significa indentación en Python?",
        "output": "La indentación organiza el código y define bloques como funciones o bucles. En Python, es obligatoria."
    },
    {
        "input": "¿Cómo configuro Python en Windows?",
        "output": "Descarga Python desde python.org, ejecuta el instalador y selecciona 'Agregar Python al PATH' durante la instalación."
    },
    {
        "input": "¿Cómo instalo Python en Linux?",
        "output": "Usa el gestor de paquetes de tu distribución. Por ejemplo, en Ubuntu: `sudo apt install python3`."
    },
    {
        "input": "¿Cómo configuro un entorno virtual en Python?",
        "output": "Usa `python -m venv nombre_entorno`. Luego actívalo con `source nombre_entorno/bin/activate` en Linux/Mac o `nombre_entorno\\Scripts\\activate` en Windows."
    },
    {
        "input": "¿Qué hago si tengo varias versiones de Python instaladas?",
        "output": "Usa comandos específicos como `python3` o configura un alias para la versión que deseas usar."
    },
    {
        "input": "¿Cómo puedo ordenar una lista en Python?",
        "output": "Usa el método `sort()` para ordenar en su lugar o `sorted()` para obtener una nueva lista ordenada."
    },
    {
        "input": "¿Qué hago si quiero eliminar duplicados de una lista?",
        "output": "Convierte la lista en un conjunto con `set()` y luego vuelve a convertirla en lista. Ejemplo: `lista_sin_duplicados = list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo fusiono dos diccionarios?",
        "output": "En Python 3.9 o superior, usa el operador `|`. Ejemplo: `nuevo_diccionario = dic1 | dic2`."
    },
    {
        "input": "¿Qué tipos de excepciones existen en Python?",
        "output": "Algunos ejemplos comunes son: `ValueError`, `TypeError`, `KeyError`, `IndexError`, y `ZeroDivisionError`."
    },
    {
        "input": "¿Cómo creo mis propias excepciones?",
        "output": "Crea una clase que herede de `Exception`. Ejemplo: `class MiError(Exception): pass`."
    },
    {
        "input": "¿Cómo capturo cualquier error?",
        "output": "Usa `except Exception as e:` para capturar cualquier tipo de excepción."
    },
    {
        "input": "¿Cómo agrego una nueva columna a un DataFrame?",
        "output": "Asignando directamente. Ejemplo: `df['nueva_columna'] = valores`."
    },
    {
        "input": "¿Qué hago si mi DataFrame es muy grande?",
        "output": "Puedes usar `chunksize` al leer datos con `pd.read_csv()` o herramientas como Dask para grandes conjuntos de datos."
    },
    {
        "input": "¿Cómo elimino filas con valores nulos?",
        "output": "Usa `df.dropna()`. También puedes especificar columnas con `subset`."
    },
    {
        "input": "¿Cómo configuro un entorno de desarrollo en Flask?",
        "output": "Activa el modo de desarrollo con `app.run(debug=True)` o configurando la variable de entorno `FLASK_ENV=development`."
    },
    {
        "input": "¿Cómo manejo formularios en Flask?",
        "output": "Usa el método POST para recibir datos del formulario. Ejemplo: `request.form['campo']`."
    },
    {
        "input": "¿Cómo protejo mi aplicación Flask?",
        "output": "Usa extensiones como Flask-Login para autenticación y Flask-WTF para formularios seguros."
    },
    {
        "input": "¿Cómo cambio el color de un gráfico?",
        "output": "Usa el parámetro `color` en el método de trazado. Ejemplo: `plt.plot(x, y, color='red')`."
    },
    {
        "input": "¿Cómo agrego una leyenda a mi gráfico?",
        "output": "Usa `plt.legend()` y pasa una lista de etiquetas. Ejemplo: `plt.legend(['Serie 1'])`."
    },
    {
        "input": "¿Cómo creo un gráfico de barras?",
        "output": "Usa `plt.bar()`. Ejemplo: `plt.bar(x, y)`."
    },
    {
        "input": "¿Cómo programo tareas repetitivas con Python?",
        "output": "Usa la librería `schedule` para programar tareas o el módulo `time` para usar intervalos de tiempo."
    },
    {
        "input": "¿Cómo ejecuto un script automáticamente?",
        "output": "En Linux, usa cron. En Windows, usa el Programador de Tareas."
    },
    {
        "input": "¿Qué puedo automatizar con Python?",
        "output": "Puedes automatizar el manejo de archivos, correos electrónicos, scraping web y muchas otras tareas repetitivas."
    },
    {
        "input": "¿Qué es Xela?",
        "output": "Xela es el nombre coloquial de Quetzaltenango, una ciudad en el occidente de Guatemala."
    },
    {
        "input": "¿Dónde está ubicada Xela?",
        "output": "Xela está en el altiplano occidental de Guatemala, en el departamento de Quetzaltenango."
    },
    {
        "input": "¿Por qué se llama Xela?",
        "output": "Xela proviene de 'Xelajú', un nombre k'iche' que significa 'bajo las diez ideas' o 'diez cerros'."
    },
    {
        "input": "¿Qué idioma se habla en Xela?",
        "output": "El español es el idioma principal, pero también se habla k'iche' en muchas comunidades."
    },
    {
        "input": "¿Cuál es el clima de Xela?",
        "output": "El clima de Xela es templado y frío, con temperaturas que suelen bajar en la noche."
    },
    {
        "input": "¿Qué es el Cerro El Baúl?",
        "output": "El Cerro El Baúl es un parque ecológico y uno de los lugares más emblemáticos de Xela."
    },
    {
        "input": "¿Qué es la Feria de Independencia?",
        "output": "Es una celebración anual en Xela que conmemora la independencia de Guatemala, con actividades culturales y desfiles."
    },
    {
        "input": "¿Qué platos típicos se comen en Xela?",
        "output": "Algunos platos típicos son los chuchitos, el pepián y las garnachas."
    },
    {
        "input": "¿Qué significa Quetzaltenango?",
        "output": "Quetzaltenango significa 'muralla del quetzal' en náhuatl."
    },
    {
        "input": "¿Qué es el Teatro Municipal de Xela?",
        "output": "Es un teatro histórico construido en el siglo XIX, famoso por su arquitectura y eventos culturales."
    },
    {
        "input": "¿Qué es el Mercado de La Democracia?",
        "output": "Es un mercado popular en Xela conocido por su variedad de productos locales y artesanales."
    },
    {
        "input": "¿Qué deportes son populares en Xela?",
        "output": "El fútbol es muy popular, y el equipo más famoso es el CSD Xelajú MC."
    },
    {
        "input": "¿Qué es el Parque Centroamérica?",
        "output": "Es la plaza central de Xela, rodeada de edificios históricos y un lugar de reunión popular."
    },
    {
        "input": "¿Qué es el Monumento a la Marimba?",
        "output": "Es un monumento dedicado a la marimba, el instrumento musical nacional de Guatemala, ubicado en Xela."
    },
    {
        "input": "¿Qué volcanes están cerca de Xela?",
        "output": "Cerca de Xela están los volcanes Santa María, Santiaguito y Cerro Quemado."
    },
    {
        "input": "¿Qué es el volcán Santa María?",
        "output": "Es un volcán activo cerca de Xela, popular entre los excursionistas y famoso por sus vistas."
    },
    {
        "input": "¿Qué es el volcán Santiaguito?",
        "output": "Es un volcán muy activo, ubicado en la base del volcán Santa María."
    },
    {
        "input": "¿Qué festividades importantes se celebran en Xela?",
        "output": "Las principales festividades incluyen la Feria de Independencia y las celebraciones de Semana Santa."
    },
    {
        "input": "¿Qué es Casa No'j?",
        "output": "Es un centro cultural en Xela que promueve el arte, la música y la cultura local."
    },
    {
        "input": "¿Qué lugares turísticos hay en Xela?",
        "output": "Algunos lugares turísticos incluyen el Parque Centroamérica, el Teatro Municipal y los baños termales de Fuentes Georginas."
    },
    {
        "input": "¿Qué son las Fuentes Georginas?",
        "output": "Son baños termales naturales ubicados cerca de Xela, famosos por sus aguas calientes y vistas naturales."
    },
    {
        "input": "¿Qué son las chicharras?",
        "output": "Las chicharras son un aperitivo típico de Xela hecho de tortillas fritas con carne y salsa."
    },
    {
        "input": "¿Qué es el Museo de Historia Natural de Xela?",
        "output": "Es un museo que exhibe colecciones de historia natural, arqueología y cultura de la región."
    },
    {
        "input": "¿Qué es el Cementerio General de Xela?",
        "output": "Es un cementerio histórico conocido por sus mausoleos y arquitectura distintiva."
    },
    {
        "input": "¿Qué deportes extremos se pueden practicar cerca de Xela?",
        "output": "Cerca de Xela puedes practicar senderismo, escalada de volcanes y ciclismo de montaña."
    },
    {
        "input": "¿Qué universidades hay en Xela?",
        "output": "Algunas universidades en Xela incluyen la Universidad de San Carlos y la Universidad Mesoamericana."
    },
    {
        "input": "¿Qué es Almolonga?",
        "output": "Es un municipio cerca de Xela conocido como 'la huerta de América' por su producción agrícola."
    },
    {
        "input": "¿Qué son los barriletes de Todos Santos?",
        "output": "Son cometas gigantes que se vuelan en Santiago Sacatepéquez y Sumpango durante el Día de Todos los Santos."
    },
    {
        "input": "¿Qué importancia tiene Xela en Guatemala?",
        "output": "Xela es la segunda ciudad más grande de Guatemala y un importante centro cultural y educativo."
    },
    {
        "input": "¿Qué actividades culturales hay en Xela?",
        "output": "Xela ofrece teatro, conciertos, exposiciones de arte y festivales tradicionales."
    },
    {
        "input": "¿Qué grupos indígenas viven en Xela?",
        "output": "En Xela viven principalmente personas de origen maya k'iche'."
    },
    {
        "input": "¿Qué es el Quetzalteco?",
        "output": "El Quetzalteco es el gentilicio de las personas que viven en Quetzaltenango."
    },
    {
        "input": "¿Qué es el Mirador de la Cuchilla?",
        "output": "Es un lugar popular en Xela para ver el amanecer y las vistas de la ciudad."
    },
    {
        "input": "¿Qué bebidas típicas hay en Xela?",
        "output": "Algunas bebidas típicas son el atol de elote y el chocolate caliente."
    },
    {
        "input": "¿Qué es la Catedral del Espíritu Santo?",
        "output": "Es una iglesia histórica ubicada en el Parque Centroamérica, conocida por su arquitectura."
    },
    {
        "input": "¿Qué mercados tradicionales hay en Xela?",
        "output": "Además del Mercado de La Democracia, el Mercado Minerva es otro mercado popular."
    },
    {
        "input": "¿Qué actividades se pueden hacer en los alrededores de Xela?",
        "output": "Puedes visitar pueblos cercanos, como Zunil y Almolonga, y explorar volcanes o termales."
    },
    {
        "input": "¿Qué es la Iglesia de San Nicolás?",
        "output": "Es una iglesia histórica ubicada en el centro de Xela."
    },
    {
        "input": "¿Qué artesanías se producen en Xela?",
        "output": "En Xela se producen tejidos, cerámica y objetos de madera tallada."
    },
    {
        "input": "¿Qué es el Campus Central de la USAC en Xela?",
        "output": "Es una extensión de la Universidad de San Carlos en Quetzaltenango."
    },
    {
        "input": "¿Qué mercados culturales hay en Xela?",
        "output": "El Centro Intercultural de Quetzaltenango organiza actividades y mercados culturales."
    },
    {
        "input": "¿Qué es el Salcajá?",
        "output": "Salcajá es un municipio cercano a Xela famoso por su iglesia colonial y su bebida tradicional, el caldo de frutas."
    },
    {
        "input": "¿Qué es el caldo de frutas?",
        "output": "Es una bebida alcohólica tradicional de Salcajá, hecha con frutas fermentadas."
    },
    {
        "input": "¿Qué es la feria de Xela?",
        "output": "La feria de Xela celebra la independencia de Guatemala con desfiles, comida y actividades culturales."
    },
    {
        "input": "¿Qué fiestas religiosas son populares en Xela?",
        "output": "Semana Santa y las celebraciones de los santos patronos son muy importantes."
    },
    {
        "input": "¿Qué papel tiene Xela en la educación?",
        "output": "Xela es un centro educativo clave, con varias universidades e institutos."
    },
    {
        "input": "¿Qué productos agrícolas son importantes en Xela?",
        "output": "En Xela se cultivan maíz, frijoles y vegetales, especialmente en zonas como Almolonga."
    },
    {
        "input": "¿Qué rutas turísticas hay en Xela?",
        "output": "Rutas populares incluyen visitas a volcanes, termales y comunidades indígenas."
    },
    {
        "input": "¿Qué es Zunil?",
        "output": "Zunil es un pueblo cercano a Xela conocido por sus aguas termales y su iglesia colonial."
    },
    {
        "input": "¿Qué es un videojuego?",
        "output": "Un videojuego es un juego electrónico interactivo que involucra una interfaz de usuario para generar interacción con una pantalla."
    },
    {
        "input": "¿Quién inventó los videojuegos?",
        "output": "El primer videojuego fue creado por William Higinbotham en 1958, llamado 'Tennis for Two'."
    },
    {
        "input": "¿Cuál es la consola más vendida de la historia?",
        "output": "La consola más vendida de la historia es la PlayStation 2, con más de 155 millones de unidades vendidas."
    },
    {
        "input": "¿Qué es un 'eSports'?",
        "output": "'eSports' se refiere a las competiciones de videojuegos organizadas profesionalmente, donde los jugadores compiten en eventos para ganar premios."
    },
    {
        "input": "¿Qué es una PC Gamer?",
        "output": "Una PC Gamer es una computadora diseñada específicamente para jugar videojuegos, con componentes de alto rendimiento como tarjetas gráficas y procesadores rápidos."
    },
    {
        "input": "¿Qué es un 'streamer'?",
        "output": "Un 'streamer' es una persona que transmite en vivo sus sesiones de videojuegos a través de plataformas como Twitch o YouTube."
    },
    {
        "input": "¿Qué es el videojuego Fortnite?",
        "output": "Fortnite es un videojuego de batalla real desarrollado por Epic Games, popular por su modo multijugador en línea y su estilo de construcción."
    },
    {
        "input": "¿Qué es Minecraft?",
        "output": "Minecraft es un videojuego de construcción y aventura que permite a los jugadores explorar un mundo abierto, recolectar recursos y crear estructuras."
    },
    {
        "input": "¿Qué es un videojuego de rol?",
        "output": "Un videojuego de rol (RPG) es un juego en el que los jugadores asumen los roles de personajes dentro de una narrativa ficticia."
    },
    {
        "input": "¿Cuál es el videojuego más vendido de todos los tiempos?",
        "output": "El videojuego más vendido de todos los tiempos es 'Minecraft', con más de 200 millones de copias vendidas."
    },
    {
        "input": "¿Qué es un 'Battle Royale'?",
        "output": "Un 'Battle Royale' es un género de videojuego en el que los jugadores compiten entre sí hasta que solo quede uno de pie, como en Fortnite o PUBG."
    },
    {
        "input": "¿Qué es un juego de lucha?",
        "output": "Un juego de lucha es un videojuego donde los jugadores controlan personajes que luchan entre sí, como Street Fighter o Mortal Kombat."
    },
    {
        "input": "¿Qué es un 'Open World'?",
        "output": "Un 'Open World' es un tipo de videojuego que permite a los jugadores explorar un mundo abierto sin restricciones lineales, como en The Witcher 3."
    },
    {
        "input": "¿Qué es un 'sandbox'?",
        "output": "Un 'sandbox' es un tipo de videojuego que permite a los jugadores interactuar con el mundo del juego de forma libre y creativa, como en Minecraft o Grand Theft Auto."
    },
    {
        "input": "¿Qué es un 'MMORPG'?",
        "output": "'MMORPG' significa 'Massively Multiplayer Online Role-Playing Game', un juego de rol multijugador masivo en línea, como World of Warcraft."
    },
    {
        "input": "¿Qué es un juego de estrategia?",
        "output": "Un juego de estrategia es un videojuego en el que los jugadores toman decisiones tácticas y estratégicas para superar desafíos, como en Starcraft."
    },
    {
        "input": "¿Qué es una 'expansión' en los videojuegos?",
        "output": "Una expansión es un contenido adicional para un videojuego, que agrega nuevas misiones, personajes o mapas."
    },
    {
        "input": "¿Qué es un 'DLC'?",
        "output": "'DLC' significa 'Downloadable Content' y es contenido adicional descargable para un videojuego, como nuevas misiones o personajes."
    },
    {
        "input": "¿Qué es la realidad virtual en los videojuegos?",
        "output": "La realidad virtual (VR) en los videojuegos permite una inmersión total al jugador en un mundo digital mediante el uso de gafas o cascos VR."
    },
    {
        "input": "¿Qué es el juego Super Mario Bros?",
        "output": "Super Mario Bros es un videojuego de plataformas creado por Nintendo, protagonizado por Mario, un fontanero que debe salvar a la Princesa Peach."
    },
    {
        "input": "¿Qué es un 'speedrun'?",
        "output": "Un 'speedrun' es un intento de completar un videojuego o una sección de él lo más rápido posible, utilizando trucos y técnicas avanzadas."
    },
    {
        "input": "¿Qué es un 'gamer'?",
        "output": "Un 'gamer' es una persona que juega videojuegos de manera regular o profesional."
    },
    {
        "input": "¿Qué es un 'boss' en los videojuegos?",
        "output": "Un 'boss' es un enemigo o jefe final que el jugador debe derrotar para avanzar en un videojuego."
    },
    {
        "input": "¿Qué es un videojuego de disparos?",
        "output": "Un videojuego de disparos es un juego en el que los jugadores usan armas para disparar a enemigos o alcanzar objetivos, como en Call of Duty."
    },
    {
        "input": "¿Qué es 'Grand Theft Auto'?",
        "output": "Grand Theft Auto (GTA) es una serie de videojuegos de acción y aventura donde los jugadores realizan misiones en un mundo abierto."
    },
    {
        "input": "¿Qué es un juego de simulación?",
        "output": "Un juego de simulación busca recrear situaciones reales, como en Los Sims o SimCity."
    },
    {
        "input": "¿Qué es un juego de plataformas?",
        "output": "Un juego de plataformas es un tipo de videojuego en el que el jugador controla un personaje que salta entre plataformas, como en Sonic o Super Mario."
    },
    {
        "input": "¿Qué es un 'RPG'?",
        "output": "'RPG' significa 'Role Playing Game' y es un tipo de videojuego donde los jugadores asumen roles de personajes dentro de una historia."
    },
    {
        "input": "¿Qué es League of Legends?",
        "output": "League of Legends es un videojuego de estrategia en tiempo real de tipo MOBA, donde dos equipos de cinco jugadores se enfrentan en partidas tácticas."
    },
    {
        "input": "¿Qué es Fortnite?",
        "output": "Fortnite es un juego de batalla real y construcción en línea desarrollado por Epic Games, popular por su modo de juego competitivo."
    },
    {
        "input": "¿Qué es el modo cooperativo?",
        "output": "El modo cooperativo es un tipo de juego en el que varios jugadores colaboran entre sí para lograr un objetivo común."
    },
    {
        "input": "¿Qué es 'Call of Duty'?",
        "output": "Call of Duty es una popular serie de videojuegos de disparos en primera persona, ambientados en diversas guerras y conflictos históricos."
    },
    {
        "input": "¿Qué es un juego de rol de acción?",
        "output": "Un juego de rol de acción combina elementos de RPG con combate en tiempo real, como en Dark Souls."
    },
    {
        "input": "¿Qué es el modo multijugador?",
        "output": "El modo multijugador permite a varios jugadores jugar juntos en línea o en una misma consola, como en FIFA o Rocket League."
    },
    {
        "input": "¿Qué es un 'loot box'?",
        "output": "Un 'loot box' es una caja virtual en los videojuegos que contiene objetos aleatorios que los jugadores pueden desbloquear."
    },
    {
        "input": "¿Qué es un 'MMO'?",
        "output": "'MMO' significa 'Massively Multiplayer Online', y son juegos en línea que permiten a miles de jugadores interactuar en el mismo mundo."
    },
    {
        "input": "¿Qué es un 'puzzle' en videojuegos?",
        "output": "Un 'puzzle' es un tipo de videojuego en el que los jugadores deben resolver rompecabezas o desafíos mentales."
    },
    {
        "input": "¿Qué es un 'sandbox'?",
        "output": "Un 'sandbox' es un tipo de videojuego que ofrece libertad al jugador para explorar y crear, sin un objetivo específico."
    },
    {
        "input": "¿Qué es un videojuego de carreras?",
        "output": "Un videojuego de carreras es un tipo de juego en el que los jugadores compiten en vehículos para llegar a la meta antes que los demás, como en Mario Kart."
    },
    {
        "input": "¿Qué es The Legend of Zelda?",
        "output": "The Legend of Zelda es una famosa serie de videojuegos de acción y aventura de Nintendo, donde los jugadores controlan a Link para salvar a la Princesa Zelda."
    },
    {
        "input": "¿Qué es Pac-Man?",
        "output": "Pac-Man es un clásico videojuego de arcade donde los jugadores controlan a un personaje amarillo que debe comer puntos y evitar fantasmas."
    },
    {
        "input": "¿Qué es un juego de supervivencia?",
        "output": "Un juego de supervivencia es un tipo de videojuego en el que los jugadores deben gestionar recursos y evitar morir en un entorno hostil, como en The Forest."
    },
    {
        "input": "¿Qué es un 'gacha'?",
        "output": "Un 'gacha' es un sistema dentro de los videojuegos, especialmente en juegos móviles, donde los jugadores pueden obtener personajes o objetos a través de sorteos."
    },
    {
        "input": "¿Qué es un 'rage quit'?",
        "output": "'Rage quit' es un término usado para describir cuando un jugador abandona un juego debido a frustración o enojo."
    },
    {
        "input": "¿Cuáles son los principales lenguajes de programación?",
        "output": "Los principales lenguajes de programación incluyen Python, Java, C++, JavaScript, Ruby y Swift."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es una secuencia de pasos o instrucciones para resolver un problema o realizar una tarea específica."
    },
    {
        "input": "¿Por qué es importante la programación?",
        "output": "La programación es importante porque es la base para el desarrollo de software, aplicaciones, sistemas y tecnologías que usamos todos los días."
    },
    {
        "input": "¿Qué es la inteligencia artificial de tipo débil?",
        "output": "La inteligencia artificial débil es aquella diseñada para realizar tareas específicas, como asistentes virtuales o recomendaciones en línea, sin tener conciencia ni entendimiento general."
    },
    {
        "input": "¿Cómo puede la inteligencia artificial cambiar el futuro?",
        "output": "La IA puede transformar muchas industrias, desde la salud y la educación hasta el transporte, ayudando a automatizar tareas, mejorar diagnósticos y optimizar procesos."
    },
    {
        "input": "¿Qué es el aprendizaje supervisado en IA?",
        "output": "El aprendizaje supervisado es un tipo de aprendizaje automático donde el modelo aprende a partir de ejemplos etiquetados, es decir, datos que ya tienen la respuesta correcta."
    },
    {
        "input": "¿Qué es un chatbot?",
        "output": "Un chatbot es un programa de inteligencia artificial diseñado para simular conversaciones humanas, utilizado para atención al cliente o como asistente virtual."
    },
    {
        "input": "¿Qué es Xela en términos históricos?",
        "output": "Xela, o Quetzaltenango, fue una de las principales ciudades del altiplano guatemalteco durante la época precolombina, habitada principalmente por los mayas k'iche'."
    },
    {
        "input": "¿Cómo afecta el clima de Xela a su agricultura?",
        "output": "El clima templado y fresco de Xela favorece la producción de productos agrícolas como vegetales, café y flores, especialmente en áreas cercanas a Almolonga."
    },
    {
        "input": "¿Qué son las Fuentes Georginas?",
        "output": "Las Fuentes Georginas son baños termales naturales ubicados cerca de Xela, conocidos por sus propiedades terapéuticas y sus hermosas vistas montañosas."
    },
    {
        "input": "¿Cuántos volcanes hay cerca de Xela?",
        "output": "Cerca de Xela hay al menos tres volcanes importantes: Santa María, Santiaguito y Cerro Quemado."
    },
    {
        "input": "¿Qué eventos culturales se celebran en Xela?",
        "output": "Xela es conocida por sus festivales de música, teatro y danza, especialmente durante la Feria de Independencia y la Semana Santa."
    },
    {
        "input": "¿Qué hace único al volcán Santa María?",
        "output": "El volcán Santa María es famoso por su gran tamaño y por la actividad volcánica reciente, siendo una de las montañas más altas de la región."
    },
    {
        "input": "¿Cómo afecta la cultura maya a Xela?",
        "output": "La cultura maya tiene una gran influencia en Xela, especialmente a través de la lengua k'iche', la gastronomía y las tradiciones religiosas y sociales."
    },
    {
        "input": "¿Qué son los 'chuchitos'?",
        "output": "Los chuchitos son un platillo típico de Guatemala, consisten en una pequeña masa de maíz rellena de carne y envuelta en hojas de maíz."
    },
    {
        "input": "¿Qué videojuegos fueron inspirados por la mitología maya?",
        "output": "Algunos videojuegos, como 'Guacamelee!' y 'Tomb Raider: The Last Revelation', tienen influencias de la mitología y cultura maya."
    },
    {
        "input": "¿Cómo afecta el uso de videojuegos en la educación?",
        "output": "Los videojuegos educativos pueden mejorar habilidades cognitivas, sociales y de resolución de problemas, y se utilizan cada vez más en el aprendizaje interactivo."
    },
    {
        "input": "¿Cuál es la diferencia entre un videojuego en 2D y 3D?",
        "output": "Un videojuego en 2D se juega en un entorno bidimensional, mientras que un juego en 3D permite movimientos en tres dimensiones, proporcionando una experiencia más inmersiva."
    },
    {
        "input": "¿Qué es un 'speedrun' y cómo se hace?",
        "output": "Un 'speedrun' es cuando un jugador intenta completar un videojuego en el menor tiempo posible, a menudo utilizando trucos o saltos en el diseño del juego."
    },
    {
        "input": "¿Qué es un juego de rol de mesa?",
        "output": "Un juego de rol de mesa es un tipo de juego en el que los jugadores asumen roles y personajes en una historia, pero se juega en persona con dados y reglas específicas, como Dungeons & Dragons."
    },
    {
        "input": "¿Cómo afecta la tecnología en los videojuegos modernos?",
        "output": "La tecnología ha permitido gráficos más realistas, mundos abiertos, inteligencia artificial avanzada, y experiencias multijugador masivas en línea."
    },
    {
        "input": "¿Qué es un 'loot box' en un videojuego?",
        "output": "'Loot box' es un sistema dentro de algunos videojuegos donde los jugadores compran o ganan cajas que contienen objetos o personajes aleatorios."
    },
    {
        "input": "¿Cuáles son los beneficios de los videojuegos de estrategia?",
        "output": "Los videojuegos de estrategia mejoran la toma de decisiones, la planificación a largo plazo, la resolución de problemas y el trabajo en equipo."
    },
    {
        "input": "¿Qué es un juego de lucha?",
        "output": "Un juego de lucha es un videojuego donde los jugadores controlan personajes que luchan entre sí, como Mortal Kombat o Street Fighter."
    },
    {
        "input": "¿Qué impacto tiene Xela en la industria cultural de Guatemala?",
        "output": "Xela es un centro cultural clave en Guatemala, con una rica tradición de teatro, música y arte, y su Feria de Independencia es un importante evento cultural del país."
    },
    {
        "input": "¿Qué significa 'sandbox' en un videojuego?",
        "output": "Un 'sandbox' es un tipo de juego en el que los jugadores tienen libertad para explorar y crear en un mundo abierto, como en Minecraft."
    },
    {
        "input": "¿Cuáles son los mejores videojuegos para PC?",
        "output": "Algunos de los mejores videojuegos para PC incluyen The Witcher 3, Red Dead Redemption 2, League of Legends, y Counter-Strike: Global Offensive."
    },
    {
        "input": "¿Qué importancia tiene Xela para los turistas?",
        "output": "Xela es una ciudad histórica y culturalmente rica, famosa por su arquitectura, volcanes cercanos, baños termales y su comunidad indígena k'iche'."
    },
    {
        "input": "¿Qué es el software libre?",
        "output": "El software libre es aquel cuyo código fuente está disponible para ser utilizado, modificado y distribuido libremente por cualquier persona."
    },
    {
        "input": "¿Qué es un 'bot' en programación?",
        "output": "Un bot es un programa diseñado para automatizar tareas, como interactuar con usuarios en línea o realizar acciones repetitivas."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "La programación orientada a objetos es un paradigma de programación que organiza el software alrededor de 'objetos', que son instancias de clases que contienen datos y métodos."
    },
    {
        "input": "¿Qué es la gamificación?",
        "output": "La gamificación es el uso de elementos y mecánicas de los videojuegos en contextos no relacionados con juegos, como educación o marketing, para motivar a las personas."
    },
    {
        "input": "¿Cuál es la historia de la saga de 'Super Mario'?",
        "output": "Super Mario es una franquicia de videojuegos creada por Nintendo, que comenzó en 1985 y se centra en las aventuras de Mario, un fontanero que rescata a la Princesa Peach."
    },
    {
        "input": "¿Cómo se hacen los gráficos en los videojuegos?",
        "output": "Los gráficos de los videojuegos se crean utilizando programas de diseño digital, que incluyen la creación de texturas, modelos 3D y la animación de personajes."
    },
    {
        "input": "¿Cuál es el origen de 'Tetris'?",
        "output": "Tetris fue creado en 1984 por Alexey Pajitnov, un científico ruso, y se ha convertido en uno de los videojuegos más populares de la historia."
    },
    {
        "input": "¿Qué es un 'boss fight' en un videojuego?",
        "output": "Un 'boss fight' es una batalla difícil contra un jefe o enemigo poderoso al final de un nivel o sección del juego."
    },
    {
        "input": "¿Qué importancia tienen los videojuegos en la salud mental?",
        "output": "Algunos estudios sugieren que los videojuegos pueden mejorar habilidades cognitivas, reducir el estrés y promover la socialización, aunque también pueden generar adicción."
    },
    {
        "input": "¿Qué es un juego 'multiplayer'?",
        "output": "Un juego 'multiplayer' es un videojuego que permite jugar con varias personas, ya sea en línea o en una consola o PC local."
    },
    {
        "input": "¿Qué es un 'MOBA'?",
        "output": "'MOBA' significa 'Multiplayer Online Battle Arena', y es un género de juegos en los que dos equipos de jugadores luchan en un campo de batalla, como en League of Legends."
    },
    {
        "input": "¿Qué es 'World of Warcraft'?",
        "output": "World of Warcraft es un MMORPG popular en el que los jugadores crean personajes para explorar el mundo de Azeroth, completar misiones y participar en batallas en línea."
    },
    {
        "input": "¿Qué es un juego 'sandbox'?",
        "output": "Un juego 'sandbox' es un tipo de videojuego en el que los jugadores tienen libertad para explorar y crear en el mundo del juego sin un objetivo predefinido."
    },
    {
        "input": "¿Qué son los 'eSports'?",
        "output": "Los 'eSports' son competiciones profesionales de videojuegos, donde jugadores o equipos se enfrentan en torneos organizados."
    },
    {
        "input": "¿Cuáles son los juegos más jugados del mundo?",
        "output": "Algunos de los juegos más jugados del mundo incluyen Fortnite, League of Legends, Minecraft, Apex Legends y Call of Duty."
    },
    {
        "input": "¿Cómo se desarrollan los videojuegos?",
        "output": "Los videojuegos se desarrollan mediante un proceso que incluye diseño, programación, creación de gráficos, pruebas y distribución."
    },
    {
        "input": "¿Qué es la interfaz de usuario en los videojuegos?",
        "output": "La interfaz de usuario en los videojuegos es la parte del juego con la que el jugador interactúa directamente, como los menús, controles y HUD (Heads-Up Display)."
    },
    {
        "input": "¿Qué es un 'game engine'?",
        "output": "Un 'game engine' es un software que permite crear y desarrollar videojuegos, gestionando aspectos como los gráficos, la física y la interacción con el usuario."
    },
    {
        "input": "¿Cuál fue el primer videojuego en 3D?",
        "output": "Uno de los primeros videojuegos en 3D fue '3D Monster Maze', lanzado en 1981."
    },
    {
        "input": "¿Qué es un videojuego de terror?",
        "output": "Un videojuego de terror está diseñado para crear una atmósfera de miedo y suspenso, con elementos de tensión, criaturas aterradoras y eventos inesperados."
    },
    {
        "input": "¿Qué es un videojuego de supervivencia?",
        "output": "Un videojuego de supervivencia es un tipo de juego donde los jugadores deben gestionar recursos y sobrevivir en un entorno hostil, como en juegos como Minecraft o Don't Starve."
    },
    {
        "input": "¿Qué significa 'NPC'?",
        "output": "'NPC' significa 'Non-Player Character' o 'Personaje No Jugador', que es un personaje controlado por la computadora en un videojuego."
    },
    {
        "input": "¿Qué es 'Minecraft'?",
        "output": "Minecraft es un videojuego de construcción y aventuras donde los jugadores pueden explorar, construir y sobrevivir en un mundo generado por bloques."
    },
    {
        "input": "¿Qué es un adaptador?",
        "output": "Un adaptador es un dispositivo que permite conectar dos componentes electrónicos o sistemas incompatibles entre sí, ajustando las señales o conexiones para que funcionen correctamente."
    },
    {
        "input": "¿Qué tipos de adaptadores existen?",
        "output": "Existen muchos tipos de adaptadores, entre ellos: adaptadores de corriente, adaptadores de video, adaptadores de red, adaptadores de audio, y adaptadores USB."
    },
    {
        "input": "¿Qué es un adaptador de corriente?",
        "output": "Un adaptador de corriente convierte la corriente eléctrica de una fuente en un voltaje adecuado para los dispositivos que alimenta, como los cargadores de teléfonos."
    },
    {
        "input": "¿Qué es un adaptador de video?",
        "output": "Un adaptador de video permite conectar dispositivos con diferentes tipos de salida de video, como VGA a HDMI, o DisplayPort a DVI."
    },
    {
        "input": "¿Qué es un adaptador USB?",
        "output": "Un adaptador USB permite la conexión de dispositivos que usan diferentes tipos de puertos USB, como USB-A a USB-C o USB a micro USB."
    },
    {
        "input": "¿Qué es un adaptador HDMI?",
        "output": "Un adaptador HDMI se utiliza para convertir una señal HDMI a otro tipo de conexión, como VGA o DisplayPort."
    },
    {
        "input": "¿Para qué sirve un adaptador de red?",
        "output": "Un adaptador de red permite conectar un dispositivo a una red, ya sea a través de Wi-Fi, Ethernet o mediante un puerto de conexión diferente."
    },
    {
        "input": "¿Qué es un adaptador de audio?",
        "output": "Un adaptador de audio convierte señales de audio de un formato a otro, por ejemplo, de 3.5mm a RCA o de HDMI a jack de 3.5mm."
    },
    {
        "input": "¿Qué es un adaptador de tarjeta SD?",
        "output": "Un adaptador de tarjeta SD es un dispositivo que permite conectar tarjetas SD a otros puertos, como un puerto microSD o USB."
    },
    {
        "input": "¿Qué adaptador necesito para conectar mi computadora a una TV?",
        "output": "Dependiendo de las conexiones de tu computadora y tu TV, podrías necesitar un adaptador de HDMI, VGA, o DisplayPort a HDMI."
    },
    {
        "input": "¿Cómo sé si necesito un adaptador para mi dispositivo?",
        "output": "Necesitas un adaptador cuando dos dispositivos o conexiones no son compatibles entre sí, por ejemplo, si intentas conectar un cable con un puerto distinto al de tu dispositivo."
    },
    {
        "input": "¿Qué adaptador necesito para conectar un USB a un iPhone?",
        "output": "Para conectar un dispositivo USB a un iPhone, necesitarás un adaptador de Lightning a USB o un adaptador de USB-C a Lightning, dependiendo del modelo de tu iPhone."
    },
    {
        "input": "¿Qué es un adaptador de voltaje?",
        "output": "Un adaptador de voltaje convierte la energía eléctrica de un voltaje a otro para que los dispositivos puedan funcionar correctamente sin dañarse."
    },
    {
        "input": "¿Qué es un adaptador de frecuencia?",
        "output": "Un adaptador de frecuencia cambia la frecuencia de una señal, utilizado a menudo en transmisores y receptores de radio o TV."
    },
    {
        "input": "¿Qué es un adaptador de audio digital?",
        "output": "Un adaptador de audio digital convierte una señal de audio digital (como S/PDIF o Toslink) a una señal analógica o viceversa."
    },
    {
        "input": "¿Qué adaptador necesito para mi laptop si no tiene puerto HDMI?",
        "output": "Si tu laptop no tiene puerto HDMI, puedes usar un adaptador de VGA o Mini DisplayPort a HDMI, dependiendo de las salidas de tu laptop."
    },
    {
        "input": "¿Cuál es la diferencia entre un adaptador y un convertidor?",
        "output": "La principal diferencia es que un adaptador generalmente cambia el tipo de conector, mientras que un convertidor cambia el tipo de señal o formato (por ejemplo, de digital a analógico)."
    },
    {
        "input": "¿Qué es un adaptador de corriente universal?",
        "output": "Un adaptador de corriente universal es un dispositivo que puede ajustarse a diferentes tipos de enchufes y voltajes, permitiendo su uso en múltiples países."
    },
    {
        "input": "¿Puedo usar un adaptador de corriente para un dispositivo diferente?",
        "output": "Depende de la potencia y el tipo de corriente que tu dispositivo necesita. Es importante verificar las especificaciones del adaptador y el dispositivo."
    },
    {
        "input": "¿Qué es un adaptador de red Wi-Fi?",
        "output": "Un adaptador de red Wi-Fi es un dispositivo que permite que un dispositivo se conecte a una red inalámbrica si no tiene una tarjeta de red Wi-Fi incorporada."
    },
    {
        "input": "¿Qué es un adaptador de red Ethernet?",
        "output": "Un adaptador de red Ethernet permite que un dispositivo se conecte a una red cableada a través de un puerto Ethernet."
    },
    {
        "input": "¿Puedo conectar mi teléfono a mi TV con un adaptador?",
        "output": "Sí, puedes usar un adaptador de USB-C o microUSB a HDMI para conectar tu teléfono a la TV."
    },
    {
        "input": "¿Qué es un adaptador USB-C?",
        "output": "Un adaptador USB-C permite conectar dispositivos con puertos USB-C a otros puertos, como USB-A o HDMI."
    },
    {
        "input": "¿Para qué sirve un adaptador de corriente de laptop?",
        "output": "Un adaptador de corriente de laptop convierte la corriente eléctrica de una toma de corriente en la tensión adecuada para cargar la batería o alimentar la laptop."
    },
    {
        "input": "¿Qué es un adaptador de red inalámbrico?",
        "output": "Un adaptador de red inalámbrico es un dispositivo que permite conectar un dispositivo a una red Wi-Fi si no tiene capacidad de conexión inalámbrica integrada."
    },
    {
        "input": "¿Qué es un adaptador de audio Bluetooth?",
        "output": "Un adaptador de audio Bluetooth convierte una señal de audio de un dispositivo sin Bluetooth a un formato compatible con audífonos o altavoces Bluetooth."
    },
    {
        "input": "¿Cómo se usa un adaptador de HDMI a VGA?",
        "output": "Un adaptador de HDMI a VGA se utiliza para conectar dispositivos con salida HDMI (como una computadora) a monitores o proyectores que solo tienen entrada VGA."
    },
    {
        "input": "¿Qué es un adaptador VGA?",
        "output": "Un adaptador VGA permite conectar dispositivos con una salida VGA a otros dispositivos, como monitores, que tienen diferentes tipos de entrada."
    },
    {
        "input": "¿Qué es un adaptador de microUSB a USB?",
        "output": "Un adaptador de microUSB a USB permite conectar un dispositivo con puerto microUSB (como un teléfono) a otros dispositivos USB, como teclados o ratones."
    },
    {
        "input": "¿Qué adaptador necesito para conectar mi consola a la TV?",
        "output": "Normalmente, necesitarás un adaptador de HDMI, ya que la mayoría de las consolas modernas usan este tipo de salida."
    },
    {
        "input": "¿Existen adaptadores para tarjetas de memoria?",
        "output": "Sí, existen adaptadores que permiten usar diferentes tipos de tarjetas de memoria, como de SD a microSD o de CF a SD."
    },
    {
        "input": "¿Qué es un adaptador de USB a Ethernet?",
        "output": "Un adaptador de USB a Ethernet permite conectar un dispositivo sin puerto Ethernet a una red mediante un adaptador USB."
    },
    {
        "input": "¿Qué es un adaptador de alimentación para laptops?",
        "output": "Es un dispositivo que convierte la corriente alterna de una toma de corriente en corriente continua adecuada para cargar una laptop."
    },
    {
        "input": "¿Cómo saber qué tipo de adaptador necesito?",
        "output": "Depende de los puertos y conexiones de tus dispositivos. Asegúrate de identificar los tipos de entrada y salida de cada dispositivo antes de buscar el adaptador adecuado."
    },
    {
        "input": "¿Puedo usar un adaptador para cargar mi teléfono?",
        "output": "Sí, puedes usar un adaptador para conectar tu teléfono a un cargador con el tipo de puerto adecuado, como USB-C o microUSB."
    },
    {
        "input": "¿Qué es un adaptador de corriente para vehículos?",
        "output": "Un adaptador de corriente para vehículos convierte la corriente de un automóvil para cargar dispositivos como teléfonos o laptops."
    },
    {
        "input": "¿Qué es un adaptador de audio RCA?",
        "output": "Un adaptador de audio RCA convierte señales de audio de 3.5mm a RCA (rojo y blanco) para conectar a dispositivos de audio más antiguos."
    },
    {
        "input": "¿Qué adaptador necesito para mi dispositivo Bluetooth?",
        "output": "Necesitarás un adaptador Bluetooth USB si tu dispositivo no tiene capacidad Bluetooth incorporada."
    },
    {
        "input": "¿Qué es un adaptador Lightning?",
        "output": "Un adaptador Lightning es un conector utilizado en dispositivos Apple para cargar, transferir datos y conectar accesorios."
    },
    {
        "input": "¿Puedo usar un adaptador para conectar un teléfono a mi PC?",
        "output": "Sí, puedes usar un adaptador de USB-C o microUSB a USB para conectar un teléfono a tu computadora."
    },
    {
        "input": "¿Qué es un adaptador de audio 3.5mm?",
        "output": "Un adaptador de audio 3.5mm convierte señales de audio de diferentes puertos, como 3.5mm a RCA o 3.5mm a jack de 6.3mm."
    },
    {
        "input": "¿Qué es un adaptador para audífonos?",
        "output": "Un adaptador para audífonos permite conectar audífonos con diferentes tipos de conexiones, como 3.5mm a 1/4 de pulgada."
    },
    {
        "input": "¿Qué tipo de adaptador necesito para mi proyector?",
        "output": "Dependiendo de la entrada del proyector, es posible que necesites un adaptador de HDMI a VGA o de HDMI a DisplayPort."
    },
    {
        "input": "¿Qué es la tecnología?",
        "output": "La tecnología es el conjunto de conocimientos, técnicas y herramientas que se utilizan para crear, desarrollar y mejorar productos, servicios y procesos."
    },
    {
        "input": "¿Cuáles son las tecnologías más usadas hoy en día?",
        "output": "Las tecnologías más usadas hoy incluyen la inteligencia artificial, la nube, el internet de las cosas (IoT), la blockchain y la realidad aumentada."
    },
    {
        "input": "¿Qué es la inteligencia artificial?",
        "output": "La inteligencia artificial (IA) es un campo de la tecnología que busca crear sistemas capaces de realizar tareas que requieren inteligencia humana, como aprender, razonar y tomar decisiones."
    },
    {
        "input": "¿Qué es el Internet de las cosas (IoT)?",
        "output": "El Internet de las Cosas (IoT) es un concepto que conecta dispositivos físicos a internet para que puedan recolectar y compartir datos, como termostatos, relojes inteligentes y electrodomésticos."
    },
    {
        "input": "¿Qué es la nube?",
        "output": "La nube es un modelo de almacenamiento y procesamiento de datos a través de servidores remotos accesibles por internet, lo que permite guardar y acceder a la información desde cualquier lugar."
    },
    {
        "input": "¿Qué es blockchain?",
        "output": "Blockchain es una tecnología de registro descentralizado que permite almacenar datos de manera segura, transparente e inmutable, utilizada principalmente en criptomonedas como Bitcoin."
    },
    {
        "input": "¿Qué es la realidad aumentada?",
        "output": "La realidad aumentada (RA) es una tecnología que superpone elementos virtuales sobre el mundo real a través de dispositivos como smartphones o gafas especializadas."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es un conjunto de instrucciones o reglas que se siguen para realizar una tarea específica o resolver un problema."
    },
    {
        "input": "¿Qué es la computación cuántica?",
        "output": "La computación cuántica es un área de la informática que utiliza principios de la mecánica cuántica para procesar información de manera mucho más rápida y eficiente que las computadoras tradicionales."
    },
    {
        "input": "¿Qué son los big data?",
        "output": "Big Data se refiere al manejo de grandes volúmenes de datos que son demasiado complejos para ser procesados por sistemas tradicionales, y se utilizan para obtener patrones y análisis valiosos."
    },
    {
        "input": "¿Qué es la ciberseguridad?",
        "output": "La ciberseguridad es la práctica de proteger sistemas informáticos, redes y datos de ataques, daños o accesos no autorizados."
    },
    {
        "input": "¿Qué es un dispositivo móvil?",
        "output": "Un dispositivo móvil es un aparato portátil que permite realizar diversas funciones, como un teléfono inteligente, tablet o smartwatch."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es el software que gestiona el hardware de un dispositivo y proporciona los servicios necesarios para que otras aplicaciones funcionen correctamente, como Windows, macOS o Android."
    },
    {
        "input": "¿Qué es un navegador web?",
        "output": "Un navegador web es un software utilizado para acceder y visualizar sitios web en internet, como Google Chrome, Mozilla Firefox o Safari."
    },
    {
        "input": "¿Qué son las redes sociales?",
        "output": "Las redes sociales son plataformas en línea donde las personas pueden interactuar, compartir contenido, y crear comunidades, como Facebook, Instagram, Twitter y LinkedIn."
    },
    {
        "input": "¿Qué es el 5G?",
        "output": "El 5G es la quinta generación de redes móviles, que promete velocidades de conexión mucho más rápidas, mayor capacidad de red y menor latencia."
    },
    {
        "input": "¿Qué es un microprocesador?",
        "output": "Un microprocesador es un chip que ejecuta las instrucciones de un programa informático y coordina las operaciones de un sistema informático, funcionando como el cerebro de una computadora."
    },
    {
        "input": "¿Qué es la realidad virtual?",
        "output": "La realidad virtual (RV) es una tecnología que crea un entorno simulado inmersivo que puede interactuar con el usuario mediante dispositivos como gafas VR."
    },
    {
        "input": "¿Qué es un robot?",
        "output": "Un robot es una máquina programable capaz de realizar tareas automáticamente, a menudo imitando comportamientos humanos o realizando trabajos repetitivos."
    },
    {
        "input": "¿Qué es la automatización?",
        "output": "La automatización es el uso de tecnología para realizar tareas sin intervención humana, optimizando procesos en la industria, la agricultura y otras áreas."
    },
    {
        "input": "¿Qué son las criptomonedas?",
        "output": "Las criptomonedas son monedas digitales que utilizan criptografía para asegurar las transacciones y controlar la creación de nuevas unidades, como Bitcoin o Ethereum."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es una computadora o sistema que proporciona servicios a otras computadoras o dispositivos en una red, como el alojamiento de sitios web o el almacenamiento de datos."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es un modelo de entrega de servicios informáticos (almacenamiento, aplicaciones, etc.) a través de internet, sin necesidad de tener servidores físicos."
    },
    {
        "input": "¿Qué es un dispositivo IoT?",
        "output": "Un dispositivo IoT (Internet de las Cosas) es cualquier objeto físico que esté conectado a internet para recopilar o compartir datos, como termostatos inteligentes o cámaras de seguridad."
    },
    {
        "input": "¿Qué es el software libre?",
        "output": "El software libre es aquel cuyo código fuente está disponible para que cualquier persona pueda usarlo, modificarlo y distribuirlo de acuerdo con sus necesidades."
    },
    {
        "input": "¿Qué es un firewall?",
        "output": "Un firewall es un sistema de seguridad que controla el tráfico de red entrante y saliente para proteger un sistema informático de accesos no autorizados."
    },
    {
        "input": "¿Qué es la inteligencia artificial aplicada?",
        "output": "La inteligencia artificial aplicada se refiere a la implementación práctica de tecnologías de IA en diferentes industrias, como la automatización, la medicina y el análisis de datos."
    },
    {
        "input": "¿Qué son los drones?",
        "output": "Los drones son vehículos aéreos no tripulados que se utilizan para diversas aplicaciones, desde fotografía aérea hasta entregas o exploración."
    },
    {
        "input": "¿Qué es un dispositivo portátil?",
        "output": "Un dispositivo portátil es un aparato pequeño y ligero que puede ser transportado fácilmente, como un teléfono móvil, una tablet o un laptop."
    },
    {
        "input": "¿Qué es el aprendizaje automático?",
        "output": "El aprendizaje automático es una rama de la inteligencia artificial que permite a las máquinas aprender de los datos y mejorar su rendimiento sin ser programadas explícitamente."
    },
    {
        "input": "¿Qué es un algoritmo de búsqueda?",
        "output": "Un algoritmo de búsqueda es un proceso computacional diseñado para encontrar un elemento dentro de una estructura de datos, como la búsqueda de información en internet o bases de datos."
    },
    {
        "input": "¿Qué es un chip NFC?",
        "output": "Un chip NFC (Near Field Communication) es un dispositivo que permite la transmisión de datos de forma inalámbrica entre dispositivos a corta distancia, utilizado en pagos móviles y otras aplicaciones."
    },
    {
        "input": "¿Qué es un asistente virtual?",
        "output": "Un asistente virtual es un software que utiliza inteligencia artificial para interactuar con los usuarios, responder preguntas y realizar tareas, como Siri, Alexa o Google Assistant."
    },
    {
        "input": "¿Qué es el diseño responsivo?",
        "output": "El diseño responsivo es un enfoque de diseño web que permite que un sitio se adapte y se vea bien en diferentes dispositivos y tamaños de pantalla."
    },
    {
        "input": "¿Qué son los smartwatches?",
        "output": "Los smartwatches son relojes inteligentes que realizan funciones más allá de mostrar la hora, como monitoreo de salud, notificaciones, control de música y más."
    },
    {
        "input": "¿Qué es un chip de memoria?",
        "output": "Un chip de memoria es un componente de un dispositivo que almacena datos, como la RAM o la memoria flash en teléfonos y computadoras."
    },
    {
        "input": "¿Qué es un asistente de voz?",
        "output": "Un asistente de voz es un software que permite a los usuarios interactuar con dispositivos a través de comandos de voz, como Siri, Alexa o Google Assistant."
    },
    {
        "input": "¿Qué es el big data?",
        "output": "Big Data es el término utilizado para describir grandes volúmenes de datos que no pueden ser procesados por métodos tradicionales, y se utilizan para análisis avanzados y toma de decisiones."
    },
    {
        "input": "¿Qué es un servicio en la nube?",
        "output": "Un servicio en la nube es cualquier servicio informático proporcionado a través de internet, como almacenamiento, procesamiento o aplicaciones."
    },
    {
        "input": "¿Qué es un dispositivo wearable?",
        "output": "Un dispositivo wearable es un gadget que se usa sobre el cuerpo y se conecta a otros dispositivos, como relojes inteligentes, pulseras de actividad y gafas inteligentes."
    },
    {
        "input": "¿Qué es un virus informático?",
        "output": "Un virus informático es un tipo de software malicioso que puede replicarse y propagarse a través de archivos y redes, dañando o alterando los sistemas en los que se instala."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es un modelo de entrega de servicios informáticos a través de internet, lo que permite a las empresas y usuarios acceder a datos y aplicaciones sin necesidad de infraestructura física."
    },
    {
        "input": "¿Qué es la carrera de Ingeniería en Sistemas?",
        "output": "La carrera de Ingeniería en Sistemas se enfoca en el diseño, desarrollo y mantenimiento de sistemas informáticos y tecnológicos, combinando conocimientos de software, hardware, redes y gestión de proyectos."
    },
    {
        "input": "¿Qué se estudia en Ingeniería en Sistemas?",
        "output": "En Ingeniería en Sistemas se estudian temas como programación, bases de datos, redes, seguridad informática, algoritmos, desarrollo de software, inteligencia artificial y gestión de proyectos tecnológicos."
    },
    {
        "input": "¿Cuánto dura la carrera de Ingeniería en Sistemas?",
        "output": "La duración de la carrera de Ingeniería en Sistemas generalmente es de 5 años, aunque puede variar dependiendo de la universidad y el país."
    },
    {
        "input": "¿Qué habilidades se necesitan para estudiar Ingeniería en Sistemas?",
        "output": "Se necesitan habilidades analíticas, lógico-matemáticas, capacidad de resolución de problemas, interés en la tecnología y la informática, y habilidades para trabajar en equipo."
    },
    {
        "input": "¿En qué áreas puede trabajar un Ingeniero en Sistemas?",
        "output": "Un Ingeniero en Sistemas puede trabajar en áreas como desarrollo de software, administración de bases de datos, redes y telecomunicaciones, ciberseguridad, análisis de datos, inteligencia artificial y gestión de proyectos tecnológicos."
    },
    {
        "input": "¿Es difícil estudiar Ingeniería en Sistemas?",
        "output": "La dificultad depende del interés y las habilidades de cada persona. La carrera tiene un enfoque técnico y matemático, por lo que requiere esfuerzo y dedicación, pero es accesible para aquellos interesados en la tecnología."
    },
    {
        "input": "¿Qué materias son las más importantes en Ingeniería en Sistemas?",
        "output": "Las materias clave incluyen programación, estructuras de datos, redes de computadoras, bases de datos, ingeniería de software, algoritmos, inteligencia artificial y matemáticas aplicadas."
    },
    {
        "input": "¿Un Ingeniero en Sistemas puede trabajar en empresas de tecnología?",
        "output": "Sí, un Ingeniero en Sistemas puede trabajar en empresas de tecnología, desarrollando software, gestionando redes, administrando bases de datos y participando en proyectos tecnológicos innovadores."
    },
    {
        "input": "¿Qué es un desarrollo de software?",
        "output": "El desarrollo de software es el proceso de diseñar, crear, probar y mantener aplicaciones o sistemas informáticos, utilizando distintos lenguajes de programación y metodologías."
    },
    {
        "input": "¿Qué lenguajes de programación se aprenden en Ingeniería en Sistemas?",
        "output": "En Ingeniería en Sistemas se aprenden lenguajes como Java, C++, Python, JavaScript, PHP, SQL, Ruby y otros utilizados en desarrollo web, aplicaciones móviles y sistemas de bases de datos."
    },
    {
        "input": "¿Qué es una base de datos?",
        "output": "Una base de datos es un sistema organizado para almacenar, gestionar y acceder a datos de manera eficiente. Los Ingenieros en Sistemas aprenden a diseñar, crear y administrar bases de datos."
    },
    {
        "input": "¿Es necesario saber matemáticas para estudiar Ingeniería en Sistemas?",
        "output": "Sí, las matemáticas son fundamentales en Ingeniería en Sistemas, especialmente en áreas como algoritmos, estructuras de datos, programación y redes."
    },
    {
        "input": "¿Qué hace un Ingeniero en Sistemas en el área de redes?",
        "output": "En el área de redes, un Ingeniero en Sistemas se encarga de diseñar, implementar, administrar y asegurar las redes de comunicación de datos en una empresa u organización."
    },
    {
        "input": "¿Qué es la ciberseguridad?",
        "output": "La ciberseguridad es el campo de la tecnología que se ocupa de proteger los sistemas informáticos, redes y datos de ataques, accesos no autorizados y otras amenazas."
    },
    {
        "input": "¿Qué diferencia hay entre Ingeniería en Sistemas y Ciencias de la Computación?",
        "output": "La principal diferencia es que la Ingeniería en Sistemas se enfoca más en la implementación y gestión de sistemas tecnológicos, mientras que las Ciencias de la Computación están más centradas en la teoría de algoritmos y la investigación en computación."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "La programación orientada a objetos es un paradigma de programación que organiza el software en objetos, los cuales contienen datos y métodos para operar sobre esos datos."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es el software que gestiona el hardware y los recursos de una computadora, proporcionando una interfaz entre el usuario y el hardware, como Windows, Linux o macOS."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es un conjunto de instrucciones o reglas definidas para resolver un problema o realizar una tarea específica de manera eficiente."
    },
    {
        "input": "¿Un Ingeniero en Sistemas trabaja solo?",
        "output": "No, generalmente trabaja en equipos multidisciplinarios con otros ingenieros, diseñadores, analistas y personal de gestión para desarrollar soluciones tecnológicas complejas."
    },
    {
        "input": "¿Qué es el análisis de datos?",
        "output": "El análisis de datos es el proceso de inspeccionar, limpiar y modelar datos con el fin de descubrir información útil, llegar a conclusiones y apoyar la toma de decisiones."
    },
    {
        "input": "¿Qué es la inteligencia artificial?",
        "output": "La inteligencia artificial es el campo de la informática que desarrolla sistemas capaces de realizar tareas que normalmente requieren inteligencia humana, como el aprendizaje, el reconocimiento de patrones y la toma de decisiones."
    },
    {
        "input": "¿Qué es la programación web?",
        "output": "La programación web es el desarrollo de aplicaciones y sitios web, utilizando tecnologías como HTML, CSS, JavaScript y bases de datos para crear experiencias interactivas en línea."
    },
    {
        "input": "¿Qué es un sistema de gestión de bases de datos?",
        "output": "Un sistema de gestión de bases de datos (SGBD) es un software que permite crear, administrar y acceder a bases de datos, como MySQL, PostgreSQL o Microsoft SQL Server."
    },
    {
        "input": "¿Qué es el desarrollo ágil de software?",
        "output": "El desarrollo ágil es una metodología de desarrollo de software que promueve la colaboración constante, la flexibilidad y la entrega incremental de productos."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es un equipo o sistema informático que proporciona servicios, como alojamiento de sitios web o almacenamiento de archivos, a otros dispositivos o usuarios en una red."
    },
    {
        "input": "¿Un Ingeniero en Sistemas puede trabajar en el área de hardware?",
        "output": "Sí, aunque se enfoca más en software, un Ingeniero en Sistemas también puede trabajar con hardware, diseñando y administrando sistemas físicos que soporten aplicaciones y redes."
    },
    {
        "input": "¿Qué es el análisis de sistemas?",
        "output": "El análisis de sistemas es el proceso de estudiar los sistemas existentes, entender sus necesidades y diseñar soluciones informáticas para optimizar su funcionamiento."
    },
    {
        "input": "¿Qué es un modelo de datos?",
        "output": "Un modelo de datos es una representación estructurada de los datos, mostrando cómo se organizan, relacionan y se accede a ellos dentro de un sistema o base de datos."
    },
    {
        "input": "¿Qué es el Internet de las Cosas?",
        "output": "El Internet de las Cosas (IoT) es un concepto que conecta dispositivos físicos a internet para que puedan compartir y recibir datos, mejorando la interacción entre ellos."
    },
    {
        "input": "¿Qué es la programación en Python?",
        "output": "Python es un lenguaje de programación de alto nivel conocido por su sintaxis sencilla y su versatilidad, utilizado en diversas áreas como desarrollo web, ciencia de datos y automatización."
    },
    {
        "input": "¿Qué es el testing de software?",
        "output": "El testing de software es el proceso de verificar y validar que un software funcione correctamente, identificando errores y asegurando su calidad."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es el uso de recursos informáticos, como servidores y almacenamiento, proporcionados a través de internet, sin necesidad de infraestructura propia."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Un framework es un conjunto de herramientas y bibliotecas preconfiguradas que facilitan el desarrollo de aplicaciones, proporcionando una estructura estándar."
    },
    {
        "input": "¿Qué es un prototipo de software?",
        "output": "Un prototipo de software es una versión preliminar o modelo funcional de una aplicación que permite probar y evaluar sus funcionalidades antes del desarrollo final."
    },
    {
        "input": "¿Qué es un lenguaje de programación?",
        "output": "Un lenguaje de programación es un sistema de comunicación utilizado para escribir instrucciones que una computadora puede ejecutar, como Java, C++, o JavaScript."
    },
    {
        "input": "¿Qué es un análisis de requerimientos?",
        "output": "El análisis de requerimientos es el proceso de identificar, comprender y documentar las necesidades del cliente o usuario para desarrollar un sistema que las cumpla."
    },
    {
        "input": "¿Qué es un ciclo de vida de desarrollo de software?",
        "output": "El ciclo de vida de desarrollo de software es un conjunto de fases o etapas que guían el proceso de creación, implementación y mantenimiento de un software, como planificación, diseño, desarrollo, pruebas y mantenimiento."
    },
    {
        "input": "¿Qué es la virtualización?",
        "output": "La virtualización es el proceso de crear una versión virtual de un recurso físico, como servidores, sistemas operativos o almacenamiento, para mejorar la eficiencia y reducir costos."
    },
    {
        "input": "¿Qué es un chatbot?",
        "output": "Un chatbot es un programa de inteligencia artificial diseñado para simular conversaciones con usuarios, proporcionando respuestas automáticas a preguntas comunes."
    },
    {
        "input": "¿Un Ingeniero en Sistemas puede trabajar en el sector público?",
        "output": "Sí, un Ingeniero en Sistemas puede trabajar en el sector público, gestionando proyectos tecnológicos para instituciones gubernamentales, implementando sistemas de información y asegurando la infraestructura tecnológica."
    },
    {
        "input": "¿Qué es un software de gestión empresarial?",
        "output": "Un software de gestión empresarial es una aplicación que ayuda a las empresas a gestionar recursos, procesos y operaciones internas, como ERP (Enterprise Resource Planning) o CRM (Customer Relationship Management)."
    },
    {
        "input": "¿Qué es un análisis de datos?",
        "output": "El análisis de datos es el proceso de inspeccionar, limpiar y transformar datos con el fin de descubrir información útil y apoyar la toma de decisiones."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "Es un paradigma de programación basado en objetos, que contienen datos y métodos para operar sobre esos datos."
    },
    {
        "input": "¿Qué es un diagrama de flujo?",
        "output": "Es una representación gráfica de un algoritmo o proceso, usando símbolos para representar acciones y flechas para el flujo."
    },
    {
        "input": "¿Cómo puedo aprender a programar desde cero?",
        "output": "Empieza con un lenguaje fácil como Python, aprende los conceptos básicos y practica resolviendo problemas simples."
    },
    {
        "input": "¿Qué lenguajes de programación son mejores para inteligencia artificial?",
        "output": "Python es el más popular para IA, gracias a sus bibliotecas como TensorFlow y PyTorch."
    },
    {
        "input": "¿Cómo importo una biblioteca en Python?",
        "output": "Usa la palabra clave `import`. Por ejemplo: `import math`."
    },
    {
        "input": "¿Qué es un archivo JSON?",
        "output": "Es un formato para almacenar datos estructurados en pares clave-valor, usado comúnmente para intercambio de datos."
    },
    {
        "input": "¿Cómo convierto una lista en un string en Python?",
        "output": "Usa el método `.join()`. Ejemplo: `','.join(mi_lista)`."
    },
    {
        "input": "¿Qué diferencia hay entre una lista y un diccionario?",
        "output": "Una lista es una colección ordenada de elementos, mientras que un diccionario es una colección de pares clave-valor."
    },
    {
        "input": "¿Cómo instalo Django?",
        "output": "Ejecuta `pip install django` en la terminal."
    },
    {
        "input": "¿Cómo configuro un entorno virtual en Python?",
        "output": "Usa el comando `python -m venv nombre_del_entorno` y actívalo con `source nombre_del_entorno/bin/activate` en Linux/Mac o `nombre_del_entorno\\Scripts\\activate` en Windows."
    },
    {
        "input": "¿Qué es un entorno virtual?",
        "output": "Es una forma de aislar proyectos de Python, asegurando que cada uno tenga sus propias dependencias."
    },
    {
        "input": "¿Cómo uso pip para instalar varias bibliotecas?",
        "output": "Crea un archivo `requirements.txt` con los nombres de las bibliotecas y usa `pip install -r requirements.txt`."
    },
    {
        "input": "¿Puedes darme un ejemplo de recursión?",
        "output": "Claro, aquí tienes un ejemplo de factorial recursivo: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "¿Cómo hago un programa para contar palabras?",
        "output": "Usa `split()` para dividir el texto en palabras y `len()` para contar. Ejemplo: `len(texto.split())`."
    },
    {
        "input": "¿Puedes mostrarme cómo crear un gráfico de barras?",
        "output": "Claro: `import matplotlib.pyplot as plt; plt.bar(['A', 'B', 'C'], [10, 20, 30]); plt.show()`."
    },
    {
        "input": "¿Cómo conecto Python a una base de datos MySQL?",
        "output": "Usa la biblioteca `mysql-connector-python`. Ejemplo básico: `import mysql.connector` y establece la conexión con `mysql.connector.connect()`."
    },
    {
        "input": "¿Cómo imprimir un mensaje en Python?",
        "output": "Puedes imprimir un mensaje en Python utilizando la función 'print'. Ejemplo: print('Hola, mundo!')"
    },
    {
        "input": "¿Cómo declarar una variable en Python?",
        "output": "Para declarar una variable en Python, simplemente asignas un valor a un nombre. Ejemplo: x = 5"
    },
    {
        "input": "¿Cómo sumar dos números en Python?",
        "output": "Puedes sumar dos números con el operador '+' de la siguiente forma: resultado = 5 + 3"
    },
    {
        "input": "¿Cómo hacer una condición if en Python?",
        "output": "La sintaxis básica para un if en Python es: if condicion: \n\tcodigo. Ejemplo: if x > 0: print('Positivo')"
    },
    {
        "input": "¿Cómo usar un bucle for en Python?",
        "output": "Un bucle 'for' en Python se usa para iterar sobre una secuencia. Ejemplo: for i in range(5): print(i)"
    },
    {
        "input": "¿Cómo usar un bucle while en Python?",
        "output": "Un bucle 'while' ejecuta un bloque de código mientras se cumpla una condición. Ejemplo: while x < 5: x += 1"
    },
    {
        "input": "¿Cómo crear una función en Python?",
        "output": "Para crear una función en Python, usas 'def'. Ejemplo: def saludar(): print('Hola!')"
    },
    {
        "input": "¿Cómo pasar argumentos a una función en Python?",
        "output": "Puedes pasar argumentos a una función al definirla. Ejemplo: def saludar(nombre): print('Hola, ' + nombre)"
    },
    {
        "input": "¿Cómo retornar un valor en una función de Python?",
        "output": "Puedes retornar un valor usando la palabra clave 'return'. Ejemplo: def sumar(a, b): return a + b"
    },
    {
        "input": "¿Cómo concatenar cadenas de texto en Python?",
        "output": "Puedes concatenar cadenas usando el operador '+'. Ejemplo: saludo = 'Hola' + ' ' + 'Mundo'"
    },
    {
        "input": "¿Cómo convertir un número a cadena en Python?",
        "output": "Puedes convertir un número a cadena con la función 'str'. Ejemplo: str(5)"
    },
    {
        "input": "¿Cómo convertir una cadena a número en Python?",
        "output": "Puedes convertir una cadena a número usando 'int' o 'float'. Ejemplo: int('5') o float('5.5')"
    },
    {
        "input": "¿Cómo crear una lista en Python?",
        "output": "Puedes crear una lista con corchetes []. Ejemplo: mi_lista = [1, 2, 3]"
    },
    {
        "input": "¿Cómo acceder a un elemento de una lista en Python?",
        "output": "Accedes a un elemento de una lista usando su índice. Ejemplo: mi_lista[0]"
    },
    {
        "input": "¿Cómo agregar un elemento a una lista en Python?",
        "output": "Puedes agregar un elemento usando 'append'. Ejemplo: mi_lista.append(4)"
    },
    {
        "input": "¿Cómo eliminar un elemento de una lista en Python?",
        "output": "Puedes eliminar un elemento usando 'remove'. Ejemplo: mi_lista.remove(3)"
    },
    {
        "input": "¿Cómo verificar si un elemento está en una lista en Python?",
        "output": "Puedes usar el operador 'in'. Ejemplo: 3 in mi_lista"
    },
    {
        "input": "¿Cómo crear un diccionario en Python?",
        "output": "Puedes crear un diccionario con llaves {}. Ejemplo: mi_diccionario = {'clave': 'valor'}"
    },
    {
        "input": "¿Cómo acceder a un valor en un diccionario en Python?",
        "output": "Accedes a un valor usando la clave. Ejemplo: mi_diccionario['clave']"
    },
    {
        "input": "¿Cómo agregar un elemento a un diccionario en Python?",
        "output": "Puedes agregar un elemento asignando un valor a una nueva clave. Ejemplo: mi_diccionario['nueva_clave'] = 'nuevo valor'"
    },
    {
        "input": "¿Cómo eliminar un elemento de un diccionario en Python?",
        "output": "Puedes eliminar un elemento usando 'del'. Ejemplo: del mi_diccionario['clave']"
    },
    {
        "input": "¿Cómo comprobar si una clave existe en un diccionario en Python?",
        "output": "Puedes usar el operador 'in'. Ejemplo: 'clave' in mi_diccionario"
    },
    {
        "input": "¿Cómo hacer una lista de comprensión en Python?",
        "output": "Una lista de comprensión permite crear una lista de manera compacta. Ejemplo: cuadrados = [x**2 for x in range(5)]"
    },
    {
        "input": "¿Cómo leer un archivo en Python?",
        "output": "Puedes leer un archivo con la función 'open' y el método 'read'. Ejemplo: archivo = open('archivo.txt', 'r'); contenido = archivo.read()"
    },
    {
        "input": "¿Cómo escribir en un archivo en Python?",
        "output": "Puedes escribir en un archivo con el método 'write'. Ejemplo: archivo = open('archivo.txt', 'w'); archivo.write('Texto')"
    },
    {
        "input": "¿Cómo manejar excepciones en Python?",
        "output": "Puedes manejar excepciones con un bloque 'try-except'. Ejemplo: try: 1/0 except ZeroDivisionError: print('Error de división por cero')"
    },
    {
        "input": "¿Cómo generar un número aleatorio en Python?",
        "output": "Puedes generar un número aleatorio con la función 'randint' del módulo 'random'. Ejemplo: import random; num = random.randint(1, 10)"
    },
    {
        "input": "¿Cómo ordenar una lista en Python?",
        "output": "Puedes ordenar una lista usando el método 'sort'. Ejemplo: mi_lista.sort()"
    },
    {
        "input": "¿Cómo invertir una lista en Python?",
        "output": "Puedes invertir una lista usando el método 'reverse'. Ejemplo: mi_lista.reverse()"
    },
    {
        "input": "¿Cómo contar el número de veces que un elemento aparece en una lista en Python?",
        "output": "Puedes usar el método 'count'. Ejemplo: mi_lista.count(3)"
    },
    {
        "input": "¿Cómo obtener el índice de un elemento en una lista en Python?",
        "output": "Puedes usar el método 'index'. Ejemplo: mi_lista.index(3)"
    },
    {
        "input": "¿Cómo crear una tupla en Python?",
        "output": "Puedes crear una tupla con paréntesis (). Ejemplo: mi_tupla = (1, 2, 3)"
    },
    {
        "input": "¿Cómo acceder a un elemento de una tupla en Python?",
        "output": "Accedes a un elemento de una tupla usando su índice. Ejemplo: mi_tupla[0]"
    },
    {
        "input": "¿Cómo concatenar tuplas en Python?",
        "output": "Puedes concatenar tuplas usando el operador '+'. Ejemplo: mi_tupla1 + mi_tupla2"
    },
    {
        "input": "¿Cómo convertir una tupla a lista en Python?",
        "output": "Puedes convertir una tupla a lista usando 'list'. Ejemplo: lista = list(mi_tupla)"
    },
    {
        "input": "¿Qué es un set en Python?",
        "output": "Un set en Python es una colección no ordenada de elementos únicos. Se crea con llaves {}. Ejemplo: mi_set = {1, 2, 3}"
    },
    {
        "input": "¿Cómo agregar un elemento a un set en Python?",
        "output": "Puedes agregar un elemento usando 'add'. Ejemplo: mi_set.add(4)"
    },
    {
        "input": "¿Cómo eliminar un elemento de un set en Python?",
        "output": "Puedes eliminar un elemento usando 'remove'. Ejemplo: mi_set.remove(3)"
    },
    {
        "input": "¿Cómo verificar si un elemento está en un set en Python?",
        "output": "Puedes usar el operador 'in'. Ejemplo: 3 in mi_set"
    },
    {
        "input": "¿Cómo crear una función recursiva en Python?",
        "output": "Una función recursiva es una función que se llama a sí misma. Ejemplo: def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"
    },
    {
        "input": "¿Cómo generar un número aleatorio flotante en Python?",
        "output": "Puedes generar un número aleatorio flotante con 'uniform' del módulo 'random'. Ejemplo: random.uniform(1.0, 10.0)"
    },
    {
        "input": "¿Cómo comprobar si una lista está vacía en Python?",
        "output": "Puedes comprobar si una lista está vacía con 'not'. Ejemplo: if not mi_lista: print('Lista vacía')"
    },
    {
        "input": "¿Cómo combinar dos listas en Python?",
        "output": "Puedes combinar dos listas con el operador '+'. Ejemplo: lista_combinada = lista1 + lista2"
    },
    {
        "input": "¿Cómo crear un conjunto de claves en un diccionario en Python?",
        "output": "Puedes obtener las claves de un diccionario con el método 'keys'. Ejemplo: diccionario.keys()"
    },
    {
        "input": "¿Cómo obtener los valores de un diccionario en Python?",
        "output": "Puedes obtener los valores de un diccionario con el método 'values'. Ejemplo: diccionario.values()"
    },
    {
        "input": "¿Cómo eliminar todos los elementos de un diccionario en Python?",
        "output": "Puedes eliminar todos los elementos usando el método 'clear'. Ejemplo: diccionario.clear()"
    },
    {
        "input": "¿Cómo verificar si una lista contiene todos los elementos de otra lista en Python?",
        "output": "Puedes usar el operador 'all' con una comprensión de lista. Ejemplo: all(elem in lista2 for elem in lista1)"
    },
    {
        "input": "¿Cómo encontrar el valor máximo en una lista en Python?",
        "output": "Puedes encontrar el valor máximo usando 'max'. Ejemplo: max(mi_lista)"
    },
    {
        "input": "¿Cómo encontrar el valor mínimo en una lista en Python?",
        "output": "Puedes encontrar el valor mínimo usando 'min'. Ejemplo: min(mi_lista)"
    },
    {
        "input": "¿Cómo hago una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola, mundo')`."
    },
    {
        "input": "¿Cómo se ejecuta un programa de Python?",
        "output": "Usa el comando `python nombre_del_archivo.py` en la terminal."
    },
    {
        "input": "¿Qué es una excepción en Python?",
        "output": "Es un error durante la ejecución del programa que puede ser manejado usando bloques `try-except`."
    },
    {
        "input": "¿Cómo manejo varias excepciones en Python?",
        "output": "Usa múltiples bloques `except`. Ejemplo: `try: ... except ValueError: ... except TypeError: ...`."
    },
    {
        "input": "¿Cómo leo un archivo en Python?",
        "output": "Usa el método `open()` en modo lectura. Ejemplo: `with open('archivo.txt', 'r') as archivo: contenido = archivo.read()`."
    },
    {
        "input": "¿Cómo escribo un archivo en Python?",
        "output": "Usa el modo escritura (`w`) o añadir (`a`). Ejemplo: `with open('archivo.txt', 'w') as archivo: archivo.write('Texto')`."
    },
    {
        "input": "¿Qué son las listas por comprensión en Python?",
        "output": "Es una forma compacta de crear listas. Ejemplo: `squares = [x**2 for x in range(10)]`."
    },
    {
        "input": "¿Cómo hago un bucle for en Python?",
        "output": "Usa la palabra clave `for`. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Es un archivo que contiene definiciones y funciones reutilizables. Puedes importarlo con `import nombre_modulo`."
    },
    {
        "input": "¿Cómo instalo una biblioteca en Python?",
        "output": "Usa el comando `pip install nombre_biblioteca`. Por ejemplo: `pip install requests`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista en Python?",
        "output": "Usa `remove()` o `del`. Ejemplo: `mi_lista.remove('elemento')` o `del mi_lista[índice]`."
    },
    {
        "input": "¿Cómo encuentro el tamaño de una lista en Python?",
        "output": "Usa la función `len()`. Ejemplo: `len(mi_lista)`."
    },
    {
        "input": "¿Cómo convierto un string a entero en Python?",
        "output": "Usa la función `int()`. Ejemplo: `numero = int('123')`."
    },
    {
        "input": "¿Cómo convierto un entero a string en Python?",
        "output": "Usa la función `str()`. Ejemplo: `texto = str(123)`."
    },
    {
        "input": "¿Qué es un conjunto en Python?",
        "output": "Es una colección no ordenada de elementos únicos. Ejemplo: `mi_conjunto = {1, 2, 3}`."
    },
    {
        "input": "¿Cómo elimino duplicados de una lista en Python?",
        "output": "Convierte la lista a un conjunto. Ejemplo: `sin_duplicados = list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo ordeno una lista en Python?",
        "output": "Usa el método `sort()` o la función `sorted()`. Ejemplo: `mi_lista.sort()` o `sorted(mi_lista)`."
    },
    {
        "input": "¿Cómo invierto una lista en Python?",
        "output": "Usa el método `reverse()` o slicing. Ejemplo: `mi_lista.reverse()` o `mi_lista[::-1]`."
    },
    {
        "input": "¿Cómo uso argumentos en una función en Python?",
        "output": "Decláralos dentro de los paréntesis. Ejemplo: `def sumar(a, b): return a + b`."
    },
    {
        "input": "¿Qué es un argumento por defecto en Python?",
        "output": "Es un valor predeterminado para un argumento. Ejemplo: `def saludar(nombre='Mundo'): print('Hola,', nombre)`."
    },
    {
        "input": "¿Qué es una función lambda en Python?",
        "output": "Es una función anónima de una sola línea. Ejemplo: `lambda x: x**2`."
    },
    {
        "input": "¿Cómo filtro una lista en Python?",
        "output": "Usa `filter()` con una función. Ejemplo: `list(filter(lambda x: x > 0, mi_lista))`."
    },
    {
        "input": "¿Cómo uso map en Python?",
        "output": "Aplica una función a todos los elementos de una lista. Ejemplo: `list(map(lambda x: x**2, mi_lista))`."
    },
    {
        "input": "¿Qué es una tupla en Python?",
        "output": "Es una colección inmutable de elementos ordenados. Ejemplo: `mi_tupla = (1, 2, 3)`."
    },
    {
        "input": "¿Cómo creo una clase en Python?",
        "output": "Usa la palabra clave `class`. Ejemplo: `class Perro: def __init__(self, nombre): self.nombre = nombre`."
    },
    {
        "input": "¿Qué es la herencia en Python?",
        "output": "Es un mecanismo donde una clase puede usar atributos y métodos de otra. Ejemplo: `class Hijo(Padre): ...`."
    },
    {
        "input": "¿Cómo genero números aleatorios en Python?",
        "output": "Usa la biblioteca `random`. Ejemplo: `import random; random.randint(1, 10)`."
    },
    {
        "input": "¿Cómo convierto un string en una lista?",
        "output": "Usa el método `split()`. Ejemplo: `'hola mundo'.split()`."
    },
    {
        "input": "¿Cómo combino dos listas en Python?",
        "output": "Usa el operador `+` o `extend()`. Ejemplo: `lista1 + lista2` o `lista1.extend(lista2)`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}` con pares clave-valor. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo accedo a un valor en un diccionario?",
        "output": "Usa la clave entre corchetes. Ejemplo: `mi_diccionario['clave']`."
    },
    {
        "input": "¿Cómo agrego un elemento a un diccionario?",
        "output": "Usa una nueva clave. Ejemplo: `mi_diccionario['nueva_clave'] = 'valor'`."
    },
    {
        "input": "¿Qué es Python Flask?",
        "output": "Flask es un microframework para desarrollar aplicaciones web con Python."
    },
    {
        "input": "¿Qué es una API REST?",
        "output": "Es un servicio web que permite la comunicación entre aplicaciones usando HTTP y principios RESTful."
    },
    {
        "input": "¿Cómo creo una API con Flask?",
        "output": "Usa Flask para definir rutas. Ejemplo: `from flask import Flask; app = Flask(__name__); @app.route('/') def home(): return 'Hola, mundo'`."
    },
    {
        "input": "¿Qué es NumPy en Python?",
        "output": "NumPy es una biblioteca para cálculos matemáticos y manejo de arrays."
    },
    {
        "input": "¿Cómo creo un array en NumPy?",
        "output": "Usa `numpy.array()`. Ejemplo: `import numpy as np; mi_array = np.array([1, 2, 3])`."
    },
    {
        "input": "¿Cómo cargo un archivo CSV en Pandas?",
        "output": "Usa `pandas.read_csv()`. Ejemplo: `import pandas as pd; df = pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Cómo selecciono columnas en Pandas?",
        "output": "Accede con corchetes. Ejemplo: `df['columna']` o `df[['columna1', 'columna2']]`."
    },
    {
        "input": "¿Qué es el Zen de Python?",
        "output": "Es una serie de principios para escribir código Python, accesibles con `import this`."
    },
    {
        "input": "¿Cómo puedo escribir un programa en Python que calcule el factorial de un número?",
        "output": "Puedes escribir una función recursiva para calcular el factorial de un número. Ejemplo: def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"
    },
    {
        "input": "¿Cómo puedo hacer una búsqueda binaria en Python?",
        "output": "Puedes implementar una búsqueda binaria recursiva o iterativa. Ejemplo: def busqueda_binaria(arr, x): low, high = 0, len(arr) - 1; while low <= high: mid = (low + high) // 2; if arr[mid] == x: return mid; elif arr[mid] < x: low = mid + 1; else: high = mid - 1; return -1"
    },
    {
        "input": "¿Cómo puedo crear una lista de diccionarios en Python?",
        "output": "Puedes crear una lista de diccionarios como cualquier otra lista en Python. Ejemplo: lista = [{'nombre': 'Juan', 'edad': 30}, {'nombre': 'Ana', 'edad': 25}]"
    },
    {
        "input": "¿Cómo puedo escribir una función que convierta una cadena a mayúsculas en Python?",
        "output": "Puedes usar el método 'upper' para convertir una cadena a mayúsculas. Ejemplo: def convertir_mayusculas(texto): return texto.upper()"
    },
    {
        "input": "¿Cómo puedo crear una función que cuente la cantidad de veces que una palabra aparece en una cadena en Python?",
        "output": "Puedes usar el método 'count' para contar las ocurrencias. Ejemplo: def contar_palabra(texto, palabra): return texto.count(palabra)"
    },
    {
        "input": "¿Cómo puedo ordenar una lista de tuplas por el segundo valor de cada tupla en Python?",
        "output": "Puedes usar la función 'sorted' con un parámetro 'key' que ordene por el segundo valor. Ejemplo: sorted(lista_tuplas, key=lambda x: x[1])"
    },
    {
        "input": "¿Cómo puedo generar una secuencia de Fibonacci en Python?",
        "output": "Puedes generar la secuencia de Fibonacci de manera iterativa o recursiva. Ejemplo: def fibonacci(n): a, b = 0, 1; for _ in range(n): yield a; a, b = b, a"
    },
    {
        "input": "¿Cómo puedo eliminar los elementos duplicados de una lista en Python?",
        "output": "Puedes eliminar los duplicados convirtiendo la lista a un set y luego de nuevo a lista. Ejemplo: lista_sin_duplicados = list(set(mi_lista))"
    },
    {
        "input": "¿Cómo puedo verificar si un número es primo en Python?",
        "output": "Puedes verificar si un número es primo comprobando si tiene divisores entre 2 y la raíz cuadrada de ese número. Ejemplo: def es_primo(n): for i in range(2, int(n**0.5) + 1): if n % i == 0: return False; return True"
    },
    {
        "input": "¿Cómo puedo calcular el máximo común divisor (MCD) de dos números en Python?",
        "output": "Puedes usar el algoritmo de Euclides. Ejemplo: def mcd(a, b): while b: a, b = b, a % b; return a"
    },
    {
        "input": "¿Cómo puedo contar las ocurrencias de cada palabra en una lista de palabras en Python?",
        "output": "Puedes usar un diccionario o el módulo 'collections.Counter'. Ejemplo: from collections import Counter; contador = Counter(lista_palabras)"
    },
    {
        "input": "¿Cómo puedo escribir un programa que calcule la suma de los números de una lista en Python?",
        "output": "Puedes usar la función 'sum'. Ejemplo: def suma_lista(lista): return sum(lista)"
    },
    {
        "input": "¿Cómo puedo leer un archivo CSV en Python?",
        "output": "Puedes usar el módulo 'csv'. Ejemplo: import csv; with open('archivo.csv', mode='r') as archivo: lector = csv.reader(archivo); for fila in lector: print(fila)"
    },
    {
        "input": "¿Cómo puedo convertir un diccionario a un objeto JSON en Python?",
        "output": "Puedes usar el módulo 'json'. Ejemplo: import json; json_objeto = json.dumps(diccionario)"
    },
    {
        "input": "¿Cómo puedo hacer que una función acepte un número variable de argumentos en Python?",
        "output": "Puedes usar '*' para aceptar un número variable de argumentos. Ejemplo: def mi_funcion(*args): for arg in args: print(arg)"
    },
    {
        "input": "¿Cómo puedo escribir un programa que verifique si una cadena es un palíndromo en Python?",
        "output": "Puedes verificar si una cadena es un palíndromo comparándola con su reverso. Ejemplo: def es_palindromo(texto): return texto == texto[::-1]"
    },
    {
        "input": "¿Cómo puedo leer una entrada de usuario en Python?",
        "output": "Puedes usar la función 'input' para leer datos del usuario. Ejemplo: nombre = input('¿Cómo te llamas? ')"
    },
    {
        "input": "¿Cómo puedo crear un archivo en Python?",
        "output": "Puedes usar la función 'open' con el modo 'w'. Ejemplo: with open('archivo.txt', 'w') as archivo: archivo.write('Hola Mundo')"
    },
    {
        "input": "¿Cómo puedo hacer una búsqueda lineal en Python?",
        "output": "Puedes recorrer la lista y comparar cada elemento con el valor buscado. Ejemplo: def busqueda_lineal(lista, valor): for i, val in enumerate(lista): if val == valor: return i; return -1"
    },
    {
        "input": "¿Cómo puedo crear una clase en Python que maneje una lista de estudiantes?",
        "output": "Puedes crear una clase que contenga una lista de estudiantes como atributo y métodos para agregar y listar estudiantes. Ejemplo: class Estudiantes: def __init__(self): self.lista = [] def agregar(self, estudiante): self.lista.append(estudiante) def listar(self): return self.lista"
    },
    {
        "input": "¿Cómo puedo escribir un programa que ordene una lista de cadenas por su longitud en Python?",
        "output": "Puedes usar 'sorted' con una función 'key' que mida la longitud de las cadenas. Ejemplo: lista = sorted(lista_cadenas, key=len)"
    },
    {
        "input": "¿Cómo puedo crear un diccionario a partir de dos listas en Python?",
        "output": "Puedes usar la función 'zip' para combinar las listas y luego convertirla a un diccionario. Ejemplo: diccionario = dict(zip(lista_claves, lista_valores))"
    },
    {
        "input": "¿Cómo puedo crear una función que reciba un número variable de argumentos de palabra clave en Python?",
        "output": "Puedes usar '**kwargs' para aceptar un número variable de argumentos con nombre. Ejemplo: def mi_funcion(**kwargs): for clave, valor in kwargs.items(): print(clave, valor)"
    },
    {
        "input": "¿Cómo puedo encontrar el índice de un valor en una lista en Python?",
        "output": "Puedes usar el método 'index'. Ejemplo: indice = mi_lista.index(valor)"
    },
    {
        "input": "¿Cómo puedo generar una lista de números de una secuencia específica en Python?",
        "output": "Puedes usar 'range'. Ejemplo: lista = list(range(1, 11))"
    },
    {
        "input": "¿Cómo puedo escribir un programa que elimine elementos repetidos de una lista en Python?",
        "output": "Puedes usar 'set' para eliminar duplicados y luego convertir de nuevo a lista. Ejemplo: lista_sin_repetidos = list(set(mi_lista))"
    },
    {
        "input": "¿Cómo puedo comprobar si un número está dentro de un rango en Python?",
        "output": "Puedes usar el operador 'in' con 'range'. Ejemplo: if x in range(1, 10): print('Está en el rango')"
    },
    {
        "input": "¿Cómo puedo escribir una función que calcule la potencia de un número en Python?",
        "output": "Puedes usar el operador '**' para calcular la potencia. Ejemplo: def potencia(base, exponente): return base ** exponente"
    },
    {
        "input": "¿Cómo puedo dividir una lista en partes más pequeñas en Python?",
        "output": "Puedes usar un enfoque de 'slicing' para dividir una lista. Ejemplo: partes = [mi_lista[i:i+3] for i in range(0, len(mi_lista), 3)]"
    },
    {
        "input": "¿Cómo puedo contar cuántas veces aparece un elemento en un diccionario en Python?",
        "output": "Puedes usar el método 'values' y 'count'. Ejemplo: mi_diccionario.values().count(valor)"
    },
    {
        "input": "¿Cómo puedo combinar varias listas en una sola en Python?",
        "output": "Puedes usar el operador '+' o el método 'extend'. Ejemplo: lista_combinada = lista1 + lista2 o lista1.extend(lista2)"
    },
    {
        "input": "¿Cómo puedo invertir una lista en Python?",
        "output": "Puedes usar el método 'reverse' o el slicing. Ejemplo: mi_lista.reverse() o mi_lista[::-1]"
    },
    {
        "input": "¿Cómo puedo crear un programa que verifique si una lista está ordenada en Python?",
        "output": "Puedes comparar la lista con su versión ordenada. Ejemplo: if mi_lista == sorted(mi_lista): print('Está ordenada')"
    },
    {
        "input": "¿Cómo puedo crear una función que devuelva el primer elemento no nulo de una lista en Python?",
        "output": "Puedes usar un ciclo 'for' para recorrer la lista. Ejemplo: def primer_no_nulo(lista): for elemento in lista: if elemento is not None: return elemento"
    },
    {
        "input": "¿Cómo puedo generar un número aleatorio en un rango en Python?",
        "output": "Puedes usar 'randint' del módulo 'random'. Ejemplo: import random; num = random.randint(1, 100)"
    },
    {
        "input": "¿Cómo puedo contar los caracteres en una cadena en Python?",
        "output": "Puedes usar la función 'len'. Ejemplo: len(cadena)"
    },
    {
        "input": "¿Cómo puedo convertir una lista de cadenas a minúsculas en Python?",
        "output": "Puedes usar una comprensión de lista con 'lower'. Ejemplo: lista_minusc = [x.lower() for x in lista_cadenas]"
    },
    {
        "input": "¿Cómo puedo ordenar un diccionario por sus valores en Python?",
        "output": "Puedes usar la función 'sorted' con un 'key' que se base en los valores del diccionario. Ejemplo: sorted(diccionario.items(), key=lambda x: x[1])"
    },
    {
        "input": "¿Cómo puedo obtener los elementos comunes entre dos listas en Python?",
        "output": "Puedes usar la operación de intersección de sets. Ejemplo: comunes = list(set(lista1) & set(lista2))"
    },
    {
        "input": "¿Cómo puedo combinar dos diccionarios en uno en Python?",
        "output": "Puedes usar el método 'update' o el operador '**'. Ejemplo: diccionario1.update(diccionario2) o diccionario_combinado = {**diccionario1, **diccionario2}"
    },
    {
        "input": "¿Cómo puedo hacer una validación de correo electrónico en Python?",
        "output": "Puedes usar expresiones regulares con el módulo 're'. Ejemplo: import re; if re.match(r'[^@]+@[^@]+\\.[^@]+', correo): print('Válido')"
    },
    {
        "input": "¿Cómo puedo concatenar múltiples cadenas en Python?",
        "output": "Puedes usar el operador '+' o el método 'join'. Ejemplo: cadena_concatenada = ''.join(lista_cadenas)"
    },
    {
        "input": "¿Cómo puedo eliminar un elemento de un diccionario en Python?",
        "output": "Puedes usar el método 'del'. Ejemplo: del diccionario['clave']"
    },
    {
        "input": "¿Cómo puedo crear un objeto de una clase en Python?",
        "output": "Puedes crear un objeto llamando a la clase como si fuera una función. Ejemplo: persona = Persona('Juan', 30)"
    },
    {
        "input": "¿Cómo puedo saber si una lista está vacía en Python?",
        "output": "Puedes verificar si la longitud de la lista es cero. Ejemplo: if not lista: print('La lista está vacía')"
    },
    {
        "input": "¿Qué hace el método split()?",
        "output": "Divide un string en una lista de partes según un separador. Por ejemplo: `'hola mundo'.split()` devuelve `['hola', 'mundo']`."
    },
    {
        "input": "¿Para qué sirve el método join() en Python?",
        "output": "Combina elementos de una lista en un string usando un separador. Ejemplo: `','.join(['a', 'b', 'c'])` devuelve `'a,b,c'`."
    },
    {
        "input": "¿Cómo funciona el método reverse() en una lista?",
        "output": "Invierte los elementos de la lista en su lugar. Ejemplo: `mi_lista.reverse()`."
    },
    {
        "input": "¿Qué hace el método len()?",
        "output": "Devuelve la cantidad de elementos en un objeto como una lista, string o diccionario. Ejemplo: `len([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Qué hace el método sort() en una lista?",
        "output": "Ordena los elementos de la lista en su lugar, de menor a mayor por defecto. Ejemplo: `mi_lista.sort()`."
    },
    {
        "input": "¿Cómo funciona el comando pip install?",
        "output": "Instala paquetes de Python desde el repositorio PyPI. Ejemplo: `pip install requests`."
    },
    {
        "input": "¿Qué hace la función int() en Python?",
        "output": "Convierte un string o número flotante a un entero. Ejemplo: `int('10')` devuelve `10`."
    },
    {
        "input": "¿Cómo funciona la función print() en Python?",
        "output": "Muestra información en la consola. Ejemplo: `print('Hola, mundo')` imprime `Hola, mundo`."
    },
    {
        "input": "¿Qué hace la función input() en Python?",
        "output": "Recibe datos del usuario desde la consola como un string. Ejemplo: `nombre = input('¿Cómo te llamas? ')`."
    },
    {
        "input": "¿Para qué sirve la función open() en Python?",
        "output": "Abre archivos para lectura, escritura o añadir contenido. Ejemplo: `open('archivo.txt', 'r')`."
    },
    {
        "input": "¿Qué hace la función sorted()?",
        "output": "Devuelve una nueva lista ordenada sin modificar la original. Ejemplo: `sorted([3, 1, 2])` devuelve `[1, 2, 3]`."
    },
    {
        "input": "¿Cómo funciona la declaración def en Python?",
        "output": "Define una función. Ejemplo: `def saludar(): print('Hola')` crea una función llamada `saludar`."
    },
    {
        "input": "¿Qué hace el operador + con listas en Python?",
        "output": "Combina dos listas en una nueva. Ejemplo: `[1, 2] + [3, 4]` devuelve `[1, 2, 3, 4]`."
    },
    {
        "input": "¿Qué hace la palabra clave class en Python?",
        "output": "Crea una nueva clase para definir objetos. Ejemplo: `class Perro: ...`."
    },
    {
        "input": "¿Cómo funciona el método append() en listas?",
        "output": "Añade un elemento al final de una lista. Ejemplo: `mi_lista.append(4)`."
    },
    {
        "input": "¿Para qué sirve el método remove() en listas?",
        "output": "Elimina la primera ocurrencia de un elemento en la lista. Ejemplo: `mi_lista.remove(3)`."
    },
    {
        "input": "¿Qué hace el operador in en Python?",
        "output": "Comprueba si un elemento está presente en una colección. Ejemplo: `3 in [1, 2, 3]` devuelve `True`."
    },
    {
        "input": "¿Qué hace el método keys() en un diccionario?",
        "output": "Devuelve una vista de todas las claves del diccionario. Ejemplo: `mi_diccionario.keys()`."
    },
    {
        "input": "¿Qué hace el método values() en un diccionario?",
        "output": "Devuelve una vista de todos los valores en el diccionario. Ejemplo: `mi_diccionario.values()`."
    },
    {
        "input": "¿Qué hace la biblioteca random en Python?",
        "output": "Genera números aleatorios y selecciona elementos al azar. Ejemplo: `random.randint(1, 10)` genera un número entre 1 y 10."
    },
    {
        "input": "¿Qué hace la función lambda?",
        "output": "Crea una función anónima de una línea. Ejemplo: `lambda x: x + 1` es una función que suma 1 a `x`."
    },
    {
        "input": "¿Qué hace la función filter() en Python?",
        "output": "Filtra elementos de una colección según una condición. Ejemplo: `filter(lambda x: x > 0, [-1, 0, 1])` devuelve `[1]`."
    },
    {
        "input": "¿Qué hace la función map() en Python?",
        "output": "Aplica una función a cada elemento de una colección. Ejemplo: `map(lambda x: x**2, [1, 2, 3])` devuelve `[1, 4, 9]`."
    },
    {
        "input": "¿Qué hace la función zip()?",
        "output": "Combina elementos de dos o más iterables en pares. Ejemplo: `zip([1, 2], ['a', 'b'])` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué hace pandas.read_csv()?",
        "output": "Carga datos de un archivo CSV en un DataFrame. Ejemplo: `pd.read_csv('datos.csv')`."
    },
    {
        "input": "¿Cómo funciona numpy.array()?",
        "output": "Crea un array de NumPy. Ejemplo: `np.array([1, 2, 3])`."
    },
    {
        "input": "¿Qué hace plt.plot() en Matplotlib?",
        "output": "Crea un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "¿Qué hace el comando django-admin startproject?",
        "output": "Crea la estructura inicial para un proyecto de Django."
    },
    {
        "input": "¿Qué hace el método add() en un conjunto?",
        "output": "Añade un elemento al conjunto. Ejemplo: `mi_conjunto.add(4)`."
    },
    {
        "input": "¿Qué hace el método pop() en un conjunto?",
        "output": "Elimina y devuelve un elemento arbitrario del conjunto. Ejemplo: `mi_conjunto.pop()`."
    },
    {
        "input": "¿Qué hace el decorador @staticmethod?",
        "output": "Define un método estático que no necesita acceso a la instancia de la clase."
    },
    {
        "input": "¿Qué hace el comando import?",
        "output": "Carga módulos o bibliotecas en tu programa. Ejemplo: `import math`."
    },
    {
        "input": "¿Qué hace math.sqrt()?",
        "output": "Calcula la raíz cuadrada de un número. Ejemplo: `math.sqrt(16)` devuelve `4.0`."
    },
    {
        "input": "¿Cómo funciona try-except en Python?",
        "output": "Maneja errores durante la ejecución. Ejemplo: `try: x = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué hace la función enumerate() en Python?",
        "output": "Devuelve un iterable con índices y elementos. Ejemplo: `enumerate(['a', 'b'])` devuelve `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "¿Qué hace la función range() en Python?",
        "output": "Crea un iterable que genera una secuencia de números. Ejemplo: `range(5)` genera `0, 1, 2, 3, 4`."
    },
    {
        "input": "¿Cómo funciona el operador not en Python?",
        "output": "Niega el valor booleano de una expresión. Ejemplo: `not True` devuelve `False`."
    },
    {
        "input": "¿Qué hace la función zip()?",
        "output": "Combina elementos de iterables en tuplas. Ejemplo: `zip([1, 2], ['a', 'b'])` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué hace el operador == en Python?",
        "output": "Compara si dos valores son iguales. Ejemplo: `3 == 3` devuelve `True`."
    },
    {
        "input": "¿Qué hace el operador // en Python?",
        "output": "Realiza una división entera, descartando la parte decimal. Ejemplo: `7 // 2` devuelve `3`."
    },
    {
        "input": "¿Qué hace el operador ** en Python?",
        "output": "Calcula la potencia de un número. Ejemplo: `2 ** 3` devuelve `8`."
    },
    {
        "input": "¿Cómo funciona el operador in en Python?",
        "output": "Verifica si un elemento está en una colección. Ejemplo: `'a' in ['a', 'b', 'c']` devuelve `True`."
    },
    {
        "input": "¿Qué hace pandas.DataFrame()?",
        "output": "Crea un DataFrame a partir de datos como listas o diccionarios. Ejemplo: `pd.DataFrame({'A': [1, 2], 'B': [3, 4]})`."
    },
    {
        "input": "¿Qué hace plt.bar() en Matplotlib?",
        "output": "Crea un gráfico de barras. Ejemplo: `plt.bar(['A', 'B'], [10, 20])`."
    },
    {
        "input": "¿Qué hace el método iloc en Pandas?",
        "output": "Selecciona filas y columnas por índices. Ejemplo: `df.iloc[0, 1]` selecciona el elemento en la primera fila y segunda columna."
    },
    {
        "input": "¿Qué hace el método loc en Pandas?",
        "output": "Selecciona filas y columnas por etiquetas. Ejemplo: `df.loc[0, 'columna']`."
    },
    {
        "input": "¿Qué hace numpy.mean()?",
        "output": "Calcula el promedio de un array. Ejemplo: `np.mean([1, 2, 3])` devuelve `2.0`."
    },
    {
        "input": "¿Qué hace numpy.median()?",
        "output": "Calcula la mediana de un array. Ejemplo: `np.median([1, 2, 3, 4])` devuelve `2.5`."
    },
    {
        "input": "¿Qué hace numpy.std()?",
        "output": "Calcula la desviación estándar de un array. Ejemplo: `np.std([1, 2, 3])` devuelve `0.816`."
    },
    {
        "input": "¿Cómo funciona matplotlib.pyplot.show()?",
        "output": "Muestra el gráfico generado en una ventana emergente. Ejemplo: `plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "¿Qué hace el decorador @classmethod?",
        "output": "Define un método que recibe la clase como primer argumento en lugar de la instancia. Ejemplo: `@classmethod def mi_metodo(cls): ...`."
    },
    {
        "input": "¿Qué hace el decorador @property?",
        "output": "Convierte un método en un atributo de solo lectura. Ejemplo: `@property def nombre(self): return self._nombre`."
    },
    {
        "input": "¿Qué hace la función isinstance()?",
        "output": "Verifica si un objeto pertenece a una clase o subclase. Ejemplo: `isinstance(3, int)` devuelve `True`."
    },
    {
        "input": "¿Cómo funciona la función hasattr()?",
        "output": "Comprueba si un objeto tiene un atributo específico. Ejemplo: `hasattr(obj, 'atributo')`."
    },
    {
        "input": "¿Qué hace la función getattr()?",
        "output": "Obtiene el valor de un atributo de un objeto. Ejemplo: `getattr(obj, 'atributo')`."
    },
    {
        "input": "¿Cómo funciona la función setattr()?",
        "output": "Asigna un valor a un atributo de un objeto. Ejemplo: `setattr(obj, 'atributo', valor)`."
    },
    {
        "input": "¿Qué hace dict.get()?",
        "output": "Devuelve el valor de una clave o un valor predeterminado si la clave no existe. Ejemplo: `mi_diccionario.get('clave', 'valor_predeterminado')`."
    },
    {
        "input": "¿Qué hace la palabra clave pass en Python?",
        "output": "Indica un bloque de código vacío. Ejemplo: `def funcion_vacia(): pass`."
    },
    {
        "input": "¿Qué hace la palabra clave yield en Python?",
        "output": "Crea un generador que devuelve valores uno a uno en lugar de todos a la vez. Ejemplo: `yield x`."
    },
    {
        "input": "¿Qué hace el método popitem() en un diccionario?",
        "output": "Elimina y devuelve un par clave-valor arbitrario del diccionario. Ejemplo: `mi_diccionario.popitem()`."
    },
    {
        "input": "¿Qué hace el método clear() en un diccionario?",
        "output": "Elimina todos los elementos del diccionario. Ejemplo: `mi_diccionario.clear()`."
    },
    {
        "input": "¿Cómo funciona la palabra clave with en Python?",
        "output": "Maneja automáticamente recursos como archivos. Ejemplo: `with open('archivo.txt') as archivo:`."
    },
    {
        "input": "¿Qué hace el método isdigit() en un string?",
        "output": "Verifica si todos los caracteres del string son dígitos. Ejemplo: `'123'.isdigit()` devuelve `True`."
    },
    {
        "input": "¿Qué hace el método upper() en un string?",
        "output": "Convierte todos los caracteres del string a mayúsculas. Ejemplo: `'hola'.upper()` devuelve `'HOLA'`."
    },
    {
        "input": "¿Qué hace el método lower() en un string?",
        "output": "Convierte todos los caracteres del string a minúsculas. Ejemplo: `'HOLA'.lower()` devuelve `'hola'`."
    },
    {
        "input": "¿Qué hace el método replace() en un string?",
        "output": "Reemplaza una subcadena por otra. Ejemplo: `'hola mundo'.replace('mundo', 'Python')` devuelve `'hola Python'`."
    },
    {
        "input": "¿Qué hace la función eval() en Python?",
        "output": "Evalúa una expresión Python en forma de string. Ejemplo: `eval('2 + 3')` devuelve `5`."
    },
    {
        "input": "¿Qué hace la función exec() en Python?",
        "output": "Ejecuta código Python en forma de string. Ejemplo: `exec('print(1 + 2)')` imprime `3`."
    },
    {
        "input": "¿Qué hace el operador is en Python?",
        "output": "Comprueba si dos referencias apuntan al mismo objeto en memoria. Ejemplo: `a is b`."
    },
    {
        "input": "¿Qué hace el operador and en Python?",
        "output": "Evalúa dos expresiones y devuelve `True` si ambas son verdaderas. Ejemplo: `True and False` devuelve `False`."
    },
    {
        "input": "¿Cómo funciona la palabra clave assert?",
        "output": "Verifica una condición y lanza una excepción si no se cumple. Ejemplo: `assert 2 + 2 == 4`."
    },
    {
        "input": "¿Qué hace la función all() en Python?",
        "output": "Devuelve `True` si todos los elementos de un iterable son verdaderos. Ejemplo: `all([True, True, False])` devuelve `False`."
    },
    {
        "input": "¿Qué hace la función any() en Python?",
        "output": "Devuelve `True` si al menos un elemento de un iterable es verdadero. Ejemplo: `any([False, False, True])` devuelve `True`."
    },
    {
        "input": "¿Qué hace la función max() en Python?",
        "output": "Devuelve el elemento máximo de un iterable. Ejemplo: `max([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Qué hace la función min() en Python?",
        "output": "Devuelve el elemento mínimo de un iterable. Ejemplo: `min([1, 2, 3])` devuelve `1`."
    },
    {
        "input": "¿Qué hace el método count() en listas?",
        "output": "Devuelve el número de veces que un elemento aparece en la lista. Ejemplo: `[1, 2, 2, 3].count(2)` devuelve `2`."
    },
    {
        "input": "¿Qué hace el método index() en listas?",
        "output": "Devuelve el índice de la primera aparición de un elemento. Ejemplo: `[1, 2, 3].index(2)` devuelve `1`."
    },
    {
        "input": "¿Qué hace la función round() en Python?",
        "output": "Redondea un número al entero más cercano o a un número de decimales especificado. Ejemplo: `round(3.14159, 2)` devuelve `3.14`."
    },
    {
        "input": "¿Qué hace el método strip() en strings?",
        "output": "Elimina los espacios en blanco al principio y al final del string. Ejemplo: `' hola '.strip()` devuelve `'hola'`."
    },
    {
        "input": "¿Qué hace el método splitlines() en strings?",
        "output": "Divide un string en líneas. Ejemplo: `'linea1\\nlinea2'.splitlines()` devuelve `['linea1', 'linea2']`."
    },
    {
        "input": "¿Qué hace el método startswith() en strings?",
        "output": "Comprueba si un string comienza con una subcadena específica. Ejemplo: `'hola'.startswith('ho')` devuelve `True`."
    },
    {
        "input": "¿Qué hace el método endswith() en strings?",
        "output": "Comprueba si un string termina con una subcadena específica. Ejemplo: `'hola'.endswith('la')` devuelve `True`."
    },
    {
        "input": "¿Qué hace la función abs() en Python?",
        "output": "Devuelve el valor absoluto de un número. Ejemplo: `abs(-5)` devuelve `5`."
    },
    {
        "input": "¿Qué hace el método deepcopy() de la biblioteca copy?",
        "output": "Crea una copia completa de un objeto, incluyendo los objetos anidados. Ejemplo: `copy.deepcopy(objeto)`."
    },
    {
        "input": "¿Qué hace el método shallow copy() en Python?",
        "output": "Crea una copia superficial de un objeto. Los objetos anidados no se copian profundamente."
    },
    {
        "input": "¿Qué hace math.ceil()?",
        "output": "Devuelve el entero más pequeño mayor o igual a un número. Ejemplo: `math.ceil(4.2)` devuelve `5`."
    },
    {
        "input": "¿Qué hace math.floor()?",
        "output": "Devuelve el entero más grande menor o igual a un número. Ejemplo: `math.floor(4.8)` devuelve `4`."
    },
    {
        "input": "¿Qué hace math.log()?",
        "output": "Calcula el logaritmo de un número. Ejemplo: `math.log(8, 2)` devuelve `3.0`."
    },
    {
        "input": "¿Qué hace math.factorial()?",
        "output": "Calcula el factorial de un número entero. Ejemplo: `math.factorial(5)` devuelve `120`."
    },
    {
        "input": "¿Qué hace random.choice()?",
        "output": "Selecciona un elemento aleatorio de una lista. Ejemplo: `random.choice([1, 2, 3])` devuelve un valor al azar de la lista."
    },
    {
        "input": "¿Qué hace random.shuffle()?",
        "output": "Mezcla aleatoriamente los elementos de una lista. Ejemplo: `random.shuffle(mi_lista)`."
    },
    {
        "input": "¿Qué hace random.sample()?",
        "output": "Devuelve una lista con una muestra aleatoria de elementos. Ejemplo: `random.sample([1, 2, 3], 2)` devuelve una lista con dos elementos al azar."
    },
    {
        "input": "¿Qué hace os.getcwd()?",
        "output": "Devuelve el directorio de trabajo actual. Ejemplo: `os.getcwd()`."
    },
    {
        "input": "¿Qué hace os.listdir()?",
        "output": "Devuelve una lista de archivos y directorios en el directorio especificado. Ejemplo: `os.listdir('.')`."
    },
    {
        "input": "¿Qué hace os.remove()?",
        "output": "Elimina un archivo. Ejemplo: `os.remove('archivo.txt')`."
    },
    {
        "input": "¿Qué hace os.makedirs()?",
        "output": "Crea un directorio y todos sus directorios padres si no existen. Ejemplo: `os.makedirs('ruta/nueva')`."
    },
    {
        "input": "¿Qué hace shutil.copy()?",
        "output": "Copia un archivo de una ubicación a otra. Ejemplo: `shutil.copy('origen.txt', 'destino.txt')`."
    },
    {
        "input": "¿Qué hace shutil.move()?",
        "output": "Mueve un archivo o directorio a una nueva ubicación. Ejemplo: `shutil.move('archivo.txt', 'nueva_ruta/')`."
    },
    {
        "input": "¿Qué hace shutil.rmtree()?",
        "output": "Elimina un directorio y todo su contenido. Ejemplo: `shutil.rmtree('directorio')`."
    },
    {
        "input": "¿Qué hace subprocess.run()?",
        "output": "Ejecuta un comando del sistema y espera a que termine. Ejemplo: `subprocess.run(['ls', '-l'])`."
    },
    {
        "input": "¿Qué hace datetime.now()?",
        "output": "Devuelve la fecha y hora actual. Ejemplo: `datetime.now()`."
    },
    {
        "input": "¿Qué hace datetime.strptime()?",
        "output": "Convierte un string en un objeto datetime según un formato. Ejemplo: `datetime.strptime('2024-12-19', '%Y-%m-%d')`."
    },
    {
        "input": "¿Qué hace timedelta en datetime?",
        "output": "Permite realizar operaciones con fechas y horas. Ejemplo: `datetime.now() + timedelta(days=1)` suma un día."
    },
    {
        "input": "¿Qué hace re.match()?",
        "output": "Busca un patrón al inicio de un string. Ejemplo: `re.match(r'\\d+', '123abc')` devuelve un objeto de coincidencia."
    },
    {
        "input": "¿Qué hace re.search()?",
        "output": "Busca un patrón en cualquier parte de un string. Ejemplo: `re.search(r'\\d+', 'abc123')`."
    },
    {
        "input": "¿Qué hace re.findall()?",
        "output": "Devuelve todas las coincidencias de un patrón en un string. Ejemplo: `re.findall(r'\\d+', 'abc123def456')` devuelve `['123', '456']`."
    },
    {
        "input": "¿Cómo uso la función isinstance()?",
        "output": "Sirve para verificar si un objeto pertenece a una clase específica. Ejemplo: `isinstance(5, int)` devuelve `True`."
    },
    {
        "input": "¿Qué significa hasattr()?",
        "output": "Verifica si un objeto tiene un atributo específico. Ejemplo: `hasattr(obj, 'nombre')` devuelve `True` si el atributo existe."
    },
    {
        "input": "¿Qué hace setattr en Python?",
        "output": "Asigna un valor a un atributo de un objeto. Ejemplo: `setattr(obj, 'edad', 30)` asigna 30 al atributo `edad`."
    },
    {
        "input": "¿Cómo puedo usar el método keys() de un diccionario?",
        "output": "Devuelve todas las claves de un diccionario. Ejemplo: `mi_diccionario.keys()` devuelve `dict_keys(['clave1', 'clave2'])`."
    },
    {
        "input": "¿Qué hace la función max()?",
        "output": "Encuentra el valor más grande en una colección. Ejemplo: `max([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Para qué sirve la función min() en Python?",
        "output": "Encuentra el valor más pequeño en una colección. Ejemplo: `min([5, 3, 7])` devuelve `3`."
    },
    {
        "input": "¿Cómo funciona map()?",
        "output": "Aplica una función a cada elemento de un iterable. Ejemplo: `list(map(lambda x: x**2, [1, 2, 3]))` devuelve `[1, 4, 9]`."
    },
    {
        "input": "¿Qué uso tiene filter()?",
        "output": "Filtra elementos de un iterable según una condición. Ejemplo: `list(filter(lambda x: x > 2, [1, 2, 3, 4]))` devuelve `[3, 4]`."
    },
    {
        "input": "¿Qué hace zip()?",
        "output": "Combina elementos de varios iterables en pares o tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué devuelve all() en Python?",
        "output": "Devuelve `True` si todos los elementos de un iterable son verdaderos. Ejemplo: `all([True, 1, 'Texto'])` devuelve `True`."
    },
    {
        "input": "¿Cómo funciona any()?",
        "output": "Devuelve `True` si al menos un elemento de un iterable es verdadero. Ejemplo: `any([0, False, 3])` devuelve `True`."
    },
    {
        "input": "¿Qué utilidad tiene re.findall()?",
        "output": "Encuentra todas las coincidencias de un patrón en un string. Ejemplo: `re.findall(r'\\d+', '123abc456')` devuelve `['123', '456']`."
    },
    {
        "input": "¿Cómo se usa re.match()?",
        "output": "Busca un patrón al inicio de un string. Ejemplo: `re.match(r'\\d+', '123abc')` encuentra `123`."
    },
    {
        "input": "¿Qué hace la función round()?",
        "output": "Redondea un número al entero más cercano o con decimales específicos. Ejemplo: `round(3.456, 2)` devuelve `3.46`."
    },
    {
        "input": "¿Cómo funciona strip() en un string?",
        "output": "Elimina los espacios en blanco al inicio y final del string. Ejemplo: `' hola '.strip()` devuelve `'hola'`."
    },
    {
        "input": "¿Qué hace split() en cadenas?",
        "output": "Divide un string en una lista usando un separador. Ejemplo: `'a,b,c'.split(',')` devuelve `['a', 'b', 'c']`."
    },
    {
        "input": "¿Qué hace replace()?",
        "output": "Reemplaza una subcadena por otra en un string. Ejemplo: `'Python es genial'.replace('genial', 'poderoso')` devuelve `'Python es poderoso'`."
    },
    {
        "input": "¿Cómo uso math.sqrt()?",
        "output": "Calcula la raíz cuadrada de un número. Ejemplo: `math.sqrt(16)` devuelve `4.0`."
    },
    {
        "input": "¿Qué devuelve math.factorial()?",
        "output": "Calcula el factorial de un número. Ejemplo: `math.factorial(5)` devuelve `120`."
    },
    {
        "input": "¿Cómo uso random.randint()?",
        "output": "Genera un número entero aleatorio entre dos valores. Ejemplo: `random.randint(1, 10)` devuelve un número entre 1 y 10."
    },
    {
        "input": "¿Qué utilidad tiene random.choice()?",
        "output": "Selecciona un elemento al azar de una lista. Ejemplo: `random.choice([1, 2, 3])` devuelve uno de los elementos."
    },
    {
        "input": "¿Qué hace os.listdir()?",
        "output": "Lista los archivos y carpetas en un directorio. Ejemplo: `os.listdir('.')` muestra el contenido del directorio actual."
    },
    {
        "input": "¿Cómo funciona os.makedirs()?",
        "output": "Crea directorios y subdirectorios. Ejemplo: `os.makedirs('nueva/carpeta')` crea la estructura especificada."
    },
    {
        "input": "¿Qué hace shutil.copy()?",
        "output": "Copia un archivo de una ubicación a otra. Ejemplo: `shutil.copy('archivo.txt', 'copia.txt')`."
    },
    {
        "input": "¿Cómo se usa subprocess.run()?",
        "output": "Ejecuta un comando del sistema. Ejemplo: `subprocess.run(['ls', '-l'])` lista archivos en Linux."
    },
    {
        "input": "¿Cómo convierto una fecha con datetime.strptime()?",
        "output": "Convierte un string en un objeto datetime según un formato. Ejemplo: `datetime.strptime('2024-12-19', '%Y-%m-%d')`."
    },
    {
        "input": "¿Qué hace timedelta?",
        "output": "Permite sumar o restar intervalos de tiempo a objetos datetime. Ejemplo: `datetime.now() + timedelta(days=1)` suma un día."
    },
    {
        "input": "¿Cómo funciona pandas.read_csv()?",
        "output": "Carga datos desde un archivo CSV en un DataFrame. Ejemplo: `pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Qué devuelve plt.plot()?",
        "output": "Crea un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])` genera un gráfico con esos puntos."
    },
    {
        "input": "¿Cómo uso plt.bar()?",
        "output": "Crea un gráfico de barras. Ejemplo: `plt.bar(['A', 'B'], [10, 20])` genera un gráfico con dos barras."
    },
    {
        "input": "¿Qué hace zip()?",
        "output": "Combina elementos de varios iterables en tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Cómo funciona hasattr()?",
        "output": "Comprueba si un objeto tiene un atributo específico. Ejemplo: `hasattr(obj, 'atributo')` devuelve `True` si existe."
    },
    {
        "input": "¿Qué hace @property?",
        "output": "Convierte un método en un atributo de solo lectura. Ejemplo: `@property def nombre(self): return self._nombre`."
    },
    {
        "input": "¿Cómo uso @classmethod?",
        "output": "Define un método de clase que recibe `cls` como primer argumento. Ejemplo: `@classmethod def ejemplo(cls): ...`."
    },
    {
        "input": "¿Qué hace enumerate()?",
        "output": "Devuelve índices y elementos de un iterable. Ejemplo: `list(enumerate(['a', 'b']))` devuelve `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "¿Qué utilidad tiene isinstance() en Python?",
        "output": "Comprueba si un objeto pertenece a una clase específica o su subclase. Ejemplo: `isinstance(10, int)` devuelve `True`."
    },
    {
        "input": "¿Para qué sirve hasattr() en un objeto?",
        "output": "Verifica si un objeto tiene un atributo dado. Ejemplo: `hasattr(objeto, 'edad')` devuelve `True` si `edad` es un atributo del objeto."
    },
    {
        "input": "¿Cómo funciona setattr en Python?",
        "output": "Permite asignar un valor a un atributo de un objeto dinámicamente. Ejemplo: `setattr(persona, 'nombre', 'Juan')` asigna el nombre `Juan`."
    },
    {
        "input": "¿Qué devuelve keys() en un diccionario?",
        "output": "Retorna las claves del diccionario como un objeto iterable. Ejemplo: `mi_diccionario.keys()` devuelve `dict_keys(['clave1', 'clave2'])`."
    },
    {
        "input": "¿Qué permite hacer max()?",
        "output": "Encuentra el mayor valor en una lista o iterable. Ejemplo: `max([5, 3, 9])` devuelve `9`."
    },
    {
        "input": "¿Cómo uso min() en Python?",
        "output": "Determina el valor más pequeño en un iterable. Ejemplo: `min([10, 5, 7])` devuelve `5`."
    },
    {
        "input": "¿Qué operación realiza map()?",
        "output": "Aplica una función a todos los elementos de un iterable. Ejemplo: `list(map(lambda x: x+1, [1, 2, 3]))` devuelve `[2, 3, 4]`."
    },
    {
        "input": "¿Cómo funciona filter()?",
        "output": "Filtra los elementos de un iterable que cumplen una condición. Ejemplo: `list(filter(lambda x: x > 1, [0, 1, 2]))` devuelve `[2]`."
    },
    {
        "input": "¿Qué genera zip()?",
        "output": "Combina iterables en pares como tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué hace all() en Python?",
        "output": "Devuelve `True` si todos los elementos de un iterable son verdaderos. Ejemplo: `all([True, 1, 'Texto'])` da `True`."
    },
    {
        "input": "¿Qué utilidad tiene any()?",
        "output": "Retorna `True` si al menos un elemento de un iterable es verdadero. Ejemplo: `any([0, False, 3])` devuelve `True`."
    },
    {
        "input": "¿Qué hace re.findall()?",
        "output": "Busca y devuelve todas las coincidencias de un patrón en un string. Ejemplo: `re.findall(r'\\d+', '12abc34')` devuelve `['12', '34']`."
    },
    {
        "input": "¿Cómo opera re.match()?",
        "output": "Busca coincidencias al inicio de un string. Ejemplo: `re.match(r'\\d+', '123abc')` devuelve un objeto con `123`."
    },
    {
        "input": "¿Qué devuelve round()?",
        "output": "Redondea un número a un entero o al número de decimales especificado. Ejemplo: `round(2.71828, 2)` da `2.72`."
    },
    {
        "input": "¿Cómo se usa strip() con cadenas?",
        "output": "Elimina los espacios en blanco al principio y al final de un string. Ejemplo: `'  hola  '.strip()` da `'hola'`."
    },
    {
        "input": "¿Qué permite split()?",
        "output": "Divide un string en partes según un separador. Ejemplo: `'a,b,c'.split(',')` devuelve `['a', 'b', 'c']`."
    },
    {
        "input": "¿Para qué sirve replace() en Python?",
        "output": "Reemplaza una subcadena por otra en un string. Ejemplo: `'Python es fácil'.replace('fácil', 'genial')` da `'Python es genial'`."
    },
    {
        "input": "¿Cómo funciona math.sqrt()?",
        "output": "Calcula la raíz cuadrada de un número. Ejemplo: `math.sqrt(25)` devuelve `5.0`."
    },
    {
        "input": "¿Qué devuelve math.factorial()?",
        "output": "Calcula el factorial de un entero. Ejemplo: `math.factorial(4)` da `24`."
    },
    {
        "input": "¿Qué genera random.randint()?",
        "output": "Devuelve un número entero aleatorio dentro de un rango. Ejemplo: `random.randint(1, 100)`."
    },
    {
        "input": "¿Cómo funciona random.choice()?",
        "output": "Selecciona un elemento al azar de un iterable. Ejemplo: `random.choice(['rojo', 'azul', 'verde'])` devuelve uno de esos colores."
    },
    {
        "input": "¿Qué hace os.listdir()?",
        "output": "Lista los archivos y carpetas de un directorio. Ejemplo: `os.listdir('.')` devuelve los elementos del directorio actual."
    },
    {
        "input": "¿Qué permite hacer os.makedirs()?",
        "output": "Crea directorios, incluidos los intermedios si no existen. Ejemplo: `os.makedirs('ruta/nueva/carpeta')`."
    },
    {
        "input": "¿Qué utilidad tiene shutil.copy()?",
        "output": "Copia un archivo de una ubicación a otra. Ejemplo: `shutil.copy('archivo.txt', 'backup.txt')`."
    },
    {
        "input": "¿Qué hace subprocess.run()?",
        "output": "Ejecuta un comando del sistema y espera su finalización. Ejemplo: `subprocess.run(['echo', 'Hola'])` imprime `Hola`."
    },
    {
        "input": "¿Cómo opera datetime.strptime()?",
        "output": "Convierte un string en un objeto datetime según un formato. Ejemplo: `datetime.strptime('2023-01-01', '%Y-%m-%d')`."
    },
    {
        "input": "¿Qué permite timedelta?",
        "output": "Suma o resta intervalos de tiempo a un objeto datetime. Ejemplo: `datetime.now() + timedelta(days=2)` añade dos días."
    },
    {
        "input": "¿Qué hace pandas.read_csv()?",
        "output": "Carga un archivo CSV como un DataFrame de Pandas. Ejemplo: `pd.read_csv('datos.csv')`."
    },
    {
        "input": "¿Qué crea plt.plot()?",
        "output": "Genera un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])` crea un gráfico con esos puntos."
    },
    {
        "input": "¿Cómo opera plt.bar()?",
        "output": "Crea un gráfico de barras. Ejemplo: `plt.bar(['manzanas', 'peras'], [5, 7])` genera un gráfico con esas barras."
    },
    {
        "input": "¿Qué devuelve enumerate()?",
        "output": "Crea un iterable que genera pares índice-elemento. Ejemplo: `list(enumerate(['a', 'b']))` devuelve `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "¿Cómo funciona hasattr()?",
        "output": "Comprueba si un objeto tiene un atributo. Ejemplo: `hasattr(obj, 'nombre')` devuelve `True` si `nombre` existe."
    },
    {
        "input": "¿Qué utilidad tiene @property?",
        "output": "Convierte un método en un atributo calculado de solo lectura. Ejemplo: `@property def nombre_completo(self): return self.nombre + ' ' + self.apellido`."
    },
    {
        "input": "¿Qué logra @classmethod?",
        "output": "Define un método que opera en la clase en lugar de la instancia. Ejemplo: `@classmethod def crear(cls): return cls()`."
    },
    {
        "input": "¿Cómo puedo crear un archivo en Python?",
        "output": "Usa la función `open()` en modo escritura (`'w'`). Ejemplo: `with open('archivo.txt', 'w') as archivo: archivo.write('Hola, mundo')`."
    },
    {
        "input": "¿Cómo leo un archivo línea por línea?",
        "output": "Utiliza un bucle `for` con el objeto archivo. Ejemplo: `with open('archivo.txt', 'r') as archivo: for linea in archivo: print(linea.strip())`."
    },
    {
        "input": "¿Qué diferencia hay entre listas y tuplas en Python?",
        "output": "Las listas son mutables y las tuplas no. Ejemplo: `mi_lista[0] = 10` es válido, pero `mi_tupla[0] = 10` no lo es."
    },
    {
        "input": "¿Qué son las excepciones en Python?",
        "output": "Son errores que ocurren durante la ejecución del programa. Puedes manejarlas con `try-except`. Ejemplo: `try: x = 1/0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Cómo manejo errores en Python?",
        "output": "Usa bloques `try-except`. Ejemplo: `try: resultado = 1 / 0 except ZeroDivisionError: print('Error: División por cero')`."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Es un objeto que permite recorrer elementos de una colección, uno a la vez. Ejemplo: `iterador = iter([1, 2, 3])`."
    },
    {
        "input": "¿Qué hace un generador en Python?",
        "output": "Crea un iterador que genera valores bajo demanda usando `yield`. Ejemplo: `def generador(): yield 1; yield 2`."
    },
    {
        "input": "¿Cómo se usa un breakpoint?",
        "output": "Detiene la ejecución del programa para depurar. Usa `breakpoint()` o configura puntos en tu IDE."
    },
    {
        "input": "¿Qué es un archivo JSON?",
        "output": "Es un formato ligero para almacenar y transportar datos en pares clave-valor. Ejemplo: `{'nombre': 'Juan', 'edad': 30}`."
    },
    {
        "input": "¿Cómo cargo un archivo JSON en Python?",
        "output": "Usa la biblioteca `json` con `json.load()`. Ejemplo: `import json; with open('datos.json', 'r') as f: data = json.load(f)`."
    },
    {
        "input": "¿Cómo escribo datos en un archivo JSON?",
        "output": "Usa `json.dump()`. Ejemplo: `with open('datos.json', 'w') as f: json.dump({'nombre': 'Ana'}, f)`."
    },
    {
        "input": "¿Qué son las expresiones regulares?",
        "output": "Son patrones utilizados para buscar o manipular texto. Ejemplo: `re.search(r'\\d+', 'abc123')` busca números."
    },
    {
        "input": "¿Qué es un API?",
        "output": "Es una interfaz que permite que diferentes aplicaciones se comuniquen entre sí. Ejemplo: una API REST para obtener datos de un servidor."
    },
    {
        "input": "¿Cómo envío una solicitud HTTP en Python?",
        "output": "Usa la biblioteca `requests`. Ejemplo: `import requests; response = requests.get('https://api.example.com')`."
    },
    {
        "input": "¿Qué diferencia hay entre POST y GET en HTTP?",
        "output": "`GET` recupera datos y `POST` envía datos al servidor. Ejemplo: `requests.get('url')` y `requests.post('url', data={'clave': 'valor'})`."
    },
    {
        "input": "¿Cómo se usa Flask para crear una aplicación web?",
        "output": "Define rutas y funciones con Flask. Ejemplo: `from flask import Flask; app = Flask(__name__); @app.route('/') def home(): return 'Hola, mundo'`."
    },
    {
        "input": "¿Cómo se crea una base de datos SQLite en Python?",
        "output": "Usa la biblioteca `sqlite3`. Ejemplo: `import sqlite3; conn = sqlite3.connect('mi_base.db')`."
    },
    {
        "input": "¿Qué hace pandas.DataFrame()?",
        "output": "Crea una tabla de datos en Pandas. Ejemplo: `pd.DataFrame({'A': [1, 2], 'B': [3, 4]})`."
    },
    {
        "input": "¿Cómo selecciono filas en Pandas?",
        "output": "Usa `.iloc` para índices o `.loc` para etiquetas. Ejemplo: `df.iloc[0]` o `df.loc['fila1']`."
    },
    {
        "input": "¿Qué diferencia hay entre print y logging?",
        "output": "`print` muestra información en la consola, mientras que `logging` permite registrar mensajes en diferentes niveles como `INFO`, `WARNING` y `ERROR`."
    },
    {
        "input": "¿Qué es un decorator en Python?",
        "output": "Es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador def mi_funcion(): ...`."
    },
    {
        "input": "¿Cómo se crean gráficos en Matplotlib?",
        "output": "Usa funciones como `plt.plot()` para gráficos de líneas o `plt.bar()` para gráficos de barras."
    },
    {
        "input": "¿Qué es un archivo CSV?",
        "output": "Es un archivo de texto donde los datos están separados por comas. Ejemplo: `nombre,edad\\nJuan,30`."
    },
    {
        "input": "¿Cómo leo un archivo CSV en Python?",
        "output": "Usa Pandas. Ejemplo: `import pandas as pd; df = pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Qué es un contexto con with en Python?",
        "output": "Maneja automáticamente la apertura y cierre de recursos. Ejemplo: `with open('archivo.txt') as f: data = f.read()`."
    },
    {
        "input": "¿Cómo creo un entorno virtual en Python?",
        "output": "Usa `venv`. Ejemplo: `python -m venv mi_entorno` y actívalo con `source mi_entorno/bin/activate`."
    },
    {
        "input": "¿Qué es una clase en Python?",
        "output": "Es una plantilla para crear objetos. Ejemplo: `class Persona: def __init__(self, nombre): self.nombre = nombre`."
    },
    {
        "input": "¿Qué es un objeto en Python?",
        "output": "Es una instancia de una clase que contiene atributos y métodos definidos en esa clase."
    },
    {
        "input": "¿Cómo funciona __init__ en Python?",
        "output": "Es el constructor que inicializa los atributos de un objeto. Ejemplo: `class Perro: def __init__(self, nombre): self.nombre = nombre`."
    },
    {
        "input": "¿Cómo hago pruebas unitarias en Python?",
        "output": "Usa el módulo `unittest`. Ejemplo: `import unittest; class TestMiFuncion(unittest.TestCase): def test_suma(self): self.assertEqual(1+1, 2)`."
    },
    {
        "input": "¿Qué es pytest?",
        "output": "Es un framework para realizar pruebas en Python, más flexible y sencillo que `unittest`. Ejemplo: `def test_suma(): assert 1+1 == 2`."
    },
    {
        "input": "¿Cómo manipulo fechas en Python?",
        "output": "Usa el módulo `datetime`. Ejemplo: `from datetime import datetime; ahora = datetime.now()`."
    },
    {
        "input": "¿Qué es la recursión?",
        "output": "Es una técnica donde una función se llama a sí misma para resolver problemas. Ejemplo: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "¿Cómo ordeno una lista en Python?",
        "output": "Usa `.sort()` para modificar la lista o `sorted()` para devolver una nueva lista ordenada. Ejemplo: `mi_lista.sort()`."
    },
    {
        "input": "¿Qué es una función lambda?",
        "output": "Es una función anónima de una sola línea. Ejemplo: `lambda x: x + 1` es equivalente a `def sumar_uno(x): return x + 1`."
    },
    {
        "input": "¿Cómo se usa la recursión en Python?",
        "output": "Usa una función que se llama a sí misma. Ejemplo: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "¿Qué diferencia hay entre parámetros y argumentos?",
        "output": "Los parámetros son las variables definidas en una función, y los argumentos son los valores que se pasan a esos parámetros al llamar la función."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Es un archivo que contiene definiciones y funciones reutilizables. Ejemplo: `import math` para usar funciones matemáticas."
    },
    {
        "input": "¿Cómo puedo usar import en Python?",
        "output": "Permite cargar módulos para reutilizar sus funciones. Ejemplo: `import math; print(math.sqrt(16))`."
    },
    {
        "input": "¿Qué es un paquete en Python?",
        "output": "Es una colección de módulos organizados en un directorio con un archivo `__init__.py`."
    },
    {
        "input": "¿Cómo instalo bibliotecas en Python?",
        "output": "Usa el comando `pip install`. Ejemplo: `pip install requests` instala la biblioteca `requests`."
    },
    {
        "input": "¿Qué es el PEP 8?",
        "output": "Es una guía de estilo para escribir código Python de manera legible y consistente."
    },
    {
        "input": "¿Cómo se usa logging en Python?",
        "output": "Permite registrar eventos en tu aplicación. Ejemplo: `import logging; logging.info('Mensaje informativo')`."
    },
    {
        "input": "¿Qué son las comprensiones de listas?",
        "output": "Son una forma concisa de crear listas. Ejemplo: `[x**2 for x in range(5)]` genera `[0, 1, 4, 9, 16]`."
    },
    {
        "input": "¿Cómo elimino duplicados en una lista?",
        "output": "Convierte la lista a un conjunto y luego de nuevo a lista. Ejemplo: `list(set([1, 2, 2, 3]))` devuelve `[1, 2, 3]`."
    },
    {
        "input": "¿Qué diferencia hay entre `is` y `==`?",
        "output": "`is` compara si dos objetos son el mismo en memoria, mientras que `==` compara si los valores son iguales."
    },
    {
        "input": "¿Qué es un contexto `with`?",
        "output": "Maneja automáticamente la apertura y cierre de recursos. Ejemplo: `with open('archivo.txt') as f: data = f.read()`."
    },
    {
        "input": "¿Qué diferencia hay entre `w` y `a` al abrir un archivo?",
        "output": "`w` sobrescribe el archivo si existe, y `a` añade contenido al final sin borrar lo anterior."
    },
    {
        "input": "¿Cómo ordeno un diccionario por sus claves?",
        "output": "Usa `sorted()`. Ejemplo: `sorted(mi_diccionario.items())` devuelve una lista de pares clave-valor ordenados."
    },
    {
        "input": "¿Cómo convierto una lista en un string?",
        "output": "Usa el método `join()`. Ejemplo: `', '.join(['a', 'b', 'c'])` devuelve `'a, b, c'`."
    },
    {
        "input": "¿Qué hace `del` en Python?",
        "output": "Elimina variables, elementos de una lista o claves de un diccionario. Ejemplo: `del mi_lista[0]`."
    },
    {
        "input": "¿Cómo creo una excepción personalizada?",
        "output": "Crea una nueva clase que herede de `Exception`. Ejemplo: `class MiExcepcion(Exception): pass`."
    },
    {
        "input": "¿Qué es una API RESTful?",
        "output": "Es una interfaz que permite que sistemas interactúen usando HTTP siguiendo los principios REST."
    },
    {
        "input": "¿Cómo configuro un entorno virtual en Python?",
        "output": "Usa `python -m venv`. Ejemplo: `python -m venv mi_entorno` crea un entorno virtual llamado `mi_entorno`."
    },
    {
        "input": "¿Cómo pruebo una API con Python?",
        "output": "Usa la biblioteca `requests`. Ejemplo: `import requests; response = requests.get('https://api.example.com'); print(response.json())`."
    },
    {
        "input": "¿Cómo creo un gráfico de torta en Matplotlib?",
        "output": "Usa `plt.pie()`. Ejemplo: `plt.pie([10, 20, 30]); plt.show()` genera un gráfico de torta."
    },
    {
        "input": "¿Qué diferencia hay entre `deepcopy` y `copy`?",
        "output": "`deepcopy` copia un objeto y todos los objetos anidados, mientras que `copy` solo copia el objeto de nivel superior."
    },
    {
        "input": "¿Qué son las promesas en JavaScript?",
        "output": "Son objetos que representan el eventual resultado de una operación asíncrona. Ejemplo: `fetch('url').then(response => response.json())`."
    },
    {
        "input": "¿Qué es un `callback`?",
        "output": "Es una función pasada como argumento a otra función, que se ejecuta después de que se completa una tarea."
    },
    {
        "input": "¿Qué es el DOM en JavaScript?",
        "output": "Es una representación en forma de árbol de los elementos HTML en una página web."
    },
    {
        "input": "¿Cómo selecciono elementos en el DOM?",
        "output": "Usa métodos como `document.querySelector()` o `document.getElementById()`. Ejemplo: `document.querySelector('h1')`."
    },
    {
        "input": "¿Qué es una variable de entorno?",
        "output": "Es un valor dinámico que afecta el comportamiento de los procesos en un sistema operativo o programa."
    },
    {
        "input": "¿Cómo creo un servidor HTTP en Node.js?",
        "output": "Usa el módulo `http`. Ejemplo: `const http = require('http'); http.createServer((req, res) => res.end('Hola')).listen(3000);`."
    },
    {
        "input": "¿Qué es un evento en JavaScript?",
        "output": "Es una acción que ocurre en una página web, como un clic o el envío de un formulario."
    },
    {
        "input": "¿Qué es un middleware en Express?",
        "output": "Es una función que tiene acceso al objeto de solicitud (`req`), respuesta (`res`) y al siguiente middleware."
    },
    {
        "input": "¿Cómo hago consultas SQL en Python?",
        "output": "Usa la biblioteca `sqlite3`. Ejemplo: `cursor.execute('SELECT * FROM tabla')`."
    },
    {
        "input": "¿Qué es una base de datos NoSQL?",
        "output": "Es un tipo de base de datos que no usa tablas, como MongoDB, que almacena datos en documentos JSON."
    },
    {
        "input": "¿Qué es la programación funcional?",
        "output": "Es un paradigma que trata las funciones como ciudadanos de primera clase y fomenta la inmutabilidad y las expresiones puras. Ejemplo: usar funciones como `map` y `reduce`."
    },
    {
        "input": "¿Qué es un patrón de diseño?",
        "output": "Es una solución general y reutilizable para problemas comunes en el diseño de software. Ejemplo: Singleton, Observer y Factory."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "Es un paradigma basado en objetos que contienen datos (atributos) y código (métodos). Ejemplo: usar clases como `class Vehiculo`."
    },
    {
        "input": "¿Qué son los microservicios?",
        "output": "Es un estilo de arquitectura donde una aplicación se construye como un conjunto de servicios pequeños, independientes y desplegables de manera individual."
    },
    {
        "input": "¿Qué es CI/CD?",
        "output": "Es un conjunto de prácticas de desarrollo que integran cambios frecuentemente (CI) y despliegan código automáticamente (CD)."
    },
    {
        "input": "¿Qué es un contenedor en Kubernetes?",
        "output": "Es una unidad ejecutable que incluye una aplicación y sus dependencias. Kubernetes orquesta y gestiona estos contenedores."
    },
    {
        "input": "¿Qué es una cola de mensajes?",
        "output": "Es un sistema que permite a diferentes partes de una aplicación comunicarse enviando y recibiendo mensajes de manera asincrónica. Ejemplo: RabbitMQ, Kafka."
    },
    {
        "input": "¿Cómo funciona una base de datos relacional?",
        "output": "Organiza datos en tablas con relaciones definidas entre ellas mediante claves primarias y foráneas. Ejemplo: MySQL, PostgreSQL."
    },
    {
        "input": "¿Qué es un índice en una base de datos?",
        "output": "Es una estructura que mejora la velocidad de búsqueda de datos en una tabla, aunque puede ralentizar las inserciones y actualizaciones."
    },
    {
        "input": "¿Qué es una base de datos distribuida?",
        "output": "Es una base de datos cuyo almacenamiento y procesamiento están distribuidos en varios nodos. Ejemplo: Cassandra, DynamoDB."
    },
    {
        "input": "¿Qué es GraphQL?",
        "output": "Es un lenguaje de consulta para APIs que permite solicitar exactamente los datos necesarios, evitando el exceso o la falta de datos."
    },
    {
        "input": "¿Qué es un endpoint en una API?",
        "output": "Es una URL específica en una API que ejecuta una acción o devuelve datos. Ejemplo: `GET /usuarios` para obtener una lista de usuarios."
    },
    {
        "input": "¿Qué son las migraciones en bases de datos?",
        "output": "Son scripts que administran cambios en el esquema de la base de datos, como agregar tablas o modificar columnas."
    },
    {
        "input": "¿Qué es un ORM?",
        "output": "Es una herramienta que mapea objetos de una aplicación a tablas de bases de datos, simplificando las consultas SQL. Ejemplo: SQLAlchemy, Hibernate."
    },
    {
        "input": "¿Qué es un servidor proxy?",
        "output": "Es un servidor intermediario que recibe solicitudes de los clientes y las reenvía al servidor final, proporcionando control y seguridad."
    },
    {
        "input": "¿Qué es un WebSocket?",
        "output": "Es un protocolo que permite comunicación bidireccional y persistente entre cliente y servidor. Ejemplo: aplicaciones de chat en tiempo real."
    },
    {
        "input": "¿Qué es el hashing?",
        "output": "Es un proceso que convierte datos en una cadena fija de caracteres mediante una función hash. Ejemplo: SHA-256 para encriptar contraseñas."
    },
    {
        "input": "¿Qué es la programación reactiva?",
        "output": "Es un paradigma en el que los sistemas responden a cambios de estado y eventos de manera asíncrona y no bloqueante. Ejemplo: usar RxJava o React."
    },
    {
        "input": "¿Qué es un balanceador de carga?",
        "output": "Es un componente que distribuye el tráfico entrante entre varios servidores para optimizar la disponibilidad y rendimiento."
    },
    {
        "input": "¿Qué es un certificado SSL?",
        "output": "Es un archivo que asegura la comunicación cifrada entre un navegador y un servidor. Se utiliza para implementar HTTPS."
    },
    {
        "input": "¿Qué es una arquitectura monolítica?",
        "output": "Es un enfoque donde toda la lógica de una aplicación está contenida en una única unidad desplegable."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Es una colección de herramientas y bibliotecas que simplifican el desarrollo de software. Ejemplo: Django para desarrollo web."
    },
    {
        "input": "¿Qué diferencia hay entre front-end y back-end?",
        "output": "El front-end es la interfaz del usuario, mientras que el back-end maneja la lógica, las bases de datos y las APIs en el servidor."
    },
    {
        "input": "¿Qué es la concurrencia?",
        "output": "Es la capacidad de ejecutar múltiples tareas al mismo tiempo, pero no necesariamente en paralelo. Ejemplo: hilos en Python."
    },
    {
        "input": "¿Qué es la paralelización?",
        "output": "Es la ejecución simultánea de múltiples tareas usando múltiples núcleos de CPU. Ejemplo: procesamiento distribuido en Spark."
    },
    {
        "input": "¿Qué son los hilos en programación?",
        "output": "Son las unidades más pequeñas de procesamiento dentro de un proceso. Permiten la ejecución concurrente de tareas."
    },
    {
        "input": "¿Qué es la programación asíncrona?",
        "output": "Es un modelo donde las tareas no bloquean la ejecución del programa. Ejemplo: `async` y `await` en Python."
    },
    {
        "input": "¿Qué son las promesas en programación?",
        "output": "Son objetos que representan el resultado eventual de una operación asíncrona. Ejemplo: `fetch().then(res => ...)` en JavaScript."
    },
    {
        "input": "¿Qué es la caché?",
        "output": "Es un almacenamiento temporal para datos que se acceden frecuentemente, con el fin de mejorar el rendimiento."
    },
    {
        "input": "¿Qué es Docker?",
        "output": "Es una plataforma que permite crear, distribuir y ejecutar aplicaciones en contenedores ligeros y portables."
    },
    {
        "input": "¿Qué es una máquina virtual?",
        "output": "Es un software que emula hardware físico, permitiendo ejecutar múltiples sistemas operativos en un solo equipo."
    },
    {
        "input": "¿Qué es un servidor DNS?",
        "output": "Es un servidor que traduce nombres de dominio legibles por humanos (como google.com) a direcciones IP."
    },
    {
        "input": "¿Qué es un algoritmo de búsqueda binaria?",
        "output": "Es un método para encontrar un elemento en una lista ordenada, dividiéndola en mitades sucesivamente."
    },
    {
        "input": "¿Qué es un árbol binario?",
        "output": "Es una estructura de datos donde cada nodo tiene a lo sumo dos hijos: izquierdo y derecho."
    },
    {
        "input": "¿Qué es un grafo en programación?",
        "output": "Es una estructura de datos compuesta por nodos (vértices) conectados mediante enlaces (aristas)."
    },
    {
        "input": "¿Qué diferencia hay entre una lista y un conjunto en Python?",
        "output": "Una lista permite elementos duplicados y mantiene el orden, mientras que un conjunto no permite duplicados y no tiene orden."
    },
    {
        "input": "¿Qué es una comprensión de diccionarios?",
        "output": "Es una forma concisa de crear diccionarios. Ejemplo: `{x: x**2 for x in range(5)}` crea `{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}`."
    },
    {
        "input": "¿Cómo se puede manejar un archivo grande en Python?",
        "output": "Usa iteradores o lee el archivo línea por línea. Ejemplo: `with open('archivo.txt') as f: for linea in f: print(linea.strip())`."
    },
    {
        "input": "¿Qué hace el método get() en un diccionario?",
        "output": "Devuelve el valor de una clave o un valor por defecto si la clave no existe. Ejemplo: `mi_diccionario.get('clave', 'default')`."
    },
    {
        "input": "¿Qué es un decorador en Python?",
        "output": "Es una función que modifica el comportamiento de otra función o método. Ejemplo: `@decorador` sobre una función."
    },
    {
        "input": "¿Cómo se puede ejecutar código paralelo en Python?",
        "output": "Usa el módulo `concurrent.futures` o `multiprocessing`. Ejemplo: `from concurrent.futures import ThreadPoolExecutor`."
    },
    {
        "input": "¿Qué es un método mágico en Python?",
        "output": "Son métodos especiales rodeados de dobles guiones bajos, como `__init__`, `__str__`, o `__len__`, que definen comportamientos específicos."
    },
    {
        "input": "¿Qué diferencia hay entre *args y **kwargs?",
        "output": "`*args` captura argumentos posicionales, mientras que `**kwargs` captura argumentos con nombre en forma de diccionario."
    },
    {
        "input": "¿Qué es el manejo de contexto con with?",
        "output": "Es una forma de manejar recursos automáticamente, asegurando su liberación. Ejemplo: `with open('archivo.txt') as f: datos = f.read()`."
    },
    {
        "input": "¿Qué hace el método append() en una lista?",
        "output": "Añade un elemento al final de la lista. Ejemplo: `mi_lista.append(5)`."
    },
    {
        "input": "¿Cómo se puede ordenar una lista en Python?",
        "output": "Usa `.sort()` para modificar la lista o `sorted()` para una nueva lista ordenada. Ejemplo: `sorted([3, 1, 2])` devuelve `[1, 2, 3]`."
    },
    {
        "input": "¿Qué hace la función zip()?",
        "output": "Combina iterables en tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Cómo se puede manejar un error en Python?",
        "output": "Usa un bloque `try-except`. Ejemplo: `try: x = 1/0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué es una función generadora?",
        "output": "Es una función que devuelve valores uno a uno usando `yield`. Ejemplo: `def generador(): yield 1; yield 2`."
    },
    {
        "input": "¿Qué hace la función eval() en Python?",
        "output": "Ejecuta una expresión Python en forma de string. Ejemplo: `eval('2 + 2')` devuelve `4`."
    },
    {
        "input": "¿Qué es una clase abstracta en Python?",
        "output": "Es una clase que define métodos que deben ser implementados en sus subclases. Usa `abc` para definirla."
    },
    {
        "input": "¿Qué son las propiedades en Python?",
        "output": "Son atributos que se comportan como métodos. Usa `@property` para definirlos. Ejemplo: `@property def nombre(self): return self._nombre`."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Es un objeto que implementa los métodos `__iter__()` y `__next__()`, permitiendo recorrer elementos secuencialmente."
    },
    {
        "input": "¿Cómo se puede leer un archivo JSON?",
        "output": "Usa la biblioteca `json`. Ejemplo: `import json; with open('datos.json') as f: data = json.load(f)`."
    },
    {
        "input": "¿Cómo se puede convertir un objeto Python a JSON?",
        "output": "Usa `json.dumps()`. Ejemplo: `import json; json_data = json.dumps({'clave': 'valor'})`."
    },
    {
        "input": "¿Qué es un decorador de clase?",
        "output": "Es una función que modifica el comportamiento de una clase. Ejemplo: `@mi_decorador` antes de una definición de clase."
    },
    {
        "input": "¿Qué hace la función hasattr()?",
        "output": "Verifica si un objeto tiene un atributo. Ejemplo: `hasattr(objeto, 'atributo')`."
    },
    {
        "input": "¿Cómo se implementa un Singleton en Python?",
        "output": "Usa un patrón que asegura una única instancia. Ejemplo: mediante el método `__new__`."
    },
    {
        "input": "¿Qué hace el operador `is` en Python?",
        "output": "Comprueba si dos variables apuntan al mismo objeto en memoria. Ejemplo: `a is b`."
    },
    {
        "input": "¿Cómo funciona el operador `in`?",
        "output": "Verifica si un elemento está en una colección. Ejemplo: `'a' in ['a', 'b', 'c']` devuelve `True`."
    },
    {
        "input": "¿Qué son los metaclases en Python?",
        "output": "Son clases de clases que controlan cómo se crean las clases. Ejemplo: `class MiMeta(type): ...`."
    },
    {
        "input": "¿Qué es la serialización en Python?",
        "output": "Es convertir un objeto en un formato que pueda ser almacenado o transmitido, como JSON o Pickle."
    },
    {
        "input": "¿Qué diferencia hay entre deepcopy y copy?",
        "output": "`deepcopy` copia recursivamente todos los objetos anidados, mientras que `copy` realiza una copia superficial."
    },
    {
        "input": "¿Qué hace el método pop() en listas?",
        "output": "Elimina y devuelve el último elemento de la lista (o un índice específico). Ejemplo: `mi_lista.pop()`."
    },
    {
        "input": "¿Cómo se define un método estático?",
        "output": "Usa el decorador `@staticmethod`. Ejemplo: `@staticmethod def metodo(): ...`."
    },
    {
        "input": "¿Qué es una herencia múltiple?",
        "output": "Es cuando una clase hereda de más de una clase base. Ejemplo: `class Hijo(Padre1, Padre2): ...`."
    },
    {
        "input": "¿Qué es el método `super()`?",
        "output": "Permite llamar métodos de una clase base desde una subclase. Ejemplo: `super().metodo()`."
    },
    {
        "input": "¿Qué es el método `__repr__`?",
        "output": "Es un método mágico que devuelve una representación no ambigua de un objeto. Ejemplo: `def __repr__(self): return f'Objeto({self.atributo})'`."
    },
    {
        "input": "¿Cómo puedo comparar objetos en Python?",
        "output": "Define los métodos `__eq__`, `__lt__`, y otros operadores de comparación. Ejemplo: `def __eq__(self, otro): return self.valor == otro.valor`."
    },
    {
        "input": "¿Qué es un NamedTuple?",
        "output": "Es una clase de tuplas con nombres para los campos. Ejemplo: `from collections import namedtuple; Persona = namedtuple('Persona', 'nombre edad')`."
    },
    {
        "input": "¿Cómo puedo medir el tiempo de ejecución de una función?",
        "output": "Usa el módulo `time`. Ejemplo: `inicio = time.time(); funcion(); print(time.time() - inicio)`."
    },
    {
        "input": "¿Qué es una cola en Python?",
        "output": "Es una estructura de datos FIFO. Usa el módulo `queue` para implementarla. Ejemplo: `from queue import Queue; cola = Queue()`."
    },
    {
        "input": "¿Qué es una pila en Python?",
        "output": "Es una estructura LIFO. Usa una lista o el módulo `queue`. Ejemplo: `pila.append(valor); pila.pop()`."
    },
    {
        "input": "¿Qué hace `collections.Counter`?",
        "output": "Cuenta la frecuencia de elementos en un iterable. Ejemplo: `from collections import Counter; Counter([1, 2, 2, 3])`."
    },
    {
        "input": "¿Cómo usar `collections.deque`?",
        "output": "Es una cola doblemente enlazada eficiente. Ejemplo: `from collections import deque; d = deque(); d.append(1); d.appendleft(0)`."
    },
    {
        "input": "¿Cómo se usa itertools en Python?",
        "output": "Proporciona herramientas para iteraciones avanzadas. Ejemplo: `from itertools import permutations; print(list(permutations([1, 2, 3])))`."
    },
    {
        "input": "¿Qué es `functools.lru_cache`?",
        "output": "Es un decorador para almacenar en caché resultados de funciones. Ejemplo: `@lru_cache def fib(n): return n if n <= 1 else fib(n-1) + fib(n-2)`."
    },
    {
        "input": "¿Cómo uso `dataclasses`?",
        "output": "Proporciona una forma simplificada de definir clases. Ejemplo: `from dataclasses import dataclass; @dataclass class Persona: nombre: str; edad: int`."
    },
    {
        "input": "¿Qué es el descriptor `__getattr__`?",
        "output": "Es un método llamado cuando se accede a un atributo que no existe. Ejemplo: `def __getattr__(self, nombre): return 'Atributo no definido'`."
    },
    {
        "input": "¿Cómo manejar múltiples excepciones en Python?",
        "output": "Usa un bloque `except` con una tupla de excepciones. Ejemplo: `except (TypeError, ValueError):`."
    },
    {
        "input": "¿Qué es un decorador anidado?",
        "output": "Es un decorador que aplica múltiples capas de lógica. Ejemplo: `@decorador1 @decorador2 def funcion(): ...`."
    },
    {
        "input": "¿Cómo ejecutar código en un hilo?",
        "output": "Usa el módulo `threading`. Ejemplo: `from threading import Thread; t = Thread(target=mi_funcion); t.start()`."
    },
    {
        "input": "¿Cómo usar procesos en Python?",
        "output": "Usa el módulo `multiprocessing`. Ejemplo: `from multiprocessing import Process; p = Process(target=mi_funcion); p.start()`."
    },
    {
        "input": "¿Qué hace el módulo `asyncio`?",
        "output": "Permite escribir código asíncrono con `async` y `await`. Ejemplo: `async def mi_funcion(): await otra_funcion()`."
    },
    {
        "input": "¿Cómo implementar un servidor HTTP básico?",
        "output": "Usa `http.server`. Ejemplo: `from http.server import SimpleHTTPRequestHandler, HTTPServer; HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler).serve_forever()`."
    },
    {
        "input": "¿Qué es un manejador de señales en Python?",
        "output": "Es una función que maneja interrupciones del sistema. Usa `signal`. Ejemplo: `import signal; signal.signal(signal.SIGINT, mi_manejador)`."
    },
    {
        "input": "¿Qué hace el método `join` en hilos?",
        "output": "Espera a que un hilo termine su ejecución. Ejemplo: `t = Thread(target=mi_funcion); t.start(); t.join()`."
    },
    {
        "input": "¿Cómo manejar archivos comprimidos en Python?",
        "output": "Usa el módulo `zipfile` o `gzip`. Ejemplo: `import zipfile; with zipfile.ZipFile('archivo.zip', 'r') as z: z.extractall()`."
    },
    {
        "input": "¿Qué es el método `__call__`?",
        "output": "Permite que un objeto sea llamado como una función. Ejemplo: `def __call__(self, *args): print('Objeto llamado')`."
    },
    {
        "input": "¿Qué son los contextos asíncronos?",
        "output": "Permiten manejar recursos asíncronos. Usa `async with`. Ejemplo: `async with recurso as r: await r.hacer_algo()`."
    },
    {
        "input": "¿Qué hace el módulo `sched`?",
        "output": "Es un planificador de tareas. Ejemplo: `import sched, time; s = sched.scheduler(time.time, time.sleep); s.enter(5, 1, print, ('Hola',)); s.run()`."
    },
    {
        "input": "¿Cómo usar el módulo `argparse`?",
        "output": "Permite definir y analizar argumentos de línea de comandos. Ejemplo: `import argparse; parser = argparse.ArgumentParser(); parser.add_argument('--opcion'); args = parser.parse_args()`."
    },
    {
        "input": "¿Qué es un middleware en Flask?",
        "output": "Es una función que se ejecuta antes o después de manejar una solicitud. Ejemplo: `@app.before_request def antes(): ...`."
    },
    {
        "input": "¿Qué hace el módulo `socket`?",
        "output": "Permite implementar comunicación entre redes. Ejemplo: `import socket; s = socket.socket(); s.bind(('localhost', 8080)); s.listen()`."
    },
    {
        "input": "¿Cómo conectarse a una base de datos SQLite?",
        "output": "Usa `sqlite3`. Ejemplo: `import sqlite3; conn = sqlite3.connect('mi_base.db'); cursor = conn.cursor()`."
    },
    {
        "input": "¿Qué son los tipos de datos `typing` en Python?",
        "output": "Son anotaciones para indicar tipos en funciones y clases. Ejemplo: `from typing import List; def suma(nums: List[int]) -> int: return sum(nums)`."
    },
    {
        "input": "¿Qué hace el método `__del__`?",
        "output": "Es un método mágico que se llama cuando el objeto es destruido. Ejemplo: `def __del__(self): print('Objeto destruido')`."
    },
    {
        "input": "¿Cómo implemento un caché en Python?",
        "output": "Usa `functools.lru_cache` o un diccionario. Ejemplo: `@lru_cache(maxsize=100)`."
    },
    {
        "input": "¿Cómo funciona el operador `:=` en Python?",
        "output": "Es el operador de asignación en expresiones conocido como 'walrus operator'. Ejemplo: `if (n := len(lista)) > 5: print(f'La lista tiene {n} elementos')`."
    },
    {
        "input": "¿Qué es el método `__getitem__`?",
        "output": "Permite definir cómo se accede a elementos de un objeto. Ejemplo: `def __getitem__(self, index): return self.datos[index]`."
    },
    {
        "input": "¿Qué hace el método `__setitem__`?",
        "output": "Define cómo se asignan valores a elementos de un objeto. Ejemplo: `def __setitem__(self, key, value): self.datos[key] = value`."
    },
    {
        "input": "¿Qué es una vista en un diccionario?",
        "output": "Es un objeto que refleja los elementos actuales del diccionario. Ejemplo: `mi_diccionario.keys()` devuelve una vista de las claves."
    },
    {
        "input": "¿Cómo puedo ejecutar comandos del sistema en Python?",
        "output": "Usa el módulo `subprocess`. Ejemplo: `import subprocess; subprocess.run(['ls', '-l'])`."
    },
    {
        "input": "¿Qué diferencia hay entre `os.system` y `subprocess.run`?",
        "output": "`os.system` ejecuta comandos directamente, mientras que `subprocess.run` es más seguro y flexible al manejar argumentos."
    },
    {
        "input": "¿Cómo limitar el uso de memoria en Python?",
        "output": "Usa estructuras de datos eficientes como generadores o el módulo `resource` en sistemas compatibles."
    },
    {
        "input": "¿Qué es un módulo `weakref` en Python?",
        "output": "Permite crear referencias débiles a objetos, evitando que sean contados para la recolección de basura."
    },
    {
        "input": "¿Qué es un objeto inmutable en Python?",
        "output": "Es un objeto cuyo estado no puede cambiar después de ser creado. Ejemplo: `tuplas` o `strings`."
    },
    {
        "input": "¿Qué es el recolector de basura en Python?",
        "output": "Es un mecanismo que libera memoria eliminando objetos sin referencias activas. Usa `gc` para controlarlo."
    },
    {
        "input": "¿Cómo puedes deshabilitar el recolector de basura?",
        "output": "Usa el módulo `gc`. Ejemplo: `import gc; gc.disable()` para desactivarlo."
    },
    {
        "input": "¿Qué es un `contextlib` en Python?",
        "output": "Es un módulo para simplificar la creación de manejadores de contexto. Ejemplo: `from contextlib import contextmanager`."
    },
    {
        "input": "¿Qué hace el módulo `abc`?",
        "output": "Permite definir clases abstractas. Ejemplo: `from abc import ABC, abstractmethod` para crear métodos que deben implementarse."
    },
    {
        "input": "¿Cómo puedo manejar errores personalizados?",
        "output": "Crea excepciones personalizadas heredando de `Exception`. Ejemplo: `class MiError(Exception): pass`."
    },
    {
        "input": "¿Qué es un iterador infinito?",
        "output": "Es un iterador que nunca termina. Usa `itertools.cycle` o `itertools.repeat` para crearlos."
    },
    {
        "input": "¿Qué hace `itertools.combinations`?",
        "output": "Genera todas las combinaciones posibles de un iterable. Ejemplo: `itertools.combinations([1, 2, 3], 2)`."
    },
    {
        "input": "¿Cómo funciona `os.environ`?",
        "output": "Accede y modifica variables de entorno. Ejemplo: `os.environ['NUEVA_VAR'] = 'valor'`."
    },
    {
        "input": "¿Qué es un manejador de señales?",
        "output": "Es una función que responde a señales del sistema operativo. Usa el módulo `signal` para definirlas."
    },
    {
        "input": "¿Cómo comprimir datos en Python?",
        "output": "Usa módulos como `gzip` o `zlib`. Ejemplo: `gzip.compress(b'datos')`."
    },
    {
        "input": "¿Qué es un archivo .pyc?",
        "output": "Es un archivo compilado de Python que contiene bytecode generado para optimizar la ejecución del programa."
    },
    {
        "input": "¿Qué es un módulo `pathlib`?",
        "output": "Es un módulo para manejar rutas de archivos de forma orientada a objetos. Ejemplo: `from pathlib import Path; Path('archivo.txt').exists()`."
    },
    {
        "input": "¿Cómo manejar rutas de forma multiplataforma?",
        "output": "Usa el módulo `os.path` o `pathlib` para construir rutas compatibles. Ejemplo: `os.path.join('carpeta', 'archivo.txt')`."
    },
    {
        "input": "¿Qué es el método `__slots__`?",
        "output": "Especifica atributos fijos en una clase para ahorrar memoria. Ejemplo: `__slots__ = ['nombre', 'edad']`."
    },
    {
        "input": "¿Qué es una excepción `KeyError`?",
        "output": "Ocurre cuando intentas acceder a una clave inexistente en un diccionario. Ejemplo: `mi_diccionario['clave_invalida']`."
    },
    {
        "input": "¿Qué hace el módulo `uuid`?",
        "output": "Genera identificadores únicos universales. Ejemplo: `import uuid; uuid.uuid4()`."
    },
    {
        "input": "¿Cómo crear un archivo temporal?",
        "output": "Usa el módulo `tempfile`. Ejemplo: `import tempfile; with tempfile.TemporaryFile() as temp: temp.write(b'Datos temporales')`."
    },
    {
        "input": "¿Qué hace el módulo `timeit`?",
        "output": "Permite medir el tiempo de ejecución de pequeños fragmentos de código. Ejemplo: `timeit.timeit('sum(range(100))', number=1000)`."
    },
    {
        "input": "¿Qué es un descriptor en Python?",
        "output": "Es un objeto que controla el acceso a un atributo de clase mediante los métodos `__get__`, `__set__`, y `__delete__`."
    },
    {
        "input": "¿Cómo programar tareas en Python?",
        "output": "Usa bibliotecas como `sched` o `APScheduler`. Ejemplo: `from apscheduler.schedulers.background import BackgroundScheduler`."
    },
    {
        "input": "¿Qué es `pickle` en Python?",
        "output": "Es un módulo para serializar y deserializar objetos Python. Ejemplo: `pickle.dump(objeto, archivo)`."
    },
    {
        "input": "¿Qué es un bucle `for-else`?",
        "output": "Es un bucle `for` con una cláusula `else` que se ejecuta si no se rompe el bucle. Ejemplo: `for x in lista: if x == valor: break else: print('No se encontró el valor')`."
    },
    {
        "input": "¿Qué hace el operador `**` en Python?",
        "output": "Realiza la operación de potencia. Ejemplo: `2 ** 3` devuelve `8`."
    },
    {
        "input": "¿Qué diferencia hay entre `isinstance` y `type`?",
        "output": "`isinstance` verifica si un objeto es de una clase o subclase, mientras que `type` solo verifica la clase exacta."
    },
    {
        "input": "¿Qué hace el módulo `secrets`?",
        "output": "Genera números y tokens criptográficamente seguros. Ejemplo: `secrets.token_hex(16)`."
    },
    {
        "input": "¿Qué significa que el operador `:=` sea el operador walrus?",
        "output": "Es una forma de asignar valores dentro de una expresión y usarlo en el mismo contexto. Ejemplo: `if (n := len(lista)) > 5: print(n)`."
    },
    {
        "input": "¿Por qué usar `__getitem__` en una clase personalizada?",
        "output": "Permite que los objetos de la clase se comporten como contenedores, accediendo a elementos con índices como si fueran listas o diccionarios."
    },
    {
        "input": "¿Cuándo usar `__setitem__` en lugar de métodos tradicionales?",
        "output": "Es útil para definir comportamientos personalizados al asignar valores, especialmente en clases que actúan como contenedores."
    },
    {
        "input": "¿Qué es una vista en un diccionario y por qué es útil?",
        "output": "Una vista refleja los datos actuales del diccionario y se actualiza automáticamente si el diccionario cambia. Ejemplo: `dict_keys` o `dict_values`."
    },
    {
        "input": "¿Cuándo debería preferir `subprocess.run` sobre `os.system`?",
        "output": "`subprocess.run` ofrece mayor control, manejo de errores y seguridad al ejecutar comandos del sistema, mientras que `os.system` es más simple pero menos seguro."
    },
    {
        "input": "¿Cómo puedo reducir el uso de memoria con estructuras de datos grandes?",
        "output": "Usa generadores en lugar de listas o conjuntos, y considera técnicas como compresión de datos o módulos como `array` y `numpy`."
    },
    {
        "input": "¿Qué diferencia hay entre un objeto mutable e inmutable?",
        "output": "Un objeto mutable, como una lista, puede cambiar su contenido después de la creación, mientras que uno inmutable, como una tupla, no puede."
    },
    {
        "input": "¿Cómo puedo liberar memoria manualmente en Python?",
        "output": "Usa el recolector de basura con `import gc; gc.collect()`, aunque Python generalmente lo maneja automáticamente."
    },
    {
        "input": "¿Qué ventajas ofrece `contextlib` para crear manejadores de contexto?",
        "output": "Simplifica la creación de contextos personalizados sin necesidad de definir métodos como `__enter__` y `__exit__` directamente."
    },
    {
        "input": "¿Qué es una clase abstracta y cuándo debería usarla?",
        "output": "Es una plantilla para clases que comparten una estructura base pero deben implementar ciertos métodos en sus subclases."
    },
    {
        "input": "¿Por qué usar excepciones personalizadas?",
        "output": "Permiten manejar errores específicos de la lógica de tu aplicación, haciendo que el código sea más claro y controlable."
    },
    {
        "input": "¿Cómo usar `itertools` para generar combinaciones?",
        "output": "Usa `itertools.combinations` para obtener todas las combinaciones posibles de un iterable con un tamaño fijo."
    },
    {
        "input": "¿Por qué utilizar `os.environ` en lugar de pasar configuraciones manualmente?",
        "output": "`os.environ` permite gestionar configuraciones globales, como claves API o variables de entorno, sin necesidad de alterar el código fuente."
    },
    {
        "input": "¿Qué hace `gzip` y cuándo debería usarlo?",
        "output": "`gzip` comprime datos para reducir el uso de almacenamiento o mejorar la velocidad de transmisión en redes."
    },
    {
        "input": "¿Por qué Python genera archivos `.pyc` automáticamente?",
        "output": "Los archivos `.pyc` contienen bytecode compilado que acelera la ejecución de programas Python al evitar recompilaciones innecesarias."
    },
    {
        "input": "¿Qué beneficios tiene usar `pathlib` sobre `os.path`?",
        "output": "`pathlib` proporciona una API más limpia y orientada a objetos para trabajar con rutas de archivos."
    },
    {
        "input": "¿Cómo evitar errores de `KeyError` en diccionarios?",
        "output": "Usa el método `.get()` para proporcionar un valor predeterminado en caso de que la clave no exista."
    },
    {
        "input": "¿Cuándo es útil usar `uuid` para identificadores?",
        "output": "Es útil cuando necesitas generar identificadores únicos, como en bases de datos distribuidas o sistemas de seguimiento."
    },
    {
        "input": "¿Qué es un archivo temporal y para qué se usa?",
        "output": "Es un archivo creado para almacenar datos temporalmente durante la ejecución de un programa y generalmente se elimina después de su uso."
    },
    {
        "input": "¿Cómo puedo medir el tiempo exacto de ejecución de un fragmento de código?",
        "output": "Usa el módulo `timeit`, que mide el tiempo de ejecución de manera precisa incluso para fragmentos cortos de código."
    },
    {
        "input": "¿Qué hace un descriptor y cuándo debería usarlo?",
        "output": "Un descriptor controla el acceso a atributos de clase mediante métodos como `__get__`, útil para validar o calcular valores dinámicamente."
    },
    {
        "input": "¿Cómo implementar un sistema de caché eficiente en Python?",
        "output": "Usa `functools.lru_cache` para almacenar resultados de funciones o bibliotecas como `redis` para sistemas más avanzados."
    },
    {
        "input": "¿Cómo maneja Python los bucles `for-else`?",
        "output": "La cláusula `else` se ejecuta si el bucle no se rompe, útil para buscar elementos sin éxito."
    },
    {
        "input": "¿Qué diferencia hay entre usar `type` e `isinstance`?",
        "output": "`type` comprueba la clase exacta de un objeto, mientras que `isinstance` incluye herencias y es más flexible."
    },
    {
        "input": "¿Cuándo debería usar el módulo `secrets` en lugar de `random`?",
        "output": "`secrets` es ideal para operaciones que requieren seguridad criptográfica, como generar contraseñas o tokens únicos."
    },
    {
        "input": "¿Qué ventajas tiene usar generadores sobre listas?",
        "output": "Los generadores consumen menos memoria, ya que producen elementos bajo demanda en lugar de almacenarlos todos en memoria."
    },
    {
        "input": "¿Qué hace la cláusula `yield from`?",
        "output": "Delegar la generación de valores a otro generador o iterable, simplificando la estructura de generadores anidados."
    },
    {
        "input": "¿Qué diferencia hay entre `__str__` y `__repr__`?",
        "output": "`__str__` se usa para devolver una representación legible de un objeto, mientras que `__repr__` es para representación no ambigua."
    },
    {
        "input": "¿Cómo manejar archivos grandes sin cargarlos completamente en memoria?",
        "output": "Usa iteradores o lee el archivo línea por línea con `with open('archivo') as f: for linea in f: ...`."
    },
    {
        "input": "¿Por qué usar decoradores anidados?",
        "output": "Permiten aplicar múltiples capas de lógica en una función, combinando funcionalidades como autenticación y registro."
    },
    {
        "input": "¿Cómo puedo leer un archivo línea por línea en Python?",
        "output": "Usa un bucle `for` con el objeto archivo. Ejemplo: `with open('archivo.txt') as f: for linea in f: print(linea.strip())`."
    },
    {
        "input": "¿Cómo escribo datos en un archivo nuevo?",
        "output": "Usa el modo escritura `w`. Ejemplo: `with open('nuevo.txt', 'w') as archivo: archivo.write('Hola, mundo')`."
    },
    {
        "input": "¿Cómo puedo sumar todos los números en una lista?",
        "output": "Usa la función `sum()`. Ejemplo: `mi_lista = [1, 2, 3]; total = sum(mi_lista)`."
    },
    {
        "input": "¿Cómo ordeno una lista de números en orden descendente?",
        "output": "Usa `sorted()` o `.sort()`. Ejemplo: `sorted(lista, reverse=True)`."
    },
    {
        "input": "¿Cómo convierto una cadena en una lista de palabras?",
        "output": "Usa el método `split()`. Ejemplo: `'Hola mundo'.split()` devuelve `['Hola', 'mundo']`."
    },
    {
        "input": "¿Cómo puedo concatenar dos listas?",
        "output": "Usa el operador `+`. Ejemplo: `lista1 + lista2`."
    },
    {
        "input": "¿Cómo verifico si un elemento está en una lista?",
        "output": "Usa el operador `in`. Ejemplo: `if elemento in lista: print('Está en la lista')`."
    },
    {
        "input": "¿Cómo elimino duplicados de una lista?",
        "output": "Convierte la lista a un conjunto y luego de vuelta a lista. Ejemplo: `list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}` o la función `dict()`. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo accedo al valor de una clave en un diccionario?",
        "output": "Usa el nombre de la clave entre corchetes. Ejemplo: `mi_diccionario['clave']`."
    },
    {
        "input": "¿Cómo puedo sumar los valores de un diccionario?",
        "output": "Usa la función `sum()` sobre `mi_diccionario.values()`. Ejemplo: `sum(mi_diccionario.values())`."
    },
    {
        "input": "¿Cómo convierto un diccionario en un archivo JSON?",
        "output": "Usa `json.dump()`. Ejemplo: `import json; with open('datos.json', 'w') as f: json.dump(mi_diccionario, f)`."
    },
    {
        "input": "¿Cómo encuentro el elemento más grande de una lista?",
        "output": "Usa la función `max()`. Ejemplo: `max(lista)`."
    },
    {
        "input": "¿Cómo obtengo la longitud de una lista o string?",
        "output": "Usa la función `len()`. Ejemplo: `len(mi_lista)` o `len(mi_cadena)`."
    },
    {
        "input": "¿Cómo puedo manejar un error de división por cero?",
        "output": "Usa un bloque `try-except`. Ejemplo: `try: resultado = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Cómo ejecuto una función en paralelo con otra?",
        "output": "Usa el módulo `threading` o `concurrent.futures`. Ejemplo: `from threading import Thread; t = Thread(target=mi_funcion); t.start()`."
    },
    {
        "input": "¿Cómo creo un generador en Python?",
        "output": "Usa la palabra clave `yield`. Ejemplo: `def generador(): yield 1; yield 2`."
    },
    {
        "input": "¿Cómo puedo filtrar una lista con una condición?",
        "output": "Usa la función `filter()` o una comprensión de listas. Ejemplo: `[x for x in lista if x > 0]`."
    },
    {
        "input": "¿Cómo convierto una lista en una cadena separada por comas?",
        "output": "Usa el método `join()`. Ejemplo: `', '.join(['a', 'b', 'c'])` devuelve `'a, b, c'`."
    },
    {
        "input": "¿Cómo convierto un string a minúsculas?",
        "output": "Usa el método `.lower()`. Ejemplo: `'Hola'.lower()` devuelve `'hola'`."
    },
    {
        "input": "¿Cómo obtengo solo las claves de un diccionario?",
        "output": "Usa el método `.keys()`. Ejemplo: `mi_diccionario.keys()`."
    },
    {
        "input": "¿Cómo copio un diccionario?",
        "output": "Usa el método `.copy()`. Ejemplo: `copia = mi_diccionario.copy()`."
    },
    {
        "input": "¿Cómo puedo crear un bucle infinito?",
        "output": "Usa `while True:`. Ejemplo: `while True: print('Esto es un bucle infinito')`."
    },
    {
        "input": "¿Cómo puedo detener un bucle antes de que termine?",
        "output": "Usa la instrucción `break`. Ejemplo: `for x in lista: if x == 5: break`."
    },
    {
        "input": "¿Cómo calculo la intersección de dos conjuntos?",
        "output": "Usa el operador `&`. Ejemplo: `conjunto1 & conjunto2`."
    },
    {
        "input": "¿Cómo obtengo la diferencia entre dos conjuntos?",
        "output": "Usa el operador `-`. Ejemplo: `conjunto1 - conjunto2`."
    },
    {
        "input": "¿Cómo creo una clase en Python?",
        "output": "Usa la palabra clave `class`. Ejemplo: `class MiClase: pass`."
    },
    {
        "input": "¿Cómo defino un constructor en una clase?",
        "output": "Usa el método `__init__`. Ejemplo: `class MiClase: def __init__(self, atributo): self.atributo = atributo`."
    },
    {
        "input": "¿Cómo obtengo la fecha y hora actuales?",
        "output": "Usa el módulo `datetime`. Ejemplo: `from datetime import datetime; ahora = datetime.now()`."
    },
    {
        "input": "¿Cómo verifico si un número es par o impar?",
        "output": "Usa el operador `%`. Ejemplo: `if numero % 2 == 0: print('Par') else: print('Impar')`."
    },
    {
        "input": "¿Cómo genero un número aleatorio?",
        "output": "Usa el módulo `random`. Ejemplo: `import random; numero = random.randint(1, 10)`."
    },
    {
        "input": "¿Cómo hago una consulta a una base de datos SQLite?",
        "output": "Usa el módulo `sqlite3`. Ejemplo: `cursor.execute('SELECT * FROM tabla')`."
    },
    {
        "input": "¿Cómo puedo manejar argumentos desde la línea de comandos?",
        "output": "Usa el módulo `argparse`. Ejemplo: `import argparse; parser = argparse.ArgumentParser(); parser.add_argument('--nombre')`."
    },
    {
        "input": "¿Cómo creo una variable en Python?",
        "output": "Solo necesitas asignar un valor a un nombre. Ejemplo: `mi_variable = 10`."
    },
    {
        "input": "¿Cómo hago un ciclo `for` en Python?",
        "output": "Usa la estructura `for`. Ejemplo: `for i in range(5): print(i)` imprime los números del 0 al 4."
    },
    {
        "input": "¿Cómo hago un ciclo `while`?",
        "output": "Usa la estructura `while`. Ejemplo: `contador = 0; while contador < 5: print(contador); contador += 1`."
    },
    {
        "input": "¿Cómo creo una lista en Python?",
        "output": "Usa corchetes para definirla. Ejemplo: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}` para definirlo. Ejemplo: `mi_diccionario = {'nombre': 'Juan', 'edad': 30}`."
    },
    {
        "input": "¿Cómo imprimo algo en pantalla?",
        "output": "Usa la función `print()`. Ejemplo: `print('Hola, mundo')`."
    },
    {
        "input": "¿Cómo pido datos al usuario?",
        "output": "Usa la función `input()`. Ejemplo: `nombre = input('¿Cómo te llamas? ')`."
    },
    {
        "input": "¿Cómo convierto un string a un número?",
        "output": "Usa las funciones `int()` o `float()`. Ejemplo: `numero = int('10')` o `decimal = float('3.14')`."
    },
    {
        "input": "¿Cómo hago una condición `if` en Python?",
        "output": "Usa la estructura `if`. Ejemplo: `if edad > 18: print('Eres mayor de edad')`."
    },
    {
        "input": "¿Cómo hago una condición `if-else`?",
        "output": "Añade un bloque `else`. Ejemplo: `if numero > 0: print('Positivo') else: print('Negativo o cero')`."
    },
    {
        "input": "¿Cómo defino una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Cómo paso parámetros a una función?",
        "output": "Inclúyelos entre paréntesis al definir la función. Ejemplo: `def sumar(a, b): return a + b`."
    },
    {
        "input": "¿Cómo uso un bucle para recorrer una lista?",
        "output": "Usa un bucle `for`. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Cómo verifico si un número es positivo?",
        "output": "Usa una condición `if`. Ejemplo: `if numero > 0: print('Es positivo')`."
    },
    {
        "input": "¿Cómo verifico si un número es par?",
        "output": "Usa el operador `%`. Ejemplo: `if numero % 2 == 0: print('Es par')`."
    },
    {
        "input": "¿Cómo creo un rango de números?",
        "output": "Usa la función `range()`. Ejemplo: `for i in range(1, 6): print(i)` imprime los números del 1 al 5."
    },
    {
        "input": "¿Cómo detengo un ciclo antes de que termine?",
        "output": "Usa la instrucción `break`. Ejemplo: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "¿Cómo salto a la siguiente iteración en un ciclo?",
        "output": "Usa la instrucción `continue`. Ejemplo: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "¿Cómo agrego un elemento a una lista?",
        "output": "Usa el método `.append()`. Ejemplo: `mi_lista.append(4)`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista?",
        "output": "Usa el método `.remove()`. Ejemplo: `mi_lista.remove(2)` elimina el valor `2` de la lista."
    },
    {
        "input": "¿Cómo obtengo la longitud de una lista?",
        "output": "Usa la función `len()`. Ejemplo: `len(mi_lista)`."
    },
    {
        "input": "¿Cómo accedo a un elemento de una lista?",
        "output": "Usa el índice del elemento entre corchetes. Ejemplo: `mi_lista[0]` devuelve el primer elemento."
    },
    {
        "input": "¿Cómo obtengo el último elemento de una lista?",
        "output": "Usa el índice `-1`. Ejemplo: `mi_lista[-1]`."
    },
    {
        "input": "¿Cómo ordeno una lista?",
        "output": "Usa el método `.sort()` o la función `sorted()`. Ejemplo: `mi_lista.sort()`."
    },
    {
        "input": "¿Cómo convierto una lista en un string?",
        "output": "Usa el método `join()`. Ejemplo: `', '.join(['a', 'b', 'c'])` devuelve `'a, b, c'`."
    },
    {
        "input": "¿Cómo creo una variable en Python?",
        "output": "Solo necesitas asignarle un valor. Ejemplo: `mi_variable = 10`."
    },
    {
        "input": "¿Cómo se imprime algo en Python?",
        "output": "Usa la función `print()`. Ejemplo: `print('Hola, mundo')`."
    },
    {
        "input": "¿Cómo hago un ciclo `for` en Python?",
        "output": "Usa `for` seguido de un iterable. Ejemplo: `for i in range(5): print(i)` imprime los números del 0 al 4."
    },
    {
        "input": "¿Cómo hago un ciclo `while` en Python?",
        "output": "Usa `while` con una condición. Ejemplo: `i = 0; while i < 5: print(i); i += 1`."
    },
    {
        "input": "¿Cómo creo una lista en Python?",
        "output": "Usa corchetes. Ejemplo: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Cómo verifico si un número es mayor que otro?",
        "output": "Usa operadores como `>` o `<`. Ejemplo: `if x > y: print('x es mayor que y')`."
    },
    {
        "input": "¿Cómo hago una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Cómo sumo dos números en Python?",
        "output": "Usa el operador `+`. Ejemplo: `resultado = 5 + 3`."
    },
    {
        "input": "¿Cómo concateno cadenas de texto?",
        "output": "Usa el operador `+`. Ejemplo: `saludo = 'Hola' + ' ' + 'mundo'`."
    },
    {
        "input": "¿Cómo se usa `if` en Python?",
        "output": "Define una condición. Ejemplo: `if x > 0: print('x es positivo')`."
    },
    {
        "input": "¿Cómo agrego un elemento a una lista?",
        "output": "Usa el método `.append()`. Ejemplo: `mi_lista.append(4)`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}`. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo verifico si una clave está en un diccionario?",
        "output": "Usa el operador `in`. Ejemplo: `if 'clave' in mi_diccionario: print('Clave encontrada')`."
    },
    {
        "input": "¿Cómo creo un bucle que recorra una lista?",
        "output": "Usa un ciclo `for`. Ejemplo: `for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Cómo divido un número entre otro?",
        "output": "Usa el operador `/`. Ejemplo: `resultado = 10 / 2`."
    },
    {
        "input": "¿Cómo obtengo el resto de una división?",
        "output": "Usa el operador `%`. Ejemplo: `resto = 10 % 3`."
    },
    {
        "input": "¿Cómo puedo repetir algo un número específico de veces?",
        "output": "Usa `for` con `range()`. Ejemplo: `for i in range(5): print('Hola')`."
    },
    {
        "input": "¿Cómo genero una lista de números consecutivos?",
        "output": "Usa `list()` y `range()`. Ejemplo: `list(range(5))` devuelve `[0, 1, 2, 3, 4]`."
    },
    {
        "input": "¿Cómo convierto un número a cadena?",
        "output": "Usa `str()`. Ejemplo: `str(123)` devuelve `'123'`."
    },
    {
        "input": "¿Cómo convierto una cadena a número?",
        "output": "Usa `int()` o `float()`. Ejemplo: `int('123')` devuelve `123`."
    },
    {
        "input": "¿Cómo compruebo si una cadena contiene otra?",
        "output": "Usa el operador `in`. Ejemplo: `if 'mundo' in 'Hola mundo': print('Encontrado')`."
    },
    {
        "input": "¿Cómo creo una tupla en Python?",
        "output": "Usa paréntesis. Ejemplo: `mi_tupla = (1, 2, 3)`."
    },
    {
        "input": "¿Cómo defino una constante en Python?",
        "output": "No hay constantes reales en Python, pero por convención usa mayúsculas. Ejemplo: `CONSTANTE = 3.14`."
    },
    {
        "input": "¿Cómo hago que un programa espere unos segundos?",
        "output": "Usa el módulo `time`. Ejemplo: `import time; time.sleep(2)` espera 2 segundos."
    },
    {
        "input": "¿Cómo obtengo la entrada del usuario?",
        "output": "Usa la función `input()`. Ejemplo: `nombre = input('¿Cuál es tu nombre? ')`."
    },
    {
        "input": "¿Cómo verifico si un número es impar?",
        "output": "Comprueba si el resto de la división entre 2 no es cero. Ejemplo: `if numero % 2 != 0: print('Impar')`."
    },
    {
        "input": "¿Cómo hago una comparación con `elif`?",
        "output": "Usa `elif` para condiciones adicionales. Ejemplo: `if x > 0: print('Positivo') elif x == 0: print('Cero') else: print('Negativo')`."
    },
    {
        "input": "¿Cómo uso una variable dentro de una cadena?",
        "output": "Usa una f-string. Ejemplo: `nombre = 'Juan'; print(f'Hola, {nombre}')`."
    },
    {
        "input": "¿Cómo puedo terminar un programa en Python?",
        "output": "Usa `exit()` o `sys.exit()`. Ejemplo: `import sys; sys.exit()`."
    },
    {
        "input": "¿Cómo multiplico cadenas?",
        "output": "Usa el operador `*`. Ejemplo: `'Hola' * 3` devuelve `'HolaHolaHola'`."
    },
    {
        "input": "¿Cómo verifico si una lista está vacía?",
        "output": "Comprueba su longitud. Ejemplo: `if not mi_lista: print('Lista vacía')`."
    },
    {
        "input": "¿Cómo se usa `pass` en Python?",
        "output": "Es un marcador de posición que no hace nada. Ejemplo: `if True: pass`."
    },
    {
        "input": "¿Cómo puedo redondear un número?",
        "output": "Usa la función `round()`. Ejemplo: `round(3.14159, 2)` devuelve `3.14`."
    },
    {
        "input": "¿Qué es una computadora?",
        "output": "Una computadora es una máquina electrónica que procesa datos y realiza operaciones según las instrucciones que recibe, ejecutando tareas de manera rápida y precisa."
    },
    {
        "input": "¿Cómo funciona una computadora?",
        "output": "Una computadora funciona a través de la interacción de su hardware y software. El hardware realiza las operaciones físicas, mientras que el software proporciona las instrucciones para que esas operaciones se lleven a cabo."
    },
    {
        "input": "¿Qué es el hardware de una computadora?",
        "output": "El hardware de una computadora incluye todos los componentes físicos, como la CPU, la memoria, el disco duro, el monitor, y los periféricos como el teclado y el ratón."
    },
    {
        "input": "¿Qué es el software de una computadora?",
        "output": "El software es el conjunto de programas y aplicaciones que permiten a la computadora realizar tareas específicas, como procesadores de texto, navegadores web y sistemas operativos."
    },
    {
        "input": "¿Cuál es la diferencia entre hardware y software?",
        "output": "El hardware son los componentes físicos de la computadora, mientras que el software son los programas y sistemas que controlan el hardware para ejecutar tareas."
    },
    {
        "input": "¿Qué es una CPU?",
        "output": "La CPU (Unidad Central de Procesamiento) es el cerebro de la computadora, responsable de ejecutar instrucciones y coordinar todas las operaciones dentro del sistema."
    },
    {
        "input": "¿Qué es la memoria RAM?",
        "output": "La memoria RAM (Memoria de Acceso Aleatorio) es un tipo de memoria volátil que la computadora usa para almacenar datos temporales mientras está en funcionamiento."
    },
    {
        "input": "¿Qué es un disco duro?",
        "output": "El disco duro es un dispositivo de almacenamiento permanente que guarda el sistema operativo, programas y datos del usuario, incluso cuando la computadora está apagada."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es un software que gestiona el hardware de la computadora y permite que los usuarios interactúen con el sistema, ejecutando aplicaciones y gestionando recursos."
    },
    {
        "input": "¿Cuáles son los sistemas operativos más comunes?",
        "output": "Los sistemas operativos más comunes incluyen Windows, macOS, Linux, y los sistemas móviles como Android e iOS."
    },
    {
        "input": "¿Qué es la tarjeta gráfica?",
        "output": "La tarjeta gráfica es un componente de hardware que maneja el procesamiento de imágenes, videos y gráficos, permitiendo la visualización en el monitor."
    },
    {
        "input": "¿Qué es una placa base?",
        "output": "La placa base o motherboard es la tarjeta principal de la computadora, donde se conectan todos los componentes esenciales como la CPU, la RAM, y los periféricos."
    },
    {
        "input": "¿Qué es un puerto USB?",
        "output": "Un puerto USB es una interfaz que permite conectar dispositivos periféricos, como teclados, ratones, y memorias externas, a la computadora."
    },
    {
        "input": "¿Qué es una tarjeta de sonido?",
        "output": "Una tarjeta de sonido es un dispositivo que permite a la computadora procesar y emitir audio, gestionando la entrada y salida de sonido."
    },
    {
        "input": "¿Qué es una red informática?",
        "output": "Una red informática es un conjunto de computadoras y otros dispositivos conectados entre sí para compartir recursos e información."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es una computadora o programa que ofrece servicios, como almacenamiento de datos o acceso a aplicaciones, a otras computadoras en una red."
    },
    {
        "input": "¿Qué es la nube?",
        "output": "La nube es un servicio que permite almacenar datos y ejecutar aplicaciones a través de Internet, sin necesidad de tenerlos en un dispositivo físico local."
    },
    {
        "input": "¿Qué es un navegador web?",
        "output": "Un navegador web es un software que permite acceder y visualizar sitios web en Internet, como Google Chrome, Firefox, y Safari."
    },
    {
        "input": "¿Qué es el BIOS?",
        "output": "El BIOS (Basic Input Output System) es un software básico que se encuentra en la placa base de la computadora y gestiona el arranque y la configuración inicial del hardware."
    },
    {
        "input": "¿Qué es la tarjeta madre?",
        "output": "La tarjeta madre, o placa base, es el componente central de la computadora que conecta todos los demás componentes, como la CPU, la memoria RAM y los dispositivos de almacenamiento."
    },
    {
        "input": "¿Qué son los periféricos de una computadora?",
        "output": "Los periféricos son dispositivos externos que se conectan a la computadora para agregarle funcionalidad, como impresoras, escáneres, ratones y teclados."
    },
    {
        "input": "¿Qué es un teclado?",
        "output": "Un teclado es un dispositivo de entrada que permite al usuario interactuar con la computadora mediante la introducción de texto y comandos."
    },
    {
        "input": "¿Qué es un ratón o mouse?",
        "output": "Un ratón es un dispositivo de entrada que permite al usuario mover un puntero en la pantalla de la computadora para seleccionar o interactuar con objetos."
    },
    {
        "input": "¿Qué es una impresora?",
        "output": "Una impresora es un dispositivo periférico que permite imprimir documentos o imágenes desde la computadora en papel."
    },
    {
        "input": "¿Qué es un monitor?",
        "output": "Un monitor es un dispositivo de salida que muestra información visual generada por la computadora, como texto, imágenes y videos."
    },
    {
        "input": "¿Qué son las tarjetas de expansión?",
        "output": "Las tarjetas de expansión son componentes adicionales que se pueden insertar en la placa base de la computadora para mejorar o añadir funcionalidades, como tarjetas gráficas, de sonido o de red."
    },
    {
        "input": "¿Qué es la tecnología de 64 bits?",
        "output": "La tecnología de 64 bits se refiere a la capacidad de una computadora de procesar datos en bloques de 64 bits, lo que permite un mejor rendimiento y mayor capacidad de memoria."
    },
    {
        "input": "¿Qué es una dirección IP?",
        "output": "Una dirección IP (Protocolo de Internet) es una etiqueta numérica que identifica de manera única a una computadora o dispositivo en una red."
    },
    {
        "input": "¿Qué es la RAM?",
        "output": "La RAM (Memoria de Acceso Aleatorio) es un tipo de memoria volátil que permite a la computadora almacenar temporalmente datos que se utilizan mientras se ejecutan aplicaciones."
    },
    {
        "input": "¿Qué es el almacenamiento SSD?",
        "output": "El almacenamiento SSD (Unidad de Estado Sólido) es un tipo de almacenamiento que utiliza memoria flash para guardar datos, lo que proporciona velocidades de lectura y escritura mucho más rápidas que los discos duros tradicionales."
    },
    {
        "input": "¿Qué es un sistema de enfriamiento en una computadora?",
        "output": "Un sistema de enfriamiento es un conjunto de componentes, como ventiladores o disipadores de calor, que mantienen la temperatura de la computadora dentro de un rango seguro para evitar el sobrecalentamiento."
    },
    {
        "input": "¿Qué es la arquitectura de una computadora?",
        "output": "La arquitectura de una computadora se refiere al diseño y la organización de sus componentes, incluyendo la CPU, memoria, almacenamiento y los sistemas de entrada y salida."
    },
    {
        "input": "¿Qué es un byte?",
        "output": "Un byte es una unidad de información que representa 8 bits, y es la cantidad mínima de datos que una computadora puede manejar a la vez."
    },
    {
        "input": "¿Qué es un bit?",
        "output": "Un bit es la unidad más pequeña de información en computación y puede tener un valor de 0 o 1."
    },
    {
        "input": "¿Qué es una GPU?",
        "output": "La GPU (Unidad de Procesamiento Gráfico) es un componente especializado que maneja el procesamiento gráfico de la computadora, especialmente en tareas como juegos y renderizado de imágenes."
    },
    {
        "input": "¿Qué es el overclocking?",
        "output": "El overclocking es la práctica de aumentar la velocidad de operación de los componentes de la computadora, como la CPU o la GPU, más allá de su especificación estándar para mejorar el rendimiento."
    },
    {
        "input": "¿Qué es la conectividad Wi-Fi?",
        "output": "La conectividad Wi-Fi es una tecnología que permite a los dispositivos conectarse a Internet y a otras redes de manera inalámbrica mediante ondas de radio."
    },
    {
        "input": "¿Qué es un firewall?",
        "output": "Un firewall es una herramienta de seguridad que controla el tráfico de red, permitiendo o bloqueando comunicaciones según un conjunto de reglas predefinidas."
    },
    {
        "input": "¿Qué es un antivirus?",
        "output": "Un antivirus es un software diseñado para detectar, prevenir y eliminar virus y otros tipos de malware de una computadora."
    },
    {
        "input": "¿Qué es la virtualización?",
        "output": "La virtualización es una tecnología que permite ejecutar varios sistemas operativos o instancias de software en una sola computadora, creando entornos independientes dentro de la misma máquina."
    },
    {
        "input": "¿Qué es un dispositivo de almacenamiento externo?",
        "output": "Un dispositivo de almacenamiento externo es un equipo que permite guardar datos fuera de la computadora, como discos duros externos, memorias USB o tarjetas SD."
    },
    {
        "input": "¿Qué es el procesador de texto?",
        "output": "Un procesador de texto es un software que permite crear, editar, formatear y guardar documentos de texto, como Microsoft Word o Google Docs."
    },
    {
        "input": "¿Qué es un sistema de archivos?",
        "output": "Un sistema de archivos es la estructura que organiza cómo se almacenan y acceden los datos en un dispositivo de almacenamiento."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es un modelo que permite almacenar y procesar datos en servidores remotos, accesibles a través de Internet, en lugar de en la computadora local."
    },
    {
        "input": "¿Qué es un dispositivo de entrada?",
        "output": "Un dispositivo de entrada es cualquier periférico que permite al usuario introducir datos en la computadora, como el teclado, el ratón o el escáner."
    },
    {
        "input": "¿Qué es un dispositivo de salida?",
        "output": "Un dispositivo de salida es cualquier periférico que permite a la computadora mostrar datos al usuario, como el monitor, la impresora o los altavoces."
    },
    {
        "input": "¿Qué tipos de sistemas tecnológicos existen?",
        "output": "Existen diversos tipos de sistemas tecnológicos, entre ellos: sistemas operativos, sistemas de comunicación, sistemas de control, sistemas embebidos, sistemas de redes, sistemas de información, y sistemas de software, entre otros."
    },
    {
        "input": "¿Cuántos tipos de sistemas operativos hay?",
        "output": "Hay varios tipos de sistemas operativos, como los sistemas operativos de escritorio (Windows, macOS, Linux), sistemas operativos móviles (Android, iOS), y sistemas operativos en tiempo real, entre otros."
    },
    {
        "input": "¿Qué es un sistema de comunicación en tecnología?",
        "output": "Un sistema de comunicación es un conjunto de componentes tecnológicos que permite la transmisión de datos entre dispositivos, como las redes móviles, el Internet y las redes locales."
    },
    {
        "input": "¿Qué es un sistema embebido?",
        "output": "Un sistema embebido es un sistema de computación que está dedicado a realizar una tarea específica y está integrado en dispositivos como electrodomésticos, automóviles y sistemas industriales."
    },
    {
        "input": "¿Cuántos tipos de sistemas de redes existen?",
        "output": "Existen diferentes tipos de sistemas de redes, como redes LAN (Local Area Network), WAN (Wide Area Network), MAN (Metropolitan Area Network), y redes inalámbricas (Wi-Fi, Bluetooth, 5G), entre otros."
    },
    {
        "input": "¿Qué es un sistema de información?",
        "output": "Un sistema de información es un conjunto de componentes tecnológicos que permiten la recopilación, almacenamiento, procesamiento y distribución de información para apoyar la toma de decisiones y la gestión empresarial."
    },
    {
        "input": "¿Qué son los sistemas distribuidos?",
        "output": "Un sistema distribuido es un conjunto de computadoras interconectadas que trabajan conjuntamente para proporcionar un servicio, compartiendo recursos como procesamiento y almacenamiento, sin depender de una máquina central."
    },
    {
        "input": "¿Qué es un sistema de software?",
        "output": "Un sistema de software es un conjunto de programas y aplicaciones diseñadas para ejecutar tareas específicas en una computadora o dispositivo, como procesadores de texto, navegadores web y sistemas operativos."
    },
    {
        "input": "¿Qué es un sistema de control?",
        "output": "Un sistema de control es un sistema que regula y monitorea el comportamiento de un proceso o dispositivo para mantenerlo dentro de ciertos límites, como los sistemas de control de temperatura o de velocidad."
    },
    {
        "input": "¿Qué es un sistema experto?",
        "output": "Un sistema experto es un tipo de sistema basado en inteligencia artificial diseñado para simular el proceso de toma de decisiones de un experto en un área específica, usando bases de conocimiento y reglas de inferencia."
    },
    {
        "input": "¿Qué es un sistema de almacenamiento en la nube?",
        "output": "Un sistema de almacenamiento en la nube es un servicio que permite almacenar y acceder a datos a través de Internet en lugar de depender de almacenamiento local, como Google Drive, Dropbox y OneDrive."
    },
    {
        "input": "¿Qué es un sistema de seguridad cibernética?",
        "output": "Un sistema de seguridad cibernética es un conjunto de tecnologías y prácticas diseñadas para proteger las redes, dispositivos y datos contra accesos no autorizados, ataques o daños."
    },
    {
        "input": "¿Qué es un sistema de gestión empresarial?",
        "output": "Un sistema de gestión empresarial (ERP) es una solución tecnológica que ayuda a las empresas a gestionar de manera integrada diferentes procesos como contabilidad, inventarios, ventas y recursos humanos."
    },
    {
        "input": "¿Cuántos tipos de sistemas de bases de datos existen?",
        "output": "Existen diferentes tipos de sistemas de bases de datos, como bases de datos relacionales, no relacionales (NoSQL), distribuidas, jerárquicas, de objetos, entre otros."
    },
    {
        "input": "¿Qué es un sistema de comunicación inalámbrica?",
        "output": "Un sistema de comunicación inalámbrica es un sistema que transmite datos sin cables, usando señales de radiofrecuencia, como en el caso de Wi-Fi, Bluetooth, y las redes móviles."
    },
    {
        "input": "¿Qué es un sistema de gestión de contenido?",
        "output": "Un sistema de gestión de contenido (CMS) es una plataforma que permite crear, gestionar y modificar contenido digital, como texto, imágenes y videos, sin necesidad de conocimientos técnicos de programación."
    },
    {
        "input": "¿Qué es un sistema de virtualización?",
        "output": "Un sistema de virtualización permite ejecutar múltiples sistemas operativos en una sola máquina física, creando entornos virtuales aislados para maximizar el uso de recursos."
    },
    {
        "input": "¿Qué es un sistema de monitoreo remoto?",
        "output": "Un sistema de monitoreo remoto es un sistema que permite supervisar y controlar dispositivos o procesos a distancia, utilizando redes y tecnologías de comunicación."
    },
    {
        "input": "¿Qué es un sistema de navegación?",
        "output": "Un sistema de navegación es un conjunto de dispositivos y software que permite determinar la ubicación de un objeto y guiarlo hacia un destino, como en los GPS o sistemas de navegación de vehículos."
    },
    {
        "input": "¿Qué es un sistema de procesamiento de pagos?",
        "output": "Un sistema de procesamiento de pagos es un sistema que facilita la transacción de dinero entre compradores y vendedores, como los sistemas de pago en línea o las terminales de punto de venta."
    },
    {
        "input": "¿Qué es un sistema de inteligencia artificial?",
        "output": "Un sistema de inteligencia artificial es un conjunto de tecnologías que permiten a las máquinas realizar tareas que normalmente requieren inteligencia humana, como reconocimiento de voz, aprendizaje automático y toma de decisiones."
    },
    {
        "input": "¿Qué es un sistema de soporte técnico?",
        "output": "Un sistema de soporte técnico es un conjunto de herramientas y servicios que ayudan a resolver problemas técnicos relacionados con software, hardware o sistemas informáticos."
    },
    {
        "input": "¿Qué es un sistema de automatización?",
        "output": "Un sistema de automatización es un sistema diseñado para realizar tareas o procesos sin intervención humana, utilizando dispositivos controlados electrónicamente, como en la fabricación y en el hogar inteligente."
    },
    {
        "input": "¿Qué es un sistema de control industrial?",
        "output": "Un sistema de control industrial es un sistema tecnológico utilizado para gestionar y supervisar la operación de maquinaria y procesos industriales, como los controladores lógicos programables (PLC)."
    },
    {
        "input": "¿Qué es un sistema de recomendación?",
        "output": "Un sistema de recomendación es un sistema basado en algoritmos que sugiere productos, servicios o contenidos a los usuarios en función de sus preferencias y comportamientos previos, como los de Amazon o Netflix."
    },
    {
        "input": "¿Qué es un sistema de mensajería instantánea?",
        "output": "Un sistema de mensajería instantánea es un servicio de comunicación en línea que permite enviar y recibir mensajes en tiempo real, como WhatsApp, Telegram y Slack."
    },
    {
        "input": "¿Qué es un sistema de detección de intrusos?",
        "output": "Un sistema de detección de intrusos (IDS) es un sistema de seguridad que monitorea las redes y sistemas para detectar actividades sospechosas o maliciosas que puedan indicar un intento de acceso no autorizado."
    },
    {
        "input": "¿Qué es un sistema operativo en tiempo real?",
        "output": "Un sistema operativo en tiempo real es un sistema operativo diseñado para garantizar que las tareas se completen en un tiempo específico, siendo fundamental en aplicaciones como la aviación o la medicina."
    },
    {
        "input": "¿Qué es un sistema de control de versiones?",
        "output": "Un sistema de control de versiones es una herramienta de software que ayuda a gestionar los cambios en el código fuente de los programas, como Git, permitiendo rastrear y revertir modificaciones."
    },
    {
        "input": "¿Qué es un sistema de computación cuántica?",
        "output": "Un sistema de computación cuántica es una tecnología que utiliza los principios de la mecánica cuántica para realizar cálculos, lo que podría permitir la resolución de problemas muy complejos a una velocidad mucho mayor que las computadoras tradicionales."
    },
    {
        "input": "¿Qué es un sistema de reconocimiento facial?",
        "output": "Un sistema de reconocimiento facial es un sistema de inteligencia artificial que analiza y compara patrones faciales para identificar o verificar la identidad de una persona."
    },
    {
        "input": "¿Qué es un sistema de inteligencia empresarial?",
        "output": "Un sistema de inteligencia empresarial (BI) es un conjunto de herramientas y tecnologías que ayudan a las empresas a recopilar, analizar e interpretar datos para tomar decisiones informadas."
    },
    {
        "input": "¿Qué es un sistema de análisis de datos?",
        "output": "Un sistema de análisis de datos es una plataforma o conjunto de herramientas que permite recolectar, procesar y analizar grandes cantidades de datos para obtener información útil y tomar decisiones basadas en datos."
    },
    {
        "input": "¿Qué es un sistema de protección contra desastres?",
        "output": "Un sistema de protección contra desastres es un sistema tecnológico que permite la protección de datos e infraestructura ante eventos inesperados, como desastres naturales o fallos del sistema."
    },
    {
        "input": "¿Qué es un sistema de respaldo?",
        "output": "Un sistema de respaldo es una solución que crea copias de seguridad de los datos para garantizar su recuperación en caso de pérdida o daño, como servicios de almacenamiento en la nube o discos duros externos."
    },
    {
        "input": "¿Qué es un sistema de control de tráfico?",
        "output": "Un sistema de control de tráfico es un sistema tecnológico utilizado para gestionar el flujo de vehículos y peatones, utilizando semáforos, cámaras y sensores para mejorar la seguridad y la eficiencia."
    },
    {
        "input": "¿Qué es un sistema de pago móvil?",
        "output": "Un sistema de pago móvil es un sistema que permite realizar transacciones financieras a través de teléfonos móviles, como Apple Pay, Google Pay y otros servicios de pago digital."
    },
    {
        "input": "¿Qué es un sistema de monitoreo de salud?",
        "output": "Un sistema de monitoreo de salud es un sistema que recopila y analiza datos sobre la salud de una persona en tiempo real, como los dispositivos de seguimiento de actividad o los sistemas de telemedicina."
    },
    {
        "input": "¿Qué es un sistema de control de inventario?",
        "output": "Un sistema de control de inventario es un sistema tecnológico que ayuda a gestionar las existencias de productos en una tienda o almacén, optimizando el proceso de compra, almacenamiento y venta."
    },
    {
        "input": "¿Qué es un sistema de análisis predictivo?",
        "output": "Un sistema de análisis predictivo utiliza algoritmos de machine learning y big data para analizar datos históricos y hacer predicciones sobre eventos futuros, como en la previsión de demanda de productos."
    },
    {
        "input": "¿Qué es un sistema de automatización del hogar?",
        "output": "Un sistema de automatización del hogar es un sistema que controla y automatiza dispositivos domésticos, como luces, termostatos y cámaras de seguridad, permitiendo su gestión a través de aplicaciones o asistentes virtuales."
    },
    {
        "input": "¿Qué es un sistema de verificación de identidad?",
        "output": "Un sistema de verificación de identidad es un sistema que asegura que una persona o entidad es quien dice ser, mediante métodos como contraseñas, huellas dactilares, reconocimiento facial o autenticación de dos factores."
    },
    {
        "input": "¿Cómo creo una variable en Python?",
        "output": "En Python, se crea una variable simplemente asignando un valor a un nombre, por ejemplo: `mi_variable = 10`."
    },
    {
        "input": "¿Puedo crear una variable sin darle un valor?",
        "output": "No, en Python debes asignar un valor a la variable cuando la creas. Si intentas usar una variable sin asignarle un valor, obtendrás un error."
    },
    {
        "input": "¿Qué tipo de valores puedo asignar a una variable?",
        "output": "Puedes asignar varios tipos de valores a una variable, como enteros, cadenas de texto, números decimales (flotantes), listas, tuplas, diccionarios, entre otros."
    },
    {
        "input": "¿Cómo creo una variable con un valor entero?",
        "output": "Para crear una variable con un valor entero, solo necesitas asignar un número sin decimales, como: `edad = 25`."
    },
    {
        "input": "¿Cómo creo una variable con un valor decimal?",
        "output": "Para crear una variable con un valor decimal (flotante), asigna un número con punto decimal, como: `precio = 19.99`."
    },
    {
        "input": "¿Cómo asigno un valor de texto a una variable?",
        "output": "Para asignar un texto (cadena de caracteres) a una variable, debes rodearlo con comillas simples o dobles, como: `nombre = 'Juan'` o `nombre = \"Juan\"`."
    },
    {
        "input": "¿Cómo puedo cambiar el valor de una variable?",
        "output": "Puedes cambiar el valor de una variable simplemente asignándole un nuevo valor, como: `edad = 30` si anteriormente tenías `edad = 25`."
    },
    {
        "input": "¿Puedo crear una variable sin asignar un valor inicial?",
        "output": "En Python, siempre debes asignar un valor inicial a la variable cuando la creas. No puedes declarar una variable sin un valor."
    },
    {
        "input": "¿Qué pasa si asigno un valor incorrecto a una variable?",
        "output": "Si intentas asignar un valor incompatible con el tipo de la variable, Python generará un error. Por ejemplo, asignar un texto a una variable que espera un número causará un error."
    },
    {
        "input": "¿Cómo puedo saber el tipo de una variable?",
        "output": "Para saber el tipo de una variable, puedes usar la función `type()`, como: `print(type(mi_variable))`."
    },
    {
        "input": "¿Puedo usar espacios en los nombres de las variables?",
        "output": "No, en Python los nombres de las variables no pueden contener espacios. Si necesitas separar palabras, puedes usar guiones bajos, como: `mi_variable`."
    },
    {
        "input": "¿Las variables en Python son sensibles a mayúsculas y minúsculas?",
        "output": "Sí, las variables en Python son sensibles a mayúsculas y minúsculas. Por ejemplo, `edad` y `Edad` son dos variables diferentes."
    },
    {
        "input": "¿Cuáles son las reglas para nombrar una variable en Python?",
        "output": "Los nombres de las variables deben comenzar con una letra o un guion bajo (`_`), seguido de letras, números o guiones bajos. No pueden comenzar con un número ni ser palabras reservadas en Python."
    },
    {
        "input": "¿Cómo creo una variable global en Python?",
        "output": "Para crear una variable global en Python, solo debes definirla fuera de cualquier función, de modo que esté disponible en todo el programa."
    },
    {
        "input": "¿Qué es una variable local en Python?",
        "output": "Una variable local es aquella que se define dentro de una función y solo es accesible dentro de esa función."
    },
    {
        "input": "¿Puedo usar variables dentro de cadenas de texto?",
        "output": "Sí, puedes usar variables dentro de cadenas de texto mediante concatenación o interpolación de cadenas. Por ejemplo: `nombre = 'Juan'` y `saludo = 'Hola ' + nombre`."
    },
    {
        "input": "¿Cómo hago interpolación de variables dentro de una cadena en Python?",
        "output": "Para interpolar una variable dentro de una cadena en Python, puedes usar f-strings, como: `saludo = f'Hola {nombre}'`."
    },
    {
        "input": "¿Cómo crear una lista de variables?",
        "output": "Puedes crear una lista de variables utilizando corchetes `[]`, por ejemplo: `numeros = [1, 2, 3, 4, 5]`."
    },
    {
        "input": "¿Cómo asigno un valor booleano a una variable?",
        "output": "Para asignar un valor booleano a una variable, puedes usar `True` o `False`, como: `es_adulto = True`."
    },
    {
        "input": "¿Cómo asigno un valor vacío a una variable?",
        "output": "Puedes asignar un valor vacío a una variable usando `None`, como: `mi_variable = None`."
    },
    {
        "input": "¿Cómo uso una variable dentro de una función?",
        "output": "Puedes usar una variable dentro de una función siempre que esté definida dentro del ámbito de la función o que sea global. Por ejemplo, si `edad` es una variable global, puedes usarla en la función sin problemas."
    },
    {
        "input": "¿Puedo cambiar el tipo de una variable después de haberla creado?",
        "output": "Sí, en Python las variables no tienen un tipo fijo, por lo que puedes cambiar el tipo de una variable. Por ejemplo, puedes asignar un número entero a una variable y luego asignarle una cadena de texto."
    },
    {
        "input": "¿Qué pasa si intento usar una variable que no he definido?",
        "output": "Si intentas usar una variable que no ha sido definida, Python generará un error de tipo `NameError`."
    },
    {
        "input": "¿Cómo defino una variable dentro de una clase?",
        "output": "Dentro de una clase, puedes definir una variable como un atributo de clase. Usas `self` para acceder a ella, por ejemplo: `self.mi_variable = 10`."
    },
    {
        "input": "¿Cómo puedo usar variables dentro de una lista?",
        "output": "Puedes usar variables dentro de una lista asignando los valores de las variables como elementos de la lista. Ejemplo: `mi_lista = [mi_variable, 5, 'texto']`."
    },
    {
        "input": "¿Qué es una variable constante?",
        "output": "En Python no existe un tipo específico para constantes. Sin embargo, es una convención usar todas las letras mayúsculas para denotar una variable constante, como: `PI = 3.1416`."
    },
    {
        "input": "¿Cómo puedo asignar varias variables en una sola línea?",
        "output": "Puedes asignar varias variables en una sola línea separando las asignaciones con comas. Por ejemplo: `a, b, c = 1, 2, 3`."
    },
    {
        "input": "¿Cómo borro una variable?",
        "output": "Puedes borrar una variable utilizando la palabra clave `del`, por ejemplo: `del mi_variable`."
    },
    {
        "input": "¿Cómo se crean variables en un diccionario?",
        "output": "En un diccionario, se crean variables como pares clave-valor. Por ejemplo: `mi_diccionario = {'nombre': 'Juan', 'edad': 25}`."
    },
    {
        "input": "¿Puedo usar palabras reservadas como nombres de variables?",
        "output": "No, no puedes usar palabras reservadas de Python (como `def`, `if`, `else`) como nombres de variables."
    },
    {
        "input": "¿Cómo se crean variables dentro de un bucle?",
        "output": "Las variables dentro de un bucle se crean de la misma manera que fuera del bucle, solo que su valor puede cambiar en cada iteración del bucle."
    },
    {
        "input": "¿Cómo puedo asignar el valor de una variable a otra?",
        "output": "Puedes asignar el valor de una variable a otra simplemente usando el operador de asignación, por ejemplo: `otra_variable = mi_variable`."
    },
    {
        "input": "¿Cómo puedo comprobar si una variable existe?",
        "output": "Puedes usar la función `locals()` o `globals()` para comprobar si una variable está definida en el ámbito local o global, respectivamente."
    },
    {
        "input": "¿Qué es una variable dinámica?",
        "output": "Una variable dinámica es aquella cuyo tipo puede cambiar en tiempo de ejecución. Python es un lenguaje de tipado dinámico, por lo que las variables pueden cambiar de tipo durante la ejecución del programa."
    },
    {
        "input": "¿Puedo usar una variable antes de declararla?",
        "output": "No, en Python debes declarar una variable antes de usarla, o recibirás un error `NameError`."
    },
    {
        "input": "¿Qué es una variable de instancia?",
        "output": "Una variable de instancia es una variable que pertenece a una instancia de una clase, y se define generalmente dentro del método `__init__` usando `self`."
    },
    {
        "input": "¿Qué significa `global` en una variable?",
        "output": "La palabra clave `global` se usa dentro de una función para indicar que la variable que se está modificando es global, es decir, que pertenece al ámbito global."
    },
    {
        "input": "¿Puedo asignar una variable de una función a una variable global?",
        "output": "Sí, para modificar una variable global dentro de una función, debes usar la palabra clave `global`, como: `global mi_variable`."
    },
    {
        "input": "¿Cómo puedo concatenar variables de tipo texto?",
        "output": "Puedes concatenar variables de tipo texto utilizando el operador `+`, por ejemplo: `mensaje = 'Hola ' + nombre`."
    },
    {
        "input": "¿Cómo asigno un valor a una variable dentro de una función?",
        "output": "Dentro de una función, puedes asignar un valor a una variable de la siguiente manera: `mi_variable = 10`."
    },
    {
        "input": "¿Cómo puedo sumar dos variables numéricas?",
        "output": "Puedes sumar dos variables numéricas utilizando el operador `+`, por ejemplo: `suma = num1 + num2`."
    },
    {
        "input": "¿Cómo puedo saber el valor de una variable?",
        "output": "Puedes ver el valor de una variable utilizando la función `print()`, por ejemplo: `print(mi_variable)`."
    },
    {
        "input": "¿Qué es un bucle en Python?",
        "output": "Un bucle en Python es una estructura de control que permite ejecutar un bloque de código de manera repetitiva, mientras se cumpla una condición específica."
    },
    {
        "input": "¿Cuáles son los tipos de bucles en Python?",
        "output": "En Python, los principales tipos de bucles son el bucle `for` y el bucle `while`."
    },
    {
        "input": "¿Cómo funciona un bucle `for` en Python?",
        "output": "El bucle `for` en Python itera sobre una secuencia (como una lista, tupla o rango) y ejecuta un bloque de código por cada elemento en la secuencia."
    },
    {
        "input": "¿Cómo se usa un bucle `for` para iterar sobre una lista?",
        "output": "Puedes usar un bucle `for` para iterar sobre una lista de la siguiente manera: `for item in lista: print(item)`."
    },
    {
        "input": "¿Qué es la función `range()` en un bucle `for`?",
        "output": "La función `range()` en Python genera una secuencia de números, que se puede utilizar con un bucle `for` para iterar un número específico de veces. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Cómo funciona un bucle `while` en Python?",
        "output": "Un bucle `while` ejecuta un bloque de código repetidamente mientras una condición booleana sea verdadera."
    },
    {
        "input": "¿Cómo se termina un bucle en Python?",
        "output": "Puedes usar la palabra clave `break` para salir de un bucle antes de que la condición sea falsa."
    },
    {
        "input": "¿Qué hace la palabra clave `continue` en un bucle?",
        "output": "La palabra clave `continue` se utiliza para saltar a la siguiente iteración de un bucle, omitiendo el código que sigue después de ella para la iteración actual."
    },
    {
        "input": "¿Puedo tener un bucle infinito en Python?",
        "output": "Sí, un bucle infinito puede ocurrir si la condición del bucle `while` siempre es verdadera. Por ejemplo, `while True: pass`."
    },
    {
        "input": "¿Qué es un bucle anidado?",
        "output": "Un bucle anidado es un bucle dentro de otro. Puedes tener bucles `for` o `while` dentro de otros bucles para realizar iteraciones múltiples."
    },
    {
        "input": "¿Cómo se usan los bucles anidados en Python?",
        "output": "Los bucles anidados se utilizan cuando necesitas realizar iteraciones dentro de cada iteración de un bucle externo. Ejemplo: `for i in range(3): for j in range(2): print(i, j)`."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Un iterador es un objeto que permite recorrer una secuencia (como una lista o un rango) uno por uno. Los bucles `for` utilizan iteradores de manera implícita."
    },
    {
        "input": "¿Puedo usar un `break` dentro de un bucle anidado?",
        "output": "Sí, puedes usar `break` para salir del bucle en el que se encuentra. Si lo usas en un bucle anidado, solo saldrá del bucle más interno."
    },
    {
        "input": "¿Cómo puedo saltarme una iteración en un bucle?",
        "output": "Puedes usar `continue` para saltarte una iteración de un bucle, lo que hará que el código que sigue en esa iteración se omita y pase a la siguiente."
    },
    {
        "input": "¿Cómo puedo recorrer una lista con su índice en un bucle `for`?",
        "output": "Puedes usar la función `enumerate()` para recorrer una lista con su índice. Ejemplo: `for index, item in enumerate(lista): print(index, item)`."
    },
    {
        "input": "¿Se puede modificar una lista mientras se recorre con un bucle?",
        "output": "Aunque es posible modificar una lista durante la iteración, puede causar errores si se cambian elementos mientras el bucle aún está ejecutándose. Es mejor evitar modificar la lista durante la iteración o hacerlo con cuidado."
    },
    {
        "input": "¿Qué es un bucle `for` en Python?",
        "output": "Un bucle `for` en Python se utiliza para iterar sobre una secuencia de elementos, como una lista, tupla o rango, y ejecutar un bloque de código para cada uno de los elementos."
    },
    {
        "input": "¿Cómo se puede evitar un bucle infinito en Python?",
        "output": "Asegúrate de que la condición del bucle `while` pueda volverse falsa en algún momento. Si usas un bucle `while True`, asegúrate de incluir un `break` o una condición de salida."
    },
    {
        "input": "¿Qué es el operador `else` en un bucle?",
        "output": "El operador `else` en un bucle se ejecuta cuando el bucle termina normalmente (es decir, no se interrumpe con un `break`). Es útil para realizar acciones después de que se complete el bucle."
    },
    {
        "input": "¿Puedo usar `else` con un bucle `while`?",
        "output": "Sí, puedes usar `else` con un bucle `while`. El bloque de código en `else` se ejecutará si el bucle termina sin que se haya usado un `break`."
    },
    {
        "input": "¿Cómo crear un bucle que imprima los números del 1 al 10?",
        "output": "Puedes usar un bucle `for` con `range()`, así: `for i in range(1, 11): print(i)`."
    },
    {
        "input": "¿Cómo puedo iterar sobre una cadena de texto en Python?",
        "output": "Puedes iterar sobre una cadena de texto utilizando un bucle `for`, por ejemplo: `for letra in 'hola': print(letra)`."
    },
    {
        "input": "¿Qué es un bucle `while` en Python?",
        "output": "Un bucle `while` en Python ejecuta un bloque de código repetidamente mientras una condición sea verdadera. Ejemplo: `while condicion: hacer_algo()`."
    },
    {
        "input": "¿Cómo hago un bucle que se ejecute 5 veces?",
        "output": "Puedes usar `range(5)` con un bucle `for`, de esta manera: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Cómo puedo crear un bucle que no imprima números negativos?",
        "output": "Puedes usar un bucle `for` y una sentencia `if` para verificar si el número es negativo, y solo imprimir los números no negativos. Ejemplo: `for i in range(-5, 6): if i >= 0: print(i)`."
    },
    {
        "input": "¿Qué sucede si se usa `break` en un bucle `for`?",
        "output": "Cuando usas `break` en un bucle `for`, el bucle se detiene inmediatamente y el programa continúa con el código que sigue después del bucle."
    },
    {
        "input": "¿Se puede usar un `continue` dentro de un bucle `for`?",
        "output": "Sí, el `continue` se usa dentro de un bucle `for` para saltar la iteración actual y pasar a la siguiente."
    },
    {
        "input": "¿Qué pasa si olvido la condición de un bucle `while`?",
        "output": "Si olvidas la condición de un bucle `while`, el bucle se convertirá en un bucle infinito, ya que siempre se ejecutará."
    },
    {
        "input": "¿Cómo puedo evitar que un bucle imprima algo varias veces?",
        "output": "Puedes evitar que un bucle imprima algo varias veces utilizando una sentencia `if` para comprobar si ya se ha impreso esa información antes."
    },
    {
        "input": "¿Cómo puedo romper un bucle si una condición es verdadera?",
        "output": "Puedes usar la sentencia `break` para salir del bucle si una condición específica es verdadera."
    },
    {
        "input": "¿Cómo uso un bucle `for` con una lista de diccionarios?",
        "output": "Puedes iterar sobre una lista de diccionarios de la siguiente manera: `for diccionario in lista: print(diccionario['clave'])`."
    },
    {
        "input": "¿Se puede usar `else` en un bucle `for`?",
        "output": "Sí, puedes usar `else` con un bucle `for`. El bloque `else` se ejecutará si el bucle no termina por un `break`."
    },
    {
        "input": "¿Cómo imprimo el índice de cada elemento en un bucle `for`?",
        "output": "Puedes usar `enumerate()` para obtener el índice de cada elemento, como: `for index, item in enumerate(lista): print(index, item)`."
    },
    {
        "input": "¿Cómo puedo hacer que un bucle se ejecute solo una vez?",
        "output": "Puedes hacer que un bucle se ejecute solo una vez utilizando un bucle `while` con una condición que se haga falsa después de la primera ejecución, o usando un bucle `for` con un rango de 1."
    },
    {
        "input": "¿Puedo tener un bucle `for` dentro de un bucle `while`?",
        "output": "Sí, puedes anidar un bucle `for` dentro de un bucle `while` o viceversa, lo que te permite realizar iteraciones complejas."
    },
    {
        "input": "¿Qué es un bucle `while` infinito?",
        "output": "Un bucle `while` infinito es un bucle cuya condición siempre es verdadera, lo que hace que nunca termine, como: `while True:`."
    },
    {
        "input": "¿Puedo usar un `break` dentro de un bucle `while`?",
        "output": "Sí, puedes usar `break` dentro de un bucle `while` para salir del bucle antes de que la condición se vuelva falsa."
    },
    {
        "input": "¿Cómo puedo salir de un bucle anidado?",
        "output": "Para salir de un bucle anidado, puedes usar `break` en el bucle más interno, o usar un conjunto de banderas para controlar la salida de bucles exteriores."
    },
    {
        "input": "¿Qué puedes hacer sobre Python?",
        "output": "Puedo ayudarte con conceptos básicos y avanzados de Python, desde escribir scripts simples hasta desarrollar aplicaciones y manejar bibliotecas populares."
    },
    {
        "input": "¿Puedes explicarme algo sobre Python?",
        "output": "Puedo explicarte desde lo básico, como variables y ciclos, hasta temas avanzados como decoradores, generadores, y manejo de excepciones en Python."
    },
    {
        "input": "¿Qué puedes hacer relacionado con Guatemala?",
        "output": "Puedo ofrecer información sobre la cultura, historia, geografía y datos interesantes de Guatemala."
    },
    {
        "input": "¿Qué puedes hacer sobre Xela?",
        "output": "Puedo proporcionarte datos sobre la ciudad de Quetzaltenango, incluyendo su historia, cultura, lugares turísticos y eventos importantes."
    },
    {
        "input": "¿Qué puedes hacer acerca de la Teoría de la Inteligencia Artificial?",
        "output": "Puedo explicarte conceptos teóricos de inteligencia artificial, como aprendizaje automático, redes neuronales y aplicaciones prácticas de la IA."
    },
    {
        "input": "¿Qué sabes sobre la carrera de Ingeniería en Sistemas?",
        "output": "Puedo explicar temas relacionados con la carrera, como algoritmos, diseño de software, redes, bases de datos y desarrollo de sistemas."
    },
    {
        "input": "¿Qué puedes hacer relacionado con la programación?",
        "output": "Puedo ayudarte a entender conceptos fundamentales, resolver problemas, y escribir código en diferentes lenguajes, especialmente Python."
    },
    {
        "input": "¿Qué puedes hacer sobre tecnología?",
        "output": "Puedo brindarte información sobre conceptos tecnológicos, tendencias actuales y aplicaciones prácticas en áreas como computación y sistemas."
    },
    {
        "input": "¿Qué puedes hacer sobre sistemas?",
        "output": "Puedo ayudarte a entender la arquitectura de sistemas informáticos, diseño de software, y conceptos relacionados con redes y bases de datos."
    },
    {
        "input": "¿Qué puedes hacer sobre videojuegos?",
        "output": "Puedo explicarte conceptos básicos de desarrollo de videojuegos, motores como Unity, y ayudarte a planificar la lógica y mecánicas de un juego."
    },
    {
        "input": "¿Qué sabes sobre computadoras?",
        "output": "Puedo explicarte conceptos básicos sobre el hardware y software de las computadoras, su funcionamiento, y cómo interactúan los sistemas."
    },
    {
        "input": "¿Qué puedes hacer relacionado con adaptadores?",
        "output": "Puedo explicarte qué son los adaptadores, cómo funcionan, y su importancia en la conexión de dispositivos electrónicos o sistemas."
    },
    {
        "input": "¿Qué puedes hacer sobre la inteligencia artificial?",
        "output": "Puedo explicarte fundamentos teóricos, algoritmos básicos, y cómo se aplican los conceptos de IA en la vida real o en sistemas."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender programación?",
        "output": "Puedo enseñarte los conceptos básicos de programación, ayudarte con ejercicios prácticos y explicarte la lógica detrás de los algoritmos."
    },
    {
        "input": "¿Qué puedes hacer relacionado con computadoras y sistemas?",
        "output": "Puedo explicarte cómo funcionan las computadoras, la interacción entre hardware y software, y conceptos básicos de sistemas operativos y redes."
    },
    {
        "input": "¿Qué puedes hacer sobre adaptadores en computadoras?",
        "output": "Puedo explicarte los tipos de adaptadores que existen, como adaptadores de red o gráficos, y su uso en sistemas computacionales."
    },
    {
        "input": "¿Qué puedes hacer relacionado con videojuegos y programación?",
        "output": "Puedo ayudarte a entender cómo programar videojuegos, desde el diseño de la lógica hasta el uso de motores como Pygame o Unity."
    },
    {
        "input": "¿Qué puedes hacer sobre la tecnología en Guatemala?",
        "output": "Puedo ofrecer información sobre el desarrollo tecnológico en Guatemala y cómo se relaciona con áreas como la educación y los negocios."
    },
    {
        "input": "¿Qué puedes hacer sobre la programación de sistemas?",
        "output": "Puedo explicarte cómo programar sistemas básicos, interactuar con hardware y optimizar recursos en aplicaciones específicas."
    },
    {
        "input": "¿Cómo creo un bucle `for` básico en Python?",
        "output": "Puedes crear un bucle `for` básico en Python utilizando la sintaxis: `for variable in secuencia:`. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Cómo se crea un bucle `for` para iterar sobre una lista?",
        "output": "Puedes iterar sobre una lista utilizando un bucle `for` así: `for item in lista: print(item)`."
    },
    {
        "input": "¿Cómo se crea un bucle `for` con `range()`?",
        "output": "Puedes usar `range()` para generar una secuencia de números. Ejemplo: `for i in range(3): print(i)` imprimirá los números del 0 al 2."
    },
    {
        "input": "¿Cómo se crea un bucle `while` en Python?",
        "output": "Puedes crear un bucle `while` en Python con la sintaxis: `while condicion: hacer_algo()`. Ejemplo: `while i < 5: print(i); i += 1`."
    },
    {
        "input": "¿Cómo crear un bucle `while` que termine cuando una condición sea falsa?",
        "output": "Usa la sintaxis básica de un bucle `while` con una condición booleana. Ejemplo: `while x < 10: x += 1`."
    },
    {
        "input": "¿Cómo crear un bucle `while` con un contador?",
        "output": "Puedes usar un contador en un bucle `while` así: `contador = 0; while contador < 5: print(contador); contador += 1`."
    },
    {
        "input": "¿Cómo crear un bucle `for` para iterar sobre un rango específico?",
        "output": "Usa `range(start, stop)` para especificar un rango. Ejemplo: `for i in range(2, 6): print(i)` imprimirá los números 2, 3, 4 y 5."
    },
    {
        "input": "¿Cómo crear un bucle `for` para iterar sobre un diccionario?",
        "output": "Puedes iterar sobre un diccionario usando `.items()`. Ejemplo: `for clave, valor in diccionario.items(): print(clave, valor)`."
    },
    {
        "input": "¿Cómo crear un bucle `for` con una condición `if` dentro?",
        "output": "Puedes usar un `if` dentro de un bucle `for` para aplicar condiciones a los elementos. Ejemplo: `for i in range(5): if i % 2 == 0: print(i)` imprimirá solo los números pares."
    },
    {
        "input": "¿Cómo crear un bucle `for` con un paso diferente?",
        "output": "Usa la función `range(start, stop, step)` para definir un paso. Ejemplo: `for i in range(0, 10, 2): print(i)` imprimirá 0, 2, 4, 6, 8."
    },
    {
        "input": "¿Cómo usar un bucle `for` para imprimir elementos de una lista en orden inverso?",
        "output": "Puedes usar la función `reversed()` o el índice negativo de la lista. Ejemplo: `for item in reversed(lista): print(item)` o `for i in range(len(lista)-1, -1, -1): print(lista[i])`."
    },
    {
        "input": "¿Cómo salir de un bucle en Python?",
        "output": "Puedes usar la palabra clave `break` para salir de un bucle prematuramente. Ejemplo: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "¿Cómo usar un bucle `while` para esperar hasta que una condición sea verdadera?",
        "output": "Puedes usar un bucle `while` con la condición deseada. Ejemplo: `while x != 5: x = int(input('Ingresa 5: '))`."
    },
    {
        "input": "¿Cómo crear un bucle infinito en Python?",
        "output": "Puedes crear un bucle infinito utilizando `while True:`. Ejemplo: `while True: print('Este bucle es infinito')`."
    },
    {
        "input": "¿Cómo evitar que un bucle infinito cause problemas?",
        "output": "Usa una condición de salida o un `break` dentro del bucle. Ejemplo: `while True: x = input('Escribe fin para salir: '); if x == 'fin': break`."
    },
    {
        "input": "¿Cómo puedo usar `break` para salir de un bucle anidado?",
        "output": "Para salir de un bucle anidado, usa `break` en el bucle más interno. Ejemplo: `for i in range(3): for j in range(3): if j == 2: break`."
    },
    {
        "input": "¿Cómo puedo usar `continue` en un bucle `for`?",
        "output": "La palabra clave `continue` se usa para omitir el resto de la iteración y pasar a la siguiente. Ejemplo: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "¿Cómo usar un bucle `for` para iterar sobre caracteres de una cadena?",
        "output": "Puedes iterar sobre los caracteres de una cadena de texto directamente en un bucle `for`. Ejemplo: `for char in 'Hola': print(char)`."
    },
    {
        "input": "¿Cómo crear un bucle `for` que itere sobre múltiples listas a la vez?",
        "output": "Puedes usar la función `zip()` para iterar sobre varias listas al mismo tiempo. Ejemplo: `for a, b in zip(lista1, lista2): print(a, b)`."
    },
    {
        "input": "¿Cómo crear un bucle `while` que dependa de una entrada del usuario?",
        "output": "Puedes usar un bucle `while` junto con `input()` para depender de la entrada del usuario. Ejemplo: `while input('Escribe algo: ') != 'salir': print('Hiciste una entrada')`."
    },
    {
        "input": "¿Cómo crear un bucle `while` con un contador decreciente?",
        "output": "Puedes usar un contador que disminuya dentro de un bucle `while`. Ejemplo: `contador = 5; while contador > 0: print(contador); contador -= 1`."
    },
    {
        "input": "¿Cómo utilizar un bucle anidado con un `if` dentro?",
        "output": "Puedes anidar un `if` dentro de un bucle anidado. Ejemplo: `for i in range(3): for j in range(3): if j == 1: print(f'{i},{j}')`."
    },
    {
        "input": "¿Cómo evitar un bucle infinito en un programa?",
        "output": "Asegúrate de que la condición de tu bucle `while` o `for` eventualmente se haga falsa, o usa `break` para controlarlo."
    },
    {
        "input": "¿Cómo utilizar un bucle para contar cuántos números son mayores a 5?",
        "output": "Puedes usar un bucle `for` con un contador. Ejemplo: `contador = 0; for i in range(10): if i > 5: contador += 1`."
    },
    {
        "input": "¿Cómo crear un bucle para multiplicar números en una lista?",
        "output": "Puedes usar un bucle `for` para multiplicar los números de una lista. Ejemplo: `resultado = 1; for num in lista: resultado *= num`."
    },
    {
        "input": "¿Cómo iterar con un bucle `for` para imprimir las claves de un diccionario?",
        "output": "Puedes usar `for clave in diccionario:` para iterar sobre las claves de un diccionario. Ejemplo: `for clave in diccionario: print(clave)`."
    },
    {
        "input": "¿Cómo usar `else` con un bucle `for`?",
        "output": "El bloque `else` de un bucle `for` se ejecuta si el bucle no se interrumpe con un `break`. Ejemplo: `for i in range(3): if i == 2: break; else: print('Bucle completado')`."
    },
    {
        "input": "¿Cómo hacer que un bucle `while` dependa de una condición que cambia dentro del bucle?",
        "output": "Puedes cambiar la condición dentro del bucle. Ejemplo: `while x < 10: x += 1; print(x)`."
    },
    {
        "input": "¿Cómo usar un bucle para imprimir los números impares del 1 al 10?",
        "output": "Puedes usar un bucle `for` con una condición `if` para verificar los números impares. Ejemplo: `for i in range(1, 11): if i % 2 != 0: print(i)`."
    },
    {
        "input": "¿Cómo imprimir todos los números del 1 al 10, pero omitir el número 5?",
        "output": "Usa `continue` para omitir el número 5. Ejemplo: `for i in range(1, 11): if i == 5: continue; print(i)`."
    },
    {
        "input": "¿Cómo usar un bucle `for` para recorrer una lista de diccionarios?",
        "output": "Puedes recorrer una lista de diccionarios y acceder a sus valores. Ejemplo: `for dic in lista: print(dic['clave'])`."
    },
    {
        "input": "¿Cómo usar `break` para salir de un bucle si un valor es encontrado?",
        "output": "Usa `break` para salir del bucle cuando se cumple una condición. Ejemplo: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "¿Cómo hacer un bucle `for` que imprima los cuadrados de los números?",
        "output": "Puedes usar `for` con una operación matemática. Ejemplo: `for i in range(5): print(i**2)`."
    },
    {
        "input": "¿Cómo usar `else` con un bucle `while`?",
        "output": "El bloque `else` en un bucle `while` se ejecuta cuando el bucle termina sin un `break`. Ejemplo: `while x < 5: x += 1; else: print('Fin del bucle')`."
    },
    {
        "input": "¿Cómo evitar una iteración en un bucle `for` cuando se cumple una condición?",
        "output": "Puedes usar `continue` para saltar la iteración actual. Ejemplo: `for i in range(10): if i == 5: continue; print(i)`."
    },
    {
        "input": "¿Cómo contar las veces que un número aparece en una lista usando un bucle?",
        "output": "Puedes usar un contador dentro de un bucle. Ejemplo: `contador = 0; for num in lista: if num == 5: contador += 1`."
    },
    {
        "input": "¿Cómo crear un bucle que haga algo en cada iteración y termine cuando se cumpla una condición?",
        "output": "Puedes usar un bucle `while` con una condición que cambie dentro del bucle. Ejemplo: `while x < 10: x += 1; if x == 7: break`."
    },
    {
        "input": "¿Qué puedes hacer?",
        "output": "Puedo ayudarte con temas relacionados a Python, programación, inteligencia artificial, sistemas, tecnología, videojuegos, y conceptos sobre Guatemala, Xela, computadoras y adaptadores."
    },
    {
        "input": "¿En qué puedes ayudarme?",
        "output": "Puedo ayudarte a aprender sobre programación, resolver dudas técnicas, explicar conceptos relacionados con sistemas, inteligencia artificial, computadoras, videojuegos, y más."
    },
    {
        "input": "¿Cómo puedes ayudarme con Python?",
        "output": "Puedo enseñarte desde los fundamentos hasta temas avanzados de Python, ayudarte a depurar código, implementar funciones o desarrollar proyectos pequeños."
    },
    {
        "input": "¿Qué puedes explicarme sobre programación?",
        "output": "Puedo explicarte los fundamentos de programación, estructuras de control, algoritmos, y ayudarte a escribir código eficiente en Python."
    },
    {
        "input": "¿Cómo puedes ayudarme con inteligencia artificial?",
        "output": "Puedo explicarte teorías de inteligencia artificial, cómo funcionan los algoritmos de aprendizaje automático y darte ejemplos prácticos para empezar."
    },
    {
        "input": "¿Qué temas puedes abarcar?",
        "output": "Puedo abarcar temas relacionados con Python, programación, inteligencia artificial, sistemas, tecnología, computadoras, adaptadores, videojuegos, Guatemala y Xela."
    },
    {
        "input": "¿Qué sabes hacer?",
        "output": "Sé explicar conceptos, enseñar programación, guiarte en la solución de problemas técnicos y proporcionarte información sobre los temas mencionados."
    },
    {
        "input": "¿Cómo puedo usar esta IA?",
        "output": "Puedes usar esta IA para aprender sobre Python, entender temas de tecnología, sistemas y videojuegos, o para resolver dudas específicas relacionadas con adaptadores y computadoras."
    },
    {
        "input": "¿Qué puedes enseñarme?",
        "output": "Puedo enseñarte programación en Python, fundamentos de inteligencia artificial, lógica de sistemas y desarrollo básico de videojuegos."
    },
    {
        "input": "¿Qué tipo de ayuda puedes ofrecerme?",
        "output": "Puedo ofrecer ayuda técnica en programación, explicarte conceptos, enseñarte a resolver problemas y guiarte en proyectos básicos relacionados con sistemas y tecnología."
    },
    {
        "input": "¿Cómo me puedes ayudar si quiero aprender programación?",
        "output": "Puedo enseñarte desde lo más básico, como variables y ciclos, hasta lógica avanzada y estructuras de datos en Python."
    },
    {
        "input": "¿Qué puedes explicarme sobre computadoras?",
        "output": "Puedo explicarte cómo funcionan las computadoras, los componentes principales, y cómo interactúan con software y adaptadores."
    },
    {
        "input": "¿Qué tipo de problemas puedes resolver?",
        "output": "Puedo ayudarte con problemas relacionados con programación en Python, sistemas básicos, lógica de videojuegos y resolución de conceptos técnicos."
    },
    {
        "input": "¿En qué temas eres experto?",
        "output": "Soy experto en Python, programación, sistemas, inteligencia artificial, computadoras, adaptadores y temas relacionados con Guatemala y Xela."
    },
    {
        "input": "¿Puedes ayudarme con sistemas?",
        "output": "Puedo ayudarte a entender conceptos básicos de sistemas, redes, diseño de software y arquitectura de computadoras."
    },
    {
        "input": "¿Qué sabes sobre videojuegos?",
        "output": "Puedo explicarte conceptos de desarrollo de videojuegos, motores básicos como Pygame o Unity, y lógica de programación para juegos."
    },
    {
        "input": "¿Puedes resolver problemas de Python?",
        "output": "Sí, puedo ayudarte a depurar código, escribir funciones y resolver problemas comunes en Python."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender sobre adaptadores?",
        "output": "Puedo explicarte qué son los adaptadores, cómo funcionan, y cómo se usan en computadoras y sistemas electrónicos."
    },
    {
        "input": "¿Qué temas puedes abordar relacionados con Guatemala?",
        "output": "Puedo ofrecer información sobre la historia, cultura, tecnología y datos importantes de Guatemala, incluyendo Xela."
    },
    {
        "input": "¿Qué puedes hacer si necesito entender más sobre sistemas?",
        "output": "Puedo explicarte temas de arquitectura de sistemas, diseño de software, bases de datos y redes, adaptados a tus necesidades."
    },
    {
        "input": "¿Cómo puedes ayudarme con videojuegos?",
        "output": "Puedo ayudarte a empezar a programar videojuegos, entender conceptos básicos de diseño y explorar herramientas como motores de desarrollo."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender sobre inteligencia artificial?",
        "output": "Puedo explicarte teorías de inteligencia artificial, cómo funcionan los algoritmos básicos, y ayudarte a implementar ejemplos sencillos."
    },
    {
        "input": "¿Cómo puedes ayudarme si quiero aprender sobre tecnología?",
        "output": "Puedo explicarte conceptos tecnológicos, tendencias actuales, y cómo aplicar esos conocimientos en proyectos prácticos."
    },
    {
        "input": "¿Qué puedes hacer si quiero empezar en Python?",
        "output": "Puedo enseñarte desde los fundamentos, como variables y ciclos, hasta ayudarte a desarrollar tus primeros proyectos."
    },
    {
        "input": "¿Qué áreas abarcas en sistemas?",
        "output": "Puedo ayudarte con conceptos de sistemas operativos, redes, bases de datos y diseño de software, aplicados a tareas prácticas."
    },
    {
        "input": "¿Qué es una instrucción `if` en Python?",
        "output": "Una instrucción `if` en Python permite ejecutar un bloque de código si se cumple una condición. Su sintaxis es: `if condicion: hacer_algo()`."
    },
    {
        "input": "¿Cómo se crea una instrucción `if` en Python?",
        "output": "Puedes crear una instrucción `if` de la siguiente manera: `if condicion: hacer_algo()`. Ejemplo: `if x > 5: print('Mayor que 5')`."
    },
    {
        "input": "¿Cómo puedo usar `else` con una instrucción `if`?",
        "output": "Puedes usar `else` para ejecutar un bloque de código si la condición del `if` no se cumple. Ejemplo: `if x > 5: print('Mayor que 5'); else: print('Menor o igual a 5')`."
    },
    {
        "input": "¿Cómo usar `elif` en una estructura `if`?",
        "output": "El `elif` permite verificar múltiples condiciones. Ejemplo: `if x > 5: print('Mayor que 5'); elif x == 5: print('Igual a 5'); else: print('Menor que 5')`."
    },
    {
        "input": "¿Cómo usar una instrucción `if` para comparar dos números?",
        "output": "Puedes comparar dos números con operadores como `>`, `<`, `==`, `!=`. Ejemplo: `if a > b: print('a es mayor que b')`."
    },
    {
        "input": "¿Qué pasa si la condición en un `if` es falsa?",
        "output": "Si la condición es falsa, el bloque de código dentro del `if` no se ejecuta y el programa continúa con el siguiente código."
    },
    {
        "input": "¿Cómo hacer un `if` con más de una condición?",
        "output": "Puedes combinar condiciones con operadores lógicos como `and`, `or`. Ejemplo: `if x > 5 and x < 10: print('Entre 5 y 10')`."
    },
    {
        "input": "¿Cómo crear un operador ternario en Python?",
        "output": "Un operador ternario es una forma compacta de hacer un `if`-`else`. La sintaxis es: `valor_if_true if condicion else valor_if_false`. Ejemplo: `resultado = 'Mayor' if x > 5 else 'Menor o igual'`."
    },
    {
        "input": "¿Cómo usar un operador ternario para asignar un valor?",
        "output": "Puedes usar un operador ternario para asignar un valor dependiendo de una condición. Ejemplo: `mensaje = 'Positivo' if numero > 0 else 'Negativo'`."
    },
    {
        "input": "¿Es posible anidar un `if` dentro de otro en Python?",
        "output": "Sí, puedes anidar `if` dentro de otro. Ejemplo: `if x > 5: if x < 10: print('Entre 5 y 10')`."
    },
    {
        "input": "¿Cómo usar `and` en una condición `if`?",
        "output": "Puedes usar `and` para verificar que ambas condiciones sean verdaderas. Ejemplo: `if x > 5 and y < 10: print('x > 5 y y < 10')`."
    },
    {
        "input": "¿Qué es un operador ternario y cuándo debería usarlo?",
        "output": "Un operador ternario es una forma compacta de una declaración `if`-`else`. Es útil para asignaciones simples. Ejemplo: `x = 10 if a > 5 else 5`."
    },
    {
        "input": "¿Puedo usar operadores ternarios en varias líneas?",
        "output": "Sí, puedes usar operadores ternarios en varias líneas si es necesario, aunque normalmente se usan en una sola línea. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo' if x < 0 else 'Cero'`."
    },
    {
        "input": "¿Cómo usar un `if` para comprobar si un número es par?",
        "output": "Puedes usar el operador `%` para verificar si un número es divisible entre 2. Ejemplo: `if x % 2 == 0: print('Par')`."
    },
    {
        "input": "¿Cómo usar `if` y `elif` para verificar múltiples condiciones?",
        "output": "Puedes usar `if` para la primera condición y `elif` para las siguientes. Ejemplo: `if x > 10: print('Mayor que 10'); elif x == 10: print('Igual a 10')`."
    },
    {
        "input": "¿Cómo usar un operador ternario con `if` anidado?",
        "output": "Puedes anidar operadores ternarios dentro de otros. Ejemplo: `resultado = 'Mayor' if x > 5 else 'Menor' if x < 5 else 'Igual a 5'`."
    },
    {
        "input": "¿Se puede usar un operador ternario para verificar igualdad?",
        "output": "Sí, puedes usar un operador ternario para verificar si dos valores son iguales. Ejemplo: `resultado = 'Iguales' if a == b else 'Diferentes'`."
    },
    {
        "input": "¿Cómo comprobar si una variable está vacía usando `if`?",
        "output": "Puedes comprobar si una variable está vacía usando `if not variable`. Ejemplo: `if not lista: print('Lista vacía')`."
    },
    {
        "input": "¿Cómo usar un `if` para verificar si un número es negativo?",
        "output": "Puedes verificar si un número es negativo con la condición `x < 0`. Ejemplo: `if x < 0: print('Negativo')`."
    },
    {
        "input": "¿Cómo usar `else` para manejar la condición cuando el `if` es falso?",
        "output": "El bloque `else` se ejecuta cuando la condición en `if` es falsa. Ejemplo: `if x > 0: print('Positivo'); else: print('No positivo')`."
    },
    {
        "input": "¿Cómo hacer un `if` con múltiples condiciones y `or`?",
        "output": "Puedes usar `or` para que se ejecute el bloque si al menos una de las condiciones es verdadera. Ejemplo: `if x == 0 or y == 0: print('Al menos uno es cero')`."
    },
    {
        "input": "¿Cómo hacer un `if` con un valor booleano?",
        "output": "Puedes usar un valor booleano directamente en un `if`. Ejemplo: `if es_verdadero: print('Es verdadero')`."
    },
    {
        "input": "¿Cómo usar un operador ternario para asignar un valor basado en una comparación?",
        "output": "Un operador ternario puede ser utilizado para asignar valores según una comparación. Ejemplo: `resultado = 'Adulto' if edad >= 18 else 'Menor'`."
    },
    {
        "input": "¿Cómo hacer un `if` con más de dos condiciones?",
        "output": "Puedes combinar múltiples condiciones usando `elif`. Ejemplo: `if x > 10: print('Mayor que 10'); elif x == 10: print('Igual a 10'); else: print('Menor que 10')`."
    },
    {
        "input": "¿Cómo hacer un `if` con condiciones complejas?",
        "output": "Puedes usar operadores lógicos para hacer condiciones más complejas. Ejemplo: `if (x > 5 and x < 10) or (y == 2): print('Condición cumplida')`."
    },
    {
        "input": "¿Cómo puedo anidar un operador ternario en un `if`?",
        "output": "Puedes usar un operador ternario dentro de otro para obtener múltiples opciones. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo' if x < 0 else 'Cero'`."
    },
    {
        "input": "¿Cómo hacer un `if` que ejecute algo cuando un número es mayor o igual a 5?",
        "output": "Usa la condición `if x >= 5:`. Ejemplo: `if x >= 5: print('Mayor o igual a 5')`."
    },
    {
        "input": "¿Cómo verificar si un número está dentro de un rango usando `if`?",
        "output": "Puedes usar el operador `and` para verificar si un número está dentro de un rango. Ejemplo: `if 5 <= x <= 10: print('Dentro del rango')`."
    },
    {
        "input": "¿Qué diferencia hay entre `if` y `elif`?",
        "output": "`if` se usa para la primera condición, mientras que `elif` se usa para condiciones adicionales. Ejemplo: `if x > 5: print('Mayor que 5'); elif x == 5: print('Igual a 5')`."
    },
    {
        "input": "¿Cómo utilizar un `if` para comprobar si un número es divisible entre 3?",
        "output": "Puedes usar el operador `%` para comprobar la divisibilidad. Ejemplo: `if x % 3 == 0: print('Divisible entre 3')`."
    },
    {
        "input": "¿Cómo usar un operador ternario para verificar si un número es positivo o negativo?",
        "output": "Puedes usar un operador ternario para verificar el signo de un número. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo'`."
    },
    {
        "input": "¿Cómo comprobar si una cadena está vacía usando `if`?",
        "output": "Puedes comprobar si una cadena está vacía con `if not cadena:`. Ejemplo: `if not nombre: print('Cadena vacía')`."
    },
    {
        "input": "¿Cómo hacer un `if` con una lista?",
        "output": "Puedes comprobar si una lista está vacía con `if not lista:`. Ejemplo: `if not lista: print('Lista vacía')`."
    },
    {
        "input": "¿Cómo hacer un `if` que imprima un mensaje si un número es impar?",
        "output": "Puedes usar el operador `%` para comprobar si el número es impar. Ejemplo: `if x % 2 != 0: print('Impar')`."
    },
    {
        "input": "¿Cómo combinar varias condiciones en un solo `if`?",
        "output": "Puedes usar `and`, `or` o `not` para combinar condiciones. Ejemplo: `if x > 0 and y > 0: print('Ambos son positivos')`."
    },
    {
        "input": "¿Qué es un operador ternario en Python?",
        "output": "Un operador ternario es una forma compacta de realizar una condición `if-else` en una sola línea. Ejemplo: `x = 10 if a > 5 else 5`."
    },
    {
        "input": "¿Cómo utilizar `elif` para manejar más de dos condiciones?",
        "output": "`elif` se usa para manejar condiciones adicionales después del primer `if`. Ejemplo: `if x > 10: print('Mayor a 10'); elif x == 10: print('Igual a 10')`."
    },
    {
        "input": "¿Cómo hacer un `if` para comprobar si una variable es `None`?",
        "output": "Puedes usar `if variable is None:` para comprobar si una variable es `None`. Ejemplo: `if valor is None: print('Es None')`."
    },
    {
        "input": "¿Cómo realizar un operador ternario con más de dos opciones?",
        "output": "Puedes usar un operador ternario anidado para múltiples opciones. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo' if x < 0 else 'Cero'`."
    },
    {
        "input": "¿Puedo usar operadores ternarios dentro de un bucle?",
        "output": "Sí, puedes usar operadores ternarios dentro de bucles para asignaciones rápidas. Ejemplo: `for i in range(5): resultado = 'Par' if i % 2 == 0 else 'Impar'; print(resultado)`."
    },
    {
        "input": "¿Cómo comprobar si una lista contiene un valor usando `if`?",
        "output": "Puedes usar `if valor in lista:`. Ejemplo: `if 3 in lista: print('El 3 está en la lista')`."
    },
    {
        "input": "¿Cómo usar `if` para verificar si una cadena es mayor que otra?",
        "output": "Puedes comparar cadenas alfabéticamente usando los operadores de comparación. Ejemplo: `if cadena1 > cadena2: print('cadena1 es mayor')`."
    },
    {
        "input": "¿Cómo usar `else` para ejecutar un bloque de código si un número es menor a 5?",
        "output": "Puedes usar `else` para manejar el caso en que la condición no se cumple. Ejemplo: `if x >= 5: print('Mayor o igual a 5'); else: print('Menor a 5')`."
    },
    {
        "input": "¿Qué es una biblioteca en Python?",
        "output": "Una biblioteca en Python es un conjunto de módulos predefinidos que facilitan la realización de tareas comunes, como manejo de archivos, matemáticas, y más."
    },
    {
        "input": "¿Cómo instalar una biblioteca en Python?",
        "output": "Puedes instalar una biblioteca en Python utilizando el gestor de paquetes `pip`. Ejemplo: `pip install nombre_biblioteca`."
    },
    {
        "input": "¿Qué es `pip`?",
        "output": "`pip` es el gestor de paquetes oficial de Python, utilizado para instalar y gestionar bibliotecas o paquetes de Python."
    },
    {
        "input": "¿Qué es la biblioteca `math` en Python?",
        "output": "La biblioteca `math` proporciona funciones matemáticas, como `sqrt()`, `sin()`, `cos()`, entre otras, para realizar operaciones matemáticas."
    },
    {
        "input": "¿Cómo importar una biblioteca en Python?",
        "output": "Puedes importar una biblioteca en Python utilizando la palabra clave `import`. Ejemplo: `import math`."
    },
    {
        "input": "¿Qué es la biblioteca `os` en Python?",
        "output": "La biblioteca `os` proporciona funciones para interactuar con el sistema operativo, como manipular archivos y directorios."
    },
    {
        "input": "¿Para qué sirve la biblioteca `datetime`?",
        "output": "La biblioteca `datetime` se usa para trabajar con fechas y horas. Permite crear, manipular y formatear objetos de fecha y hora."
    },
    {
        "input": "¿Cómo puedo leer un archivo con la biblioteca `os`?",
        "output": "Con la biblioteca `os` puedes usar funciones como `os.open()` o `os.read()` para trabajar con archivos a nivel de sistema operativo."
    },
    {
        "input": "¿Qué es la biblioteca `requests` en Python?",
        "output": "La biblioteca `requests` facilita realizar solicitudes HTTP en Python, permitiendo interactuar con APIs y sitios web."
    },
    {
        "input": "¿Cómo instalar `requests` en Python?",
        "output": "Para instalar la biblioteca `requests`, usa el comando `pip install requests` en la terminal."
    },
    {
        "input": "¿Qué hace la biblioteca `numpy`?",
        "output": "La biblioteca `numpy` proporciona soporte para trabajar con arreglos multidimensionales, así como herramientas para realizar cálculos matemáticos y científicos."
    },
    {
        "input": "¿Qué es `pandas` en Python?",
        "output": "`pandas` es una biblioteca para el análisis y manipulación de datos. Ofrece estructuras de datos como `DataFrame` para trabajar con tablas y series."
    },
    {
        "input": "¿Cómo puedo leer un archivo CSV con `pandas`?",
        "output": "Puedes leer un archivo CSV con `pandas` usando el método `pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Qué hace la biblioteca `matplotlib`?",
        "output": "La biblioteca `matplotlib` se usa para crear gráficos estáticos, animados e interactivos en Python."
    },
    {
        "input": "¿Cómo crear un gráfico con `matplotlib`?",
        "output": "Para crear un gráfico con `matplotlib`, usa el siguiente código básico: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()`."
    },
    {
        "input": "¿Qué es `seaborn`?",
        "output": "`seaborn` es una biblioteca basada en `matplotlib` que facilita la creación de gráficos estadísticos complejos con una sintaxis más sencilla."
    },
    {
        "input": "¿Para qué sirve la biblioteca `json`?",
        "output": "La biblioteca `json` se usa para trabajar con datos en formato JSON, permitiendo convertir entre cadenas JSON y objetos de Python."
    },
    {
        "input": "¿Cómo leer un archivo JSON en Python?",
        "output": "Puedes leer un archivo JSON con `json.load()`. Ejemplo: `import json; with open('archivo.json', 'r') as f: data = json.load(f)`."
    },
    {
        "input": "¿Qué es `tkinter`?",
        "output": "`tkinter` es una biblioteca estándar de Python que proporciona herramientas para crear interfaces gráficas de usuario (GUI) simples."
    },
    {
        "input": "¿Cómo crear una ventana con `tkinter`?",
        "output": "Puedes crear una ventana con `tkinter` usando el siguiente código: `import tkinter as tk; root = tk.Tk(); root.mainloop()`."
    },
    {
        "input": "¿Cómo instalo `matplotlib`?",
        "output": "Puedes instalar `matplotlib` usando `pip install matplotlib`."
    },
    {
        "input": "¿Qué hace la biblioteca `scikit-learn`?",
        "output": "`scikit-learn` es una biblioteca de Python para realizar aprendizaje automático. Proporciona herramientas para clasificación, regresión, clustering, y más."
    },
    {
        "input": "¿Cómo importar `scikit-learn`?",
        "output": "Puedes importar `scikit-learn` con `import sklearn` o importando módulos específicos, como `from sklearn.model_selection import train_test_split`."
    },
    {
        "input": "¿Qué es `flask`?",
        "output": "`flask` es un micro-framework para construir aplicaciones web en Python, proporcionando herramientas para manejar rutas, formularios, y bases de datos."
    },
    {
        "input": "¿Cómo instalar `flask`?",
        "output": "Puedes instalar `flask` usando el comando `pip install flask`."
    },
    {
        "input": "¿Qué hace la biblioteca `sqlalchemy`?",
        "output": "`sqlalchemy` es una biblioteca para trabajar con bases de datos en Python. Proporciona una capa de abstracción para SQL y ORM (Object Relational Mapper)."
    },
    {
        "input": "¿Cómo conectar a una base de datos con `sqlalchemy`?",
        "output": "Puedes conectar a una base de datos con `sqlalchemy` usando: `from sqlalchemy import create_engine; engine = create_engine('sqlite:///mi_base_de_datos.db')`."
    },
    {
        "input": "¿Qué es `beautifulsoup4`?",
        "output": "`beautifulsoup4` es una biblioteca para analizar y extraer información de páginas web en formato HTML y XML."
    },
    {
        "input": "¿Cómo extraer datos de una página web con `beautifulsoup4`?",
        "output": "Puedes extraer datos usando `beautifulsoup4` de esta manera: `from bs4 import BeautifulSoup; soup = BeautifulSoup(html, 'html.parser'); titulo = soup.title.text`."
    },
    {
        "input": "¿Cómo instalar `beautifulsoup4`?",
        "output": "Puedes instalar `beautifulsoup4` usando el comando `pip install beautifulsoup4`."
    },
    {
        "input": "¿Qué es `pytest`?",
        "output": "`pytest` es una biblioteca de Python para realizar pruebas unitarias, facilitando la escritura y ejecución de pruebas de código."
    },
    {
        "input": "¿Cómo escribir una prueba con `pytest`?",
        "output": "Puedes escribir una prueba con `pytest` creando una función que comience con `test_`. Ejemplo: `def test_suma(): assert suma(2, 3) == 5`."
    },
    {
        "input": "¿Cómo instalar `pytest`?",
        "output": "Puedes instalar `pytest` usando el comando `pip install pytest`."
    },
    {
        "input": "¿Qué hace la biblioteca `nltk`?",
        "output": "`nltk` (Natural Language Toolkit) es una biblioteca para trabajar con procesamiento de lenguaje natural (NLP), incluyendo análisis de texto, tokenización, y más."
    },
    {
        "input": "¿Cómo instalar `nltk`?",
        "output": "Puedes instalar `nltk` usando `pip install nltk`."
    },
    {
        "input": "¿Qué es `openpyxl`?",
        "output": "`openpyxl` es una biblioteca para leer, escribir y manipular archivos de Excel (XLSX) en Python."
    },
    {
        "input": "¿Cómo leer un archivo Excel con `openpyxl`?",
        "output": "Puedes leer un archivo Excel con `openpyxl` así: `from openpyxl import load_workbook; wb = load_workbook('archivo.xlsx'); sheet = wb.active`."
    },
    {
        "input": "¿Qué es `pyqt`?",
        "output": "`pyqt` es un conjunto de bibliotecas que permiten crear interfaces gráficas de usuario (GUI) utilizando el framework Qt con Python."
    },
    {
        "input": "¿Cómo instalar `pyqt`?",
        "output": "Puedes instalar `pyqt` usando el comando `pip install pyqt5`."
    },
    {
        "input": "¿Qué es `requests`?",
        "output": "`requests` es una biblioteca que permite realizar solicitudes HTTP de manera simple y eficiente en Python."
    },
    {
        "input": "¿Cómo realizar una solicitud GET con `requests`?",
        "output": "Puedes realizar una solicitud GET con `requests` usando: `import requests; response = requests.get('http://example.com')`."
    },
    {
        "input": "¿Qué es `pytest`?",
        "output": "`pytest` es una herramienta para realizar pruebas de software en Python. Permite escribir pruebas de manera sencilla y realizar verificaciones automáticas."
    },
    {
        "input": "¿Cómo utilizar `numpy` para crear una matriz?",
        "output": "Puedes crear una matriz con `numpy` usando `numpy.array()`. Ejemplo: `import numpy as np; matriz = np.array([[1, 2], [3, 4]])`."
    },
    {
        "input": "¿Qué es `pillow`?",
        "output": "`pillow` es una biblioteca de procesamiento de imágenes en Python que permite abrir, editar y guardar imágenes."
    },
    {
        "input": "¿Cómo abrir una imagen con `pillow`?",
        "output": "Puedes abrir una imagen con `pillow` usando: `from PIL import Image; img = Image.open('imagen.jpg')`."
    },
    {
        "input": "¿Qué es `scipy`?",
        "output": "`scipy` es una biblioteca de Python que proporciona algoritmos y funciones avanzadas para cálculos científicos y técnicos, como optimización y álgebra lineal."
    },
    {
        "input": "¿Cómo instalar `scipy`?",
        "output": "Puedes instalar `scipy` usando el comando `pip install scipy`."
    },
    {
        "input": "¿Qué es `statsmodels`?",
        "output": "`statsmodels` es una biblioteca de Python para estimación de modelos estadísticos, pruebas y exploración de datos."
    },
    {
        "input": "¿Cómo realizar una regresión lineal con `statsmodels`?",
        "output": "Puedes realizar una regresión lineal con `statsmodels` usando: `import statsmodels.api as sm; X = sm.add_constant(X); model = sm.OLS(y, X).fit()`."
    },
    {
        "input": "¿Qué es `pyinstaller`?",
        "output": "`pyinstaller` es una herramienta para convertir programas Python en ejecutables independientes."
    },
    {
        "input": "¿Cómo instalar `pyinstaller`?",
        "output": "Puedes instalar `pyinstaller` usando el comando `pip install pyinstaller`."
    },
    {
        "input": "¿Cómo crear un ejecutable con `pyinstaller`?",
        "output": "Puedes crear un ejecutable con `pyinstaller` usando: `pyinstaller mi_programa.py`."
    },
    {
        "input": "¿En qué áreas puedes ayudarme?",
        "output": "Puedo ayudarte con Python, programación, sistemas, inteligencia artificial, tecnología, videojuegos, computadoras, adaptadores, y temas relacionados con Guatemala y Xela."
    },
    {
        "input": "¿Qué habilidades tienes?",
        "output": "Tengo habilidades para explicar conceptos, resolver problemas técnicos, enseñar programación en Python, y brindar información sobre sistemas y tecnología."
    },
    {
        "input": "¿Qué temas puedes tratar?",
        "output": "Puedo tratar temas relacionados con Python, programación, sistemas, inteligencia artificial, computadoras, adaptadores, tecnología, videojuegos, Guatemala y Xela."
    },
    {
        "input": "¿Qué conocimientos tienes?",
        "output": "Tengo conocimientos en Python, desarrollo de sistemas, programación, inteligencia artificial, diseño de videojuegos, computadoras y adaptadores."
    },
    {
        "input": "¿Qué tipo de soporte puedes ofrecer?",
        "output": "Puedo ofrecer soporte técnico en programación, resolver dudas teóricas sobre inteligencia artificial y sistemas, y guiarte en proyectos prácticos."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender algo nuevo?",
        "output": "Puedo enseñarte desde los fundamentos hasta temas avanzados en programación, tecnología, sistemas, y más, adaptándome a tus necesidades."
    },
    {
        "input": "¿Cómo puedes ayudarme con mis dudas?",
        "output": "Puedo resolver tus dudas sobre Python, sistemas, tecnología, inteligencia artificial y temas relacionados de forma clara y práctica."
    },
    {
        "input": "¿En qué me puedes ser útil?",
        "output": "Puedo ser útil para aprender, resolver problemas técnicos, entender conceptos teóricos, y explorar áreas como programación y tecnología."
    },
    {
        "input": "¿Qué puedes hacer en el ámbito de la programación?",
        "output": "Puedo ayudarte a entender fundamentos, resolver problemas de código, implementar funciones y guiarte en el desarrollo de proyectos en Python."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender sobre sistemas?",
        "output": "Puedo explicarte la arquitectura de sistemas, conceptos de redes, bases de datos, y cómo interactúan con la programación y hardware."
    },
    {
        "input": "¿Qué puedes hacer sobre videojuegos y tecnología?",
        "output": "Puedo enseñarte a programar videojuegos, explicarte motores como Unity o Pygame, y cómo aplican conceptos tecnológicos en el desarrollo."
    },
    {
        "input": "¿Cómo puedes ayudarme con mis proyectos?",
        "output": "Puedo guiarte en la planificación, resolución de problemas y desarrollo de proyectos relacionados con programación, sistemas y videojuegos."
    },
    {
        "input": "¿Qué podrías enseñarme si quiero aprender algo nuevo?",
        "output": "Puedo enseñarte programación en Python, conceptos de inteligencia artificial, diseño de videojuegos, o fundamentos de sistemas y tecnología."
    },
    {
        "input": "¿Qué puedes hacer si quiero resolver un problema?",
        "output": "Puedo analizar el problema, ofrecerte soluciones claras y explicarte cómo implementarlas, especialmente en Python, sistemas o tecnología."
    },
    {
        "input": "¿Qué puedes hacer si quiero entender mejor un concepto?",
        "output": "Puedo explicarte el concepto en detalle, proporcionarte ejemplos prácticos y responder tus preguntas para asegurarte de comprenderlo completamente."
    },
    {
        "input": "¿Cómo puedes apoyarme en aprendizaje?",
        "output": "Puedo enseñarte paso a paso, adaptarme a tu nivel de conocimiento y proporcionarte ejemplos claros y ejercicios prácticos."
    },
    {
        "input": "¿En qué formas puedes ser útil?",
        "output": "Puedo resolver dudas, explicar temas, ayudar con proyectos y enseñarte sobre Python, sistemas, tecnología y videojuegos."
    },
    {
        "input": "¿Qué tipo de tareas puedes realizar?",
        "output": "Puedo realizar tareas relacionadas con resolver problemas de código, explicar conceptos técnicos, y guiarte en aprendizaje y proyectos."
    },
    {
        "input": "¿Qué sabes hacer específicamente?",
        "output": "Sé explicar conceptos de Python, enseñar programación, resolver problemas técnicos, y ofrecer información sobre sistemas, tecnología y videojuegos."
    },
    {
        "input": "¿Cómo podrías ayudarme si estoy aprendiendo?",
        "output": "Puedo proporcionarte explicaciones claras, ejemplos prácticos, y ayudarte a resolver problemas mientras aprendes."
    },
    {
        "input": "¿Cómo puedes ayudarme con conceptos complicados?",
        "output": "Puedo desglosar conceptos complicados en pasos simples, darte ejemplos claros y guiarte hasta que los entiendas completamente."
    },
    {
        "input": "¿Qué tipo de preguntas puedes responder?",
        "output": "Puedo responder preguntas sobre Python, programación, sistemas, tecnología, videojuegos, inteligencia artificial, computadoras y adaptadores."
    },
    {
        "input": "¿Qué puedes hacer relacionado con computadoras y adaptadores?",
        "output": "Puedo explicarte cómo funcionan los adaptadores, cómo interactúan con computadoras, y para qué se utilizan en diferentes sistemas."
    },
    {
        "input": "¿Qué puedes hacer sobre la inteligencia artificial aplicada?",
        "output": "Puedo explicarte cómo implementar algoritmos básicos, qué aplicaciones prácticas tiene y cómo se integra con sistemas reales."
    },
    {
        "input": "¿Qué puedes hacer sobre proyectos prácticos?",
        "output": "Puedo ayudarte a planificar, desarrollar y resolver problemas en proyectos prácticos relacionados con programación, sistemas y tecnología."
    },
    {
        "input": "¿En qué tipo de proyectos puedes ayudarme?",
        "output": "Puedo ayudarte en proyectos de programación, sistemas, videojuegos, desarrollo de algoritmos de inteligencia artificial, y manejo de tecnología."
    },
    {
        "input": "¿Cómo puedes apoyarme en un tema que no entiendo?",
        "output": "Puedo explicarte el tema paso a paso, darte ejemplos claros y ayudarte a comprenderlo mediante ejercicios prácticos."
    },
    {
        "input": "¿Qué puedes hacer si quiero saber más sobre tecnología?",
        "output": "Puedo proporcionarte información sobre tendencias tecnológicas, aplicaciones prácticas y cómo se relacionan con sistemas y programación."
    },
    {
        "input": "¿Qué es un arreglo en Python?",
        "output": "En Python, un arreglo se refiere comúnmente a una lista, que es una colección ordenada y mutable de elementos."
    },
    {
        "input": "¿Cómo crear un arreglo en Python?",
        "output": "Puedes crear un arreglo (lista) en Python utilizando corchetes. Ejemplo: `mi_lista = [1, 2, 3, 4]`."
    },
    {
        "input": "¿Puedo tener diferentes tipos de datos en un arreglo?",
        "output": "Sí, en Python los arreglos (listas) pueden contener elementos de diferentes tipos de datos, como enteros, cadenas, y más."
    },
    {
        "input": "¿Cómo acceder a un elemento de un arreglo en Python?",
        "output": "Puedes acceder a un elemento de un arreglo usando su índice. Ejemplo: `mi_lista[0]` accede al primer elemento."
    },
    {
        "input": "¿Cómo cambiar un valor de un arreglo?",
        "output": "Puedes cambiar el valor de un arreglo asignando un nuevo valor al índice específico. Ejemplo: `mi_lista[0] = 10`."
    },
    {
        "input": "¿Cómo agregar un elemento a un arreglo?",
        "output": "Puedes agregar un elemento a un arreglo usando el método `append()`. Ejemplo: `mi_lista.append(5)`."
    },
    {
        "input": "¿Cómo insertar un elemento en una posición específica?",
        "output": "Puedes insertar un elemento en una posición específica usando el método `insert()`. Ejemplo: `mi_lista.insert(2, 10)`."
    },
    {
        "input": "¿Cómo eliminar un elemento de un arreglo?",
        "output": "Puedes eliminar un elemento de un arreglo usando el método `remove()`. Ejemplo: `mi_lista.remove(10)`."
    },
    {
        "input": "¿Cómo eliminar un elemento por índice?",
        "output": "Puedes eliminar un elemento por índice usando el método `pop()`. Ejemplo: `mi_lista.pop(1)` elimina el segundo elemento."
    },
    {
        "input": "¿Cómo obtener la longitud de un arreglo?",
        "output": "Puedes obtener la longitud de un arreglo usando la función `len()`. Ejemplo: `len(mi_lista)`."
    },
    {
        "input": "¿Cómo ordenar un arreglo?",
        "output": "Puedes ordenar un arreglo usando el método `sort()`. Ejemplo: `mi_lista.sort()` ordenará los elementos en orden ascendente."
    },
    {
        "input": "¿Cómo ordenar un arreglo en orden descendente?",
        "output": "Puedes ordenar un arreglo en orden descendente usando `sort(reverse=True)`. Ejemplo: `mi_lista.sort(reverse=True)`."
    },
    {
        "input": "¿Cómo invertir el orden de un arreglo?",
        "output": "Puedes invertir el orden de un arreglo usando el método `reverse()`. Ejemplo: `mi_lista.reverse()`."
    },
    {
        "input": "¿Cómo verificar si un elemento está en un arreglo?",
        "output": "Puedes verificar si un elemento está en un arreglo usando el operador `in`. Ejemplo: `10 in mi_lista`."
    },
    {
        "input": "¿Cómo concatenar dos arreglos?",
        "output": "Puedes concatenar dos arreglos usando el operador `+`. Ejemplo: `mi_lista + otro_arreglo`."
    },
    {
        "input": "¿Cómo repetir un arreglo varias veces?",
        "output": "Puedes repetir un arreglo usando el operador `*`. Ejemplo: `mi_lista * 3` repetirá los elementos tres veces."
    },
    {
        "input": "¿Cómo cortar un arreglo?",
        "output": "Puedes cortar un arreglo usando el operador de corte `[:]`. Ejemplo: `mi_lista[1:4]` obtiene una sublista de los elementos de índice 1 a 3."
    },
    {
        "input": "¿Qué pasa si accedo a un índice fuera del rango del arreglo?",
        "output": "Si accedes a un índice fuera del rango, obtendrás un error `IndexError`."
    },
    {
        "input": "¿Cómo comprobar si un arreglo está vacío?",
        "output": "Puedes comprobar si un arreglo está vacío usando la función `len()`. Ejemplo: `len(mi_lista) == 0`."
    },
    {
        "input": "¿Cómo copiar un arreglo?",
        "output": "Puedes copiar un arreglo utilizando el método `copy()` o el operador de corte `[:]`. Ejemplo: `mi_lista_copy = mi_lista.copy()`."
    },
    {
        "input": "¿Cómo agregar varios elementos a un arreglo?",
        "output": "Puedes agregar varios elementos a un arreglo usando el método `extend()`. Ejemplo: `mi_lista.extend([5, 6, 7])`."
    },
    {
        "input": "¿Cómo encontrar el índice de un elemento?",
        "output": "Puedes encontrar el índice de un elemento usando el método `index()`. Ejemplo: `mi_lista.index(10)`."
    },
    {
        "input": "¿Cómo contar cuántas veces aparece un elemento en un arreglo?",
        "output": "Puedes contar las ocurrencias de un elemento usando el método `count()`. Ejemplo: `mi_lista.count(10)`."
    },
    {
        "input": "¿Cómo eliminar todos los elementos de un arreglo?",
        "output": "Puedes eliminar todos los elementos de un arreglo usando el método `clear()`. Ejemplo: `mi_lista.clear()`."
    },
    {
        "input": "¿Cómo crear una lista de números del 0 al 9?",
        "output": "Puedes crear una lista de números del 0 al 9 usando la función `range()`. Ejemplo: `list(range(10))`."
    },
    {
        "input": "¿Cómo multiplicar cada elemento de un arreglo por 2?",
        "output": "Puedes multiplicar cada elemento de un arreglo usando una comprensión de lista. Ejemplo: `[x * 2 for x in mi_lista]`."
    },
    {
        "input": "¿Cómo convertir un arreglo de cadenas a un arreglo de enteros?",
        "output": "Puedes convertir un arreglo de cadenas a enteros usando una comprensión de lista. Ejemplo: `[int(x) for x in mi_lista]`."
    },
    {
        "input": "¿Qué es una comprensión de lista?",
        "output": "Una comprensión de lista es una forma concisa de crear listas a partir de otras listas o iterables. Ejemplo: `[x for x in range(5)]` crea una lista de 0 a 4."
    },
    {
        "input": "¿Cómo sumo los elementos de un arreglo?",
        "output": "Puedes sumar los elementos de un arreglo usando la función `sum()`. Ejemplo: `sum(mi_lista)`."
    },
    {
        "input": "¿Cómo verificar el tipo de un arreglo?",
        "output": "Puedes verificar el tipo de un arreglo usando la función `type()`. Ejemplo: `type(mi_lista)`."
    },
    {
        "input": "¿Cómo hacer que un arreglo sea inmutable?",
        "output": "Para hacer que un arreglo sea inmutable, puedes usar una tupla en lugar de una lista. Ejemplo: `mi_tupla = (1, 2, 3)`."
    },
    {
        "input": "¿Cómo puedo dividir un arreglo en partes iguales?",
        "output": "Puedes dividir un arreglo en partes iguales usando una comprensión de lista y el operador de corte. Ejemplo: `mi_lista[i:i+tamano]`."
    },
    {
        "input": "¿Cómo encontrar el valor máximo de un arreglo?",
        "output": "Puedes encontrar el valor máximo de un arreglo usando la función `max()`. Ejemplo: `max(mi_lista)`."
    },
    {
        "input": "¿Cómo encontrar el valor mínimo de un arreglo?",
        "output": "Puedes encontrar el valor mínimo de un arreglo usando la función `min()`. Ejemplo: `min(mi_lista)`."
    },
    {
        "input": "¿Qué es un arreglo bidimensional?",
        "output": "Un arreglo bidimensional es una lista de listas, es decir, una tabla o matriz. Ejemplo: `mi_matriz = [[1, 2], [3, 4]]`."
    },
    {
        "input": "¿Cómo acceder a un elemento de un arreglo bidimensional?",
        "output": "Puedes acceder a un elemento de un arreglo bidimensional usando dos índices. Ejemplo: `mi_matriz[0][1]` accede al segundo elemento de la primera fila."
    },
    {
        "input": "¿Cómo recorrer todos los elementos de un arreglo?",
        "output": "Puedes recorrer todos los elementos de un arreglo usando un ciclo `for`. Ejemplo: `for x in mi_lista: print(x)`."
    },
    {
        "input": "¿Cómo verificar si un arreglo contiene otro arreglo?",
        "output": "Puedes verificar si un arreglo contiene otro arreglo usando el operador `in`. Ejemplo: `[1, 2] in mi_lista`."
    },
    {
        "input": "¿Cómo convertir un arreglo en una cadena?",
        "output": "Puedes convertir un arreglo en una cadena usando el método `join()`. Ejemplo: `','.join([str(x) for x in mi_lista])`."
    },
    {
        "input": "¿Cómo agregar un arreglo dentro de otro?",
        "output": "Puedes agregar un arreglo dentro de otro utilizando el método `append()` o `extend()`. Ejemplo: `mi_lista.append([5, 6])`."
    },
    {
        "input": "¿Cómo eliminar un arreglo de una lista de listas?",
        "output": "Puedes eliminar un arreglo de una lista de listas usando `remove()`. Ejemplo: `mi_lista.remove([5, 6])`."
    },
    {
        "input": "¿Cómo comprobar si un arreglo está ordenado?",
        "output": "Puedes comprobar si un arreglo está ordenado comparándolo con su versión ordenada. Ejemplo: `mi_lista == sorted(mi_lista)`."
    },
    {
        "input": "¿Cómo eliminar los duplicados de un arreglo?",
        "output": "Puedes eliminar los duplicados de un arreglo convirtiéndolo en un conjunto. Ejemplo: `list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo hacer que un arreglo tenga solo elementos únicos?",
        "output": "Puedes hacer que un arreglo tenga solo elementos únicos convirtiéndolo en un conjunto y luego volviéndolo a una lista. Ejemplo: `mi_lista = list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo agrupar elementos de un arreglo por tipo?",
        "output": "Puedes agrupar elementos de un arreglo por tipo usando un diccionario y un ciclo. Ejemplo: `{type(x): [x for x in mi_lista if type(x) == tipo]}`."
    },
    {
        "input": "¿Cómo comprobar si dos arreglos son iguales?",
        "output": "Puedes comprobar si dos arreglos son iguales utilizando el operador `==`. Ejemplo: `mi_lista == otro_arreglo`."
    },
    {
        "input": "¿Cómo convertir un arreglo en una tupla?",
        "output": "Puedes convertir un arreglo en una tupla utilizando la función `tuple()`. Ejemplo: `tuple(mi_lista)`."
    },
    {
        "input": "¿Cómo convertir una tupla en un arreglo?",
        "output": "Puedes convertir una tupla en un arreglo utilizando la función `list()`. Ejemplo: `list(mi_tupla)`."
    },
    {
        "input": "¿Cómo funciona el ciclo for en Python?",
        "output": "El ciclo `for` en Python se utiliza para iterar sobre secuencias como listas, tuplas, cadenas o rangos. Ejemplo: `for i in range(5): print(i)` imprimirá números del 0 al 4."
    },
    {
        "input": "¿Qué es un ciclo for?",
        "output": "Un ciclo `for` es una estructura que permite recorrer los elementos de una secuencia uno por uno."
    },
    {
        "input": "¿Cómo se usa el ciclo for con listas?",
        "output": "Puedes iterar sobre los elementos de una lista usando `for`. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Cómo hacer un ciclo for que recorra un rango de números?",
        "output": "Usa la función `range()`. Ejemplo: `for i in range(1, 6): print(i)` imprimirá los números del 1 al 5."
    },
    {
        "input": "¿Cómo interrumpir un ciclo for antes de que termine?",
        "output": "Usa la instrucción `break`. Ejemplo: `for i in range(10): if i == 5: break`."
    },
    {
        "input": "¿Cómo puedo usar el ciclo for con cadenas?",
        "output": "Puedes iterar sobre cada carácter de una cadena. Ejemplo: `for letra in 'Python': print(letra)` imprimirá cada letra de la palabra 'Python'."
    },
    {
        "input": "¿Qué hace el ciclo for-else?",
        "output": "La cláusula `else` de un ciclo `for` se ejecuta si el ciclo termina normalmente, sin usar `break`. Ejemplo: `for i in range(5): if i == 3: break else: print('Terminó sin interrupción')`."
    },
    {
        "input": "¿Cómo iterar con índices en un ciclo for?",
        "output": "Usa `enumerate()` para obtener tanto los índices como los valores. Ejemplo: `for indice, valor in enumerate(['a', 'b', 'c']): print(indice, valor)`."
    },
    {
        "input": "¿Cómo hacer un ciclo for que recorra una tupla?",
        "output": "Itera sobre los elementos directamente. Ejemplo: `mi_tupla = (1, 2, 3); for elemento in mi_tupla: print(elemento)`."
    },
    {
        "input": "¿Cómo usar el ciclo for con un diccionario?",
        "output": "Puedes iterar sobre las claves, los valores o ambos. Ejemplo: `mi_dic = {'a': 1, 'b': 2}; for clave, valor in mi_dic.items(): print(clave, valor)`."
    },
    {
        "input": "¿Cómo puedo hacer que un ciclo for se salte una iteración?",
        "output": "Usa la instrucción `continue`. Ejemplo: `for i in range(5): if i == 3: continue; print(i)`."
    },
    {
        "input": "¿Cómo hacer un ciclo for que cuente hacia atrás?",
        "output": "Usa `range()` con valores decrecientes. Ejemplo: `for i in range(5, 0, -1): print(i)` imprimirá del 5 al 1."
    },
    {
        "input": "¿Puedo usar varias variables en un ciclo for?",
        "output": "Sí, puedes usar desempaquetado. Ejemplo: `pares = [(1, 2), (3, 4)]; for x, y in pares: print(x, y)`."
    },
    {
        "input": "¿Qué pasa si el ciclo for no tiene elementos que recorrer?",
        "output": "El ciclo no se ejecutará. Ejemplo: `for i in []: print(i)` no imprimirá nada."
    },
    {
        "input": "¿Cómo imprimir solo los números pares usando un ciclo for?",
        "output": "Usa una condición dentro del ciclo. Ejemplo: `for i in range(10): if i % 2 == 0: print(i)`."
    },
    {
        "input": "¿Cómo puedo anidar ciclos for?",
        "output": "Coloca un ciclo `for` dentro de otro. Ejemplo: `for i in range(2): for j in range(3): print(i, j)`."
    },
    {
        "input": "¿Cómo uso un ciclo for para calcular la suma de números en una lista?",
        "output": "Usa un acumulador. Ejemplo: `mi_lista = [1, 2, 3]; suma = 0; for num in mi_lista: suma += num; print(suma)`."
    },
    {
        "input": "¿Qué es un iterador y cómo se relaciona con el ciclo for?",
        "output": "Un iterador es un objeto que devuelve sus elementos uno por uno. El ciclo `for` usa internamente iteradores para recorrer secuencias."
    },
    {
        "input": "¿Cómo puedo usar un ciclo for para crear una lista nueva?",
        "output": "Usa una comprensión de listas. Ejemplo: `[x**2 for x in range(5)]` crea una lista con los cuadrados de 0 a 4."
    },
    {
        "input": "¿Cómo recorrer dos listas al mismo tiempo con un ciclo for?",
        "output": "Usa la función `zip()`. Ejemplo: `for x, y in zip([1, 2], ['a', 'b']): print(x, y)`."
    },
    {
        "input": "¿Qué hace la función range() en un ciclo for?",
        "output": "`range()` genera una secuencia de números para iterar. Ejemplo: `for i in range(5): print(i)` imprime del 0 al 4."
    },
    {
        "input": "¿Puedo usar un ciclo for sin cuerpo?",
        "output": "Sí, pero necesitas `pass` para que sea sintácticamente válido. Ejemplo: `for i in range(5): pass`."
    },
    {
        "input": "¿Cómo manejar grandes cantidades de datos en un ciclo for?",
        "output": "Usa generadores para manejar datos grandes sin cargar todo en memoria. Ejemplo: `for x in (i for i in range(10**6) if i % 2 == 0): print(x)`."
    },
    {
        "input": "¿Puedo modificar una lista mientras la recorro con un ciclo for?",
        "output": "Es mejor no hacerlo directamente. En su lugar, usa una copia de la lista o un índice explícito."
    },
    {
        "input": "¿Cómo hago un ciclo for en Python?",
        "output": "Usa la palabra clave `for` seguida de una variable y un iterable. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Qué es un ciclo for y para qué sirve?",
        "output": "Un ciclo `for` se utiliza para repetir una acción iterando sobre una secuencia como listas, cadenas o rangos."
    },
    {
        "input": "¿Cómo puedo recorrer una lista con un ciclo for?",
        "output": "Usa `for` para iterar sobre la lista. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Qué debo poner dentro de un ciclo for?",
        "output": "Dentro de un ciclo `for` puedes poner cualquier código que desees ejecutar repetidamente, como imprimir o realizar cálculos."
    },
    {
        "input": "¿Cómo repito algo 10 veces con un ciclo for?",
        "output": "Usa `range()`. Ejemplo: `for i in range(10): print('Esto se repite 10 veces')`."
    },
    {
        "input": "¿Qué significa `in` en un ciclo for?",
        "output": "`in` se usa para recorrer elementos de una secuencia, como listas o cadenas, en un ciclo `for`."
    },
    {
        "input": "¿Puedo usar un ciclo for para contar números?",
        "output": "Sí, usa `range()`. Ejemplo: `for i in range(1, 6): print(i)` imprimirá los números del 1 al 5."
    },
    {
        "input": "¿Cómo se usa el ciclo for con cadenas?",
        "output": "Puedes iterar sobre cada carácter de una cadena. Ejemplo: `for letra in 'hola': print(letra)`."
    },
    {
        "input": "¿Qué pasa si mi ciclo for no tiene elementos para recorrer?",
        "output": "Si no hay elementos en la secuencia, el ciclo no se ejecutará. Ejemplo: `for i in []: print(i)` no imprimirá nada."
    },
    {
        "input": "¿Cómo hago un ciclo for que recorra una lista de palabras?",
        "output": "Usa `for` con la lista. Ejemplo: `palabras = ['hola', 'mundo']; for palabra in palabras: print(palabra)`."
    },
    {
        "input": "¿Cómo usar un ciclo for para sumar números en una lista?",
        "output": "Usa una variable acumuladora. Ejemplo: `suma = 0; for num in [1, 2, 3]: suma += num; print(suma)`."
    },
    {
        "input": "¿Cómo saber cuántas veces se ejecuta un ciclo for?",
        "output": "El ciclo se ejecutará una vez por cada elemento en la secuencia que estés recorriendo."
    },
    {
        "input": "¿Cómo hacer un ciclo for que empiece en 5 y termine en 10?",
        "output": "Usa `range()`. Ejemplo: `for i in range(5, 11): print(i)`."
    },
    {
        "input": "¿Qué variable debo usar en un ciclo for?",
        "output": "Puedes usar cualquier nombre de variable. Ejemplo: `for numero in range(3): print(numero)`."
    },
    {
        "input": "¿Cómo funciona `range()` en un ciclo for?",
        "output": "`range()` genera números para iterar. Ejemplo: `range(3)` genera los números 0, 1 y 2."
    },
    {
        "input": "¿Puedo usar números negativos en un ciclo for?",
        "output": "Sí, usa `range()` con valores negativos. Ejemplo: `for i in range(-5, 0): print(i)`."
    },
    {
        "input": "¿Cómo imprimir los números del 1 al 10 con un ciclo for?",
        "output": "Usa `range(1, 11)`. Ejemplo: `for i in range(1, 11): print(i)`."
    },
    {
        "input": "¿Qué es un iterable en un ciclo for?",
        "output": "Un iterable es un objeto como una lista, cadena o rango que puede ser recorrido por un ciclo `for`."
    },
    {
        "input": "¿Qué hace el ciclo for cuando se encuentra con `break`?",
        "output": "`break` detiene el ciclo inmediatamente, sin importar cuántas iteraciones faltan."
    },
    {
        "input": "¿Cómo hacer que un ciclo for se salte un número?",
        "output": "Usa `continue` para pasar a la siguiente iteración. Ejemplo: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "¿Cómo puedo imprimir una lista en un ciclo for?",
        "output": "Itera sobre la lista y usa `print()`. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Es necesario usar un rango en un ciclo for?",
        "output": "No, también puedes iterar sobre listas, cadenas u otros objetos iterables directamente."
    },
    {
        "input": "¿Qué pasa si no pongo nada dentro de un ciclo for?",
        "output": "Necesitas usar `pass` para evitar un error de sintaxis. Ejemplo: `for i in range(5): pass`."
    },
    {
        "input": "¿Cómo uso un ciclo for con números pares?",
        "output": "Usa `range()` con un paso de 2. Ejemplo: `for i in range(0, 11, 2): print(i)`."
    },
    {
        "input": "¿Cómo hago un ciclo while en Python?",
        "output": "Usa la palabra clave `while` seguida de una condición. Ejemplo: `x = 0; while x < 5: print(x); x += 1`."
    },
    {
        "input": "¿Qué es un ciclo while y para qué sirve?",
        "output": "Un ciclo `while` repite un bloque de código mientras una condición sea verdadera."
    },
    {
        "input": "¿Cómo funciona el ciclo while?",
        "output": "El ciclo `while` ejecuta el bloque de código asociado hasta que la condición se vuelva falsa."
    },
    {
        "input": "¿Qué pasa si la condición en el while siempre es verdadera?",
        "output": "El ciclo se ejecutará indefinidamente, creando un bucle infinito. Debes asegurarte de que la condición eventualmente sea falsa."
    },
    {
        "input": "¿Cómo puedo detener un ciclo while manualmente?",
        "output": "Usa la instrucción `break`. Ejemplo: `while True: if x > 10: break`."
    },
    {
        "input": "¿Cómo hacer un ciclo while que cuente del 1 al 10?",
        "output": "Define un contador. Ejemplo: `x = 1; while x <= 10: print(x); x += 1`."
    },
    {
        "input": "¿Cómo se usa `continue` en un ciclo while?",
        "output": "`continue` salta el resto del bloque actual y pasa a la siguiente iteración. Ejemplo: `x = 0; while x < 5: x += 1; if x == 3: continue; print(x)`."
    },
    {
        "input": "¿Cómo evito un bucle infinito en un ciclo while?",
        "output": "Asegúrate de que la condición del `while` eventualmente se vuelva falsa modificando las variables involucradas."
    },
    {
        "input": "¿Puedo usar una condición compuesta en un ciclo while?",
        "output": "Sí, usa operadores lógicos como `and` o `or`. Ejemplo: `x = 0; while x < 5 and x != 3: print(x); x += 1`."
    },
    {
        "input": "¿Qué diferencia hay entre un ciclo for y un while?",
        "output": "Un `for` se usa para iterar sobre secuencias conocidas, mientras que un `while` se usa cuando no sabes cuántas iteraciones serán necesarias, pero tienes una condición."
    },
    {
        "input": "¿Cómo uso un ciclo while para sumar números?",
        "output": "Usa un acumulador. Ejemplo: `x = 1; suma = 0; while x <= 5: suma += x; x += 1; print(suma)`."
    },
    {
        "input": "¿Qué pasa si pongo `True` como condición en un while?",
        "output": "El ciclo será infinito a menos que lo detengas manualmente con `break`."
    },
    {
        "input": "¿Cómo hacer un ciclo while que se detenga cuando se cumpla una condición?",
        "output": "Usa un `break` dentro del ciclo. Ejemplo: `x = 0; while True: if x == 5: break; x += 1; print(x)`."
    },
    {
        "input": "¿Qué es una condición en un ciclo while?",
        "output": "Es una expresión lógica que se evalúa antes de cada iteración para determinar si el ciclo debe continuar."
    },
    {
        "input": "¿Puedo usar el ciclo while con una lista?",
        "output": "Sí, puedes recorrer una lista verificando sus elementos. Ejemplo: `mi_lista = [1, 2, 3]; while mi_lista: print(mi_lista.pop())`."
    },
    {
        "input": "¿Cómo usar un ciclo while para imprimir números pares?",
        "output": "Usa un contador y una condición. Ejemplo: `x = 0; while x <= 10: print(x); x += 2`."
    },
    {
        "input": "¿Cómo usar un ciclo while con un contador decreciente?",
        "output": "Resta al contador en cada iteración. Ejemplo: `x = 10; while x > 0: print(x); x -= 1`."
    },
    {
        "input": "¿Qué pasa si olvido incrementar una variable dentro de un while?",
        "output": "Si la variable es parte de la condición, el ciclo podría volverse infinito."
    },
    {
        "input": "¿Puedo usar `else` en un ciclo while?",
        "output": "Sí, la cláusula `else` se ejecuta si el ciclo termina normalmente, sin usar `break`. Ejemplo: `x = 0; while x < 5: x += 1; else: print('Terminado')`."
    },
    {
        "input": "¿Cómo uso el ciclo while para pedir entrada al usuario hasta que sea válida?",
        "output": "Usa un ciclo con una condición. Ejemplo: `while True: entrada = input('Ingresa algo: '); if entrada == 'ok': break`."
    },
    {
        "input": "¿Cómo hacer un bucle infinito con while?",
        "output": "Usa `while True:`. Ejemplo: `while True: print('Bucle infinito')`."
    },
    {
        "input": "¿Qué debo hacer si mi ciclo while se ejecuta infinitamente por error?",
        "output": "Asegúrate de revisar la condición y de que las variables cambien dentro del ciclo para evitar el bucle infinito."
    },
    {
        "input": "¿Cómo imprimir números del 1 al 100 con un ciclo while?",
        "output": "Usa un contador. Ejemplo: `x = 1; while x <= 100: print(x); x += 1`."
    },
    {
        "input": "¿Qué significa la palabra clave `pass` en un ciclo while?",
        "output": "`pass` se usa como un marcador de posición que no hace nada. Ejemplo: `while True: pass`."
    },
    {
        "input": "¿Qué hace el ciclo for?",
        "output": "El ciclo `for` itera sobre los elementos de una secuencia, como listas, cadenas o rangos, y ejecuta un bloque de código para cada elemento."
    },
    {
        "input": "¿Qué hace el ciclo while?",
        "output": "El ciclo `while` ejecuta un bloque de código mientras una condición especificada sea verdadera."
    },
    {
        "input": "¿Qué hace la función print?",
        "output": "La función `print()` muestra información en la consola o salida estándar."
    },
    {
        "input": "¿Qué hace la palabra clave break?",
        "output": "`break` detiene inmediatamente la ejecución de un ciclo, ya sea `for` o `while`."
    },
    {
        "input": "¿Qué hace la palabra clave continue?",
        "output": "`continue` salta el resto del código en la iteración actual y pasa a la siguiente iteración del ciclo."
    },
    {
        "input": "¿Qué hace la función range?",
        "output": "`range()` genera una secuencia de números, útil para iterar con un ciclo `for`."
    },
    {
        "input": "¿Qué hace la función input?",
        "output": "`input()` permite al usuario ingresar datos desde el teclado y devuelve la entrada como una cadena."
    },
    {
        "input": "¿Qué hace la instrucción pass?",
        "output": "`pass` no realiza ninguna acción; se utiliza como un marcador de posición donde se requiere código sintácticamente válido."
    },
    {
        "input": "¿Qué hace la función len?",
        "output": "`len()` devuelve la longitud de un objeto, como una lista, cadena o tupla."
    },
    {
        "input": "¿Qué hace la función str?",
        "output": "`str()` convierte un valor en una cadena de texto."
    },
    {
        "input": "¿Qué hace la función int?",
        "output": "`int()` convierte un valor a un número entero, si es posible."
    },
    {
        "input": "¿Qué hace la función float?",
        "output": "`float()` convierte un valor en un número decimal (flotante)."
    },
    {
        "input": "¿Qué hace el operador in?",
        "output": "El operador `in` verifica si un elemento está presente en una secuencia, como una lista, cadena o tupla."
    },
    {
        "input": "¿Qué hace el operador not?",
        "output": "El operador `not` invierte el valor de una expresión booleana, convirtiendo `True` en `False` y viceversa."
    },
    {
        "input": "¿Qué hace la función type?",
        "output": "`type()` devuelve el tipo de un objeto. Ejemplo: `type(5)` devuelve `<class 'int'>`."
    },
    {
        "input": "¿Qué hace la función enumerate?",
        "output": "`enumerate()` devuelve un objeto que contiene pares índice-valor al iterar sobre una secuencia."
    },
    {
        "input": "¿Qué hace un bucle infinito?",
        "output": "Un bucle infinito repite su bloque de código sin detenerse porque la condición nunca se vuelve falsa."
    },
    {
        "input": "¿Qué hace un iterable?",
        "output": "Un iterable es un objeto que puede ser recorrido elemento por elemento en un ciclo, como listas, cadenas o diccionarios."
    },
    {
        "input": "¿Qué hace un índice en Python?",
        "output": "Un índice especifica la posición de un elemento en una secuencia, como en una lista o cadena."
    },
    {
        "input": "¿Qué hace la función zip?",
        "output": "`zip()` combina dos o más iterables, devolviendo un iterador de pares de elementos."
    },
    {
        "input": "¿Qué hace el operador %?",
        "output": "El operador `%` calcula el resto de la división entre dos números."
    },
    {
        "input": "¿Qué hace el operador //?",
        "output": "El operador `//` realiza una división entera, devolviendo solo la parte entera del resultado."
    },
    {
        "input": "¿Qué hace la función map?",
        "output": "`map()` aplica una función a cada elemento de un iterable y devuelve un objeto map."
    },
    {
        "input": "¿Qué hace la función filter?",
        "output": "`filter()` devuelve un iterable con los elementos que cumplen una condición especificada."
    },
    {
        "input": "¿Qué hace el operador **?",
        "output": "El operador `**` eleva un número a la potencia de otro."
    },
    {
        "input": "¿Qué hace la palabra clave return?",
        "output": "`return` finaliza la ejecución de una función y devuelve un valor opcional."
    },
    {
        "input": "¿Qué hace la palabra clave def?",
        "output": "`def` se utiliza para definir una nueva función en Python."
    },
    {
        "input": "¿Qué hace el método append?",
        "output": "`append()` agrega un elemento al final de una lista."
    },
    {
        "input": "¿Qué hace el método pop?",
        "output": "`pop()` elimina y devuelve el último elemento de una lista o uno en un índice especificado."
    },
    {
        "input": "¿Qué hace el método split?",
        "output": "`split()` divide una cadena en una lista de subcadenas, usando un delimitador especificado."
    },
    {
        "input": "¿Qué hace el método join?",
        "output": "`join()` une los elementos de una lista o iterable en una cadena, separados por un delimitador."
    },
    {
        "input": "¿Qué hace el método upper?",
        "output": "`upper()` convierte todos los caracteres de una cadena en mayúsculas."
    },
    {
        "input": "¿Qué hace el método lower?",
        "output": "`lower()` convierte todos los caracteres de una cadena en minúsculas."
    },
    {
        "input": "¿Cómo empiezo a programar en Python?",
        "output": "Puedes empezar instalando Python desde su sitio oficial, abriendo un editor de texto o IDE como VS Code, y escribiendo tu primer script. Ejemplo: `print('¡Hola, mundo!')`."
    },
    {
        "input": "¿Qué es una variable en Python?",
        "output": "Es un contenedor para almacenar datos. Se crea asignando un valor a un nombre. Ejemplo: `x = 5`."
    },
    {
        "input": "¿Cómo se usa el ciclo for en Python?",
        "output": "El ciclo `for` recorre elementos de una secuencia. Ejemplo: `for i in range(3): print(i)`."
    },
    {
        "input": "¿Qué diferencia hay entre for y while?",
        "output": "El ciclo `for` se usa para iterar sobre una secuencia conocida, mientras que `while` repite mientras una condición sea verdadera."
    },
    {
        "input": "¿Qué es un string en Python?",
        "output": "Es una cadena de caracteres, como un texto. Se define entre comillas simples o dobles. Ejemplo: `'Hola'` o `\"Hola\"`."
    },
    {
        "input": "¿Cómo convierto un string en un número?",
        "output": "Usa `int()` para enteros o `float()` para decimales. Ejemplo: `numero = int('5')`."
    },
    {
        "input": "¿Qué es una lista en Python?",
        "output": "Una lista es una colección ordenada y mutable de elementos. Ejemplo: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista?",
        "output": "Usa `remove()` para eliminar por valor o `pop()` para eliminar por índice. Ejemplo: `mi_lista.remove(2)`."
    },
    {
        "input": "¿Cómo sumo los números de una lista?",
        "output": "Usa la función `sum()`. Ejemplo: `mi_lista = [1, 2, 3]; total = sum(mi_lista)`."
    },
    {
        "input": "¿Qué es un diccionario en Python?",
        "output": "Es una colección de pares clave-valor. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo accedo a un valor en un diccionario?",
        "output": "Usa la clave entre corchetes. Ejemplo: `valor = mi_diccionario['clave']`."
    },
    {
        "input": "¿Qué hace la función input?",
        "output": "Permite recibir datos del usuario. Ejemplo: `nombre = input('¿Cómo te llamas? ')`."
    },
    {
        "input": "¿Cómo hago que mi programa espere unos segundos?",
        "output": "Usa `time.sleep()`. Ejemplo: `import time; time.sleep(2)` espera 2 segundos."
    },
    {
        "input": "¿Cómo divido un número en Python?",
        "output": "Usa `/` para división normal o `//` para división entera. Ejemplo: `resultado = 10 / 3`."
    },
    {
        "input": "¿Qué es un bucle infinito?",
        "output": "Es un ciclo que nunca se detiene porque la condición siempre es verdadera. Ejemplo: `while True: print('Infinito')`."
    },
    {
        "input": "¿Cómo termino un programa en Python?",
        "output": "Usa `exit()` o `sys.exit()`. Ejemplo: `import sys; sys.exit()`."
    },
    {
        "input": "¿Qué diferencia hay entre listas y tuplas?",
        "output": "Las listas son mutables, mientras que las tuplas son inmutables. Ejemplo: `mi_lista = [1, 2]`, `mi_tupla = (1, 2)`."
    },
    {
        "input": "¿Qué hace la función len?",
        "output": "Devuelve la longitud de un objeto, como una lista o cadena. Ejemplo: `len('hola')` devuelve `4`."
    },
    {
        "input": "¿Cómo hago una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Cómo encuentro el valor más grande de una lista?",
        "output": "Usa la función `max()`. Ejemplo: `max([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Cómo sé qué tipo de dato es una variable?",
        "output": "Usa la función `type()`. Ejemplo: `type(5)` devuelve `<class 'int'>`."
    },
    {
        "input": "¿Cómo uso la función print con múltiples líneas?",
        "output": "Usa un string multilínea o varias llamadas a `print`. Ejemplo: `print('Primera línea\\nSegunda línea')`."
    },
    {
        "input": "¿Qué es un operador lógico en Python?",
        "output": "Un operador lógico, como `and`, `or` o `not`, evalúa expresiones booleanas."
    },
    {
        "input": "¿Cómo hago que un programa repita una acción varias veces?",
        "output": "Usa ciclos como `for` o `while`. Ejemplo: `for i in range(5): print('Hola')`."
    },
    {
        "input": "¿Cómo uso Python para realizar cálculos?",
        "output": "Usa operadores matemáticos como `+`, `-`, `*`, `/` para sumar, restar, multiplicar o dividir."
    },
    {
        "input": "¿Qué es un archivo .py?",
        "output": "Es un archivo que contiene código Python y se ejecuta con el intérprete de Python."
    },
    {
        "input": "¿Cómo escribo en un archivo con Python?",
        "output": "Usa la función `open()` con el modo de escritura. Ejemplo: `with open('archivo.txt', 'w') as f: f.write('Hola')`."
    },
    {
        "input": "¿Qué es una excepción en Python?",
        "output": "Una excepción es un error durante la ejecución del programa que puede manejarse con `try-except`."
    },
    {
        "input": "¿Cómo manejo errores en Python?",
        "output": "Usa un bloque `try-except`. Ejemplo: `try: x = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Un módulo es un archivo que contiene código Python reutilizable. Puedes importarlo con `import nombre_modulo`."
    },
    {
        "input": "¿Qué hace la función dir?",
        "output": "Muestra una lista de los atributos y métodos de un objeto. Ejemplo: `dir([])` muestra los métodos de una lista."
    },
    {
        "input": "¿Cómo instalo una biblioteca en Python?",
        "output": "Usa el comando `pip install`. Ejemplo: `pip install requests`."
    },
    {
        "input": "¿Qué es un decorador en Python?",
        "output": "Un decorador es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador`."
    },
    {
        "input": "¿Cómo puedo automatizar una tarea en Python?",
        "output": "Puedes usar bibliotecas como `os`, `shutil` o `subprocess` para automatizar tareas, dependiendo de lo que necesites hacer."
    },
    {
        "input": "¿Qué lugares turísticos recomiendas visitar en Xela?",
        "output": "En Xela puedes visitar el Parque Central, las Fuentes Georginas, el Volcán Santa María y la Catedral del Espíritu Santo."
    },
    {
        "input": "¿Qué algoritmos son comunes en inteligencia artificial?",
        "output": "Algoritmos como árboles de decisión, redes neuronales, regresión logística, y SVM son comunes en inteligencia artificial."
    },
    {
        "input": "¿Qué materias puedo esperar en la carrera de Ingeniería en Sistemas?",
        "output": "En la carrera de Ingeniería en Sistemas estudiarás programación, bases de datos, redes, inteligencia artificial, sistemas operativos y desarrollo de software."
    },
    {
        "input": "¿Cómo puedo aprender a programar videojuegos?",
        "output": "Puedes empezar con motores como Unity o Pygame, aprender lógica de programación y practicar con proyectos pequeños."
    },
    {
        "input": "¿Cómo funciona un adaptador de corriente para computadoras?",
        "output": "Un adaptador de corriente convierte la energía eléctrica de la toma de corriente a un voltaje adecuado para tu computadora portátil."
    },
    {
        "input": "¿Qué tecnología es común en sistemas de videojuegos modernos?",
        "output": "Tecnologías como motores gráficos avanzados (Unreal Engine, Unity), ray tracing, y soporte para realidad virtual son comunes en videojuegos modernos."
    },
    {
        "input": "¿Qué diferencia hay entre hardware y software en computadoras?",
        "output": "El hardware se refiere a los componentes físicos, como el procesador y la memoria, mientras que el software son los programas y sistemas operativos que ejecutan las tareas."
    },
    {
        "input": "¿Cómo desarrollo un sistema básico en Python?",
        "output": "Puedes usar frameworks como Flask o Django para desarrollar sistemas web básicos o escribir scripts que manejen datos y procesos específicos."
    },
    {
        "input": "¿Qué impacto tiene la tecnología en Guatemala?",
        "output": "La tecnología está transformando sectores como la educación, el comercio y la comunicación en Guatemala, ayudando a cerrar la brecha digital."
    },
    {
        "input": "¿Qué lenguaje es mejor para inteligencia artificial, Python u otro?",
        "output": "Python es ampliamente preferido para inteligencia artificial debido a su ecosistema de bibliotecas como TensorFlow, PyTorch y scikit-learn."
    },
    {
        "input": "¿Qué componentes necesito para armar una computadora?",
        "output": "Necesitas un procesador, placa base, memoria RAM, almacenamiento (HDD o SSD), tarjeta gráfica (si es necesario), fuente de poder, y un gabinete."
    },
    {
        "input": "¿Qué aplicaciones tienen los sistemas en la vida diaria?",
        "output": "Los sistemas están presentes en banca, transporte, comunicación, atención médica y cualquier área que dependa de la tecnología."
    },
    {
        "input": "¿Cómo optimizo un videojuego para mejor rendimiento?",
        "output": "Puedes optimizar reduciendo la resolución de texturas, usando modelos 3D menos complejos, y ajustando las configuraciones de iluminación y físicas."
    },
    {
        "input": "¿Qué necesitas saber para diseñar una base de datos?",
        "output": "Debes entender la normalización, relaciones entre tablas, tipos de datos y cómo optimizar consultas para el rendimiento."
    },
    {
        "input": "¿Qué adaptadores son esenciales para computadoras modernas?",
        "output": "Adaptadores de red (Wi-Fi o Ethernet), USB-C a HDMI, y adaptadores de corriente son comunes en computadoras modernas."
    },
    {
        "input": "¿Cómo empezar un proyecto de inteligencia artificial en Python?",
        "output": "Empieza instalando bibliotecas como NumPy, pandas y scikit-learn. Define tu problema, recolecta datos y entrena un modelo con esos datos."
    },
    {
        "input": "¿Qué diferencia hay entre un sistema operativo y un programa?",
        "output": "Un sistema operativo gestiona los recursos de hardware y software de la computadora, mientras que un programa realiza tareas específicas para el usuario."
    },
    {
        "input": "¿Cómo aprendo sobre ciberseguridad en sistemas?",
        "output": "Puedes empezar con conceptos básicos como criptografía, redes y análisis de vulnerabilidades, usando herramientas como Wireshark y Metasploit."
    },
    {
        "input": "¿Qué frameworks son útiles para desarrollo rápido en Python?",
        "output": "Frameworks como Flask, Django y FastAPI son útiles para desarrollar aplicaciones web rápidamente."
    },
    {
        "input": "¿Qué características hacen de Xela un buen lugar para estudiar tecnología?",
        "output": "Xela tiene universidades reconocidas, un ambiente tranquilo y una comunidad creciente interesada en tecnología y programación."
    },
    {
        "input": "¿Qué dispositivos utilizan inteligencia artificial?",
        "output": "Asistentes virtuales como Alexa o Siri, cámaras de seguridad inteligentes y automóviles autónomos son ejemplos de dispositivos que utilizan IA."
    },
    {
        "input": "¿Cómo me preparo para un trabajo en Ingeniería en Sistemas?",
        "output": "Aprende lenguajes de programación, fortalece tus habilidades en bases de datos, redes y desarrollo de software, y participa en proyectos prácticos."
    },
    {
        "input": "¿Qué lenguajes son comunes en desarrollo de videojuegos?",
        "output": "C++, C#, Python y JavaScript son comunes en el desarrollo de videojuegos, dependiendo del motor utilizado."
    },
    {
        "input": "¿Qué debo considerar al comprar un adaptador de red?",
        "output": "Asegúrate de que sea compatible con tu dispositivo, soporte las velocidades necesarias y sea adecuado para el tipo de conexión (Wi-Fi o Ethernet)."
    },
    {
        "input": "¿Qué impacto tienen los sistemas en la sociedad moderna?",
        "output": "Los sistemas facilitan la automatización, mejoran la comunicación y aumentan la eficiencia en casi todos los aspectos de la vida moderna."
    },
    {
        "input": "¿Cómo se usa Python en la educación en Guatemala?",
        "output": "Python se utiliza en Guatemala para enseñar programación básica y desarrollo de aplicaciones en colegios y universidades debido a su simplicidad."
    },
    {
        "input": "¿Qué eventos tecnológicos se realizan en Xela?",
        "output": "Xela organiza hackatones, talleres de programación y eventos relacionados con tecnología, especialmente en universidades locales."
    },
    {
        "input": "¿Cómo se aplica la inteligencia artificial en videojuegos?",
        "output": "La inteligencia artificial se usa en videojuegos para crear NPCs, ajustar la dificultad automáticamente y mejorar la experiencia del jugador."
    },
    {
        "input": "¿Qué tipo de proyectos puedo hacer en la carrera de Ingeniería en Sistemas?",
        "output": "Puedes desarrollar aplicaciones web, sistemas de gestión, análisis de datos, aplicaciones móviles y proyectos de inteligencia artificial."
    },
    {
        "input": "¿Qué diferencia hay entre un sistema distribuido y uno centralizado?",
        "output": "Un sistema distribuido divide las tareas entre múltiples nodos, mientras que uno centralizado depende de un único servidor principal."
    },
    {
        "input": "¿Qué lenguajes debo aprender para sistemas modernos?",
        "output": "Lenguajes como Python, Java, C++, y JavaScript son esenciales para sistemas modernos por su versatilidad y soporte en diversas plataformas."
    },
    {
        "input": "¿Cómo influye la tecnología en la economía de Guatemala?",
        "output": "La tecnología impulsa sectores como el comercio electrónico, la banca y las startups, ayudando al crecimiento económico del país."
    },
    {
        "input": "¿Qué motores de videojuegos son mejores para principiantes?",
        "output": "Motores como Unity y Godot son ideales para principiantes por su documentación y facilidad de uso."
    },
    {
        "input": "¿Qué adaptadores necesito para conectar dos monitores a una laptop?",
        "output": "Necesitarás adaptadores HDMI, USB-C a HDMI, o DisplayPort, dependiendo de las salidas disponibles en tu laptop."
    },
    {
        "input": "¿Cómo puedo usar Python para crear un chatbot?",
        "output": "Puedes usar bibliotecas como `ChatterBot` o `NLTK` para procesar texto y desarrollar un chatbot básico."
    },
    {
        "input": "¿Qué herramientas se usan en inteligencia artificial para procesar imágenes?",
        "output": "Herramientas como OpenCV, TensorFlow y PyTorch son populares para el procesamiento y análisis de imágenes en IA."
    },
    {
        "input": "¿Qué tecnología está impulsando el desarrollo de videojuegos?",
        "output": "Tecnologías como ray tracing, realidad virtual, inteligencia artificial y motores gráficos avanzados están impulsando el desarrollo de videojuegos."
    },
    {
        "input": "¿Cómo crear un sistema de inicio de sesión básico?",
        "output": "Puedes usar Python con Flask o Django para crear un sistema básico que valide usuarios y contraseñas almacenadas en una base de datos."
    },
    {
        "input": "¿Qué tecnologías están revolucionando los sistemas de salud?",
        "output": "La inteligencia artificial, la telemedicina y el análisis de big data están revolucionando los sistemas de salud al mejorar diagnósticos y tratamientos."
    },
    {
        "input": "¿Qué impacto tienen los videojuegos en la educación?",
        "output": "Los videojuegos pueden mejorar habilidades como la resolución de problemas, el trabajo en equipo y el aprendizaje interactivo en entornos educativos."
    },
    {
        "input": "¿Cómo elegir un buen adaptador de energía para una laptop?",
        "output": "Asegúrate de que sea compatible con el voltaje y amperaje de tu laptop, y que sea de un fabricante confiable."
    },
    {
        "input": "¿Qué frameworks son útiles para sistemas en tiempo real?",
        "output": "Frameworks como Node.js, Flask y FastAPI son útiles para desarrollar sistemas que requieran respuestas rápidas en tiempo real."
    },
    {
        "input": "¿Cómo optimizo un sistema distribuido?",
        "output": "Puedes optimizar un sistema distribuido balanceando la carga, reduciendo la latencia de la red y utilizando almacenamiento distribuido eficiente."
    },
    {
        "input": "¿Qué métodos de aprendizaje supervisado existen en inteligencia artificial?",
        "output": "Métodos como regresión lineal, árboles de decisión, SVM y redes neuronales son ejemplos comunes de aprendizaje supervisado."
    },
    {
        "input": "¿Qué necesitas para empezar a programar videojuegos?",
        "output": "Necesitas aprender un lenguaje de programación como Python o C#, elegir un motor de desarrollo como Unity, y practicar con proyectos pequeños."
    },
    {
        "input": "¿Qué aplicaciones prácticas tiene Python en Guatemala?",
        "output": "En Guatemala, Python se usa en proyectos de análisis de datos, desarrollo de software educativo y automatización de procesos empresariales."
    },
    {
        "input": "¿Qué técnicas se usan para enseñar tecnología en Xela?",
        "output": "En Xela se usan talleres, cursos online, y proyectos prácticos para enseñar tecnología en universidades y academias locales."
    },
    {
        "input": "¿Cómo integrar inteligencia artificial en un sistema existente?",
        "output": "Puedes integrar inteligencia artificial usando APIs preentrenadas o desarrollando modelos personalizados con bibliotecas como TensorFlow o PyTorch."
    },
    {
        "input": "¿Qué tipo de proyectos prácticos puedo hacer en Ingeniería en Sistemas?",
        "output": "Puedes desarrollar aplicaciones web, gestionar bases de datos, crear aplicaciones móviles o implementar modelos de inteligencia artificial."
    },
    {
        "input": "¿Cómo puedo mejorar la eficiencia energética de mi computadora?",
        "output": "Ajusta la configuración de energía, reduce el brillo de la pantalla y cierra programas que no estés utilizando."
    },
    {
        "input": "¿Qué lenguajes son mejores para construir sistemas empresariales?",
        "output": "Java, Python y C# son excelentes para sistemas empresariales debido a su estabilidad, escalabilidad y soporte empresarial."
    },
    {
        "input": "¿Cómo contribuyen los videojuegos al desarrollo social?",
        "output": "Los videojuegos fomentan la creatividad, el trabajo en equipo y habilidades de resolución de problemas, además de conectar comunidades globales."
    },
    {
        "input": "¿Qué adaptadores son ideales para conectar laptops a proyectores antiguos?",
        "output": "Un adaptador VGA a HDMI o USB-C a VGA sería ideal para conectar laptops modernas a proyectores antiguos."
    },
    {
        "input": "¿Qué desafíos enfrenta Guatemala en el desarrollo tecnológico?",
        "output": "Desafíos como el acceso limitado a internet, la falta de infraestructura y la desigualdad educativa dificultan el desarrollo tecnológico en Guatemala."
    },
    {
        "input": "¿Qué bibliotecas de Python son útiles para analizar datos?",
        "output": "Bibliotecas como pandas, NumPy y Matplotlib son esenciales para el análisis y visualización de datos en Python."
    },
    {
        "input": "¿Qué es pandas?",
        "output": "Pandas es una biblioteca de Python para la manipulación y análisis de datos. Permite trabajar con estructuras de datos como DataFrames de manera eficiente."
    },
    {
        "input": "¿Qué es un adaptador VGA?",
        "output": "VGA es un estándar para conectar dispositivos de video como monitores y proyectores. Un adaptador VGA permite la compatibilidad con dispositivos que usan esta tecnología."
    },
    {
        "input": "¿Qué es Java?",
        "output": "Java es un lenguaje de programación orientado a objetos, ampliamente utilizado en aplicaciones empresariales, desarrollo móvil y sistemas distribuidos."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Un framework es una estructura predefinida de código que facilita el desarrollo de aplicaciones al proporcionar herramientas y funcionalidades comunes."
    },
    {
        "input": "¿Qué es TensorFlow?",
        "output": "TensorFlow es una biblioteca de código abierto para el aprendizaje automático y redes neuronales, ampliamente utilizada en proyectos de inteligencia artificial."
    },
    {
        "input": "¿Qué es un DataFrame en pandas?",
        "output": "Un DataFrame es una estructura de datos bidimensional en pandas, similar a una tabla, que permite organizar datos en filas y columnas."
    },
    {
        "input": "¿Qué es una API?",
        "output": "Una API (Interfaz de Programación de Aplicaciones) es un conjunto de reglas que permiten que diferentes aplicaciones se comuniquen entre sí."
    },
    {
        "input": "¿Qué es Python Flask?",
        "output": "Flask es un microframework de Python para el desarrollo de aplicaciones web. Es ligero y fácil de usar, ideal para proyectos pequeños."
    },
    {
        "input": "¿Qué es un motor de videojuegos?",
        "output": "Un motor de videojuegos es un software que proporciona herramientas para el desarrollo de videojuegos, como motores gráficos, físicas y sistemas de animación."
    },
    {
        "input": "¿Qué es Unity?",
        "output": "Unity es un motor de videojuegos popular que permite crear juegos en 2D y 3D, utilizado por desarrolladores de todos los niveles."
    },
    {
        "input": "¿Qué es ray tracing?",
        "output": "El ray tracing es una técnica de renderizado que simula el comportamiento realista de la luz para crear gráficos altamente detallados en videojuegos y simulaciones."
    },
    {
        "input": "¿Qué es inteligencia artificial?",
        "output": "La inteligencia artificial es una rama de la informática que busca crear sistemas capaces de realizar tareas que requieren inteligencia humana, como aprender y tomar decisiones."
    },
    {
        "input": "¿Qué es NumPy?",
        "output": "NumPy es una biblioteca de Python utilizada para cálculos numéricos, especialmente con arreglos y matrices multidimensionales."
    },
    {
        "input": "¿Qué es aprendizaje supervisado?",
        "output": "El aprendizaje supervisado es un tipo de aprendizaje automático donde un modelo es entrenado con datos etiquetados para hacer predicciones o clasificaciones."
    },
    {
        "input": "¿Qué es un sistema distribuido?",
        "output": "Un sistema distribuido es un conjunto de computadoras independientes que trabajan juntas para resolver problemas como si fueran un único sistema."
    },
    {
        "input": "¿Qué es un motor gráfico?",
        "output": "Un motor gráfico es un software que permite renderizar gráficos en tiempo real, comúnmente usado en videojuegos y simulaciones."
    },
    {
        "input": "¿Qué es un archivo .py?",
        "output": "Un archivo `.py` es un archivo que contiene código escrito en Python. Puedes ejecutarlo usando un intérprete de Python."
    },
    {
        "input": "¿Qué es Pygame?",
        "output": "Pygame es una biblioteca de Python diseñada para el desarrollo de videojuegos 2D, proporcionando herramientas para gráficos, sonido y eventos de usuario."
    },
    {
        "input": "¿Qué es una red neuronal?",
        "output": "Una red neuronal es un modelo computacional inspirado en el cerebro humano, utilizado en inteligencia artificial para tareas como reconocimiento de patrones."
    },
    {
        "input": "¿Qué es un Data Lake?",
        "output": "Un Data Lake es un repositorio de datos donde se almacenan grandes volúmenes de información en su formato original, listo para análisis futuros."
    },
    {
        "input": "¿Qué es un adaptador USB-C?",
        "output": "Un adaptador USB-C permite la conexión de dispositivos USB-C a otros tipos de puertos, como HDMI, VGA o USB-A."
    },
    {
        "input": "¿Qué es FastAPI?",
        "output": "FastAPI es un framework de Python para construir APIs rápidas y eficientes, conocido por su rendimiento y soporte para tipado estático."
    },
    {
        "input": "¿Qué es un IDE?",
        "output": "Un IDE (Entorno de Desarrollo Integrado) es una herramienta que combina un editor de código, depurador y otras funcionalidades para facilitar la programación."
    },
    {
        "input": "¿Qué es scikit-learn?",
        "output": "Scikit-learn es una biblioteca de Python para aprendizaje automático, que incluye herramientas para clasificación, regresión y clustering."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es el software que gestiona el hardware y software de una computadora, permitiendo que los programas se ejecuten."
    },
    {
        "input": "¿Qué es un modelo de aprendizaje automático?",
        "output": "Es un algoritmo entrenado con datos que puede hacer predicciones o clasificaciones basadas en información nueva."
    },
    {
        "input": "¿Qué es un objeto iterable en Python?",
        "output": "Un objeto iterable es cualquier objeto que puede ser recorrido con un ciclo, como listas, tuplas o cadenas."
    },
    {
        "input": "¿Qué es OpenCV?",
        "output": "OpenCV es una biblioteca de código abierto para el procesamiento de imágenes y visión por computadora, utilizada en proyectos de inteligencia artificial."
    },
    {
        "input": "¿Qué es una consulta SQL?",
        "output": "Una consulta SQL es una instrucción que se ejecuta en una base de datos para recuperar, insertar, actualizar o eliminar datos."
    },
    {
        "input": "¿Qué es un modelo preentrenado en IA?",
        "output": "Es un modelo de inteligencia artificial que ya ha sido entrenado con un gran conjunto de datos y puede ser reutilizado o ajustado para tareas específicas."
    },
    {
        "input": "¿Qué es Git?",
        "output": "Git es un sistema de control de versiones que permite a los desarrolladores rastrear cambios en su código y colaborar con otros en proyectos."
    },
    {
        "input": "¿Qué es una API REST?",
        "output": "Una API REST es un tipo de interfaz que permite la comunicación entre sistemas mediante operaciones HTTP como GET, POST, PUT y DELETE."
    },
    {
        "input": "¿Qué diferencia hay entre una lista y un diccionario en Python?",
        "output": "Una lista es una colección ordenada de elementos accesibles por índices, mientras que un diccionario almacena pares clave-valor y los valores se acceden mediante claves."
    },
    {
        "input": "¿Cómo uso pandas para leer un archivo CSV?",
        "output": "Usa el método `pd.read_csv('archivo.csv')` para cargar un archivo CSV como un DataFrame en pandas."
    },
    {
        "input": "¿Qué significa que Python sea de alto nivel?",
        "output": "Significa que Python está diseñado para ser fácil de leer y escribir, abstrae detalles complejos del hardware y se centra en la lógica del problema."
    },
    {
        "input": "¿Qué es un bucle infinito y cómo puedo evitarlo?",
        "output": "Un bucle infinito ocurre cuando la condición de un ciclo nunca se vuelve falsa. Puedes evitarlo asegurándote de que la condición cambie dentro del bucle."
    },
    {
        "input": "¿Cómo funciona un DataFrame en pandas?",
        "output": "Un DataFrame es como una tabla bidimensional en la que puedes manipular datos usando filas y columnas de forma similar a Excel o SQL."
    },
    {
        "input": "¿Qué puedo hacer con un diccionario en Python?",
        "output": "Puedes agregar, eliminar y actualizar pares clave-valor, acceder a valores usando claves, y recorrer sus elementos con un ciclo `for`."
    },
    {
        "input": "¿Qué diferencia hay entre inteligencia artificial y aprendizaje automático?",
        "output": "La inteligencia artificial es el campo general que busca crear sistemas inteligentes, mientras que el aprendizaje automático es una subdisciplina que se enfoca en entrenar modelos con datos."
    },
    {
        "input": "¿Qué ventajas tiene Unity frente a otros motores de videojuegos?",
        "output": "Unity es fácil de usar, tiene una gran comunidad, soporta múltiples plataformas y ofrece herramientas integradas para 2D y 3D."
    },
    {
        "input": "¿Qué significa que un sistema sea distribuido?",
        "output": "Un sistema distribuido divide las tareas entre múltiples computadoras conectadas, permitiendo mayor escalabilidad y disponibilidad."
    },
    {
        "input": "¿Cómo sé si un adaptador es compatible con mi laptop?",
        "output": "Debes verificar que el adaptador tenga el tipo de conexión y especificaciones (voltaje, amperaje) compatibles con tu dispositivo."
    },
    {
        "input": "¿Qué métodos de aprendizaje supervisado existen?",
        "output": "Métodos comunes incluyen regresión lineal, árboles de decisión, redes neuronales, máquinas de soporte vectorial (SVM), y bosques aleatorios."
    },
    {
        "input": "¿Qué es un ciclo while y cuándo debería usarlo?",
        "output": "Un ciclo `while` ejecuta un bloque de código mientras una condición sea verdadera. Es útil cuando no sabes cuántas iteraciones necesitas."
    },
    {
        "input": "¿Cómo uso Python para analizar datos?",
        "output": "Usa bibliotecas como pandas para manipular datos, NumPy para cálculos numéricos y Matplotlib para visualización de datos."
    },
    {
        "input": "¿Qué tipos de inteligencia artificial existen?",
        "output": "Existen tres tipos: IA estrecha (especializada en una tarea), IA general (capaz de realizar tareas como un humano) e IA superinteligente (teórica)."
    },
    {
        "input": "¿Cómo inicio un proyecto con Flask?",
        "output": "Instala Flask con `pip install flask`, crea un archivo Python con la estructura básica de un servidor y ejecútalo con `flask run`."
    },
    {
        "input": "¿Qué es OpenCV y para qué sirve?",
        "output": "OpenCV es una biblioteca para procesamiento de imágenes y visión por computadora. Se usa en reconocimiento facial, análisis de video, y más."
    },
    {
        "input": "¿Cómo puedo optimizar un programa en Python?",
        "output": "Identifica cuellos de botella, usa estructuras de datos eficientes, evita bucles innecesarios y aprovecha bibliotecas optimizadas como NumPy."
    },
    {
        "input": "¿Qué diferencia hay entre Python y Java para sistemas?",
        "output": "Python es más fácil de aprender y rápido para prototipos, mientras que Java es más adecuado para sistemas grandes y empresariales debido a su robustez."
    },
    {
        "input": "¿Qué significa que un videojuego use ray tracing?",
        "output": "Significa que el videojuego utiliza una técnica avanzada de renderizado para simular la luz de manera realista, mejorando los gráficos."
    },
    {
        "input": "¿Qué ventajas ofrece Python para la inteligencia artificial?",
        "output": "Python ofrece bibliotecas especializadas como TensorFlow, PyTorch y scikit-learn, además de una sintaxis sencilla y una comunidad activa."
    },
    {
        "input": "¿Cómo se usa la inteligencia artificial en sistemas empresariales?",
        "output": "Se utiliza para análisis de datos, predicción de tendencias, automatización de procesos y mejoras en la atención al cliente."
    },
    {
        "input": "¿Qué pasos debo seguir para aprender a programar videojuegos?",
        "output": "Empieza aprendiendo un lenguaje como Python o C#, elige un motor de desarrollo como Unity, y practica con proyectos pequeños."
    },
    {
        "input": "¿Qué diferencia hay entre sistemas operativos y aplicaciones?",
        "output": "Un sistema operativo gestiona el hardware y software de la computadora, mientras que una aplicación realiza tareas específicas para el usuario."
    },
    {
        "input": "¿Qué es un modelo de aprendizaje no supervisado?",
        "output": "Es un modelo que encuentra patrones en datos no etiquetados, como agrupamientos o reducciones de dimensionalidad."
    },
    {
        "input": "¿Cómo conecto dos monitores a mi laptop?",
        "output": "Usa puertos disponibles como HDMI o USB-C, y si es necesario, adaptadores para conectar ambos monitores."
    },
    {
        "input": "¿Qué es un modelo entrenado en inteligencia artificial?",
        "output": "Es un algoritmo que ha aprendido a realizar una tarea específica utilizando un conjunto de datos durante el proceso de entrenamiento."
    },
    {
        "input": "¿Cómo sé si un sistema es distribuido o centralizado?",
        "output": "Un sistema distribuido tiene múltiples nodos trabajando juntos, mientras que un sistema centralizado depende de un único servidor o nodo."
    },
    {
        "input": "¿Qué puedo hacer con un DataFrame en pandas?",
        "output": "Puedes filtrar, ordenar, agregar columnas, realizar cálculos y convertir datos a otros formatos, como CSV o JSON."
    },
    {
        "input": "¿Qué diferencia hay entre aprendizaje supervisado y no supervisado?",
        "output": "El aprendizaje supervisado utiliza datos etiquetados para entrenar un modelo, mientras que el no supervisado encuentra patrones en datos no etiquetados."
    },
    {
        "input": "¿Qué usos tiene la visión por computadora?",
        "output": "Se usa en reconocimiento facial, control de calidad en fábricas, conducción autónoma y análisis de imágenes médicas."
    },
    {
        "input": "¿Cómo se filtra un DataFrame en pandas?",
        "output": "Puedes filtrar usando condiciones. Ejemplo: `df_filtrado = df[df['columna'] > 10]` filtra las filas donde el valor de 'columna' es mayor a 10."
    },
    {
        "input": "¿Qué es un nodo en un sistema distribuido?",
        "output": "Un nodo es una computadora o dispositivo en un sistema distribuido que realiza tareas específicas como procesamiento o almacenamiento."
    },
    {
        "input": "¿Qué es un conjunto de datos etiquetados?",
        "output": "Es un conjunto de datos donde cada entrada tiene una etiqueta asociada que indica el resultado esperado, como imágenes con su categoría."
    },
    {
        "input": "¿Qué ventajas tiene usar aprendizaje no supervisado?",
        "output": "El aprendizaje no supervisado es útil para descubrir patrones ocultos o realizar agrupaciones en datos que no están etiquetados."
    },
    {
        "input": "¿Qué es un motor gráfico y cómo funciona?",
        "output": "Un motor gráfico es un software que renderiza gráficos en tiempo real. Funciona transformando datos en imágenes visibles en la pantalla."
    },
    {
        "input": "¿Qué es una red neuronal convolucional?",
        "output": "Es un tipo de red neuronal diseñada para procesar datos con una estructura de cuadrícula, como imágenes. Es común en visión por computadora."
    },
    {
        "input": "¿Cómo puedo optimizar un DataFrame en pandas?",
        "output": "Usa tipos de datos más eficientes como `category` para columnas categóricas, elimina columnas innecesarias y filtra filas irrelevantes."
    },
    {
        "input": "¿Cómo se clasifican los videojuegos según su tecnología?",
        "output": "Pueden clasificarse como juegos 2D, 3D, en realidad virtual o con ray tracing, según las tecnologías utilizadas en su desarrollo."
    },
    {
        "input": "¿Qué es un modelo entrenado en aprendizaje automático?",
        "output": "Es un modelo que ha aprendido patrones a partir de datos de entrenamiento para realizar predicciones o clasificaciones."
    },
    {
        "input": "¿Qué ventajas tiene usar Flask en lugar de Django?",
        "output": "Flask es más ligero y flexible, ideal para proyectos pequeños. Django es más completo, adecuado para proyectos grandes y complejos."
    },
    {
        "input": "¿Qué tipos de adaptadores existen para conexiones de video?",
        "output": "Hay adaptadores VGA, HDMI, DisplayPort y USB-C, que convierten señales entre distintos tipos de dispositivos y estándares."
    },
    {
        "input": "¿Qué aplicaciones tienen los sistemas distribuidos?",
        "output": "Se usan en redes sociales, almacenamiento en la nube, sistemas bancarios y plataformas de streaming para manejar grandes volúmenes de datos."
    },
    {
        "input": "¿Qué es una consulta SQL y cómo se usa?",
        "output": "Una consulta SQL es una instrucción para interactuar con una base de datos, como seleccionar, insertar o actualizar datos. Ejemplo: `SELECT * FROM tabla`."
    },
    {
        "input": "¿Cómo puedo entrenar un modelo en scikit-learn?",
        "output": "Primero define el modelo, luego usa `fit()` con los datos de entrenamiento. Ejemplo: `modelo.fit(X_train, y_train)`."
    },
    {
        "input": "¿Qué es un modelo de clasificación en aprendizaje automático?",
        "output": "Es un modelo que asigna etiquetas a datos de entrada basándose en patrones aprendidos durante el entrenamiento."
    },
    {
        "input": "¿Cómo puedo verificar si mi sistema operativo es compatible con un programa?",
        "output": "Revisa los requisitos del programa, como la versión del sistema operativo, RAM y espacio en disco necesario."
    },
    {
        "input": "¿Qué diferencia hay entre TensorFlow y PyTorch?",
        "output": "TensorFlow es más usado en producción por su soporte empresarial, mientras que PyTorch es preferido para investigación por su flexibilidad."
    },
    {
        "input": "¿Qué es una base de datos relacional?",
        "output": "Es una base de datos que organiza la información en tablas relacionadas mediante claves primarias y foráneas."
    },
    {
        "input": "¿Cómo se crea un servidor básico con Flask?",
        "output": "Define una aplicación con `Flask(__name__)` y usa rutas para manejar solicitudes. Ejemplo: `@app.route('/')` define una página principal."
    },
    {
        "input": "¿Qué es un algoritmo de agrupamiento?",
        "output": "Es un algoritmo que organiza datos en grupos basándose en similitudes. Ejemplo: k-means para agrupar puntos en el espacio."
    },
    {
        "input": "¿Qué diferencia hay entre HDMI y DisplayPort?",
        "output": "HDMI es más común en televisores y proyectores, mientras que DisplayPort se usa más en monitores de alta resolución y rendimiento."
    },
    {
        "input": "¿Cómo puedo integrar un modelo de IA en una aplicación web?",
        "output": "Usa frameworks como Flask o Django para crear una API que llame al modelo y devuelva predicciones a través de solicitudes HTTP."
    },
    {
        "input": "¿Qué significa que Python sea interpretado?",
        "output": "Significa que el código se ejecuta línea por línea sin necesidad de compilarlo previamente, lo que facilita la depuración y desarrollo."
    },
    {
        "input": "¿Qué es una red neuronal recurrente?",
        "output": "Es un tipo de red neuronal diseñada para procesar datos secuenciales, como texto o series temporales, recordando información previa."
    },
    {
        "input": "¿Qué ventajas tienen los motores de videojuegos como Unity?",
        "output": "Ofrecen herramientas integradas para gráficos, físicas, animación y soporte multiplataforma, simplificando el desarrollo de videojuegos."
    },
    {
        "input": "¿Cómo puedo renderizar gráficos en 3D en un videojuego?",
        "output": "Usa motores como Unity o Unreal Engine que proporcionan herramientas para diseñar y renderizar gráficos en 3D."
    },
    {
        "input": "¿Qué diferencias hay entre aprendizaje supervisado y refuerzo?",
        "output": "El aprendizaje supervisado usa datos etiquetados, mientras que el aprendizaje por refuerzo entrena a un agente basado en recompensas y castigos."
    },
    {
        "input": "¿Qué es una clave primaria en una base de datos?",
        "output": "Es un campo único en una tabla que identifica cada registro de forma exclusiva."
    },
    {
        "input": "¿Qué son las librerías en Python?",
        "output": "Son colecciones de módulos predefinidos que contienen funciones y clases para facilitar el desarrollo de aplicaciones específicas."
    },
    {
        "input": "¿Qué es k-means y cómo funciona?",
        "output": "K-means es un algoritmo de agrupamiento que divide datos en k grupos basándose en similitudes. Funciona asignando puntos al centroide más cercano y ajustando los centroides iterativamente."
    },
    {
        "input": "¿Qué diferencia hay entre bases de datos relacionales y no relacionales?",
        "output": "Las bases de datos relacionales organizan datos en tablas con relaciones entre ellas, mientras que las no relacionales (como MongoDB) almacenan datos en formatos flexibles como JSON."
    },
    {
        "input": "¿Cómo implemento una API básica con Flask?",
        "output": "Define rutas usando `@app.route()` y maneja solicitudes con funciones. Ejemplo: `@app.route('/api', methods=['GET'])`."
    },
    {
        "input": "¿Qué ventajas tiene DisplayPort frente a HDMI?",
        "output": "DisplayPort ofrece mayor ancho de banda, soporte para múltiples pantallas y mejor calidad en resoluciones altas."
    },
    {
        "input": "¿Qué significa que un algoritmo sea supervisado?",
        "output": "Un algoritmo supervisado utiliza datos etiquetados para aprender patrones que le permitan realizar predicciones o clasificaciones."
    },
    {
        "input": "¿Cómo funciona un servidor creado con Flask?",
        "output": "Un servidor Flask maneja solicitudes HTTP y devuelve respuestas configuradas por las rutas definidas en la aplicación."
    },
    {
        "input": "¿Qué es un centroide en el algoritmo k-means?",
        "output": "Un centroide es el punto que representa el centro de un grupo en el espacio de características del algoritmo k-means."
    },
    {
        "input": "¿Qué es una red neuronal feedforward?",
        "output": "Es un tipo de red neuronal donde la información fluye en una sola dirección, desde las entradas hacia las salidas, sin ciclos."
    },
    {
        "input": "¿Cómo uso un DataFrame para realizar agrupaciones?",
        "output": "Usa el método `groupby()`. Ejemplo: `df.groupby('columna')['otra_columna'].sum()` agrupa por 'columna' y suma valores de 'otra_columna'."
    },
    {
        "input": "¿Qué es una base de datos no relacional?",
        "output": "Es una base de datos que almacena datos en formatos flexibles, como documentos, clave-valor o gráficos, y no requiere esquemas estrictos."
    },
    {
        "input": "¿Cómo entreno un modelo de clasificación con scikit-learn?",
        "output": "Define el modelo, divídelo en conjuntos de entrenamiento y prueba, y entrena usando `fit()`. Ejemplo: `modelo.fit(X_train, y_train)`."
    },
    {
        "input": "¿Qué significa que una consulta SQL sea optimizada?",
        "output": "Significa que la consulta está diseñada para ejecutarse de manera eficiente, utilizando índices y limitando operaciones innecesarias."
    },
    {
        "input": "¿Qué es una clave foránea en bases de datos?",
        "output": "Es un campo en una tabla que referencia la clave primaria de otra tabla para establecer una relación entre ellas."
    },
    {
        "input": "¿Cómo ajusto el aprendizaje en un modelo de inteligencia artificial?",
        "output": "Puedes ajustar el aprendizaje cambiando parámetros como la tasa de aprendizaje, el número de épocas o el tamaño del lote."
    },
    {
        "input": "¿Qué es una red neuronal convolucional y para qué se usa?",
        "output": "Es una red neuronal especializada en el procesamiento de imágenes, utilizada para tareas como reconocimiento facial y clasificación de objetos."
    },
    {
        "input": "¿Qué diferencia hay entre Flask y FastAPI?",
        "output": "FastAPI es más rápido y ofrece soporte para validación y tipado, mientras que Flask es más ligero y flexible para proyectos pequeños."
    },
    {
        "input": "¿Cómo convierto un DataFrame en un archivo CSV?",
        "output": "Usa el método `to_csv()`. Ejemplo: `df.to_csv('archivo.csv', index=False)` guarda el DataFrame como un archivo CSV sin índices."
    },
    {
        "input": "¿Qué pasos se deben seguir para optimizar una consulta SQL?",
        "output": "Asegúrate de usar índices, evita selecciones innecesarias con `SELECT *`, y reduce la cantidad de uniones y subconsultas cuando sea posible."
    },
    {
        "input": "¿Cómo puedo implementar aprendizaje no supervisado con scikit-learn?",
        "output": "Usa algoritmos como `KMeans` para agrupamiento. Ejemplo: `kmeans = KMeans(n_clusters=3); kmeans.fit(datos)`."
    },
    {
        "input": "¿Qué es una red neuronal recurrente y para qué se usa?",
        "output": "Es un tipo de red neuronal que procesa datos secuenciales y mantiene memoria de entradas anteriores, utilizada en traducción de texto y series temporales."
    },
    {
        "input": "¿Qué diferencias hay entre HDMI y VGA?",
        "output": "HDMI transmite video y audio digital, mientras que VGA solo transmite video analógico y es menos eficiente para resoluciones altas."
    },
    {
        "input": "¿Cómo valido datos en una API de Flask?",
        "output": "Usa bibliotecas como `marshmallow` o valida manualmente los datos dentro de las funciones que manejan las rutas."
    },
    {
        "input": "¿Qué es una arquitectura cliente-servidor?",
        "output": "Es un modelo donde un cliente solicita servicios o datos a un servidor, que los proporciona según lo solicitado."
    },
    {
        "input": "¿Qué es un modelo preentrenado en aprendizaje profundo?",
        "output": "Es un modelo que ya ha sido entrenado en un conjunto de datos grande y puede ser ajustado para tareas específicas mediante fine-tuning."
    },
    {
        "input": "¿Cómo puedo visualizar datos en pandas?",
        "output": "Usa bibliotecas como Matplotlib o Seaborn. Ejemplo: `df['columna'].plot(kind='bar')` genera un gráfico de barras."
    },
    {
        "input": "¿Qué es la regularización en aprendizaje automático?",
        "output": "Es una técnica que agrega un término de penalización a la función de pérdida para evitar sobreajuste y mejorar la generalización del modelo."
    },
    {
        "input": "¿Qué es un modelo de regresión?",
        "output": "Es un modelo de aprendizaje automático que predice valores continuos basados en relaciones entre variables independientes y dependientes."
    },
    {
        "input": "¿Cómo puedo combinar varias tablas en SQL?",
        "output": "Usa comandos como `JOIN`. Ejemplo: `SELECT * FROM tabla1 INNER JOIN tabla2 ON tabla1.id = tabla2.id`."
    },
    {
        "input": "¿Qué diferencia hay entre overfitting y underfitting?",
        "output": "El overfitting ocurre cuando un modelo se adapta demasiado a los datos de entrenamiento, mientras que el underfitting no captura suficientemente los patrones de los datos."
    },
    {
        "input": "¿Cómo puedo probar una API creada con Flask?",
        "output": "Usa herramientas como Postman, Curl o bibliotecas de pruebas en Python como `requests` para enviar solicitudes a la API."
    },
    {
        "input": "¿Cómo elijo entre Flask y Django para mi proyecto?",
        "output": "Elige Flask para proyectos pequeños y flexibles, y Django para proyectos más grandes y estructurados que requieren muchas funcionalidades integradas."
    },
    {
        "input": "¿Qué es fine-tuning en aprendizaje profundo?",
        "output": "El fine-tuning ajusta un modelo preentrenado para realizar una tarea específica, utilizando un conjunto de datos más pequeño y específico."
    },
    {
        "input": "¿Cómo funciona un `JOIN` en SQL?",
        "output": "`JOIN` combina filas de dos o más tablas basándose en una condición común, como claves primarias y foráneas."
    },
    {
        "input": "¿Qué tipos de regularización existen en aprendizaje automático?",
        "output": "Existen regularizaciones como L1 (Lasso), L2 (Ridge), y Elastic Net, que agregan penalizaciones diferentes a la función de pérdida."
    },
    {
        "input": "¿Qué es Matplotlib y cómo se usa?",
        "output": "Matplotlib es una biblioteca de Python para crear gráficos. Ejemplo: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3])`."
    },
    {
        "input": "¿Qué es un gráfico de barras y cuándo se usa?",
        "output": "Un gráfico de barras representa datos categóricos con barras rectangulares. Se usa para comparar diferentes categorías o grupos."
    },
    {
        "input": "¿Qué es el overfitting y cómo lo evito?",
        "output": "El overfitting ocurre cuando un modelo se ajusta demasiado a los datos de entrenamiento. Se puede evitar con regularización, validación cruzada o más datos."
    },
    {
        "input": "¿Cómo hago un gráfico en Seaborn?",
        "output": "Usa funciones como `sns.barplot()` para gráficos de barras o `sns.lineplot()` para gráficos de líneas. Ejemplo: `sns.barplot(x='col1', y='col2', data=df)`."
    },
    {
        "input": "¿Qué es un `LEFT JOIN` y en qué se diferencia de un `INNER JOIN`?",
        "output": "Un `LEFT JOIN` incluye todas las filas de la tabla izquierda y las coincidentes de la derecha, mientras que un `INNER JOIN` solo incluye filas con coincidencias en ambas tablas."
    },
    {
        "input": "¿Qué es un hiperparámetro en aprendizaje automático?",
        "output": "Es un parámetro que se configura antes del entrenamiento del modelo, como la tasa de aprendizaje o el número de árboles en un bosque aleatorio."
    },
    {
        "input": "¿Qué es Seaborn y por qué usarlo?",
        "output": "Seaborn es una biblioteca de Python para visualización de datos que facilita la creación de gráficos estadísticos atractivos y fáciles de entender."
    },
    {
        "input": "¿Cómo comparo dos modelos de aprendizaje automático?",
        "output": "Usa métricas de evaluación como precisión, F1-score o AUC-ROC, y compara sus resultados en un conjunto de prueba."
    },
    {
        "input": "¿Cómo hago validación cruzada en scikit-learn?",
        "output": "Usa `cross_val_score()` para dividir los datos en múltiples subconjuntos y evaluar el modelo en cada uno. Ejemplo: `cross_val_score(modelo, X, y, cv=5)`."
    },
    {
        "input": "¿Qué diferencia hay entre L1 y L2 en regularización?",
        "output": "L1 agrega una penalización basada en el valor absoluto de los coeficientes, favoreciendo la sparsidad. L2 penaliza el cuadrado de los coeficientes, reduciendo magnitudes grandes."
    },
    {
        "input": "¿Qué es Elastic Net en aprendizaje automático?",
        "output": "Elastic Net combina las regularizaciones L1 y L2, equilibrando la sparsidad y la reducción de coeficientes grandes."
    },
    {
        "input": "¿Cómo hago un gráfico de dispersión con Matplotlib?",
        "output": "Usa `plt.scatter(x, y)` para crear un gráfico de dispersión. Ejemplo: `plt.scatter([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "¿Cómo entreno un modelo de regresión lineal en scikit-learn?",
        "output": "Importa `LinearRegression`, ajusta el modelo con `fit()` y realiza predicciones con `predict()`. Ejemplo: `modelo = LinearRegression(); modelo.fit(X, y)`."
    },
    {
        "input": "¿Qué es AUC-ROC y cómo se interpreta?",
        "output": "AUC-ROC mide la capacidad de un modelo para diferenciar entre clases. Un valor cercano a 1 indica un buen rendimiento."
    },
    {
        "input": "¿Qué es una métrica de evaluación en aprendizaje automático?",
        "output": "Es una medida para evaluar el rendimiento de un modelo, como precisión, recall, F1-score o error cuadrático medio."
    },
    {
        "input": "¿Qué es validación cruzada y por qué se usa?",
        "output": "La validación cruzada divide los datos en subconjuntos para entrenar y validar el modelo en diferentes combinaciones, reduciendo el riesgo de overfitting."
    },
    {
        "input": "¿Cómo integro Seaborn con pandas?",
        "output": "Puedes usar un DataFrame directamente como entrada en los gráficos de Seaborn. Ejemplo: `sns.barplot(x='col1', y='col2', data=df)`."
    },
    {
        "input": "¿Qué es una regresión logística?",
        "output": "Es un modelo de aprendizaje automático que predice probabilidades para variables categóricas binarias o multinomiales."
    },
    {
        "input": "¿Cómo optimizo el rendimiento de un modelo de clasificación?",
        "output": "Ajusta hiperparámetros, usa técnicas de regularización y aplica validación cruzada para mejorar la generalización del modelo."
    },
    {
        "input": "¿Qué diferencia hay entre precision y recall?",
        "output": "Precision mide la proporción de predicciones positivas correctas, mientras que recall mide la proporción de verdaderos positivos detectados."
    },
    {
        "input": "¿Cómo puedo interpretar un gráfico de calor en Seaborn?",
        "output": "Un gráfico de calor muestra datos tabulares con colores que representan valores. Es útil para identificar patrones y relaciones entre variables."
    },
    {
        "input": "¿Qué es un gráfico de caja y bigotes?",
        "output": "Es un gráfico que muestra la distribución de datos, destacando los cuartiles y valores atípicos. Se usa para análisis exploratorio."
    },
    {
        "input": "¿Qué pasos debo seguir para crear un modelo de clasificación?",
        "output": "Recopila datos, preprocésalos, divide los datos en entrenamiento y prueba, ajusta un modelo, evalúalo y ajusta los hiperparámetros si es necesario."
    },
    {
        "input": "¿Qué significa sparsidad en aprendizaje automático?",
        "output": "La sparsidad se refiere a matrices o modelos con muchos valores cero, lo que puede mejorar la eficiencia computacional."
    },
    {
        "input": "¿Cómo creo un gráfico de líneas con Matplotlib?",
        "output": "Usa `plt.plot(x, y)` para crear un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "¿Qué es una matriz de confusión y cómo se usa?",
        "output": "Es una tabla que muestra el rendimiento de un modelo de clasificación al comparar predicciones con valores reales en todas las clases."
    },
    {
        "input": "¿Cómo ajusto hiperparámetros en scikit-learn?",
        "output": "Usa `GridSearchCV` o `RandomizedSearchCV` para buscar los mejores hiperparámetros basados en métricas de validación."
    }, 
    {
        "input": "¿Cómo interpreto una matriz de confusión?",
        "output": "En una matriz de confusión, los valores diagonales indican predicciones correctas, mientras que los valores fuera de la diagonal son errores de clasificación."
    },
    {
        "input": "¿Qué diferencia hay entre GridSearchCV y RandomizedSearchCV?",
        "output": "GridSearchCV prueba todas las combinaciones de hiperparámetros, mientras que RandomizedSearchCV selecciona un subconjunto aleatorio para una búsqueda más rápida."
    },
    {
        "input": "¿Qué es un gráfico de calor y cómo lo creo con Seaborn?",
        "output": "Un gráfico de calor representa datos tabulares con colores. En Seaborn, usa `sns.heatmap(datos)` para crear uno."
    },
    {
        "input": "¿Cómo identifico valores atípicos en un gráfico de caja y bigotes?",
        "output": "Los valores fuera de los extremos del bigote (líneas horizontales) son considerados atípicos en un gráfico de caja y bigotes."
    },
    {
        "input": "¿Qué pasos debo seguir para evitar overfitting en un modelo?",
        "output": "Usa regularización, aumenta el conjunto de datos, aplica validación cruzada y reduce la complejidad del modelo."
    },
    {
        "input": "¿Qué métricas puedo usar para evaluar un modelo de regresión?",
        "output": "Puedes usar el error cuadrático medio (MSE), error absoluto medio (MAE) y coeficiente de determinación (R²)."
    },
    {
        "input": "¿Cómo puedo mejorar el recall de mi modelo?",
        "output": "Ajusta el umbral de clasificación, recopila más datos positivos o modifica el modelo para priorizar los falsos negativos."
    },
    {
        "input": "¿Qué es un gráfico de dispersión y para qué sirve?",
        "output": "Un gráfico de dispersión muestra la relación entre dos variables continuas, útil para identificar patrones y correlaciones."
    },
    {
        "input": "¿Qué ventajas tiene usar regularización L1 sobre L2?",
        "output": "L1 fomenta la sparsidad, eliminando características irrelevantes al asignar coeficientes exactos de 0, lo que mejora la interpretabilidad del modelo."
    },
    {
        "input": "¿Cómo interpreto un gráfico de líneas?",
        "output": "Un gráfico de líneas muestra cómo una variable cambia con respecto a otra. Es útil para observar tendencias en datos secuenciales."
    },
    {
        "input": "¿Qué es un cuartil en un gráfico de caja y bigotes?",
        "output": "Un cuartil divide un conjunto de datos en cuatro partes iguales. Los gráficos de caja y bigotes muestran el primer, segundo y tercer cuartil."
    },
    {
        "input": "¿Cómo comparo precisión y recall para evaluar un modelo?",
        "output": "La precisión es útil cuando los falsos positivos son críticos, mientras que el recall es más importante cuando los falsos negativos son costosos."
    },
    {
        "input": "¿Qué es un error cuadrático medio (MSE) y cómo se calcula?",
        "output": "MSE mide el promedio de los cuadrados de las diferencias entre valores predichos y reales. Se calcula como `mean((y_pred - y_true)^2)`."
    },
    {
        "input": "¿Qué diferencia hay entre regresión lineal y logística?",
        "output": "La regresión lineal predice valores continuos, mientras que la logística predice probabilidades de categorías discretas."
    },
    {
        "input": "¿Qué es el coeficiente de determinación R²?",
        "output": "R² mide qué tan bien un modelo explica la variabilidad de los datos. Un valor cercano a 1 indica un buen ajuste."
    },
    {
        "input": "¿Qué son los falsos positivos y falsos negativos?",
        "output": "Los falsos positivos ocurren cuando un modelo predice positivo incorrectamente, y los falsos negativos cuando falla al detectar un positivo real."
    },
    {
        "input": "¿Cómo ajusto el umbral de clasificación en un modelo?",
        "output": "Puedes ajustar el umbral cambiando el valor predeterminado para decidir entre clases, por ejemplo, usando `model.decision_function()` o `model.predict_proba()`."
    },
    {
        "input": "¿Qué significa sparsidad en un modelo regularizado?",
        "output": "Significa que muchos coeficientes del modelo son cero, lo que reduce la complejidad y mejora la interpretabilidad."
    },
    {
        "input": "¿Qué diferencia hay entre precisión y F1-score?",
        "output": "La precisión mide la proporción de predicciones correctas, mientras que el F1-score equilibra precisión y recall en un solo valor."
    },
    {
        "input": "¿Cómo evalúo un modelo usando una matriz de confusión?",
        "output": "Calcula métricas como precisión, recall y F1-score a partir de los valores de verdaderos positivos, falsos positivos, verdaderos negativos y falsos negativos."
    },
    {
        "input": "¿Qué es validación cruzada estratificada?",
        "output": "Es un tipo de validación cruzada que mantiene la proporción de clases en cada pliegue, útil para conjuntos de datos desbalanceados."
    },
    {
        "input": "¿Cómo puedo interpretar un gráfico de calor?",
        "output": "Observa las intensidades de los colores para identificar patrones y relaciones entre variables en una matriz de datos."
    },
    {
        "input": "¿Cómo optimizo un modelo de regresión lineal?",
        "output": "Usa regularización, elimina características irrelevantes y ajusta hiperparámetros como la tasa de aprendizaje en el optimizador."
    },
    {
        "input": "¿Qué es un gráfico de dispersión con Seaborn?",
        "output": "Es un gráfico que muestra la relación entre dos variables. Usa `sns.scatterplot(x='var1', y='var2', data=df)` para crearlo."
    },
    {
        "input": "¿Cómo determino la importancia de las características en un modelo?",
        "output": "Examina los coeficientes del modelo (en regresión lineal) o usa métodos como `feature_importances_` en árboles de decisión."
    },
    {
        "input": "¿Qué es un outlier y cómo lo identifico?",
        "output": "Un outlier es un valor atípico que se desvía significativamente del resto de los datos. Puedes usar gráficos de caja y bigotes para detectarlos."
    },
    {
        "input": "¿Qué es un gráfico de residuales?",
        "output": "Es un gráfico que muestra las diferencias entre valores predichos y reales, útil para diagnosticar problemas en modelos de regresión."
    },
    {
        "input": "¿Cómo puedo calcular el MAE en Python?",
        "output": "Usa `mean_absolute_error` de scikit-learn. Ejemplo: `from sklearn.metrics import mean_absolute_error; mae = mean_absolute_error(y_true, y_pred)`."
    },
    {
        "input": "¿Qué es un pipeline en aprendizaje automático?",
        "output": "Un pipeline organiza pasos secuenciales como preprocesamiento y entrenamiento, asegurando que las transformaciones se apliquen consistentemente."
    },
    {
        "input": "¿Cómo hago un gráfico de barras apiladas con Seaborn?",
        "output": "Usa `sns.barplot()` y organiza los datos de manera que las categorías estén apiladas en cada barra. Usa colores para diferenciarlas."
    },
    {
        "input": "¿Qué es una curva ROC?",
        "output": "Es un gráfico que muestra la relación entre la tasa de verdaderos positivos y falsos positivos a diferentes umbrales de clasificación."
    },
    {
        "input": "¿Cuáles son los principales volcanes de Guatemala?",
        "output": "Algunos de los principales volcanes de Guatemala son el Volcán de Fuego, el Volcán Acatenango, el Volcán Pacaya y el Volcán Tajumulco."
    },
    {
        "input": "¿Qué tradiciones destacan en Xela?",
        "output": "En Xela destacan tradiciones como la Feria de Independencia, el Día de los Muertos con fiambre y visitas al Cementerio General."
    },
    {
        "input": "¿Qué impacto tiene la tecnología en Guatemala?",
        "output": "La tecnología está impulsando el comercio electrónico, la educación a distancia y el desarrollo de startups en Guatemala."
    },
    {
        "input": "¿Cómo puedo aprender a programar videojuegos?",
        "output": "Puedes comenzar con lenguajes como Python o C#, usando motores como Unity o Godot, y practicando con proyectos pequeños."
    },
    {
        "input": "¿Qué es un sistema operativo y para qué sirve?",
        "output": "Un sistema operativo gestiona el hardware y software de una computadora, permitiendo la interacción entre el usuario y los programas."
    },
    {
        "input": "¿Qué adaptadores necesito para conectar mi laptop a un proyector antiguo?",
        "output": "Necesitarás adaptadores como USB-C a VGA o HDMI a VGA, dependiendo de las salidas disponibles en tu laptop."
    },
    {
        "input": "¿Qué lugares turísticos puedo visitar en Xela?",
        "output": "Puedes visitar las Fuentes Georginas, el Cerro El Baúl, el Parque Central y la Catedral del Espíritu Santo."
    },
    {
        "input": "¿Cómo ha avanzado la industria de videojuegos en los últimos años?",
        "output": "La industria ha evolucionado con tecnologías como ray tracing, realidad virtual, inteligencia artificial y juegos basados en la nube."
    },
    {
        "input": "¿Qué elementos son esenciales en un sistema de cómputo?",
        "output": "Elementos esenciales incluyen CPU, memoria RAM, almacenamiento (HDD/SSD), placa base, fuente de poder y dispositivos de entrada/salida."
    },
    {
        "input": "¿Qué ventajas tiene un adaptador USB-C frente a HDMI?",
        "output": "USB-C soporta video, datos y carga en un solo puerto, mientras que HDMI solo transmite audio y video."
    },
    {
        "input": "¿Qué lenguajes de programación son populares para sistemas?",
        "output": "Python, Java, C++, y C# son populares para sistemas por su versatilidad y amplio soporte en diferentes plataformas."
    },
    {
        "input": "¿Qué tecnología usan los videojuegos modernos para gráficos realistas?",
        "output": "Usan técnicas como ray tracing, sombreado avanzado y motores gráficos como Unreal Engine y Unity."
    },
    {
        "input": "¿Qué tradiciones culturales son únicas en Guatemala?",
        "output": "Guatemala es conocida por tradiciones como las alfombras de Semana Santa, el fiambre para el Día de los Muertos y la celebración de la Quema del Diablo."
    },
    {
        "input": "¿Qué tipos de adaptadores existen para laptops modernas?",
        "output": "Existen adaptadores USB-C a HDMI, USB-C a VGA, USB-A a USB-C, y Ethernet a USB, entre otros."
    },
    {
        "input": "¿Qué significa que un videojuego sea multiplataforma?",
        "output": "Significa que está diseñado para ejecutarse en diferentes sistemas operativos o consolas, como PC, PlayStation y Xbox."
    },
    {
        "input": "¿Cómo puedo optimizar el rendimiento de mi computadora para videojuegos?",
        "output": "Actualiza los controladores, ajusta las configuraciones gráficas del juego, y asegúrate de tener suficiente memoria RAM y espacio en disco."
    },
    {
        "input": "¿Qué importancia tiene Xela en la educación de Guatemala?",
        "output": "Xela es un importante centro educativo, con universidades como la USAC y centros de formación técnica que impulsan el desarrollo académico en la región."
    },
    {
        "input": "¿Qué es un servidor en un sistema de cómputo?",
        "output": "Un servidor es una computadora que proporciona servicios a otras computadoras o dispositivos, como almacenamiento, datos o aplicaciones."
    },
    {
        "input": "¿Qué aplicaciones tienen los sistemas distribuidos?",
        "output": "Se usan en redes sociales, sistemas bancarios, plataformas de streaming, y servicios en la nube como Google Drive o Dropbox."
    },
    {
        "input": "¿Qué es la realidad virtual en videojuegos?",
        "output": "Es una tecnología que permite al jugador sumergirse en un entorno virtual interactivo usando dispositivos como gafas VR y controladores de movimiento."
    },
    {
        "input": "¿Cómo se utilizan los adaptadores en la industria tecnológica?",
        "output": "Los adaptadores conectan dispositivos con puertos incompatibles, facilitando la integración de tecnologías antiguas y modernas."
    },
    {
        "input": "¿Qué recursos tecnológicos se usan en educación en Guatemala?",
        "output": "Recursos como plataformas de aprendizaje en línea, dispositivos móviles, y aplicaciones interactivas son cada vez más comunes en la educación guatemalteca."
    },
    {
        "input": "¿Qué componentes necesita una computadora para diseño gráfico?",
        "output": "Necesitas una GPU potente, procesador de alta gama, 16 GB de RAM o más, almacenamiento SSD y un monitor con buena resolución."
    },
    {
        "input": "¿Cómo se relaciona la inteligencia artificial con los videojuegos?",
        "output": "La inteligencia artificial se usa para crear NPCs más realistas, ajustar dinámicamente la dificultad y generar entornos y diálogos interactivos."
    },
    {
        "input": "¿Qué servicios tecnológicos están creciendo en Xela?",
        "output": "Servicios como coworking, desarrollo de software, talleres de programación y educación en línea están ganando popularidad en Xela."
    },
    {
        "input": "¿Qué es un sistema de gestión de bases de datos?",
        "output": "Es un software que permite almacenar, organizar y gestionar datos, como MySQL, PostgreSQL o MongoDB."
    },
    {
        "input": "¿Qué avances tecnológicos destacan en Guatemala?",
        "output": "Destacan el crecimiento de startups tecnológicas, el desarrollo de plataformas educativas en línea y el aumento del acceso a internet."
    },
    {
        "input": "¿Qué tecnologías facilitan el trabajo remoto?",
        "output": "Herramientas como Zoom, Google Workspace, Slack y plataformas de colaboración como Notion y Trello son clave para el trabajo remoto."
    },
    {
        "input": "¿Cómo se desarrollan videojuegos para dispositivos móviles?",
        "output": "Se utilizan motores como Unity o Unreal Engine, con herramientas específicas para optimizar gráficos y rendimiento en dispositivos móviles."
    },
    {
        "input": "¿Qué beneficios tiene la nube para sistemas empresariales?",
        "output": "La nube ofrece escalabilidad, reducción de costos, accesibilidad global y servicios como almacenamiento, bases de datos y análisis de datos."
    },
    {
        "input": "¿Qué otros volcanes puedo visitar en Guatemala además del Tajumulco?",
        "output": "Además del Tajumulco, puedes visitar el Volcán de Fuego, el Volcán Acatenango, el Volcán Pacaya y el Volcán Atitlán."
    },
    {
        "input": "¿Cómo afectan las startups tecnológicas al desarrollo en Guatemala?",
        "output": "Las startups impulsan la innovación, crean empleos y mejoran el acceso a tecnologías modernas en sectores como educación, salud y comercio."
    },
    {
        "input": "¿Qué herramientas puedo usar para crear un videojuego móvil?",
        "output": "Motores como Unity, Unreal Engine y Construct 3 son excelentes opciones para desarrollar videojuegos móviles."
    },
    {
        "input": "¿Cómo influye la realidad virtual en la educación?",
        "output": "La realidad virtual permite experiencias inmersivas, como simulaciones de laboratorio, visitas virtuales a lugares históricos y aprendizaje interactivo."
    },
    {
        "input": "¿Qué diferencia hay entre un servidor físico y uno en la nube?",
        "output": "Un servidor físico está ubicado en instalaciones propias, mientras que uno en la nube es gestionado por un proveedor externo y es accesible desde cualquier lugar."
    },
    {
        "input": "¿Qué plataformas de aprendizaje en línea son populares en Guatemala?",
        "output": "Plataformas como Duolingo, Khan Academy, Platzi y Coursera son populares para el aprendizaje en línea en Guatemala."
    },
    {
        "input": "¿Cómo elijo un buen monitor para diseño gráfico?",
        "output": "Busca un monitor con resolución alta (al menos 4K), amplia gama de colores (AdobeRGB o sRGB) y precisión de color calibrada."
    },
    {
        "input": "¿Qué juegos utilizan inteligencia artificial avanzada?",
        "output": "Juegos como The Last of Us, Red Dead Redemption 2 y Shadow of Mordor destacan por su inteligencia artificial avanzada en NPCs y entornos."
    },
    {
        "input": "¿Qué diferencia hay entre Zoom y Google Meet?",
        "output": "Zoom ofrece funciones avanzadas para reuniones masivas, mientras que Google Meet está integrado con herramientas de Google Workspace, ideal para colaboración."
    },
    {
        "input": "¿Qué tipo de coworking existe en Xela?",
        "output": "En Xela hay espacios de coworking que ofrecen internet de alta velocidad, áreas de trabajo compartidas y eventos de networking para emprendedores."
    },
    {
        "input": "¿Qué ventajas tiene MongoDB frente a MySQL?",
        "output": "MongoDB es una base de datos no relacional que ofrece mayor flexibilidad para datos no estructurados, mientras que MySQL es relacional y sigue esquemas estrictos."
    },
    {
        "input": "¿Qué eventos tecnológicos suelen realizarse en Guatemala?",
        "output": "Hackatones, ferias tecnológicas y talleres de programación son eventos comunes en Guatemala para fomentar el desarrollo tecnológico."
    },
    {
        "input": "¿Cómo optimizo el rendimiento de un videojuego en mi PC?",
        "output": "Cierra aplicaciones en segundo plano, ajusta las configuraciones gráficas del juego y asegúrate de tener los controladores actualizados."
    },
    {
        "input": "¿Qué es un sistema de cómputo distribuido?",
        "output": "Es un sistema donde múltiples computadoras trabajan juntas para realizar tareas como si fueran una única unidad."
    },
    {
        "input": "¿Qué adaptador necesito para conectar un MacBook a un monitor HDMI?",
        "output": "Necesitas un adaptador USB-C a HDMI compatible con tu MacBook."
    },
    {
        "input": "¿Qué es un motor de videojuegos y cuáles son ejemplos?",
        "output": "Un motor de videojuegos es un software para crear juegos. Ejemplos: Unity, Unreal Engine, y Godot."
    },
    {
        "input": "¿Qué tradiciones tecnológicas se han desarrollado en Guatemala?",
        "output": "En Guatemala se desarrollan hackatones y capacitaciones tecnológicas como parte de iniciativas para fomentar la innovación local."
    },
    {
        "input": "¿Qué factores considerar al elegir una base de datos para un sistema?",
        "output": "Considera el tipo de datos, la escalabilidad, la velocidad de consulta y el soporte para datos estructurados o no estructurados."
    },
    {
        "input": "¿Cómo la nube está transformando los negocios en Guatemala?",
        "output": "La nube permite a las empresas en Guatemala acceder a herramientas avanzadas como CRM, análisis de datos y almacenamiento flexible sin grandes inversiones iniciales."
    },
    {
        "input": "¿Qué significa ray tracing en videojuegos?",
        "output": "Es una técnica de renderizado que simula el comportamiento realista de la luz para mejorar la calidad visual en los videojuegos."
    },
    {
        "input": "¿Cómo se aplica la tecnología en sistemas educativos en Xela?",
        "output": "Se utiliza para clases virtuales, plataformas de gestión educativa y talleres de programación para estudiantes."
    },
    {
        "input": "¿Qué es un adaptador Ethernet y cuándo lo necesito?",
        "output": "Un adaptador Ethernet permite conectar tu dispositivo a internet por cable, ideal cuando no hay Wi-Fi disponible o se necesita una conexión más estable."
    },
    {
        "input": "¿Qué especificaciones debe tener una computadora para videojuegos?",
        "output": "Debe tener una tarjeta gráfica potente, un procesador rápido, al menos 16 GB de RAM y almacenamiento SSD."
    },
    {
        "input": "¿Qué motores gráficos usan los videojuegos más populares?",
        "output": "Motores como Unreal Engine, Unity y CryEngine son usados en videojuegos populares por su potencia y flexibilidad."
    },
    {
        "input": "¿Qué tecnologías son clave para el desarrollo de startups tecnológicas?",
        "output": "Tecnologías como la nube, inteligencia artificial, análisis de datos y desarrollo de aplicaciones móviles son clave para startups tecnológicas."
    },
    {
        "input": "¿Qué impacto tienen las ferias tecnológicas en Guatemala?",
        "output": "Promueven la innovación, conectan a emprendedores con inversores y fomentan el aprendizaje de nuevas tecnologías."
    },
    {
        "input": "¿Cómo funciona un coworking y cuáles son sus beneficios?",
        "output": "Es un espacio compartido de trabajo con recursos como internet rápido y salas de reuniones, ideal para networking y productividad."
    },
    {
        "input": "¿Qué herramientas puedo usar para aprender programación en línea?",
        "output": "Plataformas como Codecademy, freeCodeCamp y Khan Academy son excelentes para aprender programación desde cero."
    },
    {
        "input": "¿Cómo se mide la calidad gráfica de un videojuego?",
        "output": "Se mide por factores como resolución, iluminación, texturas, sombreado y efectos especiales como ray tracing."
    },
    {
        "input": "¿Qué diferencia hay entre un coworking y una oficina tradicional?",
        "output": "Un coworking es un espacio compartido con recursos comunes, mientras que una oficina tradicional suele ser privada y dedicada a una sola empresa."
    },
    {
        "input": "¿Qué motores gráficos son mejores para principiantes?",
        "output": "Motores como Unity y Godot son ideales para principiantes debido a su facilidad de uso y extensa documentación."
    },
    {
        "input": "¿Qué impacto tienen los hackatones en la comunidad tecnológica?",
        "output": "Los hackatones fomentan la innovación, permiten resolver problemas en equipo y ayudan a los participantes a aprender nuevas habilidades tecnológicas."
    },
    {
        "input": "¿Qué ventajas tiene una base de datos no relacional como MongoDB?",
        "output": "MongoDB es flexible, almacena datos en formato JSON y maneja fácilmente estructuras dinámicas o no estructuradas."
    },
    {
        "input": "¿Qué significa que un videojuego tenga resolución 4K?",
        "output": "Significa que el videojuego tiene una resolución de 3840x2160 píxeles, ofreciendo gráficos más detallados y nítidos."
    },
    {
        "input": "¿Qué tecnologías son necesarias para desarrollar aplicaciones móviles?",
        "output": "Tecnologías como Swift para iOS, Kotlin para Android, o frameworks multiplataforma como Flutter o React Native son ideales."
    },
    {
        "input": "¿Qué factores afectan la calidad de conexión en un adaptador Ethernet?",
        "output": "Factores como la velocidad del adaptador, la calidad del cable, y la capacidad del router afectan la calidad de la conexión."
    },
    {
        "input": "¿Cómo puedo mejorar mi experiencia de trabajo en un coworking?",
        "output": "Mantén una rutina, usa los recursos disponibles, participa en eventos de networking y organiza tu espacio de trabajo."
    },
    {
        "input": "¿Qué especificaciones necesita un monitor para videojuegos?",
        "output": "Un monitor para videojuegos debe tener alta frecuencia de actualización (144 Hz o más), baja latencia y compatibilidad con G-Sync o FreeSync."
    },
    {
        "input": "¿Cómo elegir el mejor motor gráfico para mi proyecto?",
        "output": "Considera la complejidad del proyecto, tu nivel de experiencia y las plataformas de destino. Unity es ideal para principiantes y multiplataforma."
    },
    {
        "input": "¿Qué es un hackatón y cómo puedo participar?",
        "output": "Un hackatón es un evento donde programadores trabajan en equipo para resolver problemas. Puedes participar registrándote en eventos locales o en línea."
    },
    {
        "input": "¿Qué diferencia hay entre Flutter y React Native?",
        "output": "Flutter usa Dart y proporciona widgets propios, mientras que React Native usa JavaScript y permite usar componentes nativos del sistema operativo."
    },
    {
        "input": "¿Cómo conecto múltiples pantallas a mi laptop?",
        "output": "Usa los puertos disponibles como HDMI o USB-C, y si es necesario, adaptadores para conectar pantallas adicionales."
    },
    {
        "input": "¿Qué habilidades se necesitan para participar en un hackatón?",
        "output": "Habilidades como programación, diseño UX/UI, resolución de problemas y trabajo en equipo son esenciales para participar en un hackatón."
    },
    {
        "input": "¿Qué diferencia hay entre una startup y una empresa tradicional?",
        "output": "Una startup es una empresa joven enfocada en innovación y crecimiento rápido, mientras que una empresa tradicional suele tener estructuras más establecidas."
    },
    {
        "input": "¿Qué importancia tienen las ferias tecnológicas en la innovación?",
        "output": "Las ferias tecnológicas permiten presentar nuevas ideas, conectar a emprendedores con inversores y fomentar colaboraciones en proyectos innovadores."
    },
    {
        "input": "¿Qué factores considerar al comprar una computadora para diseño gráfico?",
        "output": "Considera la potencia del procesador, la calidad de la tarjeta gráfica, la cantidad de RAM (al menos 16 GB) y la resolución de la pantalla."
    },
    {
        "input": "¿Qué aplicaciones tiene el ray tracing más allá de los videojuegos?",
        "output": "El ray tracing se usa en simulaciones arquitectónicas, efectos visuales en películas y diseño de productos para representar iluminación realista."
    },
    {
        "input": "¿Qué herramientas de colaboración son populares en coworking?",
        "output": "Herramientas como Slack, Trello, Google Workspace y Notion son comunes para la colaboración en entornos de coworking."
    },
    {
        "input": "¿Qué ventajas tiene el trabajo remoto para empresas tecnológicas?",
        "output": "El trabajo remoto reduce costos operativos, permite contratar talento global y mejora la flexibilidad para los empleados."
    },
    {
        "input": "¿Qué tecnología es clave para las startups en Guatemala?",
        "output": "Tecnologías como plataformas en la nube, inteligencia artificial y desarrollo de aplicaciones móviles son clave para startups en Guatemala."
    },
    {
        "input": "¿Cómo optimizo el almacenamiento de mi computadora para videojuegos?",
        "output": "Usa un SSD para cargar juegos más rápido, desinstala juegos que no uses y organiza los archivos en carpetas específicas."
    },
    {
        "input": "¿Qué diferencias hay entre coworking y home office?",
        "output": "El coworking ofrece un entorno colaborativo y profesional, mientras que el home office brinda comodidad pero puede ser más solitario."
    },
    {
        "input": "¿Qué impacto tiene el ray tracing en el rendimiento de un videojuego?",
        "output": "El ray tracing puede disminuir el rendimiento debido a su alta demanda de recursos, pero tarjetas gráficas modernas mitigan este impacto."
    },
    {
        "input": "¿Qué plataformas en línea enseñan sobre desarrollo de videojuegos?",
        "output": "Plataformas como Unity Learn, Udemy y Coursera ofrecen cursos detallados sobre desarrollo de videojuegos."
    },
    {
        "input": "¿Qué eventos tecnológicos destacan en Xela?",
        "output": "Hackatones, talleres de programación y eventos de networking para emprendedores tecnológicos destacan en Xela."
    },
    {
        "input": "¿Qué factores afectan la calidad gráfica de un videojuego?",
        "output": "Factores como resolución, texturas, iluminación, sombreado y efectos especiales afectan la calidad gráfica de un videojuego."
    },
    {
        "input": "¿Cómo elijo una laptop para desarrollo de software?",
        "output": "Busca una laptop con buen procesador (i5 o superior), al menos 16 GB de RAM, SSD y batería de larga duración."
    },
    {
        "input": "¿Qué impacto tiene el coworking en la productividad?",
        "output": "El coworking fomenta la colaboración, ofrece un entorno profesional y reduce las distracciones del hogar, mejorando la productividad."
    },
    {
        "input": "¿Qué tradiciones guatemaltecas son más reconocidas internacionalmente?",
        "output": "Las alfombras de Semana Santa, el fiambre para el Día de los Muertos y las danzas tradicionales como la del Rabinal Achí son ampliamente reconocidas."
    },
    {
        "input": "¿Qué idiomas se hablan en Guatemala además del español?",
        "output": "En Guatemala se hablan 22 idiomas mayas, además del español. Algunos ejemplos son K'iche', Q'eqchi' y Mam."
    },
    {
        "input": "¿Cuáles son los destinos arqueológicos más importantes de Guatemala?",
        "output": "Tikal, El Mirador y Yaxhá son algunos de los destinos arqueológicos más importantes de Guatemala."
    },
    {
        "input": "¿Qué impacto tiene el turismo en Guatemala?",
        "output": "El turismo es una fuente clave de ingresos, fomentando el desarrollo económico y promoviendo la cultura guatemalteca a nivel internacional."
    },
    {
        "input": "¿Qué platos típicos destacan en la gastronomía de Guatemala?",
        "output": "Platos como el pepián, los tamales, el kak'ik y el jocón son algunos de los más representativos de la gastronomía guatemalteca."
    },
    {
        "input": "¿Qué universidades destacan en Xela?",
        "output": "La Universidad de San Carlos de Guatemala (USAC) y la Universidad Mariano Gálvez son algunas de las principales instituciones educativas en Xela."
    },
    {
        "input": "¿Qué festividades se celebran en Xela?",
        "output": "La Feria de Independencia, celebrada en septiembre, es una de las festividades más importantes de Xela."
    },
    {
        "input": "¿Qué atractivos naturales hay cerca de Xela?",
        "output": "Atractivos como las Fuentes Georginas, el Volcán Santa María y el Cerro El Baúl están cerca de Xela."
    },
    {
        "input": "¿Cómo es el clima en Xela?",
        "output": "Xela tiene un clima templado, con temperaturas frescas durante todo el año y una temporada de lluvias de mayo a octubre."
    },
    {
        "input": "¿Qué importancia tiene Xela en la historia de Guatemala?",
        "output": "Xela, o Quetzaltenango, fue una ciudad clave durante la época colonial y es conocida por su papel en la independencia de Centroamérica."
    },
    {
        "input": "¿Qué avances tecnológicos se están impulsando en Guatemala?",
        "output": "Se están desarrollando startups en fintech, plataformas educativas en línea y soluciones tecnológicas para comercio electrónico."
    },
    {
        "input": "¿Qué oportunidades ofrece la tecnología en el sector educativo?",
        "output": "La tecnología facilita el aprendizaje en línea, el acceso a materiales educativos y la formación en habilidades digitales."
    },
    {
        "input": "¿Cómo afecta la inteligencia artificial a la tecnología moderna?",
        "output": "La inteligencia artificial mejora la automatización, permite el análisis avanzado de datos y facilita la personalización de servicios."
    },
    {
        "input": "¿Qué desafíos enfrenta Guatemala en su desarrollo tecnológico?",
        "output": "Desafíos como la falta de acceso a internet en áreas rurales y la desigualdad en la educación tecnológica limitan el avance tecnológico."
    },
    {
        "input": "¿Qué herramientas tecnológicas son clave para emprendedores?",
        "output": "Herramientas como Google Workspace, Slack, Trello y plataformas de comercio electrónico como Shopify son esenciales para emprendedores."
    },
    {
        "input": "¿Qué géneros de videojuegos son más populares?",
        "output": "Géneros como acción, aventura, RPG, shooters y simulación son muy populares entre los jugadores."
    },
    {
        "input": "¿Qué plataformas son ideales para desarrollar videojuegos?",
        "output": "Plataformas como Unity, Unreal Engine y Godot son ideales para desarrollar videojuegos debido a sus herramientas integradas."
    },
    {
        "input": "¿Qué papel juega la narrativa en los videojuegos?",
        "output": "La narrativa en los videojuegos mejora la inmersión del jugador y crea una conexión emocional con los personajes y la historia."
    },
    {
        "input": "¿Qué beneficios educativos tienen los videojuegos?",
        "output": "Los videojuegos pueden mejorar habilidades como la resolución de problemas, la memoria y el trabajo en equipo, y pueden usarse para enseñar conceptos complejos."
    },
    {
        "input": "¿Qué tecnologías emergentes están transformando los videojuegos?",
        "output": "Tecnologías como la realidad virtual, el ray tracing y la inteligencia artificial están transformando la experiencia de los videojuegos."
    },
    {
        "input": "¿Qué es un sistema embebido?",
        "output": "Un sistema embebido es un sistema computacional diseñado para realizar tareas específicas dentro de un dispositivo, como microcontroladores en electrodomésticos."
    },
    {
        "input": "¿Qué tipos de sistemas distribuidos existen?",
        "output": "Existen sistemas distribuidos como redes de almacenamiento, sistemas de computación distribuida y sistemas de archivos distribuidos."
    },
    {
        "input": "¿Qué es la arquitectura cliente-servidor?",
        "output": "Es un modelo donde los clientes envían solicitudes a un servidor, que las procesa y devuelve la información o servicio solicitado."
    },
    {
        "input": "¿Qué ventajas tiene la virtualización en sistemas empresariales?",
        "output": "La virtualización permite reducir costos de hardware, mejorar la escalabilidad y facilitar la recuperación ante desastres."
    },
    {
        "input": "¿Qué rol juega la ciberseguridad en los sistemas modernos?",
        "output": "La ciberseguridad protege los sistemas contra amenazas como malware, ataques de phishing y accesos no autorizados, garantizando la integridad de los datos."
    },
    {
        "input": "¿Qué características debo buscar en una computadora para edición de video?",
        "output": "Busca un procesador rápido, una GPU potente, al menos 16 GB de RAM y un SSD para almacenamiento rápido."
    },
    {
        "input": "¿Qué tipos de adaptadores de video son comunes?",
        "output": "Los adaptadores HDMI, DisplayPort, VGA y USB-C son los más comunes para conectar dispositivos a monitores o proyectores."
    },
    {
        "input": "¿Qué es un adaptador multipuerto y para qué sirve?",
        "output": "Es un dispositivo que permite conectar múltiples tipos de periféricos a un puerto, como USB-C a HDMI, Ethernet y USB-A simultáneamente."
    },
    {
        "input": "¿Cómo elegir un adaptador de corriente para mi laptop?",
        "output": "Asegúrate de que sea compatible con el voltaje y amperaje requeridos por tu laptop y, si es posible, compra uno del fabricante original."
    },
    {
        "input": "¿Qué diferencia hay entre HDMI y DisplayPort?",
        "output": "HDMI es más común en televisores y proyectores, mientras que DisplayPort se usa más en monitores para PCs debido a su mayor ancho de banda."
    }
    
]