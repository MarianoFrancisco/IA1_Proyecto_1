[
    {
        "input": "¡Hola!",
        "output": "¡Hola! ¿Cómo estás?"
    },
    {
        "input": "Buenos días",
        "output": "¡Buenos días! ¿Cómo puedo ayudarte hoy?"
    },
    {
        "input": "¡Hey! ¿Cómo estás?",
        "output": "¡Hey! Estoy bien, gracias por preguntar. ¿Y tú?"
    },
    {
        "input": "¿Qué tal?",
        "output": "¡Todo bien! ¿Y tú, qué tal?"
    },
    {
        "input": "¡Buenas tardes!",
        "output": "¡Buenas tardes! ¿Cómo te va?"
    },
    {
        "input": "¡Buenas noches!",
        "output": "¡Buenas noches! ¿En qué te puedo ayudar hoy?"
    },
    {
        "input": "¡Hola, ¿cómo estás?",
        "output": "¡Hola! Estoy bien, gracias. ¿Y tú?"
    },
    {
        "input": "¡Qué tal todo?",
        "output": "Todo muy bien, gracias. ¿Y tú, qué tal?"
    },
    {
        "input": "¿Cómo estás?",
        "output": "Estoy bien, gracias. ¿Y tú?"
    },
    {
        "input": "¡Qué onda!",
        "output": "¡Qué onda! ¿Cómo te va?"
    },
    {
        "input": "¡Hola, qué gusto saludarte!",
        "output": "¡El gusto es mío! ¿Cómo te va?"
    },
    {
        "input": "¡Qué tal, todo bien?",
        "output": "¡Todo excelente! ¿Y tú, cómo estás?"
    },
    {
        "input": "¡Hola, ¿cómo te va?",
        "output": "¡Hola! Todo bien, ¿y tú?"
    },
    {
        "input": "¡Qué hay de nuevo?",
        "output": "Todo tranquilo. ¿Y tú, qué hay de nuevo?"
    },
    {
        "input": "¡Hola, ¿cómo va todo?",
        "output": "Todo bien, gracias por preguntar. ¿Y tú, cómo va todo?"
    },
    {
        "input": "¡Buenas, ¿todo bien?",
        "output": "¡Buenas! Todo bien. ¿Qué tal tú?"
    },
    {
        "input": "¡Hola, ¿cómo estás hoy?",
        "output": "¡Hola! Estoy bien, ¿y tú? ¿Cómo te sientes hoy?"
    },
    {
        "input": "¡Qué pasa!",
        "output": "¡Qué pasa! ¿Cómo estás?"
    },
    {
        "input": "¡Saludos!",
        "output": "¡Saludos! ¿Cómo te puedo ayudar?"
    },
    {
        "input": "¡Hola, cómo andas?",
        "output": "¡Hola! Todo bien, ¿y tú cómo andas?"
    },
    {
        "input": "¡Hola, qué gusto verte!",
        "output": "¡El gusto es mío! ¿Cómo te va?"
    },
    {
        "input": "¡Qué tal, cómo está todo?",
        "output": "Todo bien, gracias. ¿Y tú, cómo está todo?"
    },
    {
        "input": "¡Hola, todo bien?",
        "output": "¡Hola! Sí, todo bien. ¿Y tú?"
    },
    {
        "input": "¡Hola, cómo te va en el día de hoy?",
        "output": "¡Hola! Todo tranquilo. ¿Y tú cómo vas hoy?"
    },
    {
        "input": "¡Qué tal tu día?",
        "output": "Mi día va bien, gracias. ¿Y el tuyo?"
    },
    {
        "input": "¡Hola, qué tal la vida?",
        "output": "¡Todo bien! ¿Y tú, qué tal la vida?"
    },
    {
        "input": "¡Hola! ¿Cómo te ha ido?",
        "output": "¡Hola! Todo ha ido bien, ¿y tú? ¿Cómo te ha ido?"
    },
    {
        "input": "¡Saludos, cómo estás?",
        "output": "¡Saludos! Estoy bien, gracias. ¿Cómo estás tú?"
    },
    {
        "input": "¡Buenas! ¿Cómo va todo?",
        "output": "¡Buenas! Todo tranquilo. ¿Y tú, cómo va todo?"
    },
    {
        "input": "¡Hola! ¿Cómo va tu día?",
        "output": "¡Hola! Todo tranquilo. ¿Y el tuyo?"
    },
    {
        "input": "¡Qué tal! ¿Todo bien por ahí?",
        "output": "¡Todo bien! ¿Y por allá, qué tal?"
    },
    {
        "input": "¡Hola, ¿cómo te encuentras?",
        "output": "¡Hola! Estoy bien, ¿y tú cómo te encuentras?"
    },
    {
        "input": "¡Hola, qué gusto saludarte hoy!",
        "output": "¡El gusto es mío! ¿Cómo va todo?"
    },
    {
        "input": "¡Hola! ¿Qué tal el día?",
        "output": "¡Hola! Todo bien, gracias. ¿Y el tuyo?"
    },
    {
        "input": "¡Hola, qué tal por aquí?",
        "output": "¡Todo tranquilo! ¿Y por allá, qué tal?"
    },
    {
        "input": "¡Hola! ¿Qué novedades tienes?",
        "output": "¡Hola! Todo tranquilo, ¿y tú, qué novedades tienes?"
    },
    {
        "input": "¡Hola, ¿cómo te encuentras hoy?",
        "output": "¡Hola! Estoy bien, ¿y tú?"
    },
    {
        "input": "¡Hola, qué gusto verte de nuevo!",
        "output": "¡El gusto es mío! ¿Cómo te va?"
    },
    {
        "input": "¡Buenas, ¿cómo va todo por ahí?",
        "output": "¡Buenas! Todo tranquilo, ¿y por ahí, qué tal?"
    },
    {
        "input": "¡Hola! ¿Cómo te está yendo?",
        "output": "¡Hola! Todo va bien, ¿y a ti?"
    },
    {
        "input": "¡Qué onda, cómo te va?",
        "output": "¡Qué onda! Todo bien, ¿y tú, cómo te va?"
    },
    {
        "input": "¡Hola! ¿Qué tal te encuentras hoy?",
        "output": "¡Hola! Todo bien, ¿y tú cómo estás hoy?"
    },
    {
        "input": "¡Hola! ¿Todo en orden?",
        "output": "¡Sí, todo bien! ¿Y tú, todo en orden?"
    },
    {
        "input": "¡Buenas, cómo estás hoy?",
        "output": "¡Buenas! Todo bien, ¿y tú?"
    },
    {
        "input": "¡Hola! ¿Todo bien contigo?",
        "output": "¡Sí, todo bien! ¿Y tú, todo bien?"
    },
    {
        "input": "¡Hola, ¿cómo te ha ido en el día?",
        "output": "¡Hola! Ha ido bien, gracias. ¿Y tú cómo has estado?"
    },
    {
        "input": "¡Saludos! ¿Todo bien por ahí?",
        "output": "¡Saludos! Sí, todo tranquilo. ¿Y por allá?"
    },
    {
        "input": "¿Hasta luego?",
        "output": "¡Hasta luego! Espero que tengas un gran día."
    },
    {
        "input": "Nos vemos pronto",
        "output": "¡Nos vemos pronto! No dudes en volver si necesitas algo más."
    },
    {
        "input": "Adiós",
        "output": "¡Adiós! Cuídate mucho."
    },
    {
        "input": "Gracias por tu ayuda",
        "output": "¡De nada! Me alegra haber podido ayudarte. ¡Hasta la próxima!"
    },
    {
        "input": "¿Nos hablamos luego?",
        "output": "Claro, ¡nos hablamos luego! Estaré aquí cuando me necesites."
    },
    {
        "input": "Chao",
        "output": "¡Chao! Espero que tengas un buen día."
    },
    {
        "input": "Hasta la próxima",
        "output": "¡Hasta la próxima! No dudes en volver."
    },
    {
        "input": "Cuídate",
        "output": "¡Cuídate mucho! Nos vemos pronto."
    },
    {
        "input": "Nos vemos",
        "output": "¡Nos vemos! Estaré aquí si necesitas más ayuda."
    },
    {
        "input": "Gracias, adiós",
        "output": "¡Gracias a ti! ¡Adiós y que tengas un excelente día!"
    },
    {
        "input": "Te veo luego",
        "output": "¡Te veo luego! ¡Hasta pronto!"
    },
    {
        "input": "Bueno, me voy",
        "output": "¡Que tengas un buen día! ¡Hasta luego!"
    },
    {
        "input": "¿Puedes despedirte?",
        "output": "¡Claro! ¡Adiós y que tengas un buen día!"
    },
    {
        "input": "Fue un placer",
        "output": "¡El placer fue mío! ¡Hasta pronto!"
    },
    {
        "input": "Nos vemos en otro momento",
        "output": "¡Nos vemos pronto! Cuídate mucho."
    },
    {
        "input": "¿Hasta pronto?",
        "output": "¡Hasta pronto! No dudes en volver cuando necesites algo más."
    },
    {
        "input": "Me voy, gracias por todo",
        "output": "¡De nada! Fue un placer ayudarte. ¡Hasta la próxima!"
    },
    {
        "input": "Adiós, cuídate",
        "output": "¡Adiós y cuídate también! Hasta la próxima."
    },
    {
        "input": "Que descanses",
        "output": "¡Igualmente! Que tengas una excelente tarde o noche."
    },
    {
        "input": "Hasta otro día",
        "output": "¡Hasta otro día! Estaré esperando tu regreso."
    },
    {
        "input": "Gracias por tu tiempo",
        "output": "¡De nada! Fue un placer. ¡Nos vemos!"
    },
    {
        "input": "Me tengo que ir",
        "output": "¡Entendido! Cuídate y hasta pronto."
    },
    {
        "input": "Adiós, que tengas un buen día",
        "output": "¡Gracias! Te deseo lo mismo. ¡Hasta luego!"
    },
    {
        "input": "Bueno, me retiro",
        "output": "¡Que tengas un excelente día! Nos vemos pronto."
    },
    {
        "input": "Nos vemos, gracias",
        "output": "¡Nos vemos! Un placer ayudarte."
    },
    {
        "input": "Te agradezco mucho",
        "output": "¡Gracias a ti! ¡Hasta pronto!"
    },
    {
        "input": "Es hora de irme",
        "output": "¡Está bien! Cuídate mucho. ¡Nos vemos!"
    },
    {
        "input": "Gracias, que estés bien",
        "output": "¡Gracias! Que estés muy bien también. ¡Hasta la próxima!"
    },
    {
        "input": "Hasta luego, amigo",
        "output": "¡Hasta luego, amigo! Nos vemos pronto."
    },
    {
        "input": "Ya me voy, ¡gracias por todo!",
        "output": "¡De nada! ¡Hasta pronto!"
    },
    {
        "input": "Que tengas un buen descanso",
        "output": "¡Gracias! Igualmente, que descanses bien."
    },
    {
        "input": "Me voy a descansar",
        "output": "¡Que tengas una excelente noche! Nos vemos pronto."
    },
    {
        "input": "Hasta el próximo encuentro",
        "output": "¡Hasta el próximo encuentro! Nos vemos en breve."
    },
    {
        "input": "Vuelvo luego",
        "output": "¡Te espero! Vuelve cuando quieras."
    },
    {
        "input": "Nos vemos, que descanses",
        "output": "¡Nos vemos! Que tengas un buen descanso."
    },
    {
        "input": "Gracias por estar aquí",
        "output": "¡Gracias a ti por conversar conmigo! ¡Hasta pronto!"
    },
    {
        "input": "Hasta luego, nos vemos pronto",
        "output": "¡Hasta luego! Espero verte pronto."
    },
    {
        "input": "Que todo te vaya bien",
        "output": "¡Gracias! Que a ti también te vaya de maravilla."
    },
    {
        "input": "Hasta la vista",
        "output": "¡Hasta la vista! Cuídate mucho."
    },
    {
        "input": "Hasta pronto, que tengas buen día",
        "output": "¡Hasta pronto! Igualmente, que tengas un excelente día."
    },
    {
        "input": "Adiós, buen día",
        "output": "¡Adiós! Que tengas un día fantástico."
    },
    {
        "input": "Hasta mañana",
        "output": "¡Hasta mañana! Que tengas un excelente día."
    },
    {
        "input": "Me tengo que ir ya",
        "output": "¡Está bien! Cuídate mucho, nos vemos pronto."
    },
    {
        "input": "Chao, nos vemos pronto",
        "output": "¡Chao! Nos vemos pronto."
    },
    {
        "input": "Hasta luego, cuídate mucho",
        "output": "¡Cuídate también! Hasta luego."
    },
    {
        "input": "Hasta luego, amigo",
        "output": "¡Hasta luego! Cuídate mucho."
    },
    {
        "input": "Nos vemos en otra ocasión",
        "output": "¡Nos vemos! Será un placer ayudarte otra vez."
    },
    {
        "input": "Bueno, me despido",
        "output": "¡Que tengas un excelente día! ¡Hasta pronto!"
    },
    {
        "input": "Hasta luego, que te vaya bien",
        "output": "¡Que te vaya muy bien! Nos vemos luego."
    },
    {
        "input": "Adiós, cuídate",
        "output": "¡Cuídate mucho! Nos vemos pronto."
    },
    {
        "input": "Hasta la próxima, ¡gracias por todo!",
        "output": "¡Hasta la próxima! Fue un placer ayudarte."
    },
    {
        "input": "Te veo luego",
        "output": "¡Te veo luego! Que todo te vaya bien."
    },
    {
        "input": "Nos vemos pronto, que te vaya bien",
        "output": "¡Nos vemos pronto! Que tengas un excelente día."
    },
    {
        "input": "Gracias, ¡hasta pronto!",
        "output": "¡Hasta pronto! Que tengas un buen día."
    },
    {
        "input": "Me voy, adiós",
        "output": "¡Adiós! Nos vemos pronto."
    },
    {
        "input": "Gracias por todo, cuídate",
        "output": "¡De nada! Cuídate mucho, hasta la próxima."
    },
    {
        "input": "Nos vemos después",
        "output": "¡Nos vemos después! Cuídate mucho."
    },
    {
        "input": "quiero aprender Python",
        "output": "¡Genial! Python es un gran lenguaje. ¿Qué te interesa aprender primero?"
    },
    {
        "input": "¿me puedes enseñar a usar Python?",
        "output": "¡Claro que sí! ¿Por dónde quieres empezar? Puedo explicarte desde lo básico hasta temas avanzados."
    },
    {
        "input": "¿cómo hago un programa en Python?",
        "output": "Para empezar, abre un editor de texto o IDE, escribe tu código Python y guárdalo con la extensión `.py`. Luego ejecútalo con `python nombre_del_archivo.py`."
    },
    {
        "input": "muéstrame un ejemplo básico de Python",
        "output": "Por supuesto, aquí tienes: print('¡Hola, mundo!')"
    },
    {
        "input": "oye, ¿cómo sumo dos números en Python?",
        "output": "Es súper sencillo, así: resultado = 2 + 3; print(resultado)"
    },
    {
        "input": "¿qué es un bucle en Python?",
        "output": "Un bucle en Python es una forma de repetir código. Por ejemplo, con un `for` o `while`."
    },
    {
        "input": "explícame qué es una función en Python",
        "output": "Una función es un bloque de código reutilizable que realizas cuando necesitas ejecutar tareas específicas. Ejemplo: def saludar(): print('Hola')"
    },
    {
        "input": "¿cómo creo un archivo en Python?",
        "output": "Usa la función `open()` con el modo `w`. Ejemplo: with open('archivo.txt', 'w') as archivo: archivo.write('Hola, mundo')"
    },
    {
        "input": "¿puedes explicarme qué es una lista en Python?",
        "output": "¡Claro! Una lista es una colección ordenada de elementos. Ejemplo: mi_lista = [1, 2, 3]"
    },
    {
        "input": "bro, ¿cómo manejo errores en Python?",
        "output": "Usa bloques try-except. Ejemplo: try: print(1/0) except ZeroDivisionError: print('Error: División por cero')"
    },
    {
        "input": "¿qué librerías me recomiendas en Python?",
        "output": "Depende de lo que necesites. Para análisis de datos: pandas y numpy. Para gráficos: matplotlib. Para web: Flask o Django."
    },
    {
        "input": "enséñame a instalar una librería",
        "output": "Es fácil: abre la terminal y escribe `pip install nombre_libreria`. Por ejemplo, `pip install requests`."
    },
    {
        "input": "quiero aprender sobre pandas",
        "output": "¡Excelente! Pandas es genial para manejar datos. Empieza importándolo: `import pandas as pd`. Luego puedes cargar datos con `pd.read_csv()`."
    },
    {
        "input": "¿puedes mostrarme un ejemplo usando pandas?",
        "output": "Claro, aquí tienes: `import pandas as pd; df = pd.DataFrame({'Columna': [1, 2, 3]}); print(df)`"
    },
    {
        "input": "¿cómo empiezo con Django?",
        "output": "Primero instala Django: `pip install django`. Luego, crea un proyecto con `django-admin startproject nombre_proyecto`."
    },
    {
        "input": "¿qué puedo hacer con Python?",
        "output": "¡Muchas cosas! Desarrollo web, análisis de datos, inteligencia artificial, scripts automáticos y mucho más."
    },
    {
        "input": "¿puedes ayudarme con un problema en mi código?",
        "output": "¡Claro! Pásame tu código o describe el problema, y con gusto te ayudo."
    },
    {
        "input": "oye, ¿cómo escribo en un archivo?",
        "output": "Usa `open()` en modo escritura: `with open('archivo.txt', 'w') as archivo: archivo.write('Hola')`."
    },
    {
        "input": "¿cómo conecto Python a una base de datos?",
        "output": "Usa librerías como sqlite3, psycopg2 (para PostgreSQL) o pymongo (para MongoDB). ¿Qué base de datos quieres usar?"
    },
    {
        "input": "explícame qué es una clase en Python",
        "output": "Una clase es un modelo para crear objetos. Ejemplo: `class Perro: def __init__(self, nombre): self.nombre = nombre`"
    },
    {
        "input": "¿puedo usar Python para hacer aplicaciones web?",
        "output": "¡Sí! Con frameworks como Flask o Django puedes crear aplicaciones web robustas."
    },
    {
        "input": "ayúdame con loops anidados",
        "output": "Aquí tienes un ejemplo: `for i in range(3): for j in range(2): print(i, j)`"
    },
    {
        "input": "¿qué es un decorador en Python?",
        "output": "Un decorador es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador` sobre la función que quieres modificar."
    },
    {
        "input": "¿cómo hago un programa interactivo?",
        "output": "Usa `input()` para recibir datos del usuario. Ejemplo: `nombre = input('¿Cómo te llamas? '); print('Hola,', nombre)`"
    },
    {
        "input": "me ayudas con expresiones regulares",
        "output": "Por supuesto, usa la librería `re`. Ejemplo: `import re; re.match(r'\\d+', '123')`."
    },
    {
        "input": "quiero aprender sobre gráficos en Python",
        "output": "Para gráficos, te recomiendo matplotlib. Ejemplo básico: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()`."
    },
    {
        "input": "oye, ¿puedo automatizar tareas con Python?",
        "output": "¡Claro! Usa librerías como `os`, `shutil` o `subprocess` para automatizar tareas."
    },
    {
        "input": "¿Qué es Python?",
        "output": "Python es un lenguaje de programación de alto nivel, interpretado y de propósito general."
    },
    {
        "input": "¿Para qué sirve Python?",
        "output": "Python se usa para desarrollo web, análisis de datos, inteligencia artificial, desarrollo de software, automatización y más."
    },
    {
        "input": "¿Es Python un lenguaje difícil?",
        "output": "Python es conocido por ser fácil de aprender gracias a su sintaxis clara y legible."
    },
    {
        "input": "¿Quién creó Python?",
        "output": "Python fue creado por Guido van Rossum en 1991."
    },
    {
        "input": "¿Qué es una variable en Python?",
        "output": "Una variable es un contenedor para almacenar datos en un programa."
    },
    {
        "input": "¿Python es gratuito?",
        "output": "Sí, Python es gratuito y de código abierto."
    },
    {
        "input": "¿Qué es un IDE para Python?",
        "output": "Un IDE es un entorno de desarrollo integrado donde puedes escribir y ejecutar código Python, como PyCharm o VS Code."
    },
    {
        "input": "¿Qué son las bibliotecas de Python?",
        "output": "Son colecciones de módulos preescritos que facilitan tareas específicas, como NumPy para matemáticas o Pandas para análisis de datos."
    },
    {
        "input": "¿Qué es una función en Python?",
        "output": "Una función es un bloque de código reutilizable que realiza una tarea específica."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Un módulo es un archivo que contiene definiciones y funciones que pueden ser reutilizadas en otros programas."
    },
    {
        "input": "¿Qué es un bucle en Python?",
        "output": "Un bucle permite ejecutar un bloque de código repetidamente, como con 'for' o 'while'."
    },
    {
        "input": "¿Qué es una lista en Python?",
        "output": "Una lista es una colección de elementos ordenados y mutables."
    },
    {
        "input": "¿Cómo se declara una lista en Python?",
        "output": "Usando corchetes, por ejemplo: lista = [1, 2, 3]."
    },
    {
        "input": "¿Qué es un diccionario en Python?",
        "output": "Es una colección de pares clave-valor que permite acceder a datos mediante claves."
    },
    {
        "input": "¿Qué son las excepciones en Python?",
        "output": "Las excepciones son errores que ocurren durante la ejecución de un programa y pueden manejarse con bloques 'try-except'."
    },
    {
        "input": "¿Python es compilado o interpretado?",
        "output": "Python es un lenguaje interpretado."
    },
    {
        "input": "¿Qué es un string en Python?",
        "output": "Un string es una secuencia de caracteres encerrada entre comillas."
    },
    {
        "input": "¿Cómo se comentan líneas en Python?",
        "output": "Usando el símbolo # para comentarios de una línea."
    },
    {
        "input": "¿Qué es una clase en Python?",
        "output": "Una clase es una plantilla para crear objetos, que define atributos y métodos."
    },
    {
        "input": "¿Qué es un objeto en Python?",
        "output": "Un objeto es una instancia de una clase."
    },
    {
        "input": "¿Qué es un decorador en Python?",
        "output": "Un decorador es una función que modifica el comportamiento de otra función o método."
    },
    {
        "input": "¿Qué es Python Flask?",
        "output": "Flask es un microframework para desarrollar aplicaciones web con Python."
    },
    {
        "input": "¿Qué es Python Django?",
        "output": "Django es un framework completo para el desarrollo web con Python."
    },
    {
        "input": "¿Qué es NumPy?",
        "output": "NumPy es una biblioteca de Python para realizar cálculos matemáticos y trabajar con arrays."
    },
    {
        "input": "¿Qué es Pandas en Python?",
        "output": "Pandas es una biblioteca para análisis y manipulación de datos."
    },
    {
        "input": "¿Qué es un paquete en Python?",
        "output": "Un paquete es una colección de módulos organizados en un directorio."
    },
    {
        "input": "¿Qué es el pip en Python?",
        "output": "Pip es una herramienta para instalar y gestionar paquetes de Python."
    },
    {
        "input": "¿Qué es una tupla en Python?",
        "output": "Una tupla es una colección de elementos ordenados e inmutables."
    },
    {
        "input": "¿Cómo se crea una tupla en Python?",
        "output": "Usando paréntesis, por ejemplo: tupla = (1, 2, 3)."
    },
    {
        "input": "¿Qué es un conjunto en Python?",
        "output": "Un conjunto es una colección no ordenada de elementos únicos."
    },
    {
        "input": "¿Qué es un archivo .py?",
        "output": "Es un archivo de texto que contiene código Python."
    },
    {
        "input": "¿Qué es un archivo .pyc?",
        "output": "Es un archivo compilado de Python que se genera automáticamente al ejecutar un programa."
    },
    {
        "input": "¿Cómo ejecutar un script Python?",
        "output": "Usando el comando 'python nombre_del_archivo.py' en la terminal."
    },
    {
        "input": "¿Qué es un intérprete de Python?",
        "output": "Es el programa que ejecuta código Python línea por línea."
    },
    {
        "input": "¿Python soporta programación orientada a objetos?",
        "output": "Sí, Python soporta programación orientada a objetos."
    },
    {
        "input": "¿Qué es una lista por comprensión en Python?",
        "output": "Es una forma compacta de crear listas usando una expresión en un bucle."
    },
    {
        "input": "¿Qué es la recursión en Python?",
        "output": "Es una técnica donde una función se llama a sí misma para resolver un problema."
    },
    {
        "input": "¿Python es case-sensitive?",
        "output": "Sí, Python distingue entre mayúsculas y minúsculas."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Un iterador es un objeto que permite recorrer elementos de una colección."
    },
    {
        "input": "¿Qué es un generador en Python?",
        "output": "Un generador es una función que produce una secuencia de valores de forma perezosa."
    },
    {
        "input": "¿Cómo instalar Python?",
        "output": "Puedes descargarlo desde la página oficial de Python: https://www.python.org/."
    },
    {
        "input": "¿Qué es un breakpoint en Python?",
        "output": "Un breakpoint es un punto en el código donde se detiene la ejecución para depuración."
    },
    {
        "input": "¿Qué es un string multilínea en Python?",
        "output": "Es un string encerrado entre tres comillas dobles o simples."
    },
    {
        "input": "¿Qué es la indentación en Python?",
        "output": "La indentación es el espacio al inicio de una línea que define bloques de código."
    },
    {
        "input": "¿Qué es la función 'print' en Python?",
        "output": "La función 'print' se utiliza para mostrar información en la pantalla."
    },
    {
        "input": "¿Qué es la función 'input' en Python?",
        "output": "La función 'input' se utiliza para recibir datos del usuario."
    },
    {
        "input": "¿Cómo manejar archivos en Python?",
        "output": "Usando funciones como 'open', 'read', 'write', y 'close'."
    },
    {
        "input": "¿Qué es el Zen de Python?",
        "output": "Es un conjunto de principios que guían el diseño de Python, accesible con 'import this'."
    },
    {
        "input": "¿Cómo instalar bibliotecas en Python?",
        "output": "Usando el comando 'pip install nombre_biblioteca'."
    },
    {
        "input": "¿Qué es programación?",
        "output": "La programación es el proceso de escribir y diseñar código para crear aplicaciones o software."
    },
    {
        "input": "¿Para qué sirve programar?",
        "output": "Programar sirve para desarrollar soluciones digitales, automatizar tareas y construir sistemas informáticos."
    },
    {
        "input": "¿Qué lenguajes de programación existen?",
        "output": "Algunos lenguajes de programación comunes son Python, Java, C++, y JavaScript."
    },
    {
        "input": "¿Es difícil aprender a programar?",
        "output": "Aprender a programar puede ser desafiante al principio, pero con práctica se vuelve más fácil."
    },
    {
        "input": "¿Qué necesito para empezar a programar?",
        "output": "Para empezar a programar necesitas una computadora, un editor de código y aprender los conceptos básicos."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es un conjunto de pasos organizados para resolver un problema o realizar una tarea."
    },
    {
        "input": "¿Qué es un lenguaje de programación?",
        "output": "Es un lenguaje utilizado para escribir instrucciones que las computadoras puedan entender."
    },
    {
        "input": "¿Qué es un bucle en programación?",
        "output": "Un bucle es una estructura que permite repetir un bloque de código varias veces."
    },
    {
        "input": "¿Qué es un error de sintaxis?",
        "output": "Un error de sintaxis ocurre cuando el código no sigue las reglas del lenguaje de programación."
    },
    {
        "input": "¿Qué es un IDE?",
        "output": "Un IDE (Entorno de Desarrollo Integrado) es un software que proporciona herramientas para programar más eficientemente."
    },
    {
        "input": "¿Qué significa depuración?",
        "output": "Depuración es el proceso de identificar y corregir errores en un programa."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Un framework es un conjunto de herramientas y bibliotecas que facilita el desarrollo de software."
    },
    {
        "input": "¿Qué es un lenguaje compilado?",
        "output": "Es un lenguaje cuyos programas se traducen a código máquina antes de ejecutarse."
    },
    {
        "input": "¿Qué es un lenguaje interpretado?",
        "output": "Es un lenguaje cuyo código se ejecuta línea por línea sin necesidad de compilarlo previamente."
    },
    {
        "input": "¿Qué es una variable?",
        "output": "Una variable es un espacio en memoria donde se almacena un valor que puede cambiar durante la ejecución del programa."
    },
    {
        "input": "¿Qué es un condicional?",
        "output": "Un condicional es una estructura que permite ejecutar código dependiendo de si una condición es verdadera o falsa."
    },
    {
        "input": "¿Qué es una función?",
        "output": "Una función es un bloque de código reutilizable que realiza una tarea específica."
    },
    {
        "input": "¿Qué es programación orientada a objetos?",
        "output": "Es un paradigma de programación basado en el uso de objetos que contienen datos y métodos."
    },
    {
        "input": "¿Qué es un objeto en programación?",
        "output": "Un objeto es una instancia de una clase que contiene propiedades y métodos."
    },
    {
        "input": "¿Qué es una clase en programación?",
        "output": "Una clase es una plantilla para crear objetos que define sus propiedades y comportamientos."
    },
    {
        "input": "¿Qué es un archivo fuente?",
        "output": "Es el archivo donde se escribe el código de un programa."
    },
    {
        "input": "¿Qué es la programación funcional?",
        "output": "Es un paradigma que se basa en funciones matemáticas y evita el uso de estados mutables."
    },
    {
        "input": "¿Qué es un array?",
        "output": "Un array es una estructura de datos que almacena múltiples valores en una sola variable."
    },
    {
        "input": "¿Qué es una lista enlazada?",
        "output": "Es una estructura de datos en la que cada elemento apunta al siguiente en la lista."
    },
    {
        "input": "¿Qué es un compilador?",
        "output": "Un compilador es un programa que traduce código fuente a código máquina."
    },
    {
        "input": "¿Qué es un intérprete?",
        "output": "Un intérprete ejecuta el código línea por línea sin necesidad de compilarlo previamente."
    },
    {
        "input": "¿Qué es un repositorio de código?",
        "output": "Un repositorio es un lugar donde se almacena y gestiona el código fuente de un proyecto."
    },
    {
        "input": "¿Qué es control de versiones?",
        "output": "Es un sistema que registra los cambios realizados en el código fuente a lo largo del tiempo."
    },
    {
        "input": "¿Qué es Git?",
        "output": "Git es un sistema de control de versiones ampliamente utilizado en el desarrollo de software."
    },
    {
        "input": "¿Qué es un commit en Git?",
        "output": "Un commit es un registro de cambios realizados en el código."
    },
    {
        "input": "¿Qué es una rama en Git?",
        "output": "Una rama es una línea de desarrollo independiente en un repositorio de código."
    },
    {
        "input": "¿Qué es un merge en Git?",
        "output": "Un merge combina los cambios de una rama con otra."
    },
    {
        "input": "¿Qué es la programación web?",
        "output": "Es la creación de sitios y aplicaciones que se ejecutan en navegadores web."
    },
    {
        "input": "¿Qué es HTML?",
        "output": "HTML es un lenguaje de marcado utilizado para estructurar contenido en la web."
    },
    {
        "input": "¿Qué es CSS?",
        "output": "CSS es un lenguaje de estilos que define la apariencia de elementos HTML."
    },
    {
        "input": "¿Qué es JavaScript?",
        "output": "JavaScript es un lenguaje de programación utilizado para añadir interactividad a sitios web."
    },
    {
        "input": "¿Qué es un backend?",
        "output": "El backend es la parte del software que se ejecuta en el servidor y maneja la lógica y datos."
    },
    {
        "input": "¿Qué es un frontend?",
        "output": "El frontend es la parte visual e interactiva de una aplicación que se ejecuta en el navegador."
    },
    {
        "input": "¿Qué es una API?",
        "output": "Una API es una interfaz que permite a diferentes aplicaciones comunicarse entre sí."
    },
    {
        "input": "¿Qué es una base de datos?",
        "output": "Una base de datos es un sistema organizado para almacenar, gestionar y recuperar datos."
    },
    {
        "input": "¿Qué es SQL?",
        "output": "SQL es un lenguaje utilizado para gestionar bases de datos relacionales."
    },
    {
        "input": "¿Qué es NoSQL?",
        "output": "NoSQL es un tipo de base de datos que no usa tablas relacionales para organizar datos."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es una computadora que proporciona servicios o recursos a otras computadoras."
    },
    {
        "input": "¿Qué es una librería en programación?",
        "output": "Una librería es un conjunto de funciones y utilidades reutilizables que facilitan el desarrollo."
    },
    {
        "input": "¿Qué es una prueba unitaria?",
        "output": "Es una técnica para probar partes individuales de un programa."
    },
    {
        "input": "¿Qué es el ciclo de vida del software?",
        "output": "Es el proceso que abarca desde la planificación hasta el mantenimiento del software."
    },
    {
        "input": "¿Qué es una red neuronal?",
        "output": "Es un modelo computacional inspirado en el funcionamiento del cerebro humano."
    },
    {
        "input": "¿Qué es inteligencia artificial?",
        "output": "Es la simulación de procesos de inteligencia humana por parte de sistemas computacionales."
    },
    {
        "input": "¿Qué es el aprendizaje automático?",
        "output": "Es un subcampo de la inteligencia artificial que permite a los sistemas aprender de datos."
    },
    {
        "input": "¿Qué es un entorno de desarrollo?",
        "output": "Es el conjunto de herramientas y software que se utiliza para escribir y probar código."
    },
    {
        "input": "¿Qué es la inteligencia artificial?",
        "output": "Es la simulación de procesos de inteligencia humana por parte de sistemas computacionales."
    },
    {
        "input": "¿Cuáles son las aplicaciones de la inteligencia artificial?",
        "output": "Algunas aplicaciones incluyen asistentes virtuales, análisis de datos, visión por computadora y robots autónomos."
    },
    {
        "input": "¿Qué es el aprendizaje automático?",
        "output": "Es un subcampo de la inteligencia artificial que permite a las máquinas aprender de datos y mejorar su rendimiento con el tiempo."
    },
    {
        "input": "¿Qué es el aprendizaje supervisado?",
        "output": "Es un enfoque de aprendizaje automático donde los modelos son entrenados con datos etiquetados."
    },
    {
        "input": "¿Qué es el aprendizaje no supervisado?",
        "output": "Es un enfoque de aprendizaje automático donde los modelos encuentran patrones en datos no etiquetados."
    },
    {
        "input": "¿Qué es el aprendizaje por refuerzo?",
        "output": "Es una técnica de aprendizaje donde un agente toma decisiones para maximizar una recompensa acumulada."
    },
    {
        "input": "¿Qué es una red neuronal artificial?",
        "output": "Es un modelo computacional inspirado en la estructura del cerebro humano, utilizado en tareas como reconocimiento de patrones."
    },
    {
        "input": "¿Qué es el procesamiento del lenguaje natural?",
        "output": "Es un campo de la IA que se centra en la interacción entre las computadoras y el lenguaje humano."
    },
    {
        "input": "¿Qué es visión por computadora?",
        "output": "Es un campo de la IA que permite a las computadoras interpretar y procesar imágenes del mundo real."
    },
    {
        "input": "¿Qué es un modelo de lenguaje?",
        "output": "Es un modelo de IA diseñado para procesar y generar texto en lenguaje natural."
    },
    {
        "input": "¿Qué es un chatbot?",
        "output": "Es un programa de IA diseñado para simular conversaciones humanas."
    },
    {
        "input": "¿Qué es un asistente virtual?",
        "output": "Es una aplicación de IA que ayuda a los usuarios con tareas mediante comandos de voz o texto."
    },
    {
        "input": "¿Qué es el reconocimiento de voz?",
        "output": "Es una tecnología de IA que convierte el habla en texto."
    },
    {
        "input": "¿Qué es el análisis de sentimientos?",
        "output": "Es el uso de IA para identificar y analizar emociones en textos."
    },
    {
        "input": "¿Qué es un modelo generativo?",
        "output": "Es un modelo de IA que puede generar nuevos datos similares a los datos de entrenamiento."
    },
    {
        "input": "¿Qué es GAN?",
        "output": "Una red generativa adversarial (GAN) es un tipo de modelo de IA que utiliza dos redes que compiten para generar datos realistas."
    },
    {
        "input": "¿Qué es un algoritmo de clustering?",
        "output": "Es un método de aprendizaje no supervisado para agrupar datos similares."
    },
    {
        "input": "¿Qué es la transferencia de estilo?",
        "output": "Es una técnica de IA que aplica el estilo artístico de una imagen a otra imagen."
    },
    {
        "input": "¿Qué es un sistema experto?",
        "output": "Es un sistema de IA que utiliza conocimiento especializado para tomar decisiones o resolver problemas."
    },
    {
        "input": "¿Qué es la robótica?",
        "output": "Es un campo que combina IA y mecatrónica para diseñar y operar robots."
    },
    {
        "input": "¿Qué es un agente inteligente?",
        "output": "Es un programa de IA que percibe su entorno y actúa para alcanzar metas específicas."
    },
    {
        "input": "¿Qué es la ética en inteligencia artificial?",
        "output": "Es el estudio de los principios éticos relacionados con el diseño y uso de sistemas de IA."
    },
    {
        "input": "¿Qué son los datos de entrenamiento?",
        "output": "Son datos utilizados para enseñar a un modelo de IA a realizar una tarea específica."
    },
    {
        "input": "¿Qué es el sobreajuste?",
        "output": "Es un problema donde un modelo de IA aprende demasiado los detalles de los datos de entrenamiento y no generaliza bien."
    },
    {
        "input": "¿Qué es la subestimación?",
        "output": "Es un problema donde un modelo de IA no captura suficientemente la complejidad de los datos."
    },
    {
        "input": "¿Qué es la regresión?",
        "output": "Es una técnica de aprendizaje automático para predecir valores continuos."
    },
    {
        "input": "¿Qué es la clasificación?",
        "output": "Es una técnica de aprendizaje automático para asignar categorías a datos."
    },
    {
        "input": "¿Qué es el análisis predictivo?",
        "output": "Es el uso de técnicas de IA para hacer predicciones basadas en datos históricos."
    },
    {
        "input": "¿Qué es la computación cognitiva?",
        "output": "Es el uso de IA para simular procesos cognitivos humanos como el aprendizaje y el razonamiento."
    },
    {
        "input": "¿Qué es la automatización de procesos?",
        "output": "Es el uso de IA para realizar tareas repetitivas sin intervención humana."
    },
    {
        "input": "¿Qué es la minería de datos?",
        "output": "Es el proceso de descubrir patrones y relaciones en grandes conjuntos de datos."
    },
    {
        "input": "¿Qué es la inteligencia artificial fuerte?",
        "output": "Es un concepto de IA capaz de realizar cualquier tarea intelectual que un humano pueda hacer."
    },
    {
        "input": "¿Qué es la inteligencia artificial débil?",
        "output": "Es una IA diseñada para realizar tareas específicas, como jugar al ajedrez o recomendar películas."
    },
    {
        "input": "¿Qué es una función de costo?",
        "output": "Es una medida utilizada en el aprendizaje automático para evaluar el rendimiento de un modelo."
    },
    {
        "input": "¿Qué es el reconocimiento facial?",
        "output": "Es una aplicación de IA que identifica o verifica identidades a partir de imágenes faciales."
    },
    {
        "input": "¿Qué es un sesgo algorítmico?",
        "output": "Es un problema donde un modelo de IA produce resultados sesgados debido a datos desequilibrados o diseño deficiente."
    },
    {
        "input": "¿Qué es la transparencia en IA?",
        "output": "Se refiere a la capacidad de entender cómo y por qué un sistema de IA toma decisiones."
    },
    {
        "input": "¿Qué es un modelo preentrenado?",
        "output": "Es un modelo de IA que ya ha sido entrenado en un conjunto de datos y puede ajustarse para tareas específicas."
    },
    {
        "input": "¿Qué es el aprendizaje profundo?",
        "output": "Es un subcampo del aprendizaje automático que utiliza redes neuronales profundas para procesar datos."
    },
    {
        "input": "¿Qué es un modelo secuencial?",
        "output": "Es un modelo de IA diseñado para procesar datos en secuencia, como texto o series temporales."
    },
    {
        "input": "¿Qué es un hiperparámetro?",
        "output": "Es un parámetro cuyo valor se establece antes del entrenamiento de un modelo de IA."
    },
    {
        "input": "¿Qué es la computación distribuida?",
        "output": "Es el uso de múltiples computadoras para procesar grandes volúmenes de datos de manera colaborativa."
    },
    {
        "input": "¿Qué es un grafo de conocimiento?",
        "output": "Es una estructura que organiza información en nodos y relaciones para facilitar la búsqueda y el razonamiento."
    },
    {
        "input": "¿Qué es el reconocimiento óptico de caracteres?",
        "output": "Es una tecnología de IA que convierte imágenes de texto en texto editable."
    },
    {
        "input": "¿Qué es la inteligencia de enjambre?",
        "output": "Es un enfoque de IA inspirado en el comportamiento colectivo de organismos como abejas o hormigas."
    },
    {
        "input": "¿Qué es la regularización?",
        "output": "Es una técnica utilizada para prevenir el sobreajuste en modelos de IA."
    },
    {
        "input": "¿Qué es el procesamiento en tiempo real?",
        "output": "Es la capacidad de un sistema de IA para procesar y analizar datos instantáneamente."
    },
    {
        "input": "¿Qué es la inteligencia aumentada?",
        "output": "Es el uso de IA para ampliar las capacidades humanas en lugar de reemplazarlas."
    },
    {
        "input": "¿Qué es un conjunto de datos sintético?",
        "output": "Es un conjunto de datos generado artificialmente para entrenar modelos de IA cuando los datos reales son limitados."
    },
    {
        "input": "¿Qué es Python?",
        "output": "Python es un lenguaje de programación de alto nivel, fácil de aprender y ampliamente utilizado en desarrollo web, análisis de datos, inteligencia artificial, entre otros."
    },
    {
        "input": "¿Para qué se usa Python?",
        "output": "Python se usa para muchas cosas: desarrollo web, análisis de datos, aprendizaje automático, automatización de tareas, y más."
    },
    {
        "input": "¿Cómo empiezo a usar Python?",
        "output": "Descarga Python desde python.org, instálalo y abre un editor como VS Code o PyCharm para empezar a escribir código."
    },
    {
        "input": "¿Qué editor de texto recomiendas para Python?",
        "output": "Te recomiendo Visual Studio Code, PyCharm o incluso Jupyter Notebook para empezar."
    },
    {
        "input": "¿Cómo instalo librerías en Python?",
        "output": "Usa el gestor de paquetes pip. Por ejemplo: `pip install requests`."
    },
    {
        "input": "¿Qué es pip?",
        "output": "Pip es el gestor de paquetes de Python que te permite instalar y gestionar librerías de terceros."
    },
    {
        "input": "¿Qué hago si pip no funciona?",
        "output": "Intenta actualizar pip con `python -m pip install --upgrade pip` o verifica que Python esté correctamente instalado."
    },
    {
        "input": "¿Cómo creo un programa en Python?",
        "output": "Escribe tu código en un archivo con extensión `.py` y ejecútalo en la terminal con `python archivo.py`."
    },
    {
        "input": "¿Cómo ejecuto Python en la terminal?",
        "output": "Abre tu terminal, escribe `python` para acceder al intérprete interactivo, o `python archivo.py` para ejecutar un archivo."
    },
    {
        "input": "¿Qué es una lista en Python?",
        "output": "Una lista es una colección ordenada de elementos. Puedes crear una lista usando corchetes: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Puedo tener listas dentro de listas?",
        "output": "¡Sí! Son listas anidadas. Ejemplo: `mi_lista = [[1, 2], [3, 4]]`."
    },
    {
        "input": "¿Cómo accedo a un elemento de una lista?",
        "output": "Usa índices. Ejemplo: `mi_lista[0]` para acceder al primer elemento."
    },
    {
        "input": "¿Qué es un bucle en Python?",
        "output": "Un bucle es una forma de ejecutar un bloque de código varias veces. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Qué es un rango en Python?",
        "output": "Es una función que genera una secuencia de números. Ejemplo: `range(5)` genera 0, 1, 2, 3, 4."
    },
    {
        "input": "¿Cómo detengo un bucle en Python?",
        "output": "Usa la palabra clave `break`. Ejemplo: `for i in range(5): if i == 3: break`."
    },
    {
        "input": "¿Qué es una función en Python?",
        "output": "Una función es un bloque de código reutilizable que realiza una tarea específica. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Qué es un parámetro en una función?",
        "output": "Es un valor que pasas a una función para personalizar su comportamiento. Ejemplo: `def saludar(nombre): print('Hola', nombre)`."
    },
    {
        "input": "¿Cómo retorno un valor de una función?",
        "output": "Usa la palabra clave `return`. Ejemplo: `def sumar(a, b): return a + b`."
    },
    {
        "input": "¿Qué es un archivo en Python?",
        "output": "Un archivo es un recurso donde puedes almacenar datos. Ejemplo: `with open('archivo.txt', 'w') as archivo: archivo.write('Hola')`."
    },
    {
        "input": "¿Qué significa 'w' en open?",
        "output": "Significa que estás abriendo el archivo en modo escritura. Si el archivo no existe, se crea."
    },
    {
        "input": "¿Qué es una excepción en Python?",
        "output": "Es un error que ocurre durante la ejecución. Puedes manejarlo con bloques try-except."
    },
    {
        "input": "¿Cómo manejo una excepción?",
        "output": "Usa `try` y `except`. Ejemplo: `try: print(1/0) except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué es un diccionario en Python?",
        "output": "Es una colección de pares clave-valor. Ejemplo: `mi_diccionario = {'nombre': 'Juan', 'edad': 25}`."
    },
    {
        "input": "¿Cómo accedo a un valor en un diccionario?",
        "output": "Usa la clave. Ejemplo: `mi_diccionario['nombre']` devuelve 'Juan'."
    },
    {
        "input": "¿Cómo puedo eliminar un elemento de un diccionario?",
        "output": "Usa `del`. Ejemplo: `del mi_diccionario['nombre']`."
    },
    {
        "input": "¿Qué librerías me recomiendas?",
        "output": "Para análisis de datos: pandas, numpy. Para gráficos: matplotlib, seaborn. Para IA: tensorflow, pytorch."
    },
    {
        "input": "¿Qué es pandas?",
        "output": "Pandas es una librería para manipulación y análisis de datos en Python."
    },
    {
        "input": "¿Cómo cargo datos en pandas?",
        "output": "Usa `pd.read_csv()` para archivos CSV. Ejemplo: `df = pd.read_csv('datos.csv')`."
    },
    {
        "input": "¿Qué es matplotlib?",
        "output": "Matplotlib es una librería para crear gráficos en Python. Ejemplo: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "¿Qué es Flask?",
        "output": "Flask es un framework ligero para crear aplicaciones web en Python."
    },
    {
        "input": "¿Cómo creo una API con Flask?",
        "output": "Define una ruta con un decorador: `@app.route('/')`. Ejemplo: `from flask import Flask; app = Flask(__name__); @app.route('/'): return 'Hola'`."
    },
    {
        "input": "¿Dónde se encuentra Guatemala?",
        "output": "Guatemala está en América Central, al sur de México."
    },
    {
        "input": "¿Cuál es la capital de Guatemala?",
        "output": "La capital de Guatemala es Ciudad de Guatemala."
    },
    {
        "input": "¿Cuál es la moneda de Guatemala?",
        "output": "La moneda de Guatemala es el quetzal."
    },
    {
        "input": "¿Qué idioma se habla en Guatemala?",
        "output": "El idioma oficial de Guatemala es el español, pero también se hablan 22 idiomas mayas."
    },
    {
        "input": "¿Cuál es el ave nacional de Guatemala?",
        "output": "El ave nacional de Guatemala es el quetzal."
    },
    {
        "input": "¿Qué significa el nombre Guatemala?",
        "output": "Guatemala proviene del náhuatl 'Quauhtlemallan', que significa 'lugar de muchos árboles'."
    },
    {
        "input": "¿Qué es el fiambre?",
        "output": "El fiambre es un plato tradicional guatemalteco que se come el Día de los Santos."
    },
    {
        "input": "¿Cuándo se celebra la independencia de Guatemala?",
        "output": "La independencia de Guatemala se celebra el 15 de septiembre."
    },
    {
        "input": "¿Qué es el Popol Vuh?",
        "output": "El Popol Vuh es un libro sagrado de los mayas quichés."
    },
    {
        "input": "¿Qué es el huipil?",
        "output": "El huipil es una prenda tradicional utilizada por las mujeres indígenas de Guatemala."
    },
    {
        "input": "¿Cuál es el sitio arqueológico más famoso de Guatemala?",
        "output": "El sitio arqueológico más famoso es Tikal, una antigua ciudad maya."
    },
    {
        "input": "¿Qué es el marimba?",
        "output": "La marimba es el instrumento musical nacional de Guatemala."
    },
    {
        "input": "¿Qué es el Rincón del Café?",
        "output": "Guatemala es conocida por producir algunos de los mejores cafés del mundo."
    },
    {
        "input": "¿Qué es la Semana Santa en Guatemala?",
        "output": "Es una celebración religiosa famosa por sus alfombras de aserrín y procesiones."
    },
    {
        "input": "¿Qué es el lago Atitlán?",
        "output": "El lago Atitlán es un lago volcánico rodeado de pueblos indígenas y volcanes."
    },
    {
        "input": "¿Cuántos departamentos tiene Guatemala?",
        "output": "Guatemala tiene 22 departamentos."
    },
    {
        "input": "¿Qué son las ruinas de Quiriguá?",
        "output": "Son un sitio arqueológico maya conocido por sus estelas de piedra tallada."
    },
    {
        "input": "¿Quién fue Miguel Ángel Asturias?",
        "output": "Miguel Ángel Asturias fue un escritor guatemalteco que ganó el Premio Nobel de Literatura en 1967."
    },
    {
        "input": "¿Qué son los barriletes gigantes?",
        "output": "Son cometas enormes que se vuelan durante el Día de los Santos en Sumpango y Santiago Sacatepéquez."
    },
    {
        "input": "¿Qué es la comida típica de Guatemala?",
        "output": "Algunos platos típicos son el pepián, los tamales, los chuchitos y el kak'ik."
    },
    {
        "input": "¿Qué es el Monumento a Tecún Umán?",
        "output": "Es un monumento en honor al héroe nacional y último líder maya k'iche'."
    },
    {
        "input": "¿Qué es Antigua Guatemala?",
        "output": "Antigua Guatemala es una ciudad colonial y Patrimonio de la Humanidad por la UNESCO."
    },
    {
        "input": "¿Qué es el jade en la cultura guatemalteca?",
        "output": "El jade era una piedra sagrada para los antiguos mayas y sigue siendo importante en Guatemala."
    },
    {
        "input": "¿Qué es el Rabinal Achí?",
        "output": "Es una obra teatral maya reconocida como Patrimonio Oral e Inmaterial de la Humanidad."
    },
    {
        "input": "¿Qué son los volcanes de Guatemala?",
        "output": "Guatemala tiene más de 30 volcanes, siendo el Volcán de Fuego y el Pacaya los más activos."
    },
    {
        "input": "¿Qué es el paabanc?",
        "output": "El paabanc es una ceremonia tradicional maya celebrada en Alta Verapaz."
    },
    {
        "input": "¿Qué es el cacao para los mayas?",
        "output": "El cacao era considerado una bebida sagrada y se usaba como moneda."
    },
    {
        "input": "¿Qué es Chichicastenango?",
        "output": "Es un pueblo famoso por su mercado tradicional y su iglesia, Santo Tomás."
    },
    {
        "input": "¿Qué es el Museo Ixchel?",
        "output": "Es un museo en Ciudad de Guatemala dedicado al arte textil indígena."
    },
    {
        "input": "¿Qué son los tejidos guatemaltecos?",
        "output": "Son textiles coloridos hechos a mano que reflejan la cultura indígena."
    },
    {
        "input": "¿Qué es el Parque Nacional Tikal?",
        "output": "Es un parque que alberga ruinas mayas y es Patrimonio de la Humanidad."
    },
    {
        "input": "¿Qué representa la bandera de Guatemala?",
        "output": "Sus franjas azules representan los océanos Atlántico y Pacífico, y el blanco la paz."
    },
    {
        "input": "¿Qué es el Palo Volador?",
        "output": "Es una danza ceremonial maya practicada en Joyabaj, Quiché."
    },
    {
        "input": "¿Qué es el Carnaval de Mazatenango?",
        "output": "Es una de las festividades más importantes del país, celebrada con desfiles y música."
    },
    {
        "input": "¿Qué es el festival de Santiago Atitlán?",
        "output": "Es una celebración en honor a Maximón, una figura sincrética venerada localmente."
    },
    {
        "input": "¿Qué es la zona arqueológica de Yaxhá?",
        "output": "Es una antigua ciudad maya ubicada cerca del lago Yaxhá."
    },
    {
        "input": "¿Qué son los chiles rellenos guatemaltecos?",
        "output": "Son chiles poblanos rellenos de carne y verduras, servidos con salsa de tomate."
    },
    {
        "input": "¿Qué es el Día del Ejército en Guatemala?",
        "output": "Es una festividad nacional que se celebra el 30 de junio."
    },
    {
        "input": "¿Qué es el río Dulce?",
        "output": "Es un río importante que conecta el lago de Izabal con el mar Caribe."
    },
    {
        "input": "¿Qué es el Palacio Nacional de la Cultura?",
        "output": "Es un edificio histórico en Ciudad de Guatemala que simboliza la unidad nacional."
    },
    {
        "input": "¿Qué son los mayas?",
        "output": "Los mayas son una civilización precolombina que dejó un legado cultural significativo en Guatemala."
    },
    {
        "input": "¿Qué es el calendario maya?",
        "output": "Es un sistema complejo de calendarios utilizado por la civilización maya."
    },
    {
        "input": "¿Qué es la música de marimba?",
        "output": "Es un estilo musical tradicional interpretado con marimbas, muy popular en Guatemala."
    },
    {
        "input": "¿Qué es el Día de los Difuntos en Guatemala?",
        "output": "Es una celebración donde las familias honran a sus muertos con comida y ofrendas."
    },
    {
        "input": "¿Qué es el parque Semuc Champey?",
        "output": "Es un lugar natural famoso por sus pozas de agua turquesa en Alta Verapaz."
    },
    {
        "input": "¿Qué es el festival de barriletes gigantes?",
        "output": "Es un evento cultural en el que se vuelan cometas enormes durante el Día de Todos los Santos."
    },
    {
        "input": "¿Qué es el tamal guatemalteco?",
        "output": "Es una masa de maíz rellena de carne y salsa, envuelta en hojas y cocida al vapor."
    },
    {
        "input": "¿Qué es el café de Antigua?",
        "output": "Es un café de alta calidad cultivado en las montañas de Antigua Guatemala."
    },
    {
        "input": "¿Qué es la Ceiba?",
        "output": "La Ceiba es el árbol nacional de Guatemala, sagrado para los mayas."
    },
    {
        "input": "¿Qué es la feria de Cobán?",
        "output": "Es una festividad en Alta Verapaz conocida por el concurso de la Rabin Ajaw, 'Hija del Rey'."
    },
    {
        "input": "¿Cómo descargo Python?",
        "output": "Ve a la página oficial de Python en python.org, selecciona tu sistema operativo y descarga el instalador."
    },
    {
        "input": "¿Qué versión de Python debería usar?",
        "output": "Te recomiendo usar la última versión estable, a menos que estés trabajando en un proyecto que requiera una versión específica."
    },
    {
        "input": "¿Cómo verifico si Python está instalado en mi computadora?",
        "output": "Abre la terminal y escribe `python --version` o `python3 --version`."
    },
    {
        "input": "¿Cómo instalo Visual Studio Code?",
        "output": "Descárgalo desde code.visualstudio.com, sigue las instrucciones de instalación y luego agrega la extensión de Python."
    },
    {
        "input": "¿Qué es Jupyter Notebook?",
        "output": "Es una herramienta interactiva para escribir y ejecutar código Python, ideal para análisis de datos y aprendizaje."
    },
    {
        "input": "¿Qué diferencia hay entre listas y tuplas en Python?",
        "output": "Las listas son mutables, puedes cambiarlas después de crearlas. Las tuplas son inmutables."
    },
    {
        "input": "¿Cómo convierto una lista en una tupla?",
        "output": "Usa la función `tuple()`. Ejemplo: `mi_tupla = tuple(mi_lista)`."
    },
    {
        "input": "¿Qué es una comprensión de listas?",
        "output": "Es una forma concisa de crear listas. Ejemplo: `cuadrados = [x**2 for x in range(5)]`."
    },
    {
        "input": "¿Cómo funciona un bucle while en Python?",
        "output": "Un bucle while repite el código mientras una condición sea verdadera. Ejemplo: `while x < 5: print(x); x += 1`."
    },
    {
        "input": "¿Cómo detengo un bucle infinito?",
        "output": "Usa la combinación de teclas `Ctrl + C` en la terminal para detenerlo."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Es un objeto que permite recorrer elementos uno a uno. Ejemplo: `iterador = iter([1, 2, 3])`."
    },
    {
        "input": "¿Cómo declaro una función con parámetros opcionales?",
        "output": "Define valores predeterminados para los parámetros. Ejemplo: `def saludar(nombre='Amigo'): print('Hola', nombre)`."
    },
    {
        "input": "¿Qué es un decorador?",
        "output": "Es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador` antes de la definición de una función."
    },
    {
        "input": "¿Cómo manejo múltiples excepciones?",
        "output": "Usa múltiples bloques except o agrupa las excepciones. Ejemplo: `except (ValueError, TypeError):`."
    },
    {
        "input": "¿Qué tipos de datos soporta un diccionario?",
        "output": "Las claves deben ser inmutables (como cadenas, números o tuplas), y los valores pueden ser de cualquier tipo."
    },
    {
        "input": "¿Cómo verifico si una clave existe en un diccionario?",
        "output": "Usa el operador `in`. Ejemplo: `if 'nombre' in mi_diccionario:`."
    },
    {
        "input": "¿Cómo agrego un elemento a un diccionario?",
        "output": "Asignando una nueva clave-valor. Ejemplo: `mi_diccionario['edad'] = 30`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista?",
        "output": "Usa el método `remove()` o la instrucción `del`. Ejemplo: `mi_lista.remove(2)`."
    },
    {
        "input": "¿Qué es un DataFrame en pandas?",
        "output": "Es una estructura tabular de datos similar a una tabla en una base de datos o una hoja de cálculo."
    },
    {
        "input": "¿Cómo elimino columnas en pandas?",
        "output": "Usa `drop()`. Ejemplo: `df = df.drop('columna', axis=1)`."
    },
    {
        "input": "¿Cómo filtro datos en pandas?",
        "output": "Usa condiciones. Ejemplo: `df_filtrado = df[df['columna'] > 10]`."
    },
    {
        "input": "¿Cómo instalo pandas?",
        "output": "Ejecuta `pip install pandas` en la terminal."
    },
    {
        "input": "¿Qué otros frameworks web hay además de Flask?",
        "output": "Puedes usar Django, FastAPI o Tornado, dependiendo de tus necesidades."
    },
    {
        "input": "¿Cómo inicio un servidor en Flask?",
        "output": "Ejecuta `python app.py` y Flask iniciará el servidor local."
    },
    {
        "input": "¿Cómo manejo rutas dinámicas en Flask?",
        "output": "Usa variables en las rutas. Ejemplo: `@app.route('/usuario/<nombre>')`."
    },
    {
        "input": "¿Qué es matplotlib?",
        "output": "Es una librería para crear gráficos en Python. Ejemplo: `plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "¿Cómo guardo un gráfico en matplotlib?",
        "output": "Usa `plt.savefig('grafico.png')` antes de `plt.show()`."
    },
    {
        "input": "¿Qué otros paquetes hay para gráficos?",
        "output": "Prueba seaborn para gráficos más estéticos o plotly para gráficos interactivos."
    },
    {
        "input": "¿Qué es una librería en Python?",
        "output": "Es un conjunto de funciones y herramientas que puedes usar para facilitar tu trabajo. Ejemplo: requests para trabajar con APIs."
    },
    {
        "input": "¿Cómo creo mi propia librería en Python?",
        "output": "Escribe tus funciones en un archivo `.py` y luego impórtalas con `import`. Para algo más avanzado, crea un paquete con `setup.py`."
    },
    {
        "input": "¿Qué es una API?",
        "output": "Es una interfaz que permite que dos aplicaciones se comuniquen entre sí. Puedes usar APIs para obtener o enviar datos."
    },
    {
        "input": "¿Cómo llamo a una API en Python?",
        "output": "Usa la librería `requests`. Ejemplo: `import requests; response = requests.get('https://api.ejemplo.com'); print(response.json())`."
    },
    {
        "input": "¿Cuál es la diferencia entre Python 2 y Python 3?",
        "output": "Python 3 es la versión actual y tiene mejoras significativas sobre Python 2, como mejor soporte para Unicode y funciones más modernas."
    },
    {
        "input": "¿Por qué debería aprender Python?",
        "output": "Python es fácil de aprender, versátil y tiene una gran comunidad de apoyo. Es ideal para principiantes y para proyectos avanzados."
    },
    {
        "input": "¿Qué puedo hacer con Python además de desarrollo web?",
        "output": "Puedes usar Python para análisis de datos, aprendizaje automático, automatización de tareas, videojuegos y mucho más."
    },
    {
        "input": "¿Python es más lento que otros lenguajes?",
        "output": "Python puede ser más lento que lenguajes compilados como C o Java, pero su simplicidad y bibliotecas compensan esto en muchos casos."
    },
    {
        "input": "¿Cómo verifico el tipo de una variable en Python?",
        "output": "Usa la función `type()`. Ejemplo: `print(type(mi_variable))`."
    },
    {
        "input": "¿Cómo convierto una cadena en un número?",
        "output": "Usa `int()` para enteros o `float()` para decimales. Ejemplo: `numero = int('123')`."
    },
    {
        "input": "¿Qué significa indentación en Python?",
        "output": "La indentación organiza el código y define bloques como funciones o bucles. En Python, es obligatoria."
    },
    {
        "input": "¿Cómo configuro Python en Windows?",
        "output": "Descarga Python desde python.org, ejecuta el instalador y selecciona 'Agregar Python al PATH' durante la instalación."
    },
    {
        "input": "¿Cómo instalo Python en Linux?",
        "output": "Usa el gestor de paquetes de tu distribución. Por ejemplo, en Ubuntu: `sudo apt install python3`."
    },
    {
        "input": "¿Cómo configuro un entorno virtual en Python?",
        "output": "Usa `python -m venv nombre_entorno`. Luego actívalo con `source nombre_entorno/bin/activate` en Linux/Mac o `nombre_entorno\\Scripts\\activate` en Windows."
    },
    {
        "input": "¿Qué hago si tengo varias versiones de Python instaladas?",
        "output": "Usa comandos específicos como `python3` o configura un alias para la versión que deseas usar."
    },
    {
        "input": "¿Cómo puedo ordenar una lista en Python?",
        "output": "Usa el método `sort()` para ordenar en su lugar o `sorted()` para obtener una nueva lista ordenada."
    },
    {
        "input": "¿Qué hago si quiero eliminar duplicados de una lista?",
        "output": "Convierte la lista en un conjunto con `set()` y luego vuelve a convertirla en lista. Ejemplo: `lista_sin_duplicados = list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo fusiono dos diccionarios?",
        "output": "En Python 3.9 o superior, usa el operador `|`. Ejemplo: `nuevo_diccionario = dic1 | dic2`."
    },
    {
        "input": "¿Qué tipos de excepciones existen en Python?",
        "output": "Algunos ejemplos comunes son: `ValueError`, `TypeError`, `KeyError`, `IndexError`, y `ZeroDivisionError`."
    },
    {
        "input": "¿Cómo creo mis propias excepciones?",
        "output": "Crea una clase que herede de `Exception`. Ejemplo: `class MiError(Exception): pass`."
    },
    {
        "input": "¿Cómo capturo cualquier error?",
        "output": "Usa `except Exception as e:` para capturar cualquier tipo de excepción."
    },
    {
        "input": "¿Cómo agrego una nueva columna a un DataFrame?",
        "output": "Asignando directamente. Ejemplo: `df['nueva_columna'] = valores`."
    },
    {
        "input": "¿Qué hago si mi DataFrame es muy grande?",
        "output": "Puedes usar `chunksize` al leer datos con `pd.read_csv()` o herramientas como Dask para grandes conjuntos de datos."
    },
    {
        "input": "¿Cómo elimino filas con valores nulos?",
        "output": "Usa `df.dropna()`. También puedes especificar columnas con `subset`."
    },
    {
        "input": "¿Cómo configuro un entorno de desarrollo en Flask?",
        "output": "Activa el modo de desarrollo con `app.run(debug=True)` o configurando la variable de entorno `FLASK_ENV=development`."
    },
    {
        "input": "¿Cómo manejo formularios en Flask?",
        "output": "Usa el método POST para recibir datos del formulario. Ejemplo: `request.form['campo']`."
    },
    {
        "input": "¿Cómo protejo mi aplicación Flask?",
        "output": "Usa extensiones como Flask-Login para autenticación y Flask-WTF para formularios seguros."
    },
    {
        "input": "¿Cómo cambio el color de un gráfico?",
        "output": "Usa el parámetro `color` en el método de trazado. Ejemplo: `plt.plot(x, y, color='red')`."
    },
    {
        "input": "¿Cómo agrego una leyenda a mi gráfico?",
        "output": "Usa `plt.legend()` y pasa una lista de etiquetas. Ejemplo: `plt.legend(['Serie 1'])`."
    },
    {
        "input": "¿Cómo creo un gráfico de barras?",
        "output": "Usa `plt.bar()`. Ejemplo: `plt.bar(x, y)`."
    },
    {
        "input": "¿Cómo programo tareas repetitivas con Python?",
        "output": "Usa la librería `schedule` para programar tareas o el módulo `time` para usar intervalos de tiempo."
    },
    {
        "input": "¿Cómo ejecuto un script automáticamente?",
        "output": "En Linux, usa cron. En Windows, usa el Programador de Tareas."
    },
    {
        "input": "¿Qué puedo automatizar con Python?",
        "output": "Puedes automatizar el manejo de archivos, correos electrónicos, scraping web y muchas otras tareas repetitivas."
    },
    {
        "input": "¿Qué es Xela?",
        "output": "Xela es el nombre coloquial de Quetzaltenango, una ciudad en el occidente de Guatemala."
    },
    {
        "input": "¿Dónde está ubicada Xela?",
        "output": "Xela está en el altiplano occidental de Guatemala, en el departamento de Quetzaltenango."
    },
    {
        "input": "¿Por qué se llama Xela?",
        "output": "Xela proviene de 'Xelajú', un nombre k'iche' que significa 'bajo las diez ideas' o 'diez cerros'."
    },
    {
        "input": "¿Qué idioma se habla en Xela?",
        "output": "El español es el idioma principal, pero también se habla k'iche' en muchas comunidades."
    },
    {
        "input": "¿Cuál es el clima de Xela?",
        "output": "El clima de Xela es templado y frío, con temperaturas que suelen bajar en la noche."
    },
    {
        "input": "¿Qué es el Cerro El Baúl?",
        "output": "El Cerro El Baúl es un parque ecológico y uno de los lugares más emblemáticos de Xela."
    },
    {
        "input": "¿Qué es la Feria de Independencia?",
        "output": "Es una celebración anual en Xela que conmemora la independencia de Guatemala, con actividades culturales y desfiles."
    },
    {
        "input": "¿Qué platos típicos se comen en Xela?",
        "output": "Algunos platos típicos son los chuchitos, el pepián y las garnachas."
    },
    {
        "input": "¿Qué significa Quetzaltenango?",
        "output": "Quetzaltenango significa 'muralla del quetzal' en náhuatl."
    },
    {
        "input": "¿Qué es el Teatro Municipal de Xela?",
        "output": "Es un teatro histórico construido en el siglo XIX, famoso por su arquitectura y eventos culturales."
    },
    {
        "input": "¿Qué es el Mercado de La Democracia?",
        "output": "Es un mercado popular en Xela conocido por su variedad de productos locales y artesanales."
    },
    {
        "input": "¿Qué deportes son populares en Xela?",
        "output": "El fútbol es muy popular, y el equipo más famoso es el CSD Xelajú MC."
    },
    {
        "input": "¿Qué es el Parque Centroamérica?",
        "output": "Es la plaza central de Xela, rodeada de edificios históricos y un lugar de reunión popular."
    },
    {
        "input": "¿Qué es el Monumento a la Marimba?",
        "output": "Es un monumento dedicado a la marimba, el instrumento musical nacional de Guatemala, ubicado en Xela."
    },
    {
        "input": "¿Qué volcanes están cerca de Xela?",
        "output": "Cerca de Xela están los volcanes Santa María, Santiaguito y Cerro Quemado."
    },
    {
        "input": "¿Qué es el volcán Santa María?",
        "output": "Es un volcán activo cerca de Xela, popular entre los excursionistas y famoso por sus vistas."
    },
    {
        "input": "¿Qué es el volcán Santiaguito?",
        "output": "Es un volcán muy activo, ubicado en la base del volcán Santa María."
    },
    {
        "input": "¿Qué festividades importantes se celebran en Xela?",
        "output": "Las principales festividades incluyen la Feria de Independencia y las celebraciones de Semana Santa."
    },
    {
        "input": "¿Qué es Casa No'j?",
        "output": "Es un centro cultural en Xela que promueve el arte, la música y la cultura local."
    },
    {
        "input": "¿Qué lugares turísticos hay en Xela?",
        "output": "Algunos lugares turísticos incluyen el Parque Centroamérica, el Teatro Municipal y los baños termales de Fuentes Georginas."
    },
    {
        "input": "¿Qué son las Fuentes Georginas?",
        "output": "Son baños termales naturales ubicados cerca de Xela, famosos por sus aguas calientes y vistas naturales."
    },
    {
        "input": "¿Qué son las chicharras?",
        "output": "Las chicharras son un aperitivo típico de Xela hecho de tortillas fritas con carne y salsa."
    },
    {
        "input": "¿Qué es el Museo de Historia Natural de Xela?",
        "output": "Es un museo que exhibe colecciones de historia natural, arqueología y cultura de la región."
    },
    {
        "input": "¿Qué es el Cementerio General de Xela?",
        "output": "Es un cementerio histórico conocido por sus mausoleos y arquitectura distintiva."
    },
    {
        "input": "¿Qué deportes extremos se pueden practicar cerca de Xela?",
        "output": "Cerca de Xela puedes practicar senderismo, escalada de volcanes y ciclismo de montaña."
    },
    {
        "input": "¿Qué universidades hay en Xela?",
        "output": "Algunas universidades en Xela incluyen la Universidad de San Carlos y la Universidad Mesoamericana."
    },
    {
        "input": "¿Qué es Almolonga?",
        "output": "Es un municipio cerca de Xela conocido como 'la huerta de América' por su producción agrícola."
    },
    {
        "input": "¿Qué son los barriletes de Todos Santos?",
        "output": "Son cometas gigantes que se vuelan en Santiago Sacatepéquez y Sumpango durante el Día de Todos los Santos."
    },
    {
        "input": "¿Qué importancia tiene Xela en Guatemala?",
        "output": "Xela es la segunda ciudad más grande de Guatemala y un importante centro cultural y educativo."
    },
    {
        "input": "¿Qué actividades culturales hay en Xela?",
        "output": "Xela ofrece teatro, conciertos, exposiciones de arte y festivales tradicionales."
    },
    {
        "input": "¿Qué grupos indígenas viven en Xela?",
        "output": "En Xela viven principalmente personas de origen maya k'iche'."
    },
    {
        "input": "¿Qué es el Quetzalteco?",
        "output": "El Quetzalteco es el gentilicio de las personas que viven en Quetzaltenango."
    },
    {
        "input": "¿Qué es el Mirador de la Cuchilla?",
        "output": "Es un lugar popular en Xela para ver el amanecer y las vistas de la ciudad."
    },
    {
        "input": "¿Qué bebidas típicas hay en Xela?",
        "output": "Algunas bebidas típicas son el atol de elote y el chocolate caliente."
    },
    {
        "input": "¿Qué es la Catedral del Espíritu Santo?",
        "output": "Es una iglesia histórica ubicada en el Parque Centroamérica, conocida por su arquitectura."
    },
    {
        "input": "¿Qué mercados tradicionales hay en Xela?",
        "output": "Además del Mercado de La Democracia, el Mercado Minerva es otro mercado popular."
    },
    {
        "input": "¿Qué actividades se pueden hacer en los alrededores de Xela?",
        "output": "Puedes visitar pueblos cercanos, como Zunil y Almolonga, y explorar volcanes o termales."
    },
    {
        "input": "¿Qué es la Iglesia de San Nicolás?",
        "output": "Es una iglesia histórica ubicada en el centro de Xela."
    },
    {
        "input": "¿Qué artesanías se producen en Xela?",
        "output": "En Xela se producen tejidos, cerámica y objetos de madera tallada."
    },
    {
        "input": "¿Qué es el Campus Central de la USAC en Xela?",
        "output": "Es una extensión de la Universidad de San Carlos en Quetzaltenango."
    },
    {
        "input": "¿Qué mercados culturales hay en Xela?",
        "output": "El Centro Intercultural de Quetzaltenango organiza actividades y mercados culturales."
    },
    {
        "input": "¿Qué es el Salcajá?",
        "output": "Salcajá es un municipio cercano a Xela famoso por su iglesia colonial y su bebida tradicional, el caldo de frutas."
    },
    {
        "input": "¿Qué es el caldo de frutas?",
        "output": "Es una bebida alcohólica tradicional de Salcajá, hecha con frutas fermentadas."
    },
    {
        "input": "¿Qué es la feria de Xela?",
        "output": "La feria de Xela celebra la independencia de Guatemala con desfiles, comida y actividades culturales."
    },
    {
        "input": "¿Qué fiestas religiosas son populares en Xela?",
        "output": "Semana Santa y las celebraciones de los santos patronos son muy importantes."
    },
    {
        "input": "¿Qué papel tiene Xela en la educación?",
        "output": "Xela es un centro educativo clave, con varias universidades e institutos."
    },
    {
        "input": "¿Qué productos agrícolas son importantes en Xela?",
        "output": "En Xela se cultivan maíz, frijoles y vegetales, especialmente en zonas como Almolonga."
    },
    {
        "input": "¿Qué rutas turísticas hay en Xela?",
        "output": "Rutas populares incluyen visitas a volcanes, termales y comunidades indígenas."
    },
    {
        "input": "¿Qué es Zunil?",
        "output": "Zunil es un pueblo cercano a Xela conocido por sus aguas termales y su iglesia colonial."
    },
    {
        "input": "¿Qué es un videojuego?",
        "output": "Un videojuego es un juego electrónico interactivo que involucra una interfaz de usuario para generar interacción con una pantalla."
    },
    {
        "input": "¿Quién inventó los videojuegos?",
        "output": "El primer videojuego fue creado por William Higinbotham en 1958, llamado 'Tennis for Two'."
    },
    {
        "input": "¿Cuál es la consola más vendida de la historia?",
        "output": "La consola más vendida de la historia es la PlayStation 2, con más de 155 millones de unidades vendidas."
    },
    {
        "input": "¿Qué es un 'eSports'?",
        "output": "'eSports' se refiere a las competiciones de videojuegos organizadas profesionalmente, donde los jugadores compiten en eventos para ganar premios."
    },
    {
        "input": "¿Qué es una PC Gamer?",
        "output": "Una PC Gamer es una computadora diseñada específicamente para jugar videojuegos, con componentes de alto rendimiento como tarjetas gráficas y procesadores rápidos."
    },
    {
        "input": "¿Qué es un 'streamer'?",
        "output": "Un 'streamer' es una persona que transmite en vivo sus sesiones de videojuegos a través de plataformas como Twitch o YouTube."
    },
    {
        "input": "¿Qué es el videojuego Fortnite?",
        "output": "Fortnite es un videojuego de batalla real desarrollado por Epic Games, popular por su modo multijugador en línea y su estilo de construcción."
    },
    {
        "input": "¿Qué es Minecraft?",
        "output": "Minecraft es un videojuego de construcción y aventura que permite a los jugadores explorar un mundo abierto, recolectar recursos y crear estructuras."
    },
    {
        "input": "¿Qué es un videojuego de rol?",
        "output": "Un videojuego de rol (RPG) es un juego en el que los jugadores asumen los roles de personajes dentro de una narrativa ficticia."
    },
    {
        "input": "¿Cuál es el videojuego más vendido de todos los tiempos?",
        "output": "El videojuego más vendido de todos los tiempos es 'Minecraft', con más de 200 millones de copias vendidas."
    },
    {
        "input": "¿Qué es un 'Battle Royale'?",
        "output": "Un 'Battle Royale' es un género de videojuego en el que los jugadores compiten entre sí hasta que solo quede uno de pie, como en Fortnite o PUBG."
    },
    {
        "input": "¿Qué es un juego de lucha?",
        "output": "Un juego de lucha es un videojuego donde los jugadores controlan personajes que luchan entre sí, como Street Fighter o Mortal Kombat."
    },
    {
        "input": "¿Qué es un 'Open World'?",
        "output": "Un 'Open World' es un tipo de videojuego que permite a los jugadores explorar un mundo abierto sin restricciones lineales, como en The Witcher 3."
    },
    {
        "input": "¿Qué es un 'sandbox'?",
        "output": "Un 'sandbox' es un tipo de videojuego que permite a los jugadores interactuar con el mundo del juego de forma libre y creativa, como en Minecraft o Grand Theft Auto."
    },
    {
        "input": "¿Qué es un 'MMORPG'?",
        "output": "'MMORPG' significa 'Massively Multiplayer Online Role-Playing Game', un juego de rol multijugador masivo en línea, como World of Warcraft."
    },
    {
        "input": "¿Qué es un juego de estrategia?",
        "output": "Un juego de estrategia es un videojuego en el que los jugadores toman decisiones tácticas y estratégicas para superar desafíos, como en Starcraft."
    },
    {
        "input": "¿Qué es una 'expansión' en los videojuegos?",
        "output": "Una expansión es un contenido adicional para un videojuego, que agrega nuevas misiones, personajes o mapas."
    },
    {
        "input": "¿Qué es un 'DLC'?",
        "output": "'DLC' significa 'Downloadable Content' y es contenido adicional descargable para un videojuego, como nuevas misiones o personajes."
    },
    {
        "input": "¿Qué es la realidad virtual en los videojuegos?",
        "output": "La realidad virtual (VR) en los videojuegos permite una inmersión total al jugador en un mundo digital mediante el uso de gafas o cascos VR."
    },
    {
        "input": "¿Qué es el juego Super Mario Bros?",
        "output": "Super Mario Bros es un videojuego de plataformas creado por Nintendo, protagonizado por Mario, un fontanero que debe salvar a la Princesa Peach."
    },
    {
        "input": "¿Qué es un 'speedrun'?",
        "output": "Un 'speedrun' es un intento de completar un videojuego o una sección de él lo más rápido posible, utilizando trucos y técnicas avanzadas."
    },
    {
        "input": "¿Qué es un 'gamer'?",
        "output": "Un 'gamer' es una persona que juega videojuegos de manera regular o profesional."
    },
    {
        "input": "¿Qué es un 'boss' en los videojuegos?",
        "output": "Un 'boss' es un enemigo o jefe final que el jugador debe derrotar para avanzar en un videojuego."
    },
    {
        "input": "¿Qué es un videojuego de disparos?",
        "output": "Un videojuego de disparos es un juego en el que los jugadores usan armas para disparar a enemigos o alcanzar objetivos, como en Call of Duty."
    },
    {
        "input": "¿Qué es 'Grand Theft Auto'?",
        "output": "Grand Theft Auto (GTA) es una serie de videojuegos de acción y aventura donde los jugadores realizan misiones en un mundo abierto."
    },
    {
        "input": "¿Qué es un juego de simulación?",
        "output": "Un juego de simulación busca recrear situaciones reales, como en Los Sims o SimCity."
    },
    {
        "input": "¿Qué es un juego de plataformas?",
        "output": "Un juego de plataformas es un tipo de videojuego en el que el jugador controla un personaje que salta entre plataformas, como en Sonic o Super Mario."
    },
    {
        "input": "¿Qué es un 'RPG'?",
        "output": "'RPG' significa 'Role Playing Game' y es un tipo de videojuego donde los jugadores asumen roles de personajes dentro de una historia."
    },
    {
        "input": "¿Qué es League of Legends?",
        "output": "League of Legends es un videojuego de estrategia en tiempo real de tipo MOBA, donde dos equipos de cinco jugadores se enfrentan en partidas tácticas."
    },
    {
        "input": "¿Qué es Fortnite?",
        "output": "Fortnite es un juego de batalla real y construcción en línea desarrollado por Epic Games, popular por su modo de juego competitivo."
    },
    {
        "input": "¿Qué es el modo cooperativo?",
        "output": "El modo cooperativo es un tipo de juego en el que varios jugadores colaboran entre sí para lograr un objetivo común."
    },
    {
        "input": "¿Qué es 'Call of Duty'?",
        "output": "Call of Duty es una popular serie de videojuegos de disparos en primera persona, ambientados en diversas guerras y conflictos históricos."
    },
    {
        "input": "¿Qué es un juego de rol de acción?",
        "output": "Un juego de rol de acción combina elementos de RPG con combate en tiempo real, como en Dark Souls."
    },
    {
        "input": "¿Qué es el modo multijugador?",
        "output": "El modo multijugador permite a varios jugadores jugar juntos en línea o en una misma consola, como en FIFA o Rocket League."
    },
    {
        "input": "¿Qué es un 'loot box'?",
        "output": "Un 'loot box' es una caja virtual en los videojuegos que contiene objetos aleatorios que los jugadores pueden desbloquear."
    },
    {
        "input": "¿Qué es un 'MMO'?",
        "output": "'MMO' significa 'Massively Multiplayer Online', y son juegos en línea que permiten a miles de jugadores interactuar en el mismo mundo."
    },
    {
        "input": "¿Qué es un 'puzzle' en videojuegos?",
        "output": "Un 'puzzle' es un tipo de videojuego en el que los jugadores deben resolver rompecabezas o desafíos mentales."
    },
    {
        "input": "¿Qué es un 'sandbox'?",
        "output": "Un 'sandbox' es un tipo de videojuego que ofrece libertad al jugador para explorar y crear, sin un objetivo específico."
    },
    {
        "input": "¿Qué es un videojuego de carreras?",
        "output": "Un videojuego de carreras es un tipo de juego en el que los jugadores compiten en vehículos para llegar a la meta antes que los demás, como en Mario Kart."
    },
    {
        "input": "¿Qué es The Legend of Zelda?",
        "output": "The Legend of Zelda es una famosa serie de videojuegos de acción y aventura de Nintendo, donde los jugadores controlan a Link para salvar a la Princesa Zelda."
    },
    {
        "input": "¿Qué es Pac-Man?",
        "output": "Pac-Man es un clásico videojuego de arcade donde los jugadores controlan a un personaje amarillo que debe comer puntos y evitar fantasmas."
    },
    {
        "input": "¿Qué es un juego de supervivencia?",
        "output": "Un juego de supervivencia es un tipo de videojuego en el que los jugadores deben gestionar recursos y evitar morir en un entorno hostil, como en The Forest."
    },
    {
        "input": "¿Qué es un 'gacha'?",
        "output": "Un 'gacha' es un sistema dentro de los videojuegos, especialmente en juegos móviles, donde los jugadores pueden obtener personajes o objetos a través de sorteos."
    },
    {
        "input": "¿Qué es un 'rage quit'?",
        "output": "'Rage quit' es un término usado para describir cuando un jugador abandona un juego debido a frustración o enojo."
    },
    {
        "input": "¿Cuáles son los principales lenguajes de programación?",
        "output": "Los principales lenguajes de programación incluyen Python, Java, C++, JavaScript, Ruby y Swift."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es una secuencia de pasos o instrucciones para resolver un problema o realizar una tarea específica."
    },
    {
        "input": "¿Por qué es importante la programación?",
        "output": "La programación es importante porque es la base para el desarrollo de software, aplicaciones, sistemas y tecnologías que usamos todos los días."
    },
    {
        "input": "¿Qué es la inteligencia artificial de tipo débil?",
        "output": "La inteligencia artificial débil es aquella diseñada para realizar tareas específicas, como asistentes virtuales o recomendaciones en línea, sin tener conciencia ni entendimiento general."
    },
    {
        "input": "¿Cómo puede la inteligencia artificial cambiar el futuro?",
        "output": "La IA puede transformar muchas industrias, desde la salud y la educación hasta el transporte, ayudando a automatizar tareas, mejorar diagnósticos y optimizar procesos."
    },
    {
        "input": "¿Qué es el aprendizaje supervisado en IA?",
        "output": "El aprendizaje supervisado es un tipo de aprendizaje automático donde el modelo aprende a partir de ejemplos etiquetados, es decir, datos que ya tienen la respuesta correcta."
    },
    {
        "input": "¿Qué es un chatbot?",
        "output": "Un chatbot es un programa de inteligencia artificial diseñado para simular conversaciones humanas, utilizado para atención al cliente o como asistente virtual."
    },
    {
        "input": "¿Qué es Xela en términos históricos?",
        "output": "Xela, o Quetzaltenango, fue una de las principales ciudades del altiplano guatemalteco durante la época precolombina, habitada principalmente por los mayas k'iche'."
    },
    {
        "input": "¿Cómo afecta el clima de Xela a su agricultura?",
        "output": "El clima templado y fresco de Xela favorece la producción de productos agrícolas como vegetales, café y flores, especialmente en áreas cercanas a Almolonga."
    },
    {
        "input": "¿Qué son las Fuentes Georginas?",
        "output": "Las Fuentes Georginas son baños termales naturales ubicados cerca de Xela, conocidos por sus propiedades terapéuticas y sus hermosas vistas montañosas."
    },
    {
        "input": "¿Cuántos volcanes hay cerca de Xela?",
        "output": "Cerca de Xela hay al menos tres volcanes importantes: Santa María, Santiaguito y Cerro Quemado."
    },
    {
        "input": "¿Qué eventos culturales se celebran en Xela?",
        "output": "Xela es conocida por sus festivales de música, teatro y danza, especialmente durante la Feria de Independencia y la Semana Santa."
    },
    {
        "input": "¿Qué hace único al volcán Santa María?",
        "output": "El volcán Santa María es famoso por su gran tamaño y por la actividad volcánica reciente, siendo una de las montañas más altas de la región."
    },
    {
        "input": "¿Cómo afecta la cultura maya a Xela?",
        "output": "La cultura maya tiene una gran influencia en Xela, especialmente a través de la lengua k'iche', la gastronomía y las tradiciones religiosas y sociales."
    },
    {
        "input": "¿Qué son los 'chuchitos'?",
        "output": "Los chuchitos son un platillo típico de Guatemala, consisten en una pequeña masa de maíz rellena de carne y envuelta en hojas de maíz."
    },
    {
        "input": "¿Qué videojuegos fueron inspirados por la mitología maya?",
        "output": "Algunos videojuegos, como 'Guacamelee!' y 'Tomb Raider: The Last Revelation', tienen influencias de la mitología y cultura maya."
    },
    {
        "input": "¿Cómo afecta el uso de videojuegos en la educación?",
        "output": "Los videojuegos educativos pueden mejorar habilidades cognitivas, sociales y de resolución de problemas, y se utilizan cada vez más en el aprendizaje interactivo."
    },
    {
        "input": "¿Cuál es la diferencia entre un videojuego en 2D y 3D?",
        "output": "Un videojuego en 2D se juega en un entorno bidimensional, mientras que un juego en 3D permite movimientos en tres dimensiones, proporcionando una experiencia más inmersiva."
    },
    {
        "input": "¿Qué es un 'speedrun' y cómo se hace?",
        "output": "Un 'speedrun' es cuando un jugador intenta completar un videojuego en el menor tiempo posible, a menudo utilizando trucos o saltos en el diseño del juego."
    },
    {
        "input": "¿Qué es un juego de rol de mesa?",
        "output": "Un juego de rol de mesa es un tipo de juego en el que los jugadores asumen roles y personajes en una historia, pero se juega en persona con dados y reglas específicas, como Dungeons & Dragons."
    },
    {
        "input": "¿Cómo afecta la tecnología en los videojuegos modernos?",
        "output": "La tecnología ha permitido gráficos más realistas, mundos abiertos, inteligencia artificial avanzada, y experiencias multijugador masivas en línea."
    },
    {
        "input": "¿Qué es un 'loot box' en un videojuego?",
        "output": "'Loot box' es un sistema dentro de algunos videojuegos donde los jugadores compran o ganan cajas que contienen objetos o personajes aleatorios."
    },
    {
        "input": "¿Cuáles son los beneficios de los videojuegos de estrategia?",
        "output": "Los videojuegos de estrategia mejoran la toma de decisiones, la planificación a largo plazo, la resolución de problemas y el trabajo en equipo."
    },
    {
        "input": "¿Qué es un juego de lucha?",
        "output": "Un juego de lucha es un videojuego donde los jugadores controlan personajes que luchan entre sí, como Mortal Kombat o Street Fighter."
    },
    {
        "input": "¿Qué impacto tiene Xela en la industria cultural de Guatemala?",
        "output": "Xela es un centro cultural clave en Guatemala, con una rica tradición de teatro, música y arte, y su Feria de Independencia es un importante evento cultural del país."
    },
    {
        "input": "¿Qué significa 'sandbox' en un videojuego?",
        "output": "Un 'sandbox' es un tipo de juego en el que los jugadores tienen libertad para explorar y crear en un mundo abierto, como en Minecraft."
    },
    {
        "input": "¿Cuáles son los mejores videojuegos para PC?",
        "output": "Algunos de los mejores videojuegos para PC incluyen The Witcher 3, Red Dead Redemption 2, League of Legends, y Counter-Strike: Global Offensive."
    },
    {
        "input": "¿Qué importancia tiene Xela para los turistas?",
        "output": "Xela es una ciudad histórica y culturalmente rica, famosa por su arquitectura, volcanes cercanos, baños termales y su comunidad indígena k'iche'."
    },
    {
        "input": "¿Qué es el software libre?",
        "output": "El software libre es aquel cuyo código fuente está disponible para ser utilizado, modificado y distribuido libremente por cualquier persona."
    },
    {
        "input": "¿Qué es un 'bot' en programación?",
        "output": "Un bot es un programa diseñado para automatizar tareas, como interactuar con usuarios en línea o realizar acciones repetitivas."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "La programación orientada a objetos es un paradigma de programación que organiza el software alrededor de 'objetos', que son instancias de clases que contienen datos y métodos."
    },
    {
        "input": "¿Qué es la gamificación?",
        "output": "La gamificación es el uso de elementos y mecánicas de los videojuegos en contextos no relacionados con juegos, como educación o marketing, para motivar a las personas."
    },
    {
        "input": "¿Cuál es la historia de la saga de 'Super Mario'?",
        "output": "Super Mario es una franquicia de videojuegos creada por Nintendo, que comenzó en 1985 y se centra en las aventuras de Mario, un fontanero que rescata a la Princesa Peach."
    },
    {
        "input": "¿Cómo se hacen los gráficos en los videojuegos?",
        "output": "Los gráficos de los videojuegos se crean utilizando programas de diseño digital, que incluyen la creación de texturas, modelos 3D y la animación de personajes."
    },
    {
        "input": "¿Cuál es el origen de 'Tetris'?",
        "output": "Tetris fue creado en 1984 por Alexey Pajitnov, un científico ruso, y se ha convertido en uno de los videojuegos más populares de la historia."
    },
    {
        "input": "¿Qué es un 'boss fight' en un videojuego?",
        "output": "Un 'boss fight' es una batalla difícil contra un jefe o enemigo poderoso al final de un nivel o sección del juego."
    },
    {
        "input": "¿Qué importancia tienen los videojuegos en la salud mental?",
        "output": "Algunos estudios sugieren que los videojuegos pueden mejorar habilidades cognitivas, reducir el estrés y promover la socialización, aunque también pueden generar adicción."
    },
    {
        "input": "¿Qué es un juego 'multiplayer'?",
        "output": "Un juego 'multiplayer' es un videojuego que permite jugar con varias personas, ya sea en línea o en una consola o PC local."
    },
    {
        "input": "¿Qué es un 'MOBA'?",
        "output": "'MOBA' significa 'Multiplayer Online Battle Arena', y es un género de juegos en los que dos equipos de jugadores luchan en un campo de batalla, como en League of Legends."
    },
    {
        "input": "¿Qué es 'World of Warcraft'?",
        "output": "World of Warcraft es un MMORPG popular en el que los jugadores crean personajes para explorar el mundo de Azeroth, completar misiones y participar en batallas en línea."
    },
    {
        "input": "¿Qué es un juego 'sandbox'?",
        "output": "Un juego 'sandbox' es un tipo de videojuego en el que los jugadores tienen libertad para explorar y crear en el mundo del juego sin un objetivo predefinido."
    },
    {
        "input": "¿Qué son los 'eSports'?",
        "output": "Los 'eSports' son competiciones profesionales de videojuegos, donde jugadores o equipos se enfrentan en torneos organizados."
    },
    {
        "input": "¿Cuáles son los juegos más jugados del mundo?",
        "output": "Algunos de los juegos más jugados del mundo incluyen Fortnite, League of Legends, Minecraft, Apex Legends y Call of Duty."
    },
    {
        "input": "¿Cómo se desarrollan los videojuegos?",
        "output": "Los videojuegos se desarrollan mediante un proceso que incluye diseño, programación, creación de gráficos, pruebas y distribución."
    },
    {
        "input": "¿Qué es la interfaz de usuario en los videojuegos?",
        "output": "La interfaz de usuario en los videojuegos es la parte del juego con la que el jugador interactúa directamente, como los menús, controles y HUD (Heads-Up Display)."
    },
    {
        "input": "¿Qué es un 'game engine'?",
        "output": "Un 'game engine' es un software que permite crear y desarrollar videojuegos, gestionando aspectos como los gráficos, la física y la interacción con el usuario."
    },
    {
        "input": "¿Cuál fue el primer videojuego en 3D?",
        "output": "Uno de los primeros videojuegos en 3D fue '3D Monster Maze', lanzado en 1981."
    },
    {
        "input": "¿Qué es un videojuego de terror?",
        "output": "Un videojuego de terror está diseñado para crear una atmósfera de miedo y suspenso, con elementos de tensión, criaturas aterradoras y eventos inesperados."
    },
    {
        "input": "¿Qué es un videojuego de supervivencia?",
        "output": "Un videojuego de supervivencia es un tipo de juego donde los jugadores deben gestionar recursos y sobrevivir en un entorno hostil, como en juegos como Minecraft o Don't Starve."
    },
    {
        "input": "¿Qué significa 'NPC'?",
        "output": "'NPC' significa 'Non-Player Character' o 'Personaje No Jugador', que es un personaje controlado por la computadora en un videojuego."
    },
    {
        "input": "¿Qué es 'Minecraft'?",
        "output": "Minecraft es un videojuego de construcción y aventuras donde los jugadores pueden explorar, construir y sobrevivir en un mundo generado por bloques."
    },
    {
        "input": "¿Qué es un adaptador?",
        "output": "Un adaptador es un dispositivo que permite conectar dos componentes electrónicos o sistemas incompatibles entre sí, ajustando las señales o conexiones para que funcionen correctamente."
    },
    {
        "input": "¿Qué tipos de adaptadores existen?",
        "output": "Existen muchos tipos de adaptadores, entre ellos: adaptadores de corriente, adaptadores de video, adaptadores de red, adaptadores de audio, y adaptadores USB."
    },
    {
        "input": "¿Qué es un adaptador de corriente?",
        "output": "Un adaptador de corriente convierte la corriente eléctrica de una fuente en un voltaje adecuado para los dispositivos que alimenta, como los cargadores de teléfonos."
    },
    {
        "input": "¿Qué es un adaptador de video?",
        "output": "Un adaptador de video permite conectar dispositivos con diferentes tipos de salida de video, como VGA a HDMI, o DisplayPort a DVI."
    },
    {
        "input": "¿Qué es un adaptador USB?",
        "output": "Un adaptador USB permite la conexión de dispositivos que usan diferentes tipos de puertos USB, como USB-A a USB-C o USB a micro USB."
    },
    {
        "input": "¿Qué es un adaptador HDMI?",
        "output": "Un adaptador HDMI se utiliza para convertir una señal HDMI a otro tipo de conexión, como VGA o DisplayPort."
    },
    {
        "input": "¿Para qué sirve un adaptador de red?",
        "output": "Un adaptador de red permite conectar un dispositivo a una red, ya sea a través de Wi-Fi, Ethernet o mediante un puerto de conexión diferente."
    },
    {
        "input": "¿Qué es un adaptador de audio?",
        "output": "Un adaptador de audio convierte señales de audio de un formato a otro, por ejemplo, de 3.5mm a RCA o de HDMI a jack de 3.5mm."
    },
    {
        "input": "¿Qué es un adaptador de tarjeta SD?",
        "output": "Un adaptador de tarjeta SD es un dispositivo que permite conectar tarjetas SD a otros puertos, como un puerto microSD o USB."
    },
    {
        "input": "¿Qué adaptador necesito para conectar mi computadora a una TV?",
        "output": "Dependiendo de las conexiones de tu computadora y tu TV, podrías necesitar un adaptador de HDMI, VGA, o DisplayPort a HDMI."
    },
    {
        "input": "¿Cómo sé si necesito un adaptador para mi dispositivo?",
        "output": "Necesitas un adaptador cuando dos dispositivos o conexiones no son compatibles entre sí, por ejemplo, si intentas conectar un cable con un puerto distinto al de tu dispositivo."
    },
    {
        "input": "¿Qué adaptador necesito para conectar un USB a un iPhone?",
        "output": "Para conectar un dispositivo USB a un iPhone, necesitarás un adaptador de Lightning a USB o un adaptador de USB-C a Lightning, dependiendo del modelo de tu iPhone."
    },
    {
        "input": "¿Qué es un adaptador de voltaje?",
        "output": "Un adaptador de voltaje convierte la energía eléctrica de un voltaje a otro para que los dispositivos puedan funcionar correctamente sin dañarse."
    },
    {
        "input": "¿Qué es un adaptador de frecuencia?",
        "output": "Un adaptador de frecuencia cambia la frecuencia de una señal, utilizado a menudo en transmisores y receptores de radio o TV."
    },
    {
        "input": "¿Qué es un adaptador de audio digital?",
        "output": "Un adaptador de audio digital convierte una señal de audio digital (como S/PDIF o Toslink) a una señal analógica o viceversa."
    },
    {
        "input": "¿Qué adaptador necesito para mi laptop si no tiene puerto HDMI?",
        "output": "Si tu laptop no tiene puerto HDMI, puedes usar un adaptador de VGA o Mini DisplayPort a HDMI, dependiendo de las salidas de tu laptop."
    },
    {
        "input": "¿Cuál es la diferencia entre un adaptador y un convertidor?",
        "output": "La principal diferencia es que un adaptador generalmente cambia el tipo de conector, mientras que un convertidor cambia el tipo de señal o formato (por ejemplo, de digital a analógico)."
    },
    {
        "input": "¿Qué es un adaptador de corriente universal?",
        "output": "Un adaptador de corriente universal es un dispositivo que puede ajustarse a diferentes tipos de enchufes y voltajes, permitiendo su uso en múltiples países."
    },
    {
        "input": "¿Puedo usar un adaptador de corriente para un dispositivo diferente?",
        "output": "Depende de la potencia y el tipo de corriente que tu dispositivo necesita. Es importante verificar las especificaciones del adaptador y el dispositivo."
    },
    {
        "input": "¿Qué es un adaptador de red Wi-Fi?",
        "output": "Un adaptador de red Wi-Fi es un dispositivo que permite que un dispositivo se conecte a una red inalámbrica si no tiene una tarjeta de red Wi-Fi incorporada."
    },
    {
        "input": "¿Qué es un adaptador de red Ethernet?",
        "output": "Un adaptador de red Ethernet permite que un dispositivo se conecte a una red cableada a través de un puerto Ethernet."
    },
    {
        "input": "¿Puedo conectar mi teléfono a mi TV con un adaptador?",
        "output": "Sí, puedes usar un adaptador de USB-C o microUSB a HDMI para conectar tu teléfono a la TV."
    },
    {
        "input": "¿Qué es un adaptador USB-C?",
        "output": "Un adaptador USB-C permite conectar dispositivos con puertos USB-C a otros puertos, como USB-A o HDMI."
    },
    {
        "input": "¿Para qué sirve un adaptador de corriente de laptop?",
        "output": "Un adaptador de corriente de laptop convierte la corriente eléctrica de una toma de corriente en la tensión adecuada para cargar la batería o alimentar la laptop."
    },
    {
        "input": "¿Qué es un adaptador de red inalámbrico?",
        "output": "Un adaptador de red inalámbrico es un dispositivo que permite conectar un dispositivo a una red Wi-Fi si no tiene capacidad de conexión inalámbrica integrada."
    },
    {
        "input": "¿Qué es un adaptador de audio Bluetooth?",
        "output": "Un adaptador de audio Bluetooth convierte una señal de audio de un dispositivo sin Bluetooth a un formato compatible con audífonos o altavoces Bluetooth."
    },
    {
        "input": "¿Cómo se usa un adaptador de HDMI a VGA?",
        "output": "Un adaptador de HDMI a VGA se utiliza para conectar dispositivos con salida HDMI (como una computadora) a monitores o proyectores que solo tienen entrada VGA."
    },
    {
        "input": "¿Qué es un adaptador VGA?",
        "output": "Un adaptador VGA permite conectar dispositivos con una salida VGA a otros dispositivos, como monitores, que tienen diferentes tipos de entrada."
    },
    {
        "input": "¿Qué es un adaptador de microUSB a USB?",
        "output": "Un adaptador de microUSB a USB permite conectar un dispositivo con puerto microUSB (como un teléfono) a otros dispositivos USB, como teclados o ratones."
    },
    {
        "input": "¿Qué adaptador necesito para conectar mi consola a la TV?",
        "output": "Normalmente, necesitarás un adaptador de HDMI, ya que la mayoría de las consolas modernas usan este tipo de salida."
    },
    {
        "input": "¿Existen adaptadores para tarjetas de memoria?",
        "output": "Sí, existen adaptadores que permiten usar diferentes tipos de tarjetas de memoria, como de SD a microSD o de CF a SD."
    },
    {
        "input": "¿Qué es un adaptador de USB a Ethernet?",
        "output": "Un adaptador de USB a Ethernet permite conectar un dispositivo sin puerto Ethernet a una red mediante un adaptador USB."
    },
    {
        "input": "¿Qué es un adaptador de alimentación para laptops?",
        "output": "Es un dispositivo que convierte la corriente alterna de una toma de corriente en corriente continua adecuada para cargar una laptop."
    },
    {
        "input": "¿Cómo saber qué tipo de adaptador necesito?",
        "output": "Depende de los puertos y conexiones de tus dispositivos. Asegúrate de identificar los tipos de entrada y salida de cada dispositivo antes de buscar el adaptador adecuado."
    },
    {
        "input": "¿Puedo usar un adaptador para cargar mi teléfono?",
        "output": "Sí, puedes usar un adaptador para conectar tu teléfono a un cargador con el tipo de puerto adecuado, como USB-C o microUSB."
    },
    {
        "input": "¿Qué es un adaptador de corriente para vehículos?",
        "output": "Un adaptador de corriente para vehículos convierte la corriente de un automóvil para cargar dispositivos como teléfonos o laptops."
    },
    {
        "input": "¿Qué es un adaptador de audio RCA?",
        "output": "Un adaptador de audio RCA convierte señales de audio de 3.5mm a RCA (rojo y blanco) para conectar a dispositivos de audio más antiguos."
    },
    {
        "input": "¿Qué adaptador necesito para mi dispositivo Bluetooth?",
        "output": "Necesitarás un adaptador Bluetooth USB si tu dispositivo no tiene capacidad Bluetooth incorporada."
    },
    {
        "input": "¿Qué es un adaptador Lightning?",
        "output": "Un adaptador Lightning es un conector utilizado en dispositivos Apple para cargar, transferir datos y conectar accesorios."
    },
    {
        "input": "¿Puedo usar un adaptador para conectar un teléfono a mi PC?",
        "output": "Sí, puedes usar un adaptador de USB-C o microUSB a USB para conectar un teléfono a tu computadora."
    },
    {
        "input": "¿Qué es un adaptador de audio 3.5mm?",
        "output": "Un adaptador de audio 3.5mm convierte señales de audio de diferentes puertos, como 3.5mm a RCA o 3.5mm a jack de 6.3mm."
    },
    {
        "input": "¿Qué es un adaptador para audífonos?",
        "output": "Un adaptador para audífonos permite conectar audífonos con diferentes tipos de conexiones, como 3.5mm a 1/4 de pulgada."
    },
    {
        "input": "¿Qué tipo de adaptador necesito para mi proyector?",
        "output": "Dependiendo de la entrada del proyector, es posible que necesites un adaptador de HDMI a VGA o de HDMI a DisplayPort."
    },
    {
        "input": "¿Qué es la tecnología?",
        "output": "La tecnología es el conjunto de conocimientos, técnicas y herramientas que se utilizan para crear, desarrollar y mejorar productos, servicios y procesos."
    },
    {
        "input": "¿Cuáles son las tecnologías más usadas hoy en día?",
        "output": "Las tecnologías más usadas hoy incluyen la inteligencia artificial, la nube, el internet de las cosas (IoT), la blockchain y la realidad aumentada."
    },
    {
        "input": "¿Qué es la inteligencia artificial?",
        "output": "La inteligencia artificial (IA) es un campo de la tecnología que busca crear sistemas capaces de realizar tareas que requieren inteligencia humana, como aprender, razonar y tomar decisiones."
    },
    {
        "input": "¿Qué es el Internet de las cosas (IoT)?",
        "output": "El Internet de las Cosas (IoT) es un concepto que conecta dispositivos físicos a internet para que puedan recolectar y compartir datos, como termostatos, relojes inteligentes y electrodomésticos."
    },
    {
        "input": "¿Qué es la nube?",
        "output": "La nube es un modelo de almacenamiento y procesamiento de datos a través de servidores remotos accesibles por internet, lo que permite guardar y acceder a la información desde cualquier lugar."
    },
    {
        "input": "¿Qué es blockchain?",
        "output": "Blockchain es una tecnología de registro descentralizado que permite almacenar datos de manera segura, transparente e inmutable, utilizada principalmente en criptomonedas como Bitcoin."
    },
    {
        "input": "¿Qué es la realidad aumentada?",
        "output": "La realidad aumentada (RA) es una tecnología que superpone elementos virtuales sobre el mundo real a través de dispositivos como smartphones o gafas especializadas."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es un conjunto de instrucciones o reglas que se siguen para realizar una tarea específica o resolver un problema."
    },
    {
        "input": "¿Qué es la computación cuántica?",
        "output": "La computación cuántica es un área de la informática que utiliza principios de la mecánica cuántica para procesar información de manera mucho más rápida y eficiente que las computadoras tradicionales."
    },
    {
        "input": "¿Qué son los big data?",
        "output": "Big Data se refiere al manejo de grandes volúmenes de datos que son demasiado complejos para ser procesados por sistemas tradicionales, y se utilizan para obtener patrones y análisis valiosos."
    },
    {
        "input": "¿Qué es la ciberseguridad?",
        "output": "La ciberseguridad es la práctica de proteger sistemas informáticos, redes y datos de ataques, daños o accesos no autorizados."
    },
    {
        "input": "¿Qué es un dispositivo móvil?",
        "output": "Un dispositivo móvil es un aparato portátil que permite realizar diversas funciones, como un teléfono inteligente, tablet o smartwatch."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es el software que gestiona el hardware de un dispositivo y proporciona los servicios necesarios para que otras aplicaciones funcionen correctamente, como Windows, macOS o Android."
    },
    {
        "input": "¿Qué es un navegador web?",
        "output": "Un navegador web es un software utilizado para acceder y visualizar sitios web en internet, como Google Chrome, Mozilla Firefox o Safari."
    },
    {
        "input": "¿Qué son las redes sociales?",
        "output": "Las redes sociales son plataformas en línea donde las personas pueden interactuar, compartir contenido, y crear comunidades, como Facebook, Instagram, Twitter y LinkedIn."
    },
    {
        "input": "¿Qué es el 5G?",
        "output": "El 5G es la quinta generación de redes móviles, que promete velocidades de conexión mucho más rápidas, mayor capacidad de red y menor latencia."
    },
    {
        "input": "¿Qué es un microprocesador?",
        "output": "Un microprocesador es un chip que ejecuta las instrucciones de un programa informático y coordina las operaciones de un sistema informático, funcionando como el cerebro de una computadora."
    },
    {
        "input": "¿Qué es la realidad virtual?",
        "output": "La realidad virtual (RV) es una tecnología que crea un entorno simulado inmersivo que puede interactuar con el usuario mediante dispositivos como gafas VR."
    },
    {
        "input": "¿Qué es un robot?",
        "output": "Un robot es una máquina programable capaz de realizar tareas automáticamente, a menudo imitando comportamientos humanos o realizando trabajos repetitivos."
    },
    {
        "input": "¿Qué es la automatización?",
        "output": "La automatización es el uso de tecnología para realizar tareas sin intervención humana, optimizando procesos en la industria, la agricultura y otras áreas."
    },
    {
        "input": "¿Qué son las criptomonedas?",
        "output": "Las criptomonedas son monedas digitales que utilizan criptografía para asegurar las transacciones y controlar la creación de nuevas unidades, como Bitcoin o Ethereum."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es una computadora o sistema que proporciona servicios a otras computadoras o dispositivos en una red, como el alojamiento de sitios web o el almacenamiento de datos."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es un modelo de entrega de servicios informáticos (almacenamiento, aplicaciones, etc.) a través de internet, sin necesidad de tener servidores físicos."
    },
    {
        "input": "¿Qué es un dispositivo IoT?",
        "output": "Un dispositivo IoT (Internet de las Cosas) es cualquier objeto físico que esté conectado a internet para recopilar o compartir datos, como termostatos inteligentes o cámaras de seguridad."
    },
    {
        "input": "¿Qué es el software libre?",
        "output": "El software libre es aquel cuyo código fuente está disponible para que cualquier persona pueda usarlo, modificarlo y distribuirlo de acuerdo con sus necesidades."
    },
    {
        "input": "¿Qué es un firewall?",
        "output": "Un firewall es un sistema de seguridad que controla el tráfico de red entrante y saliente para proteger un sistema informático de accesos no autorizados."
    },
    {
        "input": "¿Qué es la inteligencia artificial aplicada?",
        "output": "La inteligencia artificial aplicada se refiere a la implementación práctica de tecnologías de IA en diferentes industrias, como la automatización, la medicina y el análisis de datos."
    },
    {
        "input": "¿Qué son los drones?",
        "output": "Los drones son vehículos aéreos no tripulados que se utilizan para diversas aplicaciones, desde fotografía aérea hasta entregas o exploración."
    },
    {
        "input": "¿Qué es un dispositivo portátil?",
        "output": "Un dispositivo portátil es un aparato pequeño y ligero que puede ser transportado fácilmente, como un teléfono móvil, una tablet o un laptop."
    },
    {
        "input": "¿Qué es el aprendizaje automático?",
        "output": "El aprendizaje automático es una rama de la inteligencia artificial que permite a las máquinas aprender de los datos y mejorar su rendimiento sin ser programadas explícitamente."
    },
    {
        "input": "¿Qué es un algoritmo de búsqueda?",
        "output": "Un algoritmo de búsqueda es un proceso computacional diseñado para encontrar un elemento dentro de una estructura de datos, como la búsqueda de información en internet o bases de datos."
    },
    {
        "input": "¿Qué es un chip NFC?",
        "output": "Un chip NFC (Near Field Communication) es un dispositivo que permite la transmisión de datos de forma inalámbrica entre dispositivos a corta distancia, utilizado en pagos móviles y otras aplicaciones."
    },
    {
        "input": "¿Qué es un asistente virtual?",
        "output": "Un asistente virtual es un software que utiliza inteligencia artificial para interactuar con los usuarios, responder preguntas y realizar tareas, como Siri, Alexa o Google Assistant."
    },
    {
        "input": "¿Qué es el diseño responsivo?",
        "output": "El diseño responsivo es un enfoque de diseño web que permite que un sitio se adapte y se vea bien en diferentes dispositivos y tamaños de pantalla."
    },
    {
        "input": "¿Qué son los smartwatches?",
        "output": "Los smartwatches son relojes inteligentes que realizan funciones más allá de mostrar la hora, como monitoreo de salud, notificaciones, control de música y más."
    },
    {
        "input": "¿Qué es un chip de memoria?",
        "output": "Un chip de memoria es un componente de un dispositivo que almacena datos, como la RAM o la memoria flash en teléfonos y computadoras."
    },
    {
        "input": "¿Qué es un asistente de voz?",
        "output": "Un asistente de voz es un software que permite a los usuarios interactuar con dispositivos a través de comandos de voz, como Siri, Alexa o Google Assistant."
    },
    {
        "input": "¿Qué es el big data?",
        "output": "Big Data es el término utilizado para describir grandes volúmenes de datos que no pueden ser procesados por métodos tradicionales, y se utilizan para análisis avanzados y toma de decisiones."
    },
    {
        "input": "¿Qué es un servicio en la nube?",
        "output": "Un servicio en la nube es cualquier servicio informático proporcionado a través de internet, como almacenamiento, procesamiento o aplicaciones."
    },
    {
        "input": "¿Qué es un dispositivo wearable?",
        "output": "Un dispositivo wearable es un gadget que se usa sobre el cuerpo y se conecta a otros dispositivos, como relojes inteligentes, pulseras de actividad y gafas inteligentes."
    },
    {
        "input": "¿Qué es un virus informático?",
        "output": "Un virus informático es un tipo de software malicioso que puede replicarse y propagarse a través de archivos y redes, dañando o alterando los sistemas en los que se instala."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es un modelo de entrega de servicios informáticos a través de internet, lo que permite a las empresas y usuarios acceder a datos y aplicaciones sin necesidad de infraestructura física."
    },
    {
        "input": "¿Qué es la carrera de Ingeniería en Sistemas?",
        "output": "La carrera de Ingeniería en Sistemas se enfoca en el diseño, desarrollo y mantenimiento de sistemas informáticos y tecnológicos, combinando conocimientos de software, hardware, redes y gestión de proyectos."
    },
    {
        "input": "¿Qué se estudia en Ingeniería en Sistemas?",
        "output": "En Ingeniería en Sistemas se estudian temas como programación, bases de datos, redes, seguridad informática, algoritmos, desarrollo de software, inteligencia artificial y gestión de proyectos tecnológicos."
    },
    {
        "input": "¿Cuánto dura la carrera de Ingeniería en Sistemas?",
        "output": "La duración de la carrera de Ingeniería en Sistemas generalmente es de 5 años, aunque puede variar dependiendo de la universidad y el país."
    },
    {
        "input": "¿Qué habilidades se necesitan para estudiar Ingeniería en Sistemas?",
        "output": "Se necesitan habilidades analíticas, lógico-matemáticas, capacidad de resolución de problemas, interés en la tecnología y la informática, y habilidades para trabajar en equipo."
    },
    {
        "input": "¿En qué áreas puede trabajar un Ingeniero en Sistemas?",
        "output": "Un Ingeniero en Sistemas puede trabajar en áreas como desarrollo de software, administración de bases de datos, redes y telecomunicaciones, ciberseguridad, análisis de datos, inteligencia artificial y gestión de proyectos tecnológicos."
    },
    {
        "input": "¿Es difícil estudiar Ingeniería en Sistemas?",
        "output": "La dificultad depende del interés y las habilidades de cada persona. La carrera tiene un enfoque técnico y matemático, por lo que requiere esfuerzo y dedicación, pero es accesible para aquellos interesados en la tecnología."
    },
    {
        "input": "¿Qué materias son las más importantes en Ingeniería en Sistemas?",
        "output": "Las materias clave incluyen programación, estructuras de datos, redes de computadoras, bases de datos, ingeniería de software, algoritmos, inteligencia artificial y matemáticas aplicadas."
    },
    {
        "input": "¿Un Ingeniero en Sistemas puede trabajar en empresas de tecnología?",
        "output": "Sí, un Ingeniero en Sistemas puede trabajar en empresas de tecnología, desarrollando software, gestionando redes, administrando bases de datos y participando en proyectos tecnológicos innovadores."
    },
    {
        "input": "¿Qué es un desarrollo de software?",
        "output": "El desarrollo de software es el proceso de diseñar, crear, probar y mantener aplicaciones o sistemas informáticos, utilizando distintos lenguajes de programación y metodologías."
    },
    {
        "input": "¿Qué lenguajes de programación se aprenden en Ingeniería en Sistemas?",
        "output": "En Ingeniería en Sistemas se aprenden lenguajes como Java, C++, Python, JavaScript, PHP, SQL, Ruby y otros utilizados en desarrollo web, aplicaciones móviles y sistemas de bases de datos."
    },
    {
        "input": "¿Qué es una base de datos?",
        "output": "Una base de datos es un sistema organizado para almacenar, gestionar y acceder a datos de manera eficiente. Los Ingenieros en Sistemas aprenden a diseñar, crear y administrar bases de datos."
    },
    {
        "input": "¿Es necesario saber matemáticas para estudiar Ingeniería en Sistemas?",
        "output": "Sí, las matemáticas son fundamentales en Ingeniería en Sistemas, especialmente en áreas como algoritmos, estructuras de datos, programación y redes."
    },
    {
        "input": "¿Qué hace un Ingeniero en Sistemas en el área de redes?",
        "output": "En el área de redes, un Ingeniero en Sistemas se encarga de diseñar, implementar, administrar y asegurar las redes de comunicación de datos en una empresa u organización."
    },
    {
        "input": "¿Qué es la ciberseguridad?",
        "output": "La ciberseguridad es el campo de la tecnología que se ocupa de proteger los sistemas informáticos, redes y datos de ataques, accesos no autorizados y otras amenazas."
    },
    {
        "input": "¿Qué diferencia hay entre Ingeniería en Sistemas y Ciencias de la Computación?",
        "output": "La principal diferencia es que la Ingeniería en Sistemas se enfoca más en la implementación y gestión de sistemas tecnológicos, mientras que las Ciencias de la Computación están más centradas en la teoría de algoritmos y la investigación en computación."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "La programación orientada a objetos es un paradigma de programación que organiza el software en objetos, los cuales contienen datos y métodos para operar sobre esos datos."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es el software que gestiona el hardware y los recursos de una computadora, proporcionando una interfaz entre el usuario y el hardware, como Windows, Linux o macOS."
    },
    {
        "input": "¿Qué es un algoritmo?",
        "output": "Un algoritmo es un conjunto de instrucciones o reglas definidas para resolver un problema o realizar una tarea específica de manera eficiente."
    },
    {
        "input": "¿Un Ingeniero en Sistemas trabaja solo?",
        "output": "No, generalmente trabaja en equipos multidisciplinarios con otros ingenieros, diseñadores, analistas y personal de gestión para desarrollar soluciones tecnológicas complejas."
    },
    {
        "input": "¿Qué es el análisis de datos?",
        "output": "El análisis de datos es el proceso de inspeccionar, limpiar y modelar datos con el fin de descubrir información útil, llegar a conclusiones y apoyar la toma de decisiones."
    },
    {
        "input": "¿Qué es la inteligencia artificial?",
        "output": "La inteligencia artificial es el campo de la informática que desarrolla sistemas capaces de realizar tareas que normalmente requieren inteligencia humana, como el aprendizaje, el reconocimiento de patrones y la toma de decisiones."
    },
    {
        "input": "¿Qué es la programación web?",
        "output": "La programación web es el desarrollo de aplicaciones y sitios web, utilizando tecnologías como HTML, CSS, JavaScript y bases de datos para crear experiencias interactivas en línea."
    },
    {
        "input": "¿Qué es un sistema de gestión de bases de datos?",
        "output": "Un sistema de gestión de bases de datos (SGBD) es un software que permite crear, administrar y acceder a bases de datos, como MySQL, PostgreSQL o Microsoft SQL Server."
    },
    {
        "input": "¿Qué es el desarrollo ágil de software?",
        "output": "El desarrollo ágil es una metodología de desarrollo de software que promueve la colaboración constante, la flexibilidad y la entrega incremental de productos."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es un equipo o sistema informático que proporciona servicios, como alojamiento de sitios web o almacenamiento de archivos, a otros dispositivos o usuarios en una red."
    },
    {
        "input": "¿Un Ingeniero en Sistemas puede trabajar en el área de hardware?",
        "output": "Sí, aunque se enfoca más en software, un Ingeniero en Sistemas también puede trabajar con hardware, diseñando y administrando sistemas físicos que soporten aplicaciones y redes."
    },
    {
        "input": "¿Qué es el análisis de sistemas?",
        "output": "El análisis de sistemas es el proceso de estudiar los sistemas existentes, entender sus necesidades y diseñar soluciones informáticas para optimizar su funcionamiento."
    },
    {
        "input": "¿Qué es un modelo de datos?",
        "output": "Un modelo de datos es una representación estructurada de los datos, mostrando cómo se organizan, relacionan y se accede a ellos dentro de un sistema o base de datos."
    },
    {
        "input": "¿Qué es el Internet de las Cosas?",
        "output": "El Internet de las Cosas (IoT) es un concepto que conecta dispositivos físicos a internet para que puedan compartir y recibir datos, mejorando la interacción entre ellos."
    },
    {
        "input": "¿Qué es la programación en Python?",
        "output": "Python es un lenguaje de programación de alto nivel conocido por su sintaxis sencilla y su versatilidad, utilizado en diversas áreas como desarrollo web, ciencia de datos y automatización."
    },
    {
        "input": "¿Qué es el testing de software?",
        "output": "El testing de software es el proceso de verificar y validar que un software funcione correctamente, identificando errores y asegurando su calidad."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es el uso de recursos informáticos, como servidores y almacenamiento, proporcionados a través de internet, sin necesidad de infraestructura propia."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Un framework es un conjunto de herramientas y bibliotecas preconfiguradas que facilitan el desarrollo de aplicaciones, proporcionando una estructura estándar."
    },
    {
        "input": "¿Qué es un prototipo de software?",
        "output": "Un prototipo de software es una versión preliminar o modelo funcional de una aplicación que permite probar y evaluar sus funcionalidades antes del desarrollo final."
    },
    {
        "input": "¿Qué es un lenguaje de programación?",
        "output": "Un lenguaje de programación es un sistema de comunicación utilizado para escribir instrucciones que una computadora puede ejecutar, como Java, C++, o JavaScript."
    },
    {
        "input": "¿Qué es un análisis de requerimientos?",
        "output": "El análisis de requerimientos es el proceso de identificar, comprender y documentar las necesidades del cliente o usuario para desarrollar un sistema que las cumpla."
    },
    {
        "input": "¿Qué es un ciclo de vida de desarrollo de software?",
        "output": "El ciclo de vida de desarrollo de software es un conjunto de fases o etapas que guían el proceso de creación, implementación y mantenimiento de un software, como planificación, diseño, desarrollo, pruebas y mantenimiento."
    },
    {
        "input": "¿Qué es la virtualización?",
        "output": "La virtualización es el proceso de crear una versión virtual de un recurso físico, como servidores, sistemas operativos o almacenamiento, para mejorar la eficiencia y reducir costos."
    },
    {
        "input": "¿Qué es un chatbot?",
        "output": "Un chatbot es un programa de inteligencia artificial diseñado para simular conversaciones con usuarios, proporcionando respuestas automáticas a preguntas comunes."
    },
    {
        "input": "¿Un Ingeniero en Sistemas puede trabajar en el sector público?",
        "output": "Sí, un Ingeniero en Sistemas puede trabajar en el sector público, gestionando proyectos tecnológicos para instituciones gubernamentales, implementando sistemas de información y asegurando la infraestructura tecnológica."
    },
    {
        "input": "¿Qué es un software de gestión empresarial?",
        "output": "Un software de gestión empresarial es una aplicación que ayuda a las empresas a gestionar recursos, procesos y operaciones internas, como ERP (Enterprise Resource Planning) o CRM (Customer Relationship Management)."
    },
    {
        "input": "¿Qué es un análisis de datos?",
        "output": "El análisis de datos es el proceso de inspeccionar, limpiar y transformar datos con el fin de descubrir información útil y apoyar la toma de decisiones."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "Es un paradigma de programación basado en objetos, que contienen datos y métodos para operar sobre esos datos."
    },
    {
        "input": "¿Qué es un diagrama de flujo?",
        "output": "Es una representación gráfica de un algoritmo o proceso, usando símbolos para representar acciones y flechas para el flujo."
    },
    {
        "input": "¿Cómo puedo aprender a programar desde cero?",
        "output": "Empieza con un lenguaje fácil como Python, aprende los conceptos básicos y practica resolviendo problemas simples."
    },
    {
        "input": "¿Qué lenguajes de programación son mejores para inteligencia artificial?",
        "output": "Python es el más popular para IA, gracias a sus bibliotecas como TensorFlow y PyTorch."
    },
    {
        "input": "¿Cómo importo una biblioteca en Python?",
        "output": "Usa la palabra clave `import`. Por ejemplo: `import math`."
    },
    {
        "input": "¿Qué es un archivo JSON?",
        "output": "Es un formato para almacenar datos estructurados en pares clave-valor, usado comúnmente para intercambio de datos."
    },
    {
        "input": "¿Cómo convierto una lista en un string en Python?",
        "output": "Usa el método `.join()`. Ejemplo: `','.join(mi_lista)`."
    },
    {
        "input": "¿Qué diferencia hay entre una lista y un diccionario?",
        "output": "Una lista es una colección ordenada de elementos, mientras que un diccionario es una colección de pares clave-valor."
    },
    {
        "input": "¿Cómo instalo Django?",
        "output": "Ejecuta `pip install django` en la terminal."
    },
    {
        "input": "¿Cómo configuro un entorno virtual en Python?",
        "output": "Usa el comando `python -m venv nombre_del_entorno` y actívalo con `source nombre_del_entorno/bin/activate` en Linux/Mac o `nombre_del_entorno\\Scripts\\activate` en Windows."
    },
    {
        "input": "¿Qué es un entorno virtual?",
        "output": "Es una forma de aislar proyectos de Python, asegurando que cada uno tenga sus propias dependencias."
    },
    {
        "input": "¿Cómo uso pip para instalar varias bibliotecas?",
        "output": "Crea un archivo `requirements.txt` con los nombres de las bibliotecas y usa `pip install -r requirements.txt`."
    },
    {
        "input": "¿Puedes darme un ejemplo de recursión?",
        "output": "Claro, aquí tienes un ejemplo de factorial recursivo: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "¿Cómo hago un programa para contar palabras?",
        "output": "Usa `split()` para dividir el texto en palabras y `len()` para contar. Ejemplo: `len(texto.split())`."
    },
    {
        "input": "¿Puedes mostrarme cómo crear un gráfico de barras?",
        "output": "Claro: `import matplotlib.pyplot as plt; plt.bar(['A', 'B', 'C'], [10, 20, 30]); plt.show()`."
    },
    {
        "input": "¿Cómo conecto Python a una base de datos MySQL?",
        "output": "Usa la biblioteca `mysql-connector-python`. Ejemplo básico: `import mysql.connector` y establece la conexión con `mysql.connector.connect()`."
    },
    {
        "input": "¿Cómo imprimir un mensaje en Python?",
        "output": "Puedes imprimir un mensaje en Python utilizando la función 'print'. Ejemplo: print('Hola, mundo!')"
    },
    {
        "input": "¿Cómo declarar una variable en Python?",
        "output": "Para declarar una variable en Python, simplemente asignas un valor a un nombre. Ejemplo: x = 5"
    },
    {
        "input": "¿Cómo sumar dos números en Python?",
        "output": "Puedes sumar dos números con el operador '+' de la siguiente forma: resultado = 5 + 3"
    },
    {
        "input": "¿Cómo hacer una condición if en Python?",
        "output": "La sintaxis básica para un if en Python es: if condicion: \n\tcodigo. Ejemplo: if x > 0: print('Positivo')"
    },
    {
        "input": "¿Cómo usar un bucle for en Python?",
        "output": "Un bucle 'for' en Python se usa para iterar sobre una secuencia. Ejemplo: for i in range(5): print(i)"
    },
    {
        "input": "¿Cómo usar un bucle while en Python?",
        "output": "Un bucle 'while' ejecuta un bloque de código mientras se cumpla una condición. Ejemplo: while x < 5: x += 1"
    },
    {
        "input": "¿Cómo crear una función en Python?",
        "output": "Para crear una función en Python, usas 'def'. Ejemplo: def saludar(): print('Hola!')"
    },
    {
        "input": "¿Cómo pasar argumentos a una función en Python?",
        "output": "Puedes pasar argumentos a una función al definirla. Ejemplo: def saludar(nombre): print('Hola, ' + nombre)"
    },
    {
        "input": "¿Cómo retornar un valor en una función de Python?",
        "output": "Puedes retornar un valor usando la palabra clave 'return'. Ejemplo: def sumar(a, b): return a + b"
    },
    {
        "input": "¿Cómo concatenar cadenas de texto en Python?",
        "output": "Puedes concatenar cadenas usando el operador '+'. Ejemplo: saludo = 'Hola' + ' ' + 'Mundo'"
    },
    {
        "input": "¿Cómo convertir un número a cadena en Python?",
        "output": "Puedes convertir un número a cadena con la función 'str'. Ejemplo: str(5)"
    },
    {
        "input": "¿Cómo convertir una cadena a número en Python?",
        "output": "Puedes convertir una cadena a número usando 'int' o 'float'. Ejemplo: int('5') o float('5.5')"
    },
    {
        "input": "¿Cómo crear una lista en Python?",
        "output": "Puedes crear una lista con corchetes []. Ejemplo: mi_lista = [1, 2, 3]"
    },
    {
        "input": "¿Cómo acceder a un elemento de una lista en Python?",
        "output": "Accedes a un elemento de una lista usando su índice. Ejemplo: mi_lista[0]"
    },
    {
        "input": "¿Cómo agregar un elemento a una lista en Python?",
        "output": "Puedes agregar un elemento usando 'append'. Ejemplo: mi_lista.append(4)"
    },
    {
        "input": "¿Cómo eliminar un elemento de una lista en Python?",
        "output": "Puedes eliminar un elemento usando 'remove'. Ejemplo: mi_lista.remove(3)"
    },
    {
        "input": "¿Cómo verificar si un elemento está en una lista en Python?",
        "output": "Puedes usar el operador 'in'. Ejemplo: 3 in mi_lista"
    },
    {
        "input": "¿Cómo crear un diccionario en Python?",
        "output": "Puedes crear un diccionario con llaves {}. Ejemplo: mi_diccionario = {'clave': 'valor'}"
    },
    {
        "input": "¿Cómo acceder a un valor en un diccionario en Python?",
        "output": "Accedes a un valor usando la clave. Ejemplo: mi_diccionario['clave']"
    },
    {
        "input": "¿Cómo agregar un elemento a un diccionario en Python?",
        "output": "Puedes agregar un elemento asignando un valor a una nueva clave. Ejemplo: mi_diccionario['nueva_clave'] = 'nuevo valor'"
    },
    {
        "input": "¿Cómo eliminar un elemento de un diccionario en Python?",
        "output": "Puedes eliminar un elemento usando 'del'. Ejemplo: del mi_diccionario['clave']"
    },
    {
        "input": "¿Cómo comprobar si una clave existe en un diccionario en Python?",
        "output": "Puedes usar el operador 'in'. Ejemplo: 'clave' in mi_diccionario"
    },
    {
        "input": "¿Cómo hacer una lista de comprensión en Python?",
        "output": "Una lista de comprensión permite crear una lista de manera compacta. Ejemplo: cuadrados = [x**2 for x in range(5)]"
    },
    {
        "input": "¿Cómo leer un archivo en Python?",
        "output": "Puedes leer un archivo con la función 'open' y el método 'read'. Ejemplo: archivo = open('archivo.txt', 'r'); contenido = archivo.read()"
    },
    {
        "input": "¿Cómo escribir en un archivo en Python?",
        "output": "Puedes escribir en un archivo con el método 'write'. Ejemplo: archivo = open('archivo.txt', 'w'); archivo.write('Texto')"
    },
    {
        "input": "¿Cómo manejar excepciones en Python?",
        "output": "Puedes manejar excepciones con un bloque 'try-except'. Ejemplo: try: 1/0 except ZeroDivisionError: print('Error de división por cero')"
    },
    {
        "input": "¿Cómo generar un número aleatorio en Python?",
        "output": "Puedes generar un número aleatorio con la función 'randint' del módulo 'random'. Ejemplo: import random; num = random.randint(1, 10)"
    },
    {
        "input": "¿Cómo ordenar una lista en Python?",
        "output": "Puedes ordenar una lista usando el método 'sort'. Ejemplo: mi_lista.sort()"
    },
    {
        "input": "¿Cómo invertir una lista en Python?",
        "output": "Puedes invertir una lista usando el método 'reverse'. Ejemplo: mi_lista.reverse()"
    },
    {
        "input": "¿Cómo contar el número de veces que un elemento aparece en una lista en Python?",
        "output": "Puedes usar el método 'count'. Ejemplo: mi_lista.count(3)"
    },
    {
        "input": "¿Cómo obtener el índice de un elemento en una lista en Python?",
        "output": "Puedes usar el método 'index'. Ejemplo: mi_lista.index(3)"
    },
    {
        "input": "¿Cómo crear una tupla en Python?",
        "output": "Puedes crear una tupla con paréntesis (). Ejemplo: mi_tupla = (1, 2, 3)"
    },
    {
        "input": "¿Cómo acceder a un elemento de una tupla en Python?",
        "output": "Accedes a un elemento de una tupla usando su índice. Ejemplo: mi_tupla[0]"
    },
    {
        "input": "¿Cómo concatenar tuplas en Python?",
        "output": "Puedes concatenar tuplas usando el operador '+'. Ejemplo: mi_tupla1 + mi_tupla2"
    },
    {
        "input": "¿Cómo convertir una tupla a lista en Python?",
        "output": "Puedes convertir una tupla a lista usando 'list'. Ejemplo: lista = list(mi_tupla)"
    },
    {
        "input": "¿Qué es un set en Python?",
        "output": "Un set en Python es una colección no ordenada de elementos únicos. Se crea con llaves {}. Ejemplo: mi_set = {1, 2, 3}"
    },
    {
        "input": "¿Cómo agregar un elemento a un set en Python?",
        "output": "Puedes agregar un elemento usando 'add'. Ejemplo: mi_set.add(4)"
    },
    {
        "input": "¿Cómo eliminar un elemento de un set en Python?",
        "output": "Puedes eliminar un elemento usando 'remove'. Ejemplo: mi_set.remove(3)"
    },
    {
        "input": "¿Cómo verificar si un elemento está en un set en Python?",
        "output": "Puedes usar el operador 'in'. Ejemplo: 3 in mi_set"
    },
    {
        "input": "¿Cómo crear una función recursiva en Python?",
        "output": "Una función recursiva es una función que se llama a sí misma. Ejemplo: def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"
    },
    {
        "input": "¿Cómo generar un número aleatorio flotante en Python?",
        "output": "Puedes generar un número aleatorio flotante con 'uniform' del módulo 'random'. Ejemplo: random.uniform(1.0, 10.0)"
    },
    {
        "input": "¿Cómo comprobar si una lista está vacía en Python?",
        "output": "Puedes comprobar si una lista está vacía con 'not'. Ejemplo: if not mi_lista: print('Lista vacía')"
    },
    {
        "input": "¿Cómo combinar dos listas en Python?",
        "output": "Puedes combinar dos listas con el operador '+'. Ejemplo: lista_combinada = lista1 + lista2"
    },
    {
        "input": "¿Cómo crear un conjunto de claves en un diccionario en Python?",
        "output": "Puedes obtener las claves de un diccionario con el método 'keys'. Ejemplo: diccionario.keys()"
    },
    {
        "input": "¿Cómo obtener los valores de un diccionario en Python?",
        "output": "Puedes obtener los valores de un diccionario con el método 'values'. Ejemplo: diccionario.values()"
    },
    {
        "input": "¿Cómo eliminar todos los elementos de un diccionario en Python?",
        "output": "Puedes eliminar todos los elementos usando el método 'clear'. Ejemplo: diccionario.clear()"
    },
    {
        "input": "¿Cómo verificar si una lista contiene todos los elementos de otra lista en Python?",
        "output": "Puedes usar el operador 'all' con una comprensión de lista. Ejemplo: all(elem in lista2 for elem in lista1)"
    },
    {
        "input": "¿Cómo encontrar el valor máximo en una lista en Python?",
        "output": "Puedes encontrar el valor máximo usando 'max'. Ejemplo: max(mi_lista)"
    },
    {
        "input": "¿Cómo encontrar el valor mínimo en una lista en Python?",
        "output": "Puedes encontrar el valor mínimo usando 'min'. Ejemplo: min(mi_lista)"
    },
    {
        "input": "¿Cómo hago una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola, mundo')`."
    },
    {
        "input": "¿Cómo se ejecuta un programa de Python?",
        "output": "Usa el comando `python nombre_del_archivo.py` en la terminal."
    },
    {
        "input": "¿Qué es una excepción en Python?",
        "output": "Es un error durante la ejecución del programa que puede ser manejado usando bloques `try-except`."
    },
    {
        "input": "¿Cómo manejo varias excepciones en Python?",
        "output": "Usa múltiples bloques `except`. Ejemplo: `try: ... except ValueError: ... except TypeError: ...`."
    },
    {
        "input": "¿Cómo leo un archivo en Python?",
        "output": "Usa el método `open()` en modo lectura. Ejemplo: `with open('archivo.txt', 'r') as archivo: contenido = archivo.read()`."
    },
    {
        "input": "¿Cómo escribo un archivo en Python?",
        "output": "Usa el modo escritura (`w`) o añadir (`a`). Ejemplo: `with open('archivo.txt', 'w') as archivo: archivo.write('Texto')`."
    },
    {
        "input": "¿Qué son las listas por comprensión en Python?",
        "output": "Es una forma compacta de crear listas. Ejemplo: `squares = [x**2 for x in range(10)]`."
    },
    {
        "input": "¿Cómo hago un bucle for en Python?",
        "output": "Usa la palabra clave `for`. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Es un archivo que contiene definiciones y funciones reutilizables. Puedes importarlo con `import nombre_modulo`."
    },
    {
        "input": "¿Cómo instalo una biblioteca en Python?",
        "output": "Usa el comando `pip install nombre_biblioteca`. Por ejemplo: `pip install requests`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista en Python?",
        "output": "Usa `remove()` o `del`. Ejemplo: `mi_lista.remove('elemento')` o `del mi_lista[índice]`."
    },
    {
        "input": "¿Cómo encuentro el tamaño de una lista en Python?",
        "output": "Usa la función `len()`. Ejemplo: `len(mi_lista)`."
    },
    {
        "input": "¿Cómo convierto un string a entero en Python?",
        "output": "Usa la función `int()`. Ejemplo: `numero = int('123')`."
    },
    {
        "input": "¿Cómo convierto un entero a string en Python?",
        "output": "Usa la función `str()`. Ejemplo: `texto = str(123)`."
    },
    {
        "input": "¿Qué es un conjunto en Python?",
        "output": "Es una colección no ordenada de elementos únicos. Ejemplo: `mi_conjunto = {1, 2, 3}`."
    },
    {
        "input": "¿Cómo elimino duplicados de una lista en Python?",
        "output": "Convierte la lista a un conjunto. Ejemplo: `sin_duplicados = list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo ordeno una lista en Python?",
        "output": "Usa el método `sort()` o la función `sorted()`. Ejemplo: `mi_lista.sort()` o `sorted(mi_lista)`."
    },
    {
        "input": "¿Cómo invierto una lista en Python?",
        "output": "Usa el método `reverse()` o slicing. Ejemplo: `mi_lista.reverse()` o `mi_lista[::-1]`."
    },
    {
        "input": "¿Cómo uso argumentos en una función en Python?",
        "output": "Decláralos dentro de los paréntesis. Ejemplo: `def sumar(a, b): return a + b`."
    },
    {
        "input": "¿Qué es un argumento por defecto en Python?",
        "output": "Es un valor predeterminado para un argumento. Ejemplo: `def saludar(nombre='Mundo'): print('Hola,', nombre)`."
    },
    {
        "input": "¿Qué es una función lambda en Python?",
        "output": "Es una función anónima de una sola línea. Ejemplo: `lambda x: x**2`."
    },
    {
        "input": "¿Cómo filtro una lista en Python?",
        "output": "Usa `filter()` con una función. Ejemplo: `list(filter(lambda x: x > 0, mi_lista))`."
    },
    {
        "input": "¿Cómo uso map en Python?",
        "output": "Aplica una función a todos los elementos de una lista. Ejemplo: `list(map(lambda x: x**2, mi_lista))`."
    },
    {
        "input": "¿Qué es una tupla en Python?",
        "output": "Es una colección inmutable de elementos ordenados. Ejemplo: `mi_tupla = (1, 2, 3)`."
    },
    {
        "input": "¿Cómo creo una clase en Python?",
        "output": "Usa la palabra clave `class`. Ejemplo: `class Perro: def __init__(self, nombre): self.nombre = nombre`."
    },
    {
        "input": "¿Qué es la herencia en Python?",
        "output": "Es un mecanismo donde una clase puede usar atributos y métodos de otra. Ejemplo: `class Hijo(Padre): ...`."
    },
    {
        "input": "¿Cómo genero números aleatorios en Python?",
        "output": "Usa la biblioteca `random`. Ejemplo: `import random; random.randint(1, 10)`."
    },
    {
        "input": "¿Cómo convierto un string en una lista?",
        "output": "Usa el método `split()`. Ejemplo: `'hola mundo'.split()`."
    },
    {
        "input": "¿Cómo combino dos listas en Python?",
        "output": "Usa el operador `+` o `extend()`. Ejemplo: `lista1 + lista2` o `lista1.extend(lista2)`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}` con pares clave-valor. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo accedo a un valor en un diccionario?",
        "output": "Usa la clave entre corchetes. Ejemplo: `mi_diccionario['clave']`."
    },
    {
        "input": "¿Cómo agrego un elemento a un diccionario?",
        "output": "Usa una nueva clave. Ejemplo: `mi_diccionario['nueva_clave'] = 'valor'`."
    },
    {
        "input": "¿Qué es Python Flask?",
        "output": "Flask es un microframework para desarrollar aplicaciones web con Python."
    },
    {
        "input": "¿Qué es una API REST?",
        "output": "Es un servicio web que permite la comunicación entre aplicaciones usando HTTP y principios RESTful."
    },
    {
        "input": "¿Cómo creo una API con Flask?",
        "output": "Usa Flask para definir rutas. Ejemplo: `from flask import Flask; app = Flask(__name__); @app.route('/') def home(): return 'Hola, mundo'`."
    },
    {
        "input": "¿Qué es NumPy en Python?",
        "output": "NumPy es una biblioteca para cálculos matemáticos y manejo de arrays."
    },
    {
        "input": "¿Cómo creo un array en NumPy?",
        "output": "Usa `numpy.array()`. Ejemplo: `import numpy as np; mi_array = np.array([1, 2, 3])`."
    },
    {
        "input": "¿Cómo cargo un archivo CSV en Pandas?",
        "output": "Usa `pandas.read_csv()`. Ejemplo: `import pandas as pd; df = pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Cómo selecciono columnas en Pandas?",
        "output": "Accede con corchetes. Ejemplo: `df['columna']` o `df[['columna1', 'columna2']]`."
    },
    {
        "input": "¿Qué es el Zen de Python?",
        "output": "Es una serie de principios para escribir código Python, accesibles con `import this`."
    },
    {
        "input": "¿Cómo puedo escribir un programa en Python que calcule el factorial de un número?",
        "output": "Puedes escribir una función recursiva para calcular el factorial de un número. Ejemplo: def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"
    },
    {
        "input": "¿Cómo puedo hacer una búsqueda binaria en Python?",
        "output": "Puedes implementar una búsqueda binaria recursiva o iterativa. Ejemplo: def busqueda_binaria(arr, x): low, high = 0, len(arr) - 1; while low <= high: mid = (low + high) // 2; if arr[mid] == x: return mid; elif arr[mid] < x: low = mid + 1; else: high = mid - 1; return -1"
    },
    {
        "input": "¿Cómo puedo crear una lista de diccionarios en Python?",
        "output": "Puedes crear una lista de diccionarios como cualquier otra lista en Python. Ejemplo: lista = [{'nombre': 'Juan', 'edad': 30}, {'nombre': 'Ana', 'edad': 25}]"
    },
    {
        "input": "¿Cómo puedo escribir una función que convierta una cadena a mayúsculas en Python?",
        "output": "Puedes usar el método 'upper' para convertir una cadena a mayúsculas. Ejemplo: def convertir_mayusculas(texto): return texto.upper()"
    },
    {
        "input": "¿Cómo puedo crear una función que cuente la cantidad de veces que una palabra aparece en una cadena en Python?",
        "output": "Puedes usar el método 'count' para contar las ocurrencias. Ejemplo: def contar_palabra(texto, palabra): return texto.count(palabra)"
    },
    {
        "input": "¿Cómo puedo ordenar una lista de tuplas por el segundo valor de cada tupla en Python?",
        "output": "Puedes usar la función 'sorted' con un parámetro 'key' que ordene por el segundo valor. Ejemplo: sorted(lista_tuplas, key=lambda x: x[1])"
    },
    {
        "input": "¿Cómo puedo generar una secuencia de Fibonacci en Python?",
        "output": "Puedes generar la secuencia de Fibonacci de manera iterativa o recursiva. Ejemplo: def fibonacci(n): a, b = 0, 1; for _ in range(n): yield a; a, b = b, a"
    },
    {
        "input": "¿Cómo puedo eliminar los elementos duplicados de una lista en Python?",
        "output": "Puedes eliminar los duplicados convirtiendo la lista a un set y luego de nuevo a lista. Ejemplo: lista_sin_duplicados = list(set(mi_lista))"
    },
    {
        "input": "¿Cómo puedo verificar si un número es primo en Python?",
        "output": "Puedes verificar si un número es primo comprobando si tiene divisores entre 2 y la raíz cuadrada de ese número. Ejemplo: def es_primo(n): for i in range(2, int(n**0.5) + 1): if n % i == 0: return False; return True"
    },
    {
        "input": "¿Cómo puedo calcular el máximo común divisor (MCD) de dos números en Python?",
        "output": "Puedes usar el algoritmo de Euclides. Ejemplo: def mcd(a, b): while b: a, b = b, a % b; return a"
    },
    {
        "input": "¿Cómo puedo contar las ocurrencias de cada palabra en una lista de palabras en Python?",
        "output": "Puedes usar un diccionario o el módulo 'collections.Counter'. Ejemplo: from collections import Counter; contador = Counter(lista_palabras)"
    },
    {
        "input": "¿Cómo puedo escribir un programa que calcule la suma de los números de una lista en Python?",
        "output": "Puedes usar la función 'sum'. Ejemplo: def suma_lista(lista): return sum(lista)"
    },
    {
        "input": "¿Cómo puedo leer un archivo CSV en Python?",
        "output": "Puedes usar el módulo 'csv'. Ejemplo: import csv; with open('archivo.csv', mode='r') as archivo: lector = csv.reader(archivo); for fila in lector: print(fila)"
    },
    {
        "input": "¿Cómo puedo convertir un diccionario a un objeto JSON en Python?",
        "output": "Puedes usar el módulo 'json'. Ejemplo: import json; json_objeto = json.dumps(diccionario)"
    },
    {
        "input": "¿Cómo puedo hacer que una función acepte un número variable de argumentos en Python?",
        "output": "Puedes usar '*' para aceptar un número variable de argumentos. Ejemplo: def mi_funcion(*args): for arg in args: print(arg)"
    },
    {
        "input": "¿Cómo puedo escribir un programa que verifique si una cadena es un palíndromo en Python?",
        "output": "Puedes verificar si una cadena es un palíndromo comparándola con su reverso. Ejemplo: def es_palindromo(texto): return texto == texto[::-1]"
    },
    {
        "input": "¿Cómo puedo leer una entrada de usuario en Python?",
        "output": "Puedes usar la función 'input' para leer datos del usuario. Ejemplo: nombre = input('¿Cómo te llamas? ')"
    },
    {
        "input": "¿Cómo puedo crear un archivo en Python?",
        "output": "Puedes usar la función 'open' con el modo 'w'. Ejemplo: with open('archivo.txt', 'w') as archivo: archivo.write('Hola Mundo')"
    },
    {
        "input": "¿Cómo puedo hacer una búsqueda lineal en Python?",
        "output": "Puedes recorrer la lista y comparar cada elemento con el valor buscado. Ejemplo: def busqueda_lineal(lista, valor): for i, val in enumerate(lista): if val == valor: return i; return -1"
    },
    {
        "input": "¿Cómo puedo crear una clase en Python que maneje una lista de estudiantes?",
        "output": "Puedes crear una clase que contenga una lista de estudiantes como atributo y métodos para agregar y listar estudiantes. Ejemplo: class Estudiantes: def __init__(self): self.lista = [] def agregar(self, estudiante): self.lista.append(estudiante) def listar(self): return self.lista"
    },
    {
        "input": "¿Cómo puedo escribir un programa que ordene una lista de cadenas por su longitud en Python?",
        "output": "Puedes usar 'sorted' con una función 'key' que mida la longitud de las cadenas. Ejemplo: lista = sorted(lista_cadenas, key=len)"
    },
    {
        "input": "¿Cómo puedo crear un diccionario a partir de dos listas en Python?",
        "output": "Puedes usar la función 'zip' para combinar las listas y luego convertirla a un diccionario. Ejemplo: diccionario = dict(zip(lista_claves, lista_valores))"
    },
    {
        "input": "¿Cómo puedo crear una función que reciba un número variable de argumentos de palabra clave en Python?",
        "output": "Puedes usar '**kwargs' para aceptar un número variable de argumentos con nombre. Ejemplo: def mi_funcion(**kwargs): for clave, valor in kwargs.items(): print(clave, valor)"
    },
    {
        "input": "¿Cómo puedo encontrar el índice de un valor en una lista en Python?",
        "output": "Puedes usar el método 'index'. Ejemplo: indice = mi_lista.index(valor)"
    },
    {
        "input": "¿Cómo puedo generar una lista de números de una secuencia específica en Python?",
        "output": "Puedes usar 'range'. Ejemplo: lista = list(range(1, 11))"
    },
    {
        "input": "¿Cómo puedo escribir un programa que elimine elementos repetidos de una lista en Python?",
        "output": "Puedes usar 'set' para eliminar duplicados y luego convertir de nuevo a lista. Ejemplo: lista_sin_repetidos = list(set(mi_lista))"
    },
    {
        "input": "¿Cómo puedo comprobar si un número está dentro de un rango en Python?",
        "output": "Puedes usar el operador 'in' con 'range'. Ejemplo: if x in range(1, 10): print('Está en el rango')"
    },
    {
        "input": "¿Cómo puedo escribir una función que calcule la potencia de un número en Python?",
        "output": "Puedes usar el operador '**' para calcular la potencia. Ejemplo: def potencia(base, exponente): return base ** exponente"
    },
    {
        "input": "¿Cómo puedo dividir una lista en partes más pequeñas en Python?",
        "output": "Puedes usar un enfoque de 'slicing' para dividir una lista. Ejemplo: partes = [mi_lista[i:i+3] for i in range(0, len(mi_lista), 3)]"
    },
    {
        "input": "¿Cómo puedo contar cuántas veces aparece un elemento en un diccionario en Python?",
        "output": "Puedes usar el método 'values' y 'count'. Ejemplo: mi_diccionario.values().count(valor)"
    },
    {
        "input": "¿Cómo puedo combinar varias listas en una sola en Python?",
        "output": "Puedes usar el operador '+' o el método 'extend'. Ejemplo: lista_combinada = lista1 + lista2 o lista1.extend(lista2)"
    },
    {
        "input": "¿Cómo puedo invertir una lista en Python?",
        "output": "Puedes usar el método 'reverse' o el slicing. Ejemplo: mi_lista.reverse() o mi_lista[::-1]"
    },
    {
        "input": "¿Cómo puedo crear un programa que verifique si una lista está ordenada en Python?",
        "output": "Puedes comparar la lista con su versión ordenada. Ejemplo: if mi_lista == sorted(mi_lista): print('Está ordenada')"
    },
    {
        "input": "¿Cómo puedo crear una función que devuelva el primer elemento no nulo de una lista en Python?",
        "output": "Puedes usar un ciclo 'for' para recorrer la lista. Ejemplo: def primer_no_nulo(lista): for elemento in lista: if elemento is not None: return elemento"
    },
    {
        "input": "¿Cómo puedo generar un número aleatorio en un rango en Python?",
        "output": "Puedes usar 'randint' del módulo 'random'. Ejemplo: import random; num = random.randint(1, 100)"
    },
    {
        "input": "¿Cómo puedo contar los caracteres en una cadena en Python?",
        "output": "Puedes usar la función 'len'. Ejemplo: len(cadena)"
    },
    {
        "input": "¿Cómo puedo convertir una lista de cadenas a minúsculas en Python?",
        "output": "Puedes usar una comprensión de lista con 'lower'. Ejemplo: lista_minusc = [x.lower() for x in lista_cadenas]"
    },
    {
        "input": "¿Cómo puedo ordenar un diccionario por sus valores en Python?",
        "output": "Puedes usar la función 'sorted' con un 'key' que se base en los valores del diccionario. Ejemplo: sorted(diccionario.items(), key=lambda x: x[1])"
    },
    {
        "input": "¿Cómo puedo obtener los elementos comunes entre dos listas en Python?",
        "output": "Puedes usar la operación de intersección de sets. Ejemplo: comunes = list(set(lista1) & set(lista2))"
    },
    {
        "input": "¿Cómo puedo combinar dos diccionarios en uno en Python?",
        "output": "Puedes usar el método 'update' o el operador '**'. Ejemplo: diccionario1.update(diccionario2) o diccionario_combinado = {**diccionario1, **diccionario2}"
    },
    {
        "input": "¿Cómo puedo hacer una validación de correo electrónico en Python?",
        "output": "Puedes usar expresiones regulares con el módulo 're'. Ejemplo: import re; if re.match(r'[^@]+@[^@]+\\.[^@]+', correo): print('Válido')"
    },
    {
        "input": "¿Cómo puedo concatenar múltiples cadenas en Python?",
        "output": "Puedes usar el operador '+' o el método 'join'. Ejemplo: cadena_concatenada = ''.join(lista_cadenas)"
    },
    {
        "input": "¿Cómo puedo eliminar un elemento de un diccionario en Python?",
        "output": "Puedes usar el método 'del'. Ejemplo: del diccionario['clave']"
    },
    {
        "input": "¿Cómo puedo crear un objeto de una clase en Python?",
        "output": "Puedes crear un objeto llamando a la clase como si fuera una función. Ejemplo: persona = Persona('Juan', 30)"
    },
    {
        "input": "¿Cómo puedo saber si una lista está vacía en Python?",
        "output": "Puedes verificar si la longitud de la lista es cero. Ejemplo: if not lista: print('La lista está vacía')"
    },
    {
        "input": "¿Qué hace el método split()?",
        "output": "Divide un string en una lista de partes según un separador. Por ejemplo: `'hola mundo'.split()` devuelve `['hola', 'mundo']`."
    },
    {
        "input": "¿Para qué sirve el método join() en Python?",
        "output": "Combina elementos de una lista en un string usando un separador. Ejemplo: `','.join(['a', 'b', 'c'])` devuelve `'a,b,c'`."
    },
    {
        "input": "¿Cómo funciona el método reverse() en una lista?",
        "output": "Invierte los elementos de la lista en su lugar. Ejemplo: `mi_lista.reverse()`."
    },
    {
        "input": "¿Qué hace el método len()?",
        "output": "Devuelve la cantidad de elementos en un objeto como una lista, string o diccionario. Ejemplo: `len([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Qué hace el método sort() en una lista?",
        "output": "Ordena los elementos de la lista en su lugar, de menor a mayor por defecto. Ejemplo: `mi_lista.sort()`."
    },
    {
        "input": "¿Cómo funciona el comando pip install?",
        "output": "Instala paquetes de Python desde el repositorio PyPI. Ejemplo: `pip install requests`."
    },
    {
        "input": "¿Qué hace la función int() en Python?",
        "output": "Convierte un string o número flotante a un entero. Ejemplo: `int('10')` devuelve `10`."
    },
    {
        "input": "¿Cómo funciona la función print() en Python?",
        "output": "Muestra información en la consola. Ejemplo: `print('Hola, mundo')` imprime `Hola, mundo`."
    },
    {
        "input": "¿Qué hace la función input() en Python?",
        "output": "Recibe datos del usuario desde la consola como un string. Ejemplo: `nombre = input('¿Cómo te llamas? ')`."
    },
    {
        "input": "¿Para qué sirve la función open() en Python?",
        "output": "Abre archivos para lectura, escritura o añadir contenido. Ejemplo: `open('archivo.txt', 'r')`."
    },
    {
        "input": "¿Qué hace la función sorted()?",
        "output": "Devuelve una nueva lista ordenada sin modificar la original. Ejemplo: `sorted([3, 1, 2])` devuelve `[1, 2, 3]`."
    },
    {
        "input": "¿Cómo funciona la declaración def en Python?",
        "output": "Define una función. Ejemplo: `def saludar(): print('Hola')` crea una función llamada `saludar`."
    },
    {
        "input": "¿Qué hace el operador + con listas en Python?",
        "output": "Combina dos listas en una nueva. Ejemplo: `[1, 2] + [3, 4]` devuelve `[1, 2, 3, 4]`."
    },
    {
        "input": "¿Qué hace la palabra clave class en Python?",
        "output": "Crea una nueva clase para definir objetos. Ejemplo: `class Perro: ...`."
    },
    {
        "input": "¿Cómo funciona el método append() en listas?",
        "output": "Añade un elemento al final de una lista. Ejemplo: `mi_lista.append(4)`."
    },
    {
        "input": "¿Para qué sirve el método remove() en listas?",
        "output": "Elimina la primera ocurrencia de un elemento en la lista. Ejemplo: `mi_lista.remove(3)`."
    },
    {
        "input": "¿Qué hace el operador in en Python?",
        "output": "Comprueba si un elemento está presente en una colección. Ejemplo: `3 in [1, 2, 3]` devuelve `True`."
    },
    {
        "input": "¿Qué hace el método keys() en un diccionario?",
        "output": "Devuelve una vista de todas las claves del diccionario. Ejemplo: `mi_diccionario.keys()`."
    },
    {
        "input": "¿Qué hace el método values() en un diccionario?",
        "output": "Devuelve una vista de todos los valores en el diccionario. Ejemplo: `mi_diccionario.values()`."
    },
    {
        "input": "¿Qué hace la biblioteca random en Python?",
        "output": "Genera números aleatorios y selecciona elementos al azar. Ejemplo: `random.randint(1, 10)` genera un número entre 1 y 10."
    },
    {
        "input": "¿Qué hace la función lambda?",
        "output": "Crea una función anónima de una línea. Ejemplo: `lambda x: x + 1` es una función que suma 1 a `x`."
    },
    {
        "input": "¿Qué hace la función filter() en Python?",
        "output": "Filtra elementos de una colección según una condición. Ejemplo: `filter(lambda x: x > 0, [-1, 0, 1])` devuelve `[1]`."
    },
    {
        "input": "¿Qué hace la función map() en Python?",
        "output": "Aplica una función a cada elemento de una colección. Ejemplo: `map(lambda x: x**2, [1, 2, 3])` devuelve `[1, 4, 9]`."
    },
    {
        "input": "¿Qué hace la función zip()?",
        "output": "Combina elementos de dos o más iterables en pares. Ejemplo: `zip([1, 2], ['a', 'b'])` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué hace pandas.read_csv()?",
        "output": "Carga datos de un archivo CSV en un DataFrame. Ejemplo: `pd.read_csv('datos.csv')`."
    },
    {
        "input": "¿Cómo funciona numpy.array()?",
        "output": "Crea un array de NumPy. Ejemplo: `np.array([1, 2, 3])`."
    },
    {
        "input": "¿Qué hace plt.plot() en Matplotlib?",
        "output": "Crea un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "¿Qué hace el comando django-admin startproject?",
        "output": "Crea la estructura inicial para un proyecto de Django."
    },
    {
        "input": "¿Qué hace el método add() en un conjunto?",
        "output": "Añade un elemento al conjunto. Ejemplo: `mi_conjunto.add(4)`."
    },
    {
        "input": "¿Qué hace el método pop() en un conjunto?",
        "output": "Elimina y devuelve un elemento arbitrario del conjunto. Ejemplo: `mi_conjunto.pop()`."
    },
    {
        "input": "¿Qué hace el decorador @staticmethod?",
        "output": "Define un método estático que no necesita acceso a la instancia de la clase."
    },
    {
        "input": "¿Qué hace el comando import?",
        "output": "Carga módulos o bibliotecas en tu programa. Ejemplo: `import math`."
    },
    {
        "input": "¿Qué hace math.sqrt()?",
        "output": "Calcula la raíz cuadrada de un número. Ejemplo: `math.sqrt(16)` devuelve `4.0`."
    },
    {
        "input": "¿Cómo funciona try-except en Python?",
        "output": "Maneja errores durante la ejecución. Ejemplo: `try: x = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué hace la función enumerate() en Python?",
        "output": "Devuelve un iterable con índices y elementos. Ejemplo: `enumerate(['a', 'b'])` devuelve `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "¿Qué hace la función range() en Python?",
        "output": "Crea un iterable que genera una secuencia de números. Ejemplo: `range(5)` genera `0, 1, 2, 3, 4`."
    },
    {
        "input": "¿Cómo funciona el operador not en Python?",
        "output": "Niega el valor booleano de una expresión. Ejemplo: `not True` devuelve `False`."
    },
    {
        "input": "¿Qué hace la función zip()?",
        "output": "Combina elementos de iterables en tuplas. Ejemplo: `zip([1, 2], ['a', 'b'])` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué hace el operador == en Python?",
        "output": "Compara si dos valores son iguales. Ejemplo: `3 == 3` devuelve `True`."
    },
    {
        "input": "¿Qué hace el operador // en Python?",
        "output": "Realiza una división entera, descartando la parte decimal. Ejemplo: `7 // 2` devuelve `3`."
    },
    {
        "input": "¿Qué hace el operador ** en Python?",
        "output": "Calcula la potencia de un número. Ejemplo: `2 ** 3` devuelve `8`."
    },
    {
        "input": "¿Cómo funciona el operador in en Python?",
        "output": "Verifica si un elemento está en una colección. Ejemplo: `'a' in ['a', 'b', 'c']` devuelve `True`."
    },
    {
        "input": "¿Qué hace pandas.DataFrame()?",
        "output": "Crea un DataFrame a partir de datos como listas o diccionarios. Ejemplo: `pd.DataFrame({'A': [1, 2], 'B': [3, 4]})`."
    },
    {
        "input": "¿Qué hace plt.bar() en Matplotlib?",
        "output": "Crea un gráfico de barras. Ejemplo: `plt.bar(['A', 'B'], [10, 20])`."
    },
    {
        "input": "¿Qué hace el método iloc en Pandas?",
        "output": "Selecciona filas y columnas por índices. Ejemplo: `df.iloc[0, 1]` selecciona el elemento en la primera fila y segunda columna."
    },
    {
        "input": "¿Qué hace el método loc en Pandas?",
        "output": "Selecciona filas y columnas por etiquetas. Ejemplo: `df.loc[0, 'columna']`."
    },
    {
        "input": "¿Qué hace numpy.mean()?",
        "output": "Calcula el promedio de un array. Ejemplo: `np.mean([1, 2, 3])` devuelve `2.0`."
    },
    {
        "input": "¿Qué hace numpy.median()?",
        "output": "Calcula la mediana de un array. Ejemplo: `np.median([1, 2, 3, 4])` devuelve `2.5`."
    },
    {
        "input": "¿Qué hace numpy.std()?",
        "output": "Calcula la desviación estándar de un array. Ejemplo: `np.std([1, 2, 3])` devuelve `0.816`."
    },
    {
        "input": "¿Cómo funciona matplotlib.pyplot.show()?",
        "output": "Muestra el gráfico generado en una ventana emergente. Ejemplo: `plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "¿Qué hace el decorador @classmethod?",
        "output": "Define un método que recibe la clase como primer argumento en lugar de la instancia. Ejemplo: `@classmethod def mi_metodo(cls): ...`."
    },
    {
        "input": "¿Qué hace el decorador @property?",
        "output": "Convierte un método en un atributo de solo lectura. Ejemplo: `@property def nombre(self): return self._nombre`."
    },
    {
        "input": "¿Qué hace la función isinstance()?",
        "output": "Verifica si un objeto pertenece a una clase o subclase. Ejemplo: `isinstance(3, int)` devuelve `True`."
    },
    {
        "input": "¿Cómo funciona la función hasattr()?",
        "output": "Comprueba si un objeto tiene un atributo específico. Ejemplo: `hasattr(obj, 'atributo')`."
    },
    {
        "input": "¿Qué hace la función getattr()?",
        "output": "Obtiene el valor de un atributo de un objeto. Ejemplo: `getattr(obj, 'atributo')`."
    },
    {
        "input": "¿Cómo funciona la función setattr()?",
        "output": "Asigna un valor a un atributo de un objeto. Ejemplo: `setattr(obj, 'atributo', valor)`."
    },
    {
        "input": "¿Qué hace dict.get()?",
        "output": "Devuelve el valor de una clave o un valor predeterminado si la clave no existe. Ejemplo: `mi_diccionario.get('clave', 'valor_predeterminado')`."
    },
    {
        "input": "¿Qué hace la palabra clave pass en Python?",
        "output": "Indica un bloque de código vacío. Ejemplo: `def funcion_vacia(): pass`."
    },
    {
        "input": "¿Qué hace la palabra clave yield en Python?",
        "output": "Crea un generador que devuelve valores uno a uno en lugar de todos a la vez. Ejemplo: `yield x`."
    },
    {
        "input": "¿Qué hace el método popitem() en un diccionario?",
        "output": "Elimina y devuelve un par clave-valor arbitrario del diccionario. Ejemplo: `mi_diccionario.popitem()`."
    },
    {
        "input": "¿Qué hace el método clear() en un diccionario?",
        "output": "Elimina todos los elementos del diccionario. Ejemplo: `mi_diccionario.clear()`."
    },
    {
        "input": "¿Cómo funciona la palabra clave with en Python?",
        "output": "Maneja automáticamente recursos como archivos. Ejemplo: `with open('archivo.txt') as archivo:`."
    },
    {
        "input": "¿Qué hace el método isdigit() en un string?",
        "output": "Verifica si todos los caracteres del string son dígitos. Ejemplo: `'123'.isdigit()` devuelve `True`."
    },
    {
        "input": "¿Qué hace el método upper() en un string?",
        "output": "Convierte todos los caracteres del string a mayúsculas. Ejemplo: `'hola'.upper()` devuelve `'HOLA'`."
    },
    {
        "input": "¿Qué hace el método lower() en un string?",
        "output": "Convierte todos los caracteres del string a minúsculas. Ejemplo: `'HOLA'.lower()` devuelve `'hola'`."
    },
    {
        "input": "¿Qué hace el método replace() en un string?",
        "output": "Reemplaza una subcadena por otra. Ejemplo: `'hola mundo'.replace('mundo', 'Python')` devuelve `'hola Python'`."
    },
    {
        "input": "¿Qué hace la función eval() en Python?",
        "output": "Evalúa una expresión Python en forma de string. Ejemplo: `eval('2 + 3')` devuelve `5`."
    },
    {
        "input": "¿Qué hace la función exec() en Python?",
        "output": "Ejecuta código Python en forma de string. Ejemplo: `exec('print(1 + 2)')` imprime `3`."
    },
    {
        "input": "¿Qué hace el operador is en Python?",
        "output": "Comprueba si dos referencias apuntan al mismo objeto en memoria. Ejemplo: `a is b`."
    },
    {
        "input": "¿Qué hace el operador and en Python?",
        "output": "Evalúa dos expresiones y devuelve `True` si ambas son verdaderas. Ejemplo: `True and False` devuelve `False`."
    },
    {
        "input": "¿Cómo funciona la palabra clave assert?",
        "output": "Verifica una condición y lanza una excepción si no se cumple. Ejemplo: `assert 2 + 2 == 4`."
    },
    {
        "input": "¿Qué hace la función all() en Python?",
        "output": "Devuelve `True` si todos los elementos de un iterable son verdaderos. Ejemplo: `all([True, True, False])` devuelve `False`."
    },
    {
        "input": "¿Qué hace la función any() en Python?",
        "output": "Devuelve `True` si al menos un elemento de un iterable es verdadero. Ejemplo: `any([False, False, True])` devuelve `True`."
    },
    {
        "input": "¿Qué hace la función max() en Python?",
        "output": "Devuelve el elemento máximo de un iterable. Ejemplo: `max([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Qué hace la función min() en Python?",
        "output": "Devuelve el elemento mínimo de un iterable. Ejemplo: `min([1, 2, 3])` devuelve `1`."
    },
    {
        "input": "¿Qué hace el método count() en listas?",
        "output": "Devuelve el número de veces que un elemento aparece en la lista. Ejemplo: `[1, 2, 2, 3].count(2)` devuelve `2`."
    },
    {
        "input": "¿Qué hace el método index() en listas?",
        "output": "Devuelve el índice de la primera aparición de un elemento. Ejemplo: `[1, 2, 3].index(2)` devuelve `1`."
    },
    {
        "input": "¿Qué hace la función round() en Python?",
        "output": "Redondea un número al entero más cercano o a un número de decimales especificado. Ejemplo: `round(3.14159, 2)` devuelve `3.14`."
    },
    {
        "input": "¿Qué hace el método strip() en strings?",
        "output": "Elimina los espacios en blanco al principio y al final del string. Ejemplo: `' hola '.strip()` devuelve `'hola'`."
    },
    {
        "input": "¿Qué hace el método splitlines() en strings?",
        "output": "Divide un string en líneas. Ejemplo: `'linea1\\nlinea2'.splitlines()` devuelve `['linea1', 'linea2']`."
    },
    {
        "input": "¿Qué hace el método startswith() en strings?",
        "output": "Comprueba si un string comienza con una subcadena específica. Ejemplo: `'hola'.startswith('ho')` devuelve `True`."
    },
    {
        "input": "¿Qué hace el método endswith() en strings?",
        "output": "Comprueba si un string termina con una subcadena específica. Ejemplo: `'hola'.endswith('la')` devuelve `True`."
    },
    {
        "input": "¿Qué hace la función abs() en Python?",
        "output": "Devuelve el valor absoluto de un número. Ejemplo: `abs(-5)` devuelve `5`."
    },
    {
        "input": "¿Qué hace el método deepcopy() de la biblioteca copy?",
        "output": "Crea una copia completa de un objeto, incluyendo los objetos anidados. Ejemplo: `copy.deepcopy(objeto)`."
    },
    {
        "input": "¿Qué hace el método shallow copy() en Python?",
        "output": "Crea una copia superficial de un objeto. Los objetos anidados no se copian profundamente."
    },
    {
        "input": "¿Qué hace math.ceil()?",
        "output": "Devuelve el entero más pequeño mayor o igual a un número. Ejemplo: `math.ceil(4.2)` devuelve `5`."
    },
    {
        "input": "¿Qué hace math.floor()?",
        "output": "Devuelve el entero más grande menor o igual a un número. Ejemplo: `math.floor(4.8)` devuelve `4`."
    },
    {
        "input": "¿Qué hace math.log()?",
        "output": "Calcula el logaritmo de un número. Ejemplo: `math.log(8, 2)` devuelve `3.0`."
    },
    {
        "input": "¿Qué hace math.factorial()?",
        "output": "Calcula el factorial de un número entero. Ejemplo: `math.factorial(5)` devuelve `120`."
    },
    {
        "input": "¿Qué hace random.choice()?",
        "output": "Selecciona un elemento aleatorio de una lista. Ejemplo: `random.choice([1, 2, 3])` devuelve un valor al azar de la lista."
    },
    {
        "input": "¿Qué hace random.shuffle()?",
        "output": "Mezcla aleatoriamente los elementos de una lista. Ejemplo: `random.shuffle(mi_lista)`."
    },
    {
        "input": "¿Qué hace random.sample()?",
        "output": "Devuelve una lista con una muestra aleatoria de elementos. Ejemplo: `random.sample([1, 2, 3], 2)` devuelve una lista con dos elementos al azar."
    },
    {
        "input": "¿Qué hace os.getcwd()?",
        "output": "Devuelve el directorio de trabajo actual. Ejemplo: `os.getcwd()`."
    },
    {
        "input": "¿Qué hace os.listdir()?",
        "output": "Devuelve una lista de archivos y directorios en el directorio especificado. Ejemplo: `os.listdir('.')`."
    },
    {
        "input": "¿Qué hace os.remove()?",
        "output": "Elimina un archivo. Ejemplo: `os.remove('archivo.txt')`."
    },
    {
        "input": "¿Qué hace os.makedirs()?",
        "output": "Crea un directorio y todos sus directorios padres si no existen. Ejemplo: `os.makedirs('ruta/nueva')`."
    },
    {
        "input": "¿Qué hace shutil.copy()?",
        "output": "Copia un archivo de una ubicación a otra. Ejemplo: `shutil.copy('origen.txt', 'destino.txt')`."
    },
    {
        "input": "¿Qué hace shutil.move()?",
        "output": "Mueve un archivo o directorio a una nueva ubicación. Ejemplo: `shutil.move('archivo.txt', 'nueva_ruta/')`."
    },
    {
        "input": "¿Qué hace shutil.rmtree()?",
        "output": "Elimina un directorio y todo su contenido. Ejemplo: `shutil.rmtree('directorio')`."
    },
    {
        "input": "¿Qué hace subprocess.run()?",
        "output": "Ejecuta un comando del sistema y espera a que termine. Ejemplo: `subprocess.run(['ls', '-l'])`."
    },
    {
        "input": "¿Qué hace datetime.now()?",
        "output": "Devuelve la fecha y hora actual. Ejemplo: `datetime.now()`."
    },
    {
        "input": "¿Qué hace datetime.strptime()?",
        "output": "Convierte un string en un objeto datetime según un formato. Ejemplo: `datetime.strptime('2024-12-19', '%Y-%m-%d')`."
    },
    {
        "input": "¿Qué hace timedelta en datetime?",
        "output": "Permite realizar operaciones con fechas y horas. Ejemplo: `datetime.now() + timedelta(days=1)` suma un día."
    },
    {
        "input": "¿Qué hace re.match()?",
        "output": "Busca un patrón al inicio de un string. Ejemplo: `re.match(r'\\d+', '123abc')` devuelve un objeto de coincidencia."
    },
    {
        "input": "¿Qué hace re.search()?",
        "output": "Busca un patrón en cualquier parte de un string. Ejemplo: `re.search(r'\\d+', 'abc123')`."
    },
    {
        "input": "¿Qué hace re.findall()?",
        "output": "Devuelve todas las coincidencias de un patrón en un string. Ejemplo: `re.findall(r'\\d+', 'abc123def456')` devuelve `['123', '456']`."
    },
    {
        "input": "¿Cómo uso la función isinstance()?",
        "output": "Sirve para verificar si un objeto pertenece a una clase específica. Ejemplo: `isinstance(5, int)` devuelve `True`."
    },
    {
        "input": "¿Qué significa hasattr()?",
        "output": "Verifica si un objeto tiene un atributo específico. Ejemplo: `hasattr(obj, 'nombre')` devuelve `True` si el atributo existe."
    },
    {
        "input": "¿Qué hace setattr en Python?",
        "output": "Asigna un valor a un atributo de un objeto. Ejemplo: `setattr(obj, 'edad', 30)` asigna 30 al atributo `edad`."
    },
    {
        "input": "¿Cómo puedo usar el método keys() de un diccionario?",
        "output": "Devuelve todas las claves de un diccionario. Ejemplo: `mi_diccionario.keys()` devuelve `dict_keys(['clave1', 'clave2'])`."
    },
    {
        "input": "¿Qué hace la función max()?",
        "output": "Encuentra el valor más grande en una colección. Ejemplo: `max([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Para qué sirve la función min() en Python?",
        "output": "Encuentra el valor más pequeño en una colección. Ejemplo: `min([5, 3, 7])` devuelve `3`."
    },
    {
        "input": "¿Cómo funciona map()?",
        "output": "Aplica una función a cada elemento de un iterable. Ejemplo: `list(map(lambda x: x**2, [1, 2, 3]))` devuelve `[1, 4, 9]`."
    },
    {
        "input": "¿Qué uso tiene filter()?",
        "output": "Filtra elementos de un iterable según una condición. Ejemplo: `list(filter(lambda x: x > 2, [1, 2, 3, 4]))` devuelve `[3, 4]`."
    },
    {
        "input": "¿Qué hace zip()?",
        "output": "Combina elementos de varios iterables en pares o tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué devuelve all() en Python?",
        "output": "Devuelve `True` si todos los elementos de un iterable son verdaderos. Ejemplo: `all([True, 1, 'Texto'])` devuelve `True`."
    },
    {
        "input": "¿Cómo funciona any()?",
        "output": "Devuelve `True` si al menos un elemento de un iterable es verdadero. Ejemplo: `any([0, False, 3])` devuelve `True`."
    },
    {
        "input": "¿Qué utilidad tiene re.findall()?",
        "output": "Encuentra todas las coincidencias de un patrón en un string. Ejemplo: `re.findall(r'\\d+', '123abc456')` devuelve `['123', '456']`."
    },
    {
        "input": "¿Cómo se usa re.match()?",
        "output": "Busca un patrón al inicio de un string. Ejemplo: `re.match(r'\\d+', '123abc')` encuentra `123`."
    },
    {
        "input": "¿Qué hace la función round()?",
        "output": "Redondea un número al entero más cercano o con decimales específicos. Ejemplo: `round(3.456, 2)` devuelve `3.46`."
    },
    {
        "input": "¿Cómo funciona strip() en un string?",
        "output": "Elimina los espacios en blanco al inicio y final del string. Ejemplo: `' hola '.strip()` devuelve `'hola'`."
    },
    {
        "input": "¿Qué hace split() en cadenas?",
        "output": "Divide un string en una lista usando un separador. Ejemplo: `'a,b,c'.split(',')` devuelve `['a', 'b', 'c']`."
    },
    {
        "input": "¿Qué hace replace()?",
        "output": "Reemplaza una subcadena por otra en un string. Ejemplo: `'Python es genial'.replace('genial', 'poderoso')` devuelve `'Python es poderoso'`."
    },
    {
        "input": "¿Cómo uso math.sqrt()?",
        "output": "Calcula la raíz cuadrada de un número. Ejemplo: `math.sqrt(16)` devuelve `4.0`."
    },
    {
        "input": "¿Qué devuelve math.factorial()?",
        "output": "Calcula el factorial de un número. Ejemplo: `math.factorial(5)` devuelve `120`."
    },
    {
        "input": "¿Cómo uso random.randint()?",
        "output": "Genera un número entero aleatorio entre dos valores. Ejemplo: `random.randint(1, 10)` devuelve un número entre 1 y 10."
    },
    {
        "input": "¿Qué utilidad tiene random.choice()?",
        "output": "Selecciona un elemento al azar de una lista. Ejemplo: `random.choice([1, 2, 3])` devuelve uno de los elementos."
    },
    {
        "input": "¿Qué hace os.listdir()?",
        "output": "Lista los archivos y carpetas en un directorio. Ejemplo: `os.listdir('.')` muestra el contenido del directorio actual."
    },
    {
        "input": "¿Cómo funciona os.makedirs()?",
        "output": "Crea directorios y subdirectorios. Ejemplo: `os.makedirs('nueva/carpeta')` crea la estructura especificada."
    },
    {
        "input": "¿Qué hace shutil.copy()?",
        "output": "Copia un archivo de una ubicación a otra. Ejemplo: `shutil.copy('archivo.txt', 'copia.txt')`."
    },
    {
        "input": "¿Cómo se usa subprocess.run()?",
        "output": "Ejecuta un comando del sistema. Ejemplo: `subprocess.run(['ls', '-l'])` lista archivos en Linux."
    },
    {
        "input": "¿Cómo convierto una fecha con datetime.strptime()?",
        "output": "Convierte un string en un objeto datetime según un formato. Ejemplo: `datetime.strptime('2024-12-19', '%Y-%m-%d')`."
    },
    {
        "input": "¿Qué hace timedelta?",
        "output": "Permite sumar o restar intervalos de tiempo a objetos datetime. Ejemplo: `datetime.now() + timedelta(days=1)` suma un día."
    },
    {
        "input": "¿Cómo funciona pandas.read_csv()?",
        "output": "Carga datos desde un archivo CSV en un DataFrame. Ejemplo: `pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Qué devuelve plt.plot()?",
        "output": "Crea un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])` genera un gráfico con esos puntos."
    },
    {
        "input": "¿Cómo uso plt.bar()?",
        "output": "Crea un gráfico de barras. Ejemplo: `plt.bar(['A', 'B'], [10, 20])` genera un gráfico con dos barras."
    },
    {
        "input": "¿Qué hace zip()?",
        "output": "Combina elementos de varios iterables en tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Cómo funciona hasattr()?",
        "output": "Comprueba si un objeto tiene un atributo específico. Ejemplo: `hasattr(obj, 'atributo')` devuelve `True` si existe."
    },
    {
        "input": "¿Qué hace @property?",
        "output": "Convierte un método en un atributo de solo lectura. Ejemplo: `@property def nombre(self): return self._nombre`."
    },
    {
        "input": "¿Cómo uso @classmethod?",
        "output": "Define un método de clase que recibe `cls` como primer argumento. Ejemplo: `@classmethod def ejemplo(cls): ...`."
    },
    {
        "input": "¿Qué hace enumerate()?",
        "output": "Devuelve índices y elementos de un iterable. Ejemplo: `list(enumerate(['a', 'b']))` devuelve `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "¿Qué utilidad tiene isinstance() en Python?",
        "output": "Comprueba si un objeto pertenece a una clase específica o su subclase. Ejemplo: `isinstance(10, int)` devuelve `True`."
    },
    {
        "input": "¿Para qué sirve hasattr() en un objeto?",
        "output": "Verifica si un objeto tiene un atributo dado. Ejemplo: `hasattr(objeto, 'edad')` devuelve `True` si `edad` es un atributo del objeto."
    },
    {
        "input": "¿Cómo funciona setattr en Python?",
        "output": "Permite asignar un valor a un atributo de un objeto dinámicamente. Ejemplo: `setattr(persona, 'nombre', 'Juan')` asigna el nombre `Juan`."
    },
    {
        "input": "¿Qué devuelve keys() en un diccionario?",
        "output": "Retorna las claves del diccionario como un objeto iterable. Ejemplo: `mi_diccionario.keys()` devuelve `dict_keys(['clave1', 'clave2'])`."
    },
    {
        "input": "¿Qué permite hacer max()?",
        "output": "Encuentra el mayor valor en una lista o iterable. Ejemplo: `max([5, 3, 9])` devuelve `9`."
    },
    {
        "input": "¿Cómo uso min() en Python?",
        "output": "Determina el valor más pequeño en un iterable. Ejemplo: `min([10, 5, 7])` devuelve `5`."
    },
    {
        "input": "¿Qué operación realiza map()?",
        "output": "Aplica una función a todos los elementos de un iterable. Ejemplo: `list(map(lambda x: x+1, [1, 2, 3]))` devuelve `[2, 3, 4]`."
    },
    {
        "input": "¿Cómo funciona filter()?",
        "output": "Filtra los elementos de un iterable que cumplen una condición. Ejemplo: `list(filter(lambda x: x > 1, [0, 1, 2]))` devuelve `[2]`."
    },
    {
        "input": "¿Qué genera zip()?",
        "output": "Combina iterables en pares como tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Qué hace all() en Python?",
        "output": "Devuelve `True` si todos los elementos de un iterable son verdaderos. Ejemplo: `all([True, 1, 'Texto'])` da `True`."
    },
    {
        "input": "¿Qué utilidad tiene any()?",
        "output": "Retorna `True` si al menos un elemento de un iterable es verdadero. Ejemplo: `any([0, False, 3])` devuelve `True`."
    },
    {
        "input": "¿Qué hace re.findall()?",
        "output": "Busca y devuelve todas las coincidencias de un patrón en un string. Ejemplo: `re.findall(r'\\d+', '12abc34')` devuelve `['12', '34']`."
    },
    {
        "input": "¿Cómo opera re.match()?",
        "output": "Busca coincidencias al inicio de un string. Ejemplo: `re.match(r'\\d+', '123abc')` devuelve un objeto con `123`."
    },
    {
        "input": "¿Qué devuelve round()?",
        "output": "Redondea un número a un entero o al número de decimales especificado. Ejemplo: `round(2.71828, 2)` da `2.72`."
    },
    {
        "input": "¿Cómo se usa strip() con cadenas?",
        "output": "Elimina los espacios en blanco al principio y al final de un string. Ejemplo: `'  hola  '.strip()` da `'hola'`."
    },
    {
        "input": "¿Qué permite split()?",
        "output": "Divide un string en partes según un separador. Ejemplo: `'a,b,c'.split(',')` devuelve `['a', 'b', 'c']`."
    },
    {
        "input": "¿Para qué sirve replace() en Python?",
        "output": "Reemplaza una subcadena por otra en un string. Ejemplo: `'Python es fácil'.replace('fácil', 'genial')` da `'Python es genial'`."
    },
    {
        "input": "¿Cómo funciona math.sqrt()?",
        "output": "Calcula la raíz cuadrada de un número. Ejemplo: `math.sqrt(25)` devuelve `5.0`."
    },
    {
        "input": "¿Qué devuelve math.factorial()?",
        "output": "Calcula el factorial de un entero. Ejemplo: `math.factorial(4)` da `24`."
    },
    {
        "input": "¿Qué genera random.randint()?",
        "output": "Devuelve un número entero aleatorio dentro de un rango. Ejemplo: `random.randint(1, 100)`."
    },
    {
        "input": "¿Cómo funciona random.choice()?",
        "output": "Selecciona un elemento al azar de un iterable. Ejemplo: `random.choice(['rojo', 'azul', 'verde'])` devuelve uno de esos colores."
    },
    {
        "input": "¿Qué hace os.listdir()?",
        "output": "Lista los archivos y carpetas de un directorio. Ejemplo: `os.listdir('.')` devuelve los elementos del directorio actual."
    },
    {
        "input": "¿Qué permite hacer os.makedirs()?",
        "output": "Crea directorios, incluidos los intermedios si no existen. Ejemplo: `os.makedirs('ruta/nueva/carpeta')`."
    },
    {
        "input": "¿Qué utilidad tiene shutil.copy()?",
        "output": "Copia un archivo de una ubicación a otra. Ejemplo: `shutil.copy('archivo.txt', 'backup.txt')`."
    },
    {
        "input": "¿Qué hace subprocess.run()?",
        "output": "Ejecuta un comando del sistema y espera su finalización. Ejemplo: `subprocess.run(['echo', 'Hola'])` imprime `Hola`."
    },
    {
        "input": "¿Cómo opera datetime.strptime()?",
        "output": "Convierte un string en un objeto datetime según un formato. Ejemplo: `datetime.strptime('2023-01-01', '%Y-%m-%d')`."
    },
    {
        "input": "¿Qué permite timedelta?",
        "output": "Suma o resta intervalos de tiempo a un objeto datetime. Ejemplo: `datetime.now() + timedelta(days=2)` añade dos días."
    },
    {
        "input": "¿Qué hace pandas.read_csv()?",
        "output": "Carga un archivo CSV como un DataFrame de Pandas. Ejemplo: `pd.read_csv('datos.csv')`."
    },
    {
        "input": "¿Qué crea plt.plot()?",
        "output": "Genera un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])` crea un gráfico con esos puntos."
    },
    {
        "input": "¿Cómo opera plt.bar()?",
        "output": "Crea un gráfico de barras. Ejemplo: `plt.bar(['manzanas', 'peras'], [5, 7])` genera un gráfico con esas barras."
    },
    {
        "input": "¿Qué devuelve enumerate()?",
        "output": "Crea un iterable que genera pares índice-elemento. Ejemplo: `list(enumerate(['a', 'b']))` devuelve `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "¿Cómo funciona hasattr()?",
        "output": "Comprueba si un objeto tiene un atributo. Ejemplo: `hasattr(obj, 'nombre')` devuelve `True` si `nombre` existe."
    },
    {
        "input": "¿Qué utilidad tiene @property?",
        "output": "Convierte un método en un atributo calculado de solo lectura. Ejemplo: `@property def nombre_completo(self): return self.nombre + ' ' + self.apellido`."
    },
    {
        "input": "¿Qué logra @classmethod?",
        "output": "Define un método que opera en la clase en lugar de la instancia. Ejemplo: `@classmethod def crear(cls): return cls()`."
    },
    {
        "input": "¿Cómo puedo crear un archivo en Python?",
        "output": "Usa la función `open()` en modo escritura (`'w'`). Ejemplo: `with open('archivo.txt', 'w') as archivo: archivo.write('Hola, mundo')`."
    },
    {
        "input": "¿Cómo leo un archivo línea por línea?",
        "output": "Utiliza un bucle `for` con el objeto archivo. Ejemplo: `with open('archivo.txt', 'r') as archivo: for linea in archivo: print(linea.strip())`."
    },
    {
        "input": "¿Qué diferencia hay entre listas y tuplas en Python?",
        "output": "Las listas son mutables y las tuplas no. Ejemplo: `mi_lista[0] = 10` es válido, pero `mi_tupla[0] = 10` no lo es."
    },
    {
        "input": "¿Qué son las excepciones en Python?",
        "output": "Son errores que ocurren durante la ejecución del programa. Puedes manejarlas con `try-except`. Ejemplo: `try: x = 1/0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Cómo manejo errores en Python?",
        "output": "Usa bloques `try-except`. Ejemplo: `try: resultado = 1 / 0 except ZeroDivisionError: print('Error: División por cero')`."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Es un objeto que permite recorrer elementos de una colección, uno a la vez. Ejemplo: `iterador = iter([1, 2, 3])`."
    },
    {
        "input": "¿Qué hace un generador en Python?",
        "output": "Crea un iterador que genera valores bajo demanda usando `yield`. Ejemplo: `def generador(): yield 1; yield 2`."
    },
    {
        "input": "¿Cómo se usa un breakpoint?",
        "output": "Detiene la ejecución del programa para depurar. Usa `breakpoint()` o configura puntos en tu IDE."
    },
    {
        "input": "¿Qué es un archivo JSON?",
        "output": "Es un formato ligero para almacenar y transportar datos en pares clave-valor. Ejemplo: `{'nombre': 'Juan', 'edad': 30}`."
    },
    {
        "input": "¿Cómo cargo un archivo JSON en Python?",
        "output": "Usa la biblioteca `json` con `json.load()`. Ejemplo: `import json; with open('datos.json', 'r') as f: data = json.load(f)`."
    },
    {
        "input": "¿Cómo escribo datos en un archivo JSON?",
        "output": "Usa `json.dump()`. Ejemplo: `with open('datos.json', 'w') as f: json.dump({'nombre': 'Ana'}, f)`."
    },
    {
        "input": "¿Qué son las expresiones regulares?",
        "output": "Son patrones utilizados para buscar o manipular texto. Ejemplo: `re.search(r'\\d+', 'abc123')` busca números."
    },
    {
        "input": "¿Qué es un API?",
        "output": "Es una interfaz que permite que diferentes aplicaciones se comuniquen entre sí. Ejemplo: una API REST para obtener datos de un servidor."
    },
    {
        "input": "¿Cómo envío una solicitud HTTP en Python?",
        "output": "Usa la biblioteca `requests`. Ejemplo: `import requests; response = requests.get('https://api.example.com')`."
    },
    {
        "input": "¿Qué diferencia hay entre POST y GET en HTTP?",
        "output": "`GET` recupera datos y `POST` envía datos al servidor. Ejemplo: `requests.get('url')` y `requests.post('url', data={'clave': 'valor'})`."
    },
    {
        "input": "¿Cómo se usa Flask para crear una aplicación web?",
        "output": "Define rutas y funciones con Flask. Ejemplo: `from flask import Flask; app = Flask(__name__); @app.route('/') def home(): return 'Hola, mundo'`."
    },
    {
        "input": "¿Cómo se crea una base de datos SQLite en Python?",
        "output": "Usa la biblioteca `sqlite3`. Ejemplo: `import sqlite3; conn = sqlite3.connect('mi_base.db')`."
    },
    {
        "input": "¿Qué hace pandas.DataFrame()?",
        "output": "Crea una tabla de datos en Pandas. Ejemplo: `pd.DataFrame({'A': [1, 2], 'B': [3, 4]})`."
    },
    {
        "input": "¿Cómo selecciono filas en Pandas?",
        "output": "Usa `.iloc` para índices o `.loc` para etiquetas. Ejemplo: `df.iloc[0]` o `df.loc['fila1']`."
    },
    {
        "input": "¿Qué diferencia hay entre print y logging?",
        "output": "`print` muestra información en la consola, mientras que `logging` permite registrar mensajes en diferentes niveles como `INFO`, `WARNING` y `ERROR`."
    },
    {
        "input": "¿Qué es un decorator en Python?",
        "output": "Es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador def mi_funcion(): ...`."
    },
    {
        "input": "¿Cómo se crean gráficos en Matplotlib?",
        "output": "Usa funciones como `plt.plot()` para gráficos de líneas o `plt.bar()` para gráficos de barras."
    },
    {
        "input": "¿Qué es un archivo CSV?",
        "output": "Es un archivo de texto donde los datos están separados por comas. Ejemplo: `nombre,edad\\nJuan,30`."
    },
    {
        "input": "¿Cómo leo un archivo CSV en Python?",
        "output": "Usa Pandas. Ejemplo: `import pandas as pd; df = pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Qué es un contexto con with en Python?",
        "output": "Maneja automáticamente la apertura y cierre de recursos. Ejemplo: `with open('archivo.txt') as f: data = f.read()`."
    },
    {
        "input": "¿Cómo creo un entorno virtual en Python?",
        "output": "Usa `venv`. Ejemplo: `python -m venv mi_entorno` y actívalo con `source mi_entorno/bin/activate`."
    },
    {
        "input": "¿Qué es una clase en Python?",
        "output": "Es una plantilla para crear objetos. Ejemplo: `class Persona: def __init__(self, nombre): self.nombre = nombre`."
    },
    {
        "input": "¿Qué es un objeto en Python?",
        "output": "Es una instancia de una clase que contiene atributos y métodos definidos en esa clase."
    },
    {
        "input": "¿Cómo funciona __init__ en Python?",
        "output": "Es el constructor que inicializa los atributos de un objeto. Ejemplo: `class Perro: def __init__(self, nombre): self.nombre = nombre`."
    },
    {
        "input": "¿Cómo hago pruebas unitarias en Python?",
        "output": "Usa el módulo `unittest`. Ejemplo: `import unittest; class TestMiFuncion(unittest.TestCase): def test_suma(self): self.assertEqual(1+1, 2)`."
    },
    {
        "input": "¿Qué es pytest?",
        "output": "Es un framework para realizar pruebas en Python, más flexible y sencillo que `unittest`. Ejemplo: `def test_suma(): assert 1+1 == 2`."
    },
    {
        "input": "¿Cómo manipulo fechas en Python?",
        "output": "Usa el módulo `datetime`. Ejemplo: `from datetime import datetime; ahora = datetime.now()`."
    },
    {
        "input": "¿Qué es la recursión?",
        "output": "Es una técnica donde una función se llama a sí misma para resolver problemas. Ejemplo: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "¿Cómo ordeno una lista en Python?",
        "output": "Usa `.sort()` para modificar la lista o `sorted()` para devolver una nueva lista ordenada. Ejemplo: `mi_lista.sort()`."
    },
    {
        "input": "¿Qué es una función lambda?",
        "output": "Es una función anónima de una sola línea. Ejemplo: `lambda x: x + 1` es equivalente a `def sumar_uno(x): return x + 1`."
    },
    {
        "input": "¿Cómo se usa la recursión en Python?",
        "output": "Usa una función que se llama a sí misma. Ejemplo: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "¿Qué diferencia hay entre parámetros y argumentos?",
        "output": "Los parámetros son las variables definidas en una función, y los argumentos son los valores que se pasan a esos parámetros al llamar la función."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Es un archivo que contiene definiciones y funciones reutilizables. Ejemplo: `import math` para usar funciones matemáticas."
    },
    {
        "input": "¿Cómo puedo usar import en Python?",
        "output": "Permite cargar módulos para reutilizar sus funciones. Ejemplo: `import math; print(math.sqrt(16))`."
    },
    {
        "input": "¿Qué es un paquete en Python?",
        "output": "Es una colección de módulos organizados en un directorio con un archivo `__init__.py`."
    },
    {
        "input": "¿Cómo instalo bibliotecas en Python?",
        "output": "Usa el comando `pip install`. Ejemplo: `pip install requests` instala la biblioteca `requests`."
    },
    {
        "input": "¿Qué es el PEP 8?",
        "output": "Es una guía de estilo para escribir código Python de manera legible y consistente."
    },
    {
        "input": "¿Cómo se usa logging en Python?",
        "output": "Permite registrar eventos en tu aplicación. Ejemplo: `import logging; logging.info('Mensaje informativo')`."
    },
    {
        "input": "¿Qué son las comprensiones de listas?",
        "output": "Son una forma concisa de crear listas. Ejemplo: `[x**2 for x in range(5)]` genera `[0, 1, 4, 9, 16]`."
    },
    {
        "input": "¿Cómo elimino duplicados en una lista?",
        "output": "Convierte la lista a un conjunto y luego de nuevo a lista. Ejemplo: `list(set([1, 2, 2, 3]))` devuelve `[1, 2, 3]`."
    },
    {
        "input": "¿Qué diferencia hay entre `is` y `==`?",
        "output": "`is` compara si dos objetos son el mismo en memoria, mientras que `==` compara si los valores son iguales."
    },
    {
        "input": "¿Qué es un contexto `with`?",
        "output": "Maneja automáticamente la apertura y cierre de recursos. Ejemplo: `with open('archivo.txt') as f: data = f.read()`."
    },
    {
        "input": "¿Qué diferencia hay entre `w` y `a` al abrir un archivo?",
        "output": "`w` sobrescribe el archivo si existe, y `a` añade contenido al final sin borrar lo anterior."
    },
    {
        "input": "¿Cómo ordeno un diccionario por sus claves?",
        "output": "Usa `sorted()`. Ejemplo: `sorted(mi_diccionario.items())` devuelve una lista de pares clave-valor ordenados."
    },
    {
        "input": "¿Cómo convierto una lista en un string?",
        "output": "Usa el método `join()`. Ejemplo: `', '.join(['a', 'b', 'c'])` devuelve `'a, b, c'`."
    },
    {
        "input": "¿Qué hace `del` en Python?",
        "output": "Elimina variables, elementos de una lista o claves de un diccionario. Ejemplo: `del mi_lista[0]`."
    },
    {
        "input": "¿Cómo creo una excepción personalizada?",
        "output": "Crea una nueva clase que herede de `Exception`. Ejemplo: `class MiExcepcion(Exception): pass`."
    },
    {
        "input": "¿Qué es una API RESTful?",
        "output": "Es una interfaz que permite que sistemas interactúen usando HTTP siguiendo los principios REST."
    },
    {
        "input": "¿Cómo configuro un entorno virtual en Python?",
        "output": "Usa `python -m venv`. Ejemplo: `python -m venv mi_entorno` crea un entorno virtual llamado `mi_entorno`."
    },
    {
        "input": "¿Cómo pruebo una API con Python?",
        "output": "Usa la biblioteca `requests`. Ejemplo: `import requests; response = requests.get('https://api.example.com'); print(response.json())`."
    },
    {
        "input": "¿Cómo creo un gráfico de torta en Matplotlib?",
        "output": "Usa `plt.pie()`. Ejemplo: `plt.pie([10, 20, 30]); plt.show()` genera un gráfico de torta."
    },
    {
        "input": "¿Qué diferencia hay entre `deepcopy` y `copy`?",
        "output": "`deepcopy` copia un objeto y todos los objetos anidados, mientras que `copy` solo copia el objeto de nivel superior."
    },
    {
        "input": "¿Qué son las promesas en JavaScript?",
        "output": "Son objetos que representan el eventual resultado de una operación asíncrona. Ejemplo: `fetch('url').then(response => response.json())`."
    },
    {
        "input": "¿Qué es un `callback`?",
        "output": "Es una función pasada como argumento a otra función, que se ejecuta después de que se completa una tarea."
    },
    {
        "input": "¿Qué es el DOM en JavaScript?",
        "output": "Es una representación en forma de árbol de los elementos HTML en una página web."
    },
    {
        "input": "¿Cómo selecciono elementos en el DOM?",
        "output": "Usa métodos como `document.querySelector()` o `document.getElementById()`. Ejemplo: `document.querySelector('h1')`."
    },
    {
        "input": "¿Qué es una variable de entorno?",
        "output": "Es un valor dinámico que afecta el comportamiento de los procesos en un sistema operativo o programa."
    },
    {
        "input": "¿Cómo creo un servidor HTTP en Node.js?",
        "output": "Usa el módulo `http`. Ejemplo: `const http = require('http'); http.createServer((req, res) => res.end('Hola')).listen(3000);`."
    },
    {
        "input": "¿Qué es un evento en JavaScript?",
        "output": "Es una acción que ocurre en una página web, como un clic o el envío de un formulario."
    },
    {
        "input": "¿Qué es un middleware en Express?",
        "output": "Es una función que tiene acceso al objeto de solicitud (`req`), respuesta (`res`) y al siguiente middleware."
    },
    {
        "input": "¿Cómo hago consultas SQL en Python?",
        "output": "Usa la biblioteca `sqlite3`. Ejemplo: `cursor.execute('SELECT * FROM tabla')`."
    },
    {
        "input": "¿Qué es una base de datos NoSQL?",
        "output": "Es un tipo de base de datos que no usa tablas, como MongoDB, que almacena datos en documentos JSON."
    },
    {
        "input": "¿Qué es la programación funcional?",
        "output": "Es un paradigma que trata las funciones como ciudadanos de primera clase y fomenta la inmutabilidad y las expresiones puras. Ejemplo: usar funciones como `map` y `reduce`."
    },
    {
        "input": "¿Qué es un patrón de diseño?",
        "output": "Es una solución general y reutilizable para problemas comunes en el diseño de software. Ejemplo: Singleton, Observer y Factory."
    },
    {
        "input": "¿Qué es la programación orientada a objetos?",
        "output": "Es un paradigma basado en objetos que contienen datos (atributos) y código (métodos). Ejemplo: usar clases como `class Vehiculo`."
    },
    {
        "input": "¿Qué son los microservicios?",
        "output": "Es un estilo de arquitectura donde una aplicación se construye como un conjunto de servicios pequeños, independientes y desplegables de manera individual."
    },
    {
        "input": "¿Qué es CI/CD?",
        "output": "Es un conjunto de prácticas de desarrollo que integran cambios frecuentemente (CI) y despliegan código automáticamente (CD)."
    },
    {
        "input": "¿Qué es un contenedor en Kubernetes?",
        "output": "Es una unidad ejecutable que incluye una aplicación y sus dependencias. Kubernetes orquesta y gestiona estos contenedores."
    },
    {
        "input": "¿Qué es una cola de mensajes?",
        "output": "Es un sistema que permite a diferentes partes de una aplicación comunicarse enviando y recibiendo mensajes de manera asincrónica. Ejemplo: RabbitMQ, Kafka."
    },
    {
        "input": "¿Cómo funciona una base de datos relacional?",
        "output": "Organiza datos en tablas con relaciones definidas entre ellas mediante claves primarias y foráneas. Ejemplo: MySQL, PostgreSQL."
    },
    {
        "input": "¿Qué es un índice en una base de datos?",
        "output": "Es una estructura que mejora la velocidad de búsqueda de datos en una tabla, aunque puede ralentizar las inserciones y actualizaciones."
    },
    {
        "input": "¿Qué es una base de datos distribuida?",
        "output": "Es una base de datos cuyo almacenamiento y procesamiento están distribuidos en varios nodos. Ejemplo: Cassandra, DynamoDB."
    },
    {
        "input": "¿Qué es GraphQL?",
        "output": "Es un lenguaje de consulta para APIs que permite solicitar exactamente los datos necesarios, evitando el exceso o la falta de datos."
    },
    {
        "input": "¿Qué es un endpoint en una API?",
        "output": "Es una URL específica en una API que ejecuta una acción o devuelve datos. Ejemplo: `GET /usuarios` para obtener una lista de usuarios."
    },
    {
        "input": "¿Qué son las migraciones en bases de datos?",
        "output": "Son scripts que administran cambios en el esquema de la base de datos, como agregar tablas o modificar columnas."
    },
    {
        "input": "¿Qué es un ORM?",
        "output": "Es una herramienta que mapea objetos de una aplicación a tablas de bases de datos, simplificando las consultas SQL. Ejemplo: SQLAlchemy, Hibernate."
    },
    {
        "input": "¿Qué es un servidor proxy?",
        "output": "Es un servidor intermediario que recibe solicitudes de los clientes y las reenvía al servidor final, proporcionando control y seguridad."
    },
    {
        "input": "¿Qué es un WebSocket?",
        "output": "Es un protocolo que permite comunicación bidireccional y persistente entre cliente y servidor. Ejemplo: aplicaciones de chat en tiempo real."
    },
    {
        "input": "¿Qué es el hashing?",
        "output": "Es un proceso que convierte datos en una cadena fija de caracteres mediante una función hash. Ejemplo: SHA-256 para encriptar contraseñas."
    },
    {
        "input": "¿Qué es la programación reactiva?",
        "output": "Es un paradigma en el que los sistemas responden a cambios de estado y eventos de manera asíncrona y no bloqueante. Ejemplo: usar RxJava o React."
    },
    {
        "input": "¿Qué es un balanceador de carga?",
        "output": "Es un componente que distribuye el tráfico entrante entre varios servidores para optimizar la disponibilidad y rendimiento."
    },
    {
        "input": "¿Qué es un certificado SSL?",
        "output": "Es un archivo que asegura la comunicación cifrada entre un navegador y un servidor. Se utiliza para implementar HTTPS."
    },
    {
        "input": "¿Qué es una arquitectura monolítica?",
        "output": "Es un enfoque donde toda la lógica de una aplicación está contenida en una única unidad desplegable."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Es una colección de herramientas y bibliotecas que simplifican el desarrollo de software. Ejemplo: Django para desarrollo web."
    },
    {
        "input": "¿Qué diferencia hay entre front-end y back-end?",
        "output": "El front-end es la interfaz del usuario, mientras que el back-end maneja la lógica, las bases de datos y las APIs en el servidor."
    },
    {
        "input": "¿Qué es la concurrencia?",
        "output": "Es la capacidad de ejecutar múltiples tareas al mismo tiempo, pero no necesariamente en paralelo. Ejemplo: hilos en Python."
    },
    {
        "input": "¿Qué es la paralelización?",
        "output": "Es la ejecución simultánea de múltiples tareas usando múltiples núcleos de CPU. Ejemplo: procesamiento distribuido en Spark."
    },
    {
        "input": "¿Qué son los hilos en programación?",
        "output": "Son las unidades más pequeñas de procesamiento dentro de un proceso. Permiten la ejecución concurrente de tareas."
    },
    {
        "input": "¿Qué es la programación asíncrona?",
        "output": "Es un modelo donde las tareas no bloquean la ejecución del programa. Ejemplo: `async` y `await` en Python."
    },
    {
        "input": "¿Qué son las promesas en programación?",
        "output": "Son objetos que representan el resultado eventual de una operación asíncrona. Ejemplo: `fetch().then(res => ...)` en JavaScript."
    },
    {
        "input": "¿Qué es la caché?",
        "output": "Es un almacenamiento temporal para datos que se acceden frecuentemente, con el fin de mejorar el rendimiento."
    },
    {
        "input": "¿Qué es Docker?",
        "output": "Es una plataforma que permite crear, distribuir y ejecutar aplicaciones en contenedores ligeros y portables."
    },
    {
        "input": "¿Qué es una máquina virtual?",
        "output": "Es un software que emula hardware físico, permitiendo ejecutar múltiples sistemas operativos en un solo equipo."
    },
    {
        "input": "¿Qué es un servidor DNS?",
        "output": "Es un servidor que traduce nombres de dominio legibles por humanos (como google.com) a direcciones IP."
    },
    {
        "input": "¿Qué es un algoritmo de búsqueda binaria?",
        "output": "Es un método para encontrar un elemento en una lista ordenada, dividiéndola en mitades sucesivamente."
    },
    {
        "input": "¿Qué es un árbol binario?",
        "output": "Es una estructura de datos donde cada nodo tiene a lo sumo dos hijos: izquierdo y derecho."
    },
    {
        "input": "¿Qué es un grafo en programación?",
        "output": "Es una estructura de datos compuesta por nodos (vértices) conectados mediante enlaces (aristas)."
    },
    {
        "input": "¿Qué diferencia hay entre una lista y un conjunto en Python?",
        "output": "Una lista permite elementos duplicados y mantiene el orden, mientras que un conjunto no permite duplicados y no tiene orden."
    },
    {
        "input": "¿Qué es una comprensión de diccionarios?",
        "output": "Es una forma concisa de crear diccionarios. Ejemplo: `{x: x**2 for x in range(5)}` crea `{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}`."
    },
    {
        "input": "¿Cómo se puede manejar un archivo grande en Python?",
        "output": "Usa iteradores o lee el archivo línea por línea. Ejemplo: `with open('archivo.txt') as f: for linea in f: print(linea.strip())`."
    },
    {
        "input": "¿Qué hace el método get() en un diccionario?",
        "output": "Devuelve el valor de una clave o un valor por defecto si la clave no existe. Ejemplo: `mi_diccionario.get('clave', 'default')`."
    },
    {
        "input": "¿Qué es un decorador en Python?",
        "output": "Es una función que modifica el comportamiento de otra función o método. Ejemplo: `@decorador` sobre una función."
    },
    {
        "input": "¿Cómo se puede ejecutar código paralelo en Python?",
        "output": "Usa el módulo `concurrent.futures` o `multiprocessing`. Ejemplo: `from concurrent.futures import ThreadPoolExecutor`."
    },
    {
        "input": "¿Qué es un método mágico en Python?",
        "output": "Son métodos especiales rodeados de dobles guiones bajos, como `__init__`, `__str__`, o `__len__`, que definen comportamientos específicos."
    },
    {
        "input": "¿Qué diferencia hay entre *args y **kwargs?",
        "output": "`*args` captura argumentos posicionales, mientras que `**kwargs` captura argumentos con nombre en forma de diccionario."
    },
    {
        "input": "¿Qué es el manejo de contexto con with?",
        "output": "Es una forma de manejar recursos automáticamente, asegurando su liberación. Ejemplo: `with open('archivo.txt') as f: datos = f.read()`."
    },
    {
        "input": "¿Qué hace el método append() en una lista?",
        "output": "Añade un elemento al final de la lista. Ejemplo: `mi_lista.append(5)`."
    },
    {
        "input": "¿Cómo se puede ordenar una lista en Python?",
        "output": "Usa `.sort()` para modificar la lista o `sorted()` para una nueva lista ordenada. Ejemplo: `sorted([3, 1, 2])` devuelve `[1, 2, 3]`."
    },
    {
        "input": "¿Qué hace la función zip()?",
        "output": "Combina iterables en tuplas. Ejemplo: `list(zip([1, 2], ['a', 'b']))` devuelve `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "¿Cómo se puede manejar un error en Python?",
        "output": "Usa un bloque `try-except`. Ejemplo: `try: x = 1/0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué es una función generadora?",
        "output": "Es una función que devuelve valores uno a uno usando `yield`. Ejemplo: `def generador(): yield 1; yield 2`."
    },
    {
        "input": "¿Qué hace la función eval() en Python?",
        "output": "Ejecuta una expresión Python en forma de string. Ejemplo: `eval('2 + 2')` devuelve `4`."
    },
    {
        "input": "¿Qué es una clase abstracta en Python?",
        "output": "Es una clase que define métodos que deben ser implementados en sus subclases. Usa `abc` para definirla."
    },
    {
        "input": "¿Qué son las propiedades en Python?",
        "output": "Son atributos que se comportan como métodos. Usa `@property` para definirlos. Ejemplo: `@property def nombre(self): return self._nombre`."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Es un objeto que implementa los métodos `__iter__()` y `__next__()`, permitiendo recorrer elementos secuencialmente."
    },
    {
        "input": "¿Cómo se puede leer un archivo JSON?",
        "output": "Usa la biblioteca `json`. Ejemplo: `import json; with open('datos.json') as f: data = json.load(f)`."
    },
    {
        "input": "¿Cómo se puede convertir un objeto Python a JSON?",
        "output": "Usa `json.dumps()`. Ejemplo: `import json; json_data = json.dumps({'clave': 'valor'})`."
    },
    {
        "input": "¿Qué es un decorador de clase?",
        "output": "Es una función que modifica el comportamiento de una clase. Ejemplo: `@mi_decorador` antes de una definición de clase."
    },
    {
        "input": "¿Qué hace la función hasattr()?",
        "output": "Verifica si un objeto tiene un atributo. Ejemplo: `hasattr(objeto, 'atributo')`."
    },
    {
        "input": "¿Cómo se implementa un Singleton en Python?",
        "output": "Usa un patrón que asegura una única instancia. Ejemplo: mediante el método `__new__`."
    },
    {
        "input": "¿Qué hace el operador `is` en Python?",
        "output": "Comprueba si dos variables apuntan al mismo objeto en memoria. Ejemplo: `a is b`."
    },
    {
        "input": "¿Cómo funciona el operador `in`?",
        "output": "Verifica si un elemento está en una colección. Ejemplo: `'a' in ['a', 'b', 'c']` devuelve `True`."
    },
    {
        "input": "¿Qué son los metaclases en Python?",
        "output": "Son clases de clases que controlan cómo se crean las clases. Ejemplo: `class MiMeta(type): ...`."
    },
    {
        "input": "¿Qué es la serialización en Python?",
        "output": "Es convertir un objeto en un formato que pueda ser almacenado o transmitido, como JSON o Pickle."
    },
    {
        "input": "¿Qué diferencia hay entre deepcopy y copy?",
        "output": "`deepcopy` copia recursivamente todos los objetos anidados, mientras que `copy` realiza una copia superficial."
    },
    {
        "input": "¿Qué hace el método pop() en listas?",
        "output": "Elimina y devuelve el último elemento de la lista (o un índice específico). Ejemplo: `mi_lista.pop()`."
    },
    {
        "input": "¿Cómo se define un método estático?",
        "output": "Usa el decorador `@staticmethod`. Ejemplo: `@staticmethod def metodo(): ...`."
    },
    {
        "input": "¿Qué es una herencia múltiple?",
        "output": "Es cuando una clase hereda de más de una clase base. Ejemplo: `class Hijo(Padre1, Padre2): ...`."
    },
    {
        "input": "¿Qué es el método `super()`?",
        "output": "Permite llamar métodos de una clase base desde una subclase. Ejemplo: `super().metodo()`."
    },
    {
        "input": "¿Qué es el método `__repr__`?",
        "output": "Es un método mágico que devuelve una representación no ambigua de un objeto. Ejemplo: `def __repr__(self): return f'Objeto({self.atributo})'`."
    },
    {
        "input": "¿Cómo puedo comparar objetos en Python?",
        "output": "Define los métodos `__eq__`, `__lt__`, y otros operadores de comparación. Ejemplo: `def __eq__(self, otro): return self.valor == otro.valor`."
    },
    {
        "input": "¿Qué es un NamedTuple?",
        "output": "Es una clase de tuplas con nombres para los campos. Ejemplo: `from collections import namedtuple; Persona = namedtuple('Persona', 'nombre edad')`."
    },
    {
        "input": "¿Cómo puedo medir el tiempo de ejecución de una función?",
        "output": "Usa el módulo `time`. Ejemplo: `inicio = time.time(); funcion(); print(time.time() - inicio)`."
    },
    {
        "input": "¿Qué es una cola en Python?",
        "output": "Es una estructura de datos FIFO. Usa el módulo `queue` para implementarla. Ejemplo: `from queue import Queue; cola = Queue()`."
    },
    {
        "input": "¿Qué es una pila en Python?",
        "output": "Es una estructura LIFO. Usa una lista o el módulo `queue`. Ejemplo: `pila.append(valor); pila.pop()`."
    },
    {
        "input": "¿Qué hace `collections.Counter`?",
        "output": "Cuenta la frecuencia de elementos en un iterable. Ejemplo: `from collections import Counter; Counter([1, 2, 2, 3])`."
    },
    {
        "input": "¿Cómo usar `collections.deque`?",
        "output": "Es una cola doblemente enlazada eficiente. Ejemplo: `from collections import deque; d = deque(); d.append(1); d.appendleft(0)`."
    },
    {
        "input": "¿Cómo se usa itertools en Python?",
        "output": "Proporciona herramientas para iteraciones avanzadas. Ejemplo: `from itertools import permutations; print(list(permutations([1, 2, 3])))`."
    },
    {
        "input": "¿Qué es `functools.lru_cache`?",
        "output": "Es un decorador para almacenar en caché resultados de funciones. Ejemplo: `@lru_cache def fib(n): return n if n <= 1 else fib(n-1) + fib(n-2)`."
    },
    {
        "input": "¿Cómo uso `dataclasses`?",
        "output": "Proporciona una forma simplificada de definir clases. Ejemplo: `from dataclasses import dataclass; @dataclass class Persona: nombre: str; edad: int`."
    },
    {
        "input": "¿Qué es el descriptor `__getattr__`?",
        "output": "Es un método llamado cuando se accede a un atributo que no existe. Ejemplo: `def __getattr__(self, nombre): return 'Atributo no definido'`."
    },
    {
        "input": "¿Cómo manejar múltiples excepciones en Python?",
        "output": "Usa un bloque `except` con una tupla de excepciones. Ejemplo: `except (TypeError, ValueError):`."
    },
    {
        "input": "¿Qué es un decorador anidado?",
        "output": "Es un decorador que aplica múltiples capas de lógica. Ejemplo: `@decorador1 @decorador2 def funcion(): ...`."
    },
    {
        "input": "¿Cómo ejecutar código en un hilo?",
        "output": "Usa el módulo `threading`. Ejemplo: `from threading import Thread; t = Thread(target=mi_funcion); t.start()`."
    },
    {
        "input": "¿Cómo usar procesos en Python?",
        "output": "Usa el módulo `multiprocessing`. Ejemplo: `from multiprocessing import Process; p = Process(target=mi_funcion); p.start()`."
    },
    {
        "input": "¿Qué hace el módulo `asyncio`?",
        "output": "Permite escribir código asíncrono con `async` y `await`. Ejemplo: `async def mi_funcion(): await otra_funcion()`."
    },
    {
        "input": "¿Cómo implementar un servidor HTTP básico?",
        "output": "Usa `http.server`. Ejemplo: `from http.server import SimpleHTTPRequestHandler, HTTPServer; HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler).serve_forever()`."
    },
    {
        "input": "¿Qué es un manejador de señales en Python?",
        "output": "Es una función que maneja interrupciones del sistema. Usa `signal`. Ejemplo: `import signal; signal.signal(signal.SIGINT, mi_manejador)`."
    },
    {
        "input": "¿Qué hace el método `join` en hilos?",
        "output": "Espera a que un hilo termine su ejecución. Ejemplo: `t = Thread(target=mi_funcion); t.start(); t.join()`."
    },
    {
        "input": "¿Cómo manejar archivos comprimidos en Python?",
        "output": "Usa el módulo `zipfile` o `gzip`. Ejemplo: `import zipfile; with zipfile.ZipFile('archivo.zip', 'r') as z: z.extractall()`."
    },
    {
        "input": "¿Qué es el método `__call__`?",
        "output": "Permite que un objeto sea llamado como una función. Ejemplo: `def __call__(self, *args): print('Objeto llamado')`."
    },
    {
        "input": "¿Qué son los contextos asíncronos?",
        "output": "Permiten manejar recursos asíncronos. Usa `async with`. Ejemplo: `async with recurso as r: await r.hacer_algo()`."
    },
    {
        "input": "¿Qué hace el módulo `sched`?",
        "output": "Es un planificador de tareas. Ejemplo: `import sched, time; s = sched.scheduler(time.time, time.sleep); s.enter(5, 1, print, ('Hola',)); s.run()`."
    },
    {
        "input": "¿Cómo usar el módulo `argparse`?",
        "output": "Permite definir y analizar argumentos de línea de comandos. Ejemplo: `import argparse; parser = argparse.ArgumentParser(); parser.add_argument('--opcion'); args = parser.parse_args()`."
    },
    {
        "input": "¿Qué es un middleware en Flask?",
        "output": "Es una función que se ejecuta antes o después de manejar una solicitud. Ejemplo: `@app.before_request def antes(): ...`."
    },
    {
        "input": "¿Qué hace el módulo `socket`?",
        "output": "Permite implementar comunicación entre redes. Ejemplo: `import socket; s = socket.socket(); s.bind(('localhost', 8080)); s.listen()`."
    },
    {
        "input": "¿Cómo conectarse a una base de datos SQLite?",
        "output": "Usa `sqlite3`. Ejemplo: `import sqlite3; conn = sqlite3.connect('mi_base.db'); cursor = conn.cursor()`."
    },
    {
        "input": "¿Qué son los tipos de datos `typing` en Python?",
        "output": "Son anotaciones para indicar tipos en funciones y clases. Ejemplo: `from typing import List; def suma(nums: List[int]) -> int: return sum(nums)`."
    },
    {
        "input": "¿Qué hace el método `__del__`?",
        "output": "Es un método mágico que se llama cuando el objeto es destruido. Ejemplo: `def __del__(self): print('Objeto destruido')`."
    },
    {
        "input": "¿Cómo implemento un caché en Python?",
        "output": "Usa `functools.lru_cache` o un diccionario. Ejemplo: `@lru_cache(maxsize=100)`."
    },
    {
        "input": "¿Cómo funciona el operador `:=` en Python?",
        "output": "Es el operador de asignación en expresiones conocido como 'walrus operator'. Ejemplo: `if (n := len(lista)) > 5: print(f'La lista tiene {n} elementos')`."
    },
    {
        "input": "¿Qué es el método `__getitem__`?",
        "output": "Permite definir cómo se accede a elementos de un objeto. Ejemplo: `def __getitem__(self, index): return self.datos[index]`."
    },
    {
        "input": "¿Qué hace el método `__setitem__`?",
        "output": "Define cómo se asignan valores a elementos de un objeto. Ejemplo: `def __setitem__(self, key, value): self.datos[key] = value`."
    },
    {
        "input": "¿Qué es una vista en un diccionario?",
        "output": "Es un objeto que refleja los elementos actuales del diccionario. Ejemplo: `mi_diccionario.keys()` devuelve una vista de las claves."
    },
    {
        "input": "¿Cómo puedo ejecutar comandos del sistema en Python?",
        "output": "Usa el módulo `subprocess`. Ejemplo: `import subprocess; subprocess.run(['ls', '-l'])`."
    },
    {
        "input": "¿Qué diferencia hay entre `os.system` y `subprocess.run`?",
        "output": "`os.system` ejecuta comandos directamente, mientras que `subprocess.run` es más seguro y flexible al manejar argumentos."
    },
    {
        "input": "¿Cómo limitar el uso de memoria en Python?",
        "output": "Usa estructuras de datos eficientes como generadores o el módulo `resource` en sistemas compatibles."
    },
    {
        "input": "¿Qué es un módulo `weakref` en Python?",
        "output": "Permite crear referencias débiles a objetos, evitando que sean contados para la recolección de basura."
    },
    {
        "input": "¿Qué es un objeto inmutable en Python?",
        "output": "Es un objeto cuyo estado no puede cambiar después de ser creado. Ejemplo: `tuplas` o `strings`."
    },
    {
        "input": "¿Qué es el recolector de basura en Python?",
        "output": "Es un mecanismo que libera memoria eliminando objetos sin referencias activas. Usa `gc` para controlarlo."
    },
    {
        "input": "¿Cómo puedes deshabilitar el recolector de basura?",
        "output": "Usa el módulo `gc`. Ejemplo: `import gc; gc.disable()` para desactivarlo."
    },
    {
        "input": "¿Qué es un `contextlib` en Python?",
        "output": "Es un módulo para simplificar la creación de manejadores de contexto. Ejemplo: `from contextlib import contextmanager`."
    },
    {
        "input": "¿Qué hace el módulo `abc`?",
        "output": "Permite definir clases abstractas. Ejemplo: `from abc import ABC, abstractmethod` para crear métodos que deben implementarse."
    },
    {
        "input": "¿Cómo puedo manejar errores personalizados?",
        "output": "Crea excepciones personalizadas heredando de `Exception`. Ejemplo: `class MiError(Exception): pass`."
    },
    {
        "input": "¿Qué es un iterador infinito?",
        "output": "Es un iterador que nunca termina. Usa `itertools.cycle` o `itertools.repeat` para crearlos."
    },
    {
        "input": "¿Qué hace `itertools.combinations`?",
        "output": "Genera todas las combinaciones posibles de un iterable. Ejemplo: `itertools.combinations([1, 2, 3], 2)`."
    },
    {
        "input": "¿Cómo funciona `os.environ`?",
        "output": "Accede y modifica variables de entorno. Ejemplo: `os.environ['NUEVA_VAR'] = 'valor'`."
    },
    {
        "input": "¿Qué es un manejador de señales?",
        "output": "Es una función que responde a señales del sistema operativo. Usa el módulo `signal` para definirlas."
    },
    {
        "input": "¿Cómo comprimir datos en Python?",
        "output": "Usa módulos como `gzip` o `zlib`. Ejemplo: `gzip.compress(b'datos')`."
    },
    {
        "input": "¿Qué es un archivo .pyc?",
        "output": "Es un archivo compilado de Python que contiene bytecode generado para optimizar la ejecución del programa."
    },
    {
        "input": "¿Qué es un módulo `pathlib`?",
        "output": "Es un módulo para manejar rutas de archivos de forma orientada a objetos. Ejemplo: `from pathlib import Path; Path('archivo.txt').exists()`."
    },
    {
        "input": "¿Cómo manejar rutas de forma multiplataforma?",
        "output": "Usa el módulo `os.path` o `pathlib` para construir rutas compatibles. Ejemplo: `os.path.join('carpeta', 'archivo.txt')`."
    },
    {
        "input": "¿Qué es el método `__slots__`?",
        "output": "Especifica atributos fijos en una clase para ahorrar memoria. Ejemplo: `__slots__ = ['nombre', 'edad']`."
    },
    {
        "input": "¿Qué es una excepción `KeyError`?",
        "output": "Ocurre cuando intentas acceder a una clave inexistente en un diccionario. Ejemplo: `mi_diccionario['clave_invalida']`."
    },
    {
        "input": "¿Qué hace el módulo `uuid`?",
        "output": "Genera identificadores únicos universales. Ejemplo: `import uuid; uuid.uuid4()`."
    },
    {
        "input": "¿Cómo crear un archivo temporal?",
        "output": "Usa el módulo `tempfile`. Ejemplo: `import tempfile; with tempfile.TemporaryFile() as temp: temp.write(b'Datos temporales')`."
    },
    {
        "input": "¿Qué hace el módulo `timeit`?",
        "output": "Permite medir el tiempo de ejecución de pequeños fragmentos de código. Ejemplo: `timeit.timeit('sum(range(100))', number=1000)`."
    },
    {
        "input": "¿Qué es un descriptor en Python?",
        "output": "Es un objeto que controla el acceso a un atributo de clase mediante los métodos `__get__`, `__set__`, y `__delete__`."
    },
    {
        "input": "¿Cómo programar tareas en Python?",
        "output": "Usa bibliotecas como `sched` o `APScheduler`. Ejemplo: `from apscheduler.schedulers.background import BackgroundScheduler`."
    },
    {
        "input": "¿Qué es `pickle` en Python?",
        "output": "Es un módulo para serializar y deserializar objetos Python. Ejemplo: `pickle.dump(objeto, archivo)`."
    },
    {
        "input": "¿Qué es un bucle `for-else`?",
        "output": "Es un bucle `for` con una cláusula `else` que se ejecuta si no se rompe el bucle. Ejemplo: `for x in lista: if x == valor: break else: print('No se encontró el valor')`."
    },
    {
        "input": "¿Qué hace el operador `**` en Python?",
        "output": "Realiza la operación de potencia. Ejemplo: `2 ** 3` devuelve `8`."
    },
    {
        "input": "¿Qué diferencia hay entre `isinstance` y `type`?",
        "output": "`isinstance` verifica si un objeto es de una clase o subclase, mientras que `type` solo verifica la clase exacta."
    },
    {
        "input": "¿Qué hace el módulo `secrets`?",
        "output": "Genera números y tokens criptográficamente seguros. Ejemplo: `secrets.token_hex(16)`."
    },
    {
        "input": "¿Qué significa que el operador `:=` sea el operador walrus?",
        "output": "Es una forma de asignar valores dentro de una expresión y usarlo en el mismo contexto. Ejemplo: `if (n := len(lista)) > 5: print(n)`."
    },
    {
        "input": "¿Por qué usar `__getitem__` en una clase personalizada?",
        "output": "Permite que los objetos de la clase se comporten como contenedores, accediendo a elementos con índices como si fueran listas o diccionarios."
    },
    {
        "input": "¿Cuándo usar `__setitem__` en lugar de métodos tradicionales?",
        "output": "Es útil para definir comportamientos personalizados al asignar valores, especialmente en clases que actúan como contenedores."
    },
    {
        "input": "¿Qué es una vista en un diccionario y por qué es útil?",
        "output": "Una vista refleja los datos actuales del diccionario y se actualiza automáticamente si el diccionario cambia. Ejemplo: `dict_keys` o `dict_values`."
    },
    {
        "input": "¿Cuándo debería preferir `subprocess.run` sobre `os.system`?",
        "output": "`subprocess.run` ofrece mayor control, manejo de errores y seguridad al ejecutar comandos del sistema, mientras que `os.system` es más simple pero menos seguro."
    },
    {
        "input": "¿Cómo puedo reducir el uso de memoria con estructuras de datos grandes?",
        "output": "Usa generadores en lugar de listas o conjuntos, y considera técnicas como compresión de datos o módulos como `array` y `numpy`."
    },
    {
        "input": "¿Qué diferencia hay entre un objeto mutable e inmutable?",
        "output": "Un objeto mutable, como una lista, puede cambiar su contenido después de la creación, mientras que uno inmutable, como una tupla, no puede."
    },
    {
        "input": "¿Cómo puedo liberar memoria manualmente en Python?",
        "output": "Usa el recolector de basura con `import gc; gc.collect()`, aunque Python generalmente lo maneja automáticamente."
    },
    {
        "input": "¿Qué ventajas ofrece `contextlib` para crear manejadores de contexto?",
        "output": "Simplifica la creación de contextos personalizados sin necesidad de definir métodos como `__enter__` y `__exit__` directamente."
    },
    {
        "input": "¿Qué es una clase abstracta y cuándo debería usarla?",
        "output": "Es una plantilla para clases que comparten una estructura base pero deben implementar ciertos métodos en sus subclases."
    },
    {
        "input": "¿Por qué usar excepciones personalizadas?",
        "output": "Permiten manejar errores específicos de la lógica de tu aplicación, haciendo que el código sea más claro y controlable."
    },
    {
        "input": "¿Cómo usar `itertools` para generar combinaciones?",
        "output": "Usa `itertools.combinations` para obtener todas las combinaciones posibles de un iterable con un tamaño fijo."
    },
    {
        "input": "¿Por qué utilizar `os.environ` en lugar de pasar configuraciones manualmente?",
        "output": "`os.environ` permite gestionar configuraciones globales, como claves API o variables de entorno, sin necesidad de alterar el código fuente."
    },
    {
        "input": "¿Qué hace `gzip` y cuándo debería usarlo?",
        "output": "`gzip` comprime datos para reducir el uso de almacenamiento o mejorar la velocidad de transmisión en redes."
    },
    {
        "input": "¿Por qué Python genera archivos `.pyc` automáticamente?",
        "output": "Los archivos `.pyc` contienen bytecode compilado que acelera la ejecución de programas Python al evitar recompilaciones innecesarias."
    },
    {
        "input": "¿Qué beneficios tiene usar `pathlib` sobre `os.path`?",
        "output": "`pathlib` proporciona una API más limpia y orientada a objetos para trabajar con rutas de archivos."
    },
    {
        "input": "¿Cómo evitar errores de `KeyError` en diccionarios?",
        "output": "Usa el método `.get()` para proporcionar un valor predeterminado en caso de que la clave no exista."
    },
    {
        "input": "¿Cuándo es útil usar `uuid` para identificadores?",
        "output": "Es útil cuando necesitas generar identificadores únicos, como en bases de datos distribuidas o sistemas de seguimiento."
    },
    {
        "input": "¿Qué es un archivo temporal y para qué se usa?",
        "output": "Es un archivo creado para almacenar datos temporalmente durante la ejecución de un programa y generalmente se elimina después de su uso."
    },
    {
        "input": "¿Cómo puedo medir el tiempo exacto de ejecución de un fragmento de código?",
        "output": "Usa el módulo `timeit`, que mide el tiempo de ejecución de manera precisa incluso para fragmentos cortos de código."
    },
    {
        "input": "¿Qué hace un descriptor y cuándo debería usarlo?",
        "output": "Un descriptor controla el acceso a atributos de clase mediante métodos como `__get__`, útil para validar o calcular valores dinámicamente."
    },
    {
        "input": "¿Cómo implementar un sistema de caché eficiente en Python?",
        "output": "Usa `functools.lru_cache` para almacenar resultados de funciones o bibliotecas como `redis` para sistemas más avanzados."
    },
    {
        "input": "¿Cómo maneja Python los bucles `for-else`?",
        "output": "La cláusula `else` se ejecuta si el bucle no se rompe, útil para buscar elementos sin éxito."
    },
    {
        "input": "¿Qué diferencia hay entre usar `type` e `isinstance`?",
        "output": "`type` comprueba la clase exacta de un objeto, mientras que `isinstance` incluye herencias y es más flexible."
    },
    {
        "input": "¿Cuándo debería usar el módulo `secrets` en lugar de `random`?",
        "output": "`secrets` es ideal para operaciones que requieren seguridad criptográfica, como generar contraseñas o tokens únicos."
    },
    {
        "input": "¿Qué ventajas tiene usar generadores sobre listas?",
        "output": "Los generadores consumen menos memoria, ya que producen elementos bajo demanda en lugar de almacenarlos todos en memoria."
    },
    {
        "input": "¿Qué hace la cláusula `yield from`?",
        "output": "Delegar la generación de valores a otro generador o iterable, simplificando la estructura de generadores anidados."
    },
    {
        "input": "¿Qué diferencia hay entre `__str__` y `__repr__`?",
        "output": "`__str__` se usa para devolver una representación legible de un objeto, mientras que `__repr__` es para representación no ambigua."
    },
    {
        "input": "¿Cómo manejar archivos grandes sin cargarlos completamente en memoria?",
        "output": "Usa iteradores o lee el archivo línea por línea con `with open('archivo') as f: for linea in f: ...`."
    },
    {
        "input": "¿Por qué usar decoradores anidados?",
        "output": "Permiten aplicar múltiples capas de lógica en una función, combinando funcionalidades como autenticación y registro."
    },
    {
        "input": "¿Cómo puedo leer un archivo línea por línea en Python?",
        "output": "Usa un bucle `for` con el objeto archivo. Ejemplo: `with open('archivo.txt') as f: for linea in f: print(linea.strip())`."
    },
    {
        "input": "¿Cómo escribo datos en un archivo nuevo?",
        "output": "Usa el modo escritura `w`. Ejemplo: `with open('nuevo.txt', 'w') as archivo: archivo.write('Hola, mundo')`."
    },
    {
        "input": "¿Cómo puedo sumar todos los números en una lista?",
        "output": "Usa la función `sum()`. Ejemplo: `mi_lista = [1, 2, 3]; total = sum(mi_lista)`."
    },
    {
        "input": "¿Cómo ordeno una lista de números en orden descendente?",
        "output": "Usa `sorted()` o `.sort()`. Ejemplo: `sorted(lista, reverse=True)`."
    },
    {
        "input": "¿Cómo convierto una cadena en una lista de palabras?",
        "output": "Usa el método `split()`. Ejemplo: `'Hola mundo'.split()` devuelve `['Hola', 'mundo']`."
    },
    {
        "input": "¿Cómo puedo concatenar dos listas?",
        "output": "Usa el operador `+`. Ejemplo: `lista1 + lista2`."
    },
    {
        "input": "¿Cómo verifico si un elemento está en una lista?",
        "output": "Usa el operador `in`. Ejemplo: `if elemento in lista: print('Está en la lista')`."
    },
    {
        "input": "¿Cómo elimino duplicados de una lista?",
        "output": "Convierte la lista a un conjunto y luego de vuelta a lista. Ejemplo: `list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}` o la función `dict()`. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo accedo al valor de una clave en un diccionario?",
        "output": "Usa el nombre de la clave entre corchetes. Ejemplo: `mi_diccionario['clave']`."
    },
    {
        "input": "¿Cómo puedo sumar los valores de un diccionario?",
        "output": "Usa la función `sum()` sobre `mi_diccionario.values()`. Ejemplo: `sum(mi_diccionario.values())`."
    },
    {
        "input": "¿Cómo convierto un diccionario en un archivo JSON?",
        "output": "Usa `json.dump()`. Ejemplo: `import json; with open('datos.json', 'w') as f: json.dump(mi_diccionario, f)`."
    },
    {
        "input": "¿Cómo encuentro el elemento más grande de una lista?",
        "output": "Usa la función `max()`. Ejemplo: `max(lista)`."
    },
    {
        "input": "¿Cómo obtengo la longitud de una lista o string?",
        "output": "Usa la función `len()`. Ejemplo: `len(mi_lista)` o `len(mi_cadena)`."
    },
    {
        "input": "¿Cómo puedo manejar un error de división por cero?",
        "output": "Usa un bloque `try-except`. Ejemplo: `try: resultado = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Cómo ejecuto una función en paralelo con otra?",
        "output": "Usa el módulo `threading` o `concurrent.futures`. Ejemplo: `from threading import Thread; t = Thread(target=mi_funcion); t.start()`."
    },
    {
        "input": "¿Cómo creo un generador en Python?",
        "output": "Usa la palabra clave `yield`. Ejemplo: `def generador(): yield 1; yield 2`."
    },
    {
        "input": "¿Cómo puedo filtrar una lista con una condición?",
        "output": "Usa la función `filter()` o una comprensión de listas. Ejemplo: `[x for x in lista if x > 0]`."
    },
    {
        "input": "¿Cómo convierto una lista en una cadena separada por comas?",
        "output": "Usa el método `join()`. Ejemplo: `', '.join(['a', 'b', 'c'])` devuelve `'a, b, c'`."
    },
    {
        "input": "¿Cómo convierto un string a minúsculas?",
        "output": "Usa el método `.lower()`. Ejemplo: `'Hola'.lower()` devuelve `'hola'`."
    },
    {
        "input": "¿Cómo obtengo solo las claves de un diccionario?",
        "output": "Usa el método `.keys()`. Ejemplo: `mi_diccionario.keys()`."
    },
    {
        "input": "¿Cómo copio un diccionario?",
        "output": "Usa el método `.copy()`. Ejemplo: `copia = mi_diccionario.copy()`."
    },
    {
        "input": "¿Cómo puedo crear un bucle infinito?",
        "output": "Usa `while True:`. Ejemplo: `while True: print('Esto es un bucle infinito')`."
    },
    {
        "input": "¿Cómo puedo detener un bucle antes de que termine?",
        "output": "Usa la instrucción `break`. Ejemplo: `for x in lista: if x == 5: break`."
    },
    {
        "input": "¿Cómo calculo la intersección de dos conjuntos?",
        "output": "Usa el operador `&`. Ejemplo: `conjunto1 & conjunto2`."
    },
    {
        "input": "¿Cómo obtengo la diferencia entre dos conjuntos?",
        "output": "Usa el operador `-`. Ejemplo: `conjunto1 - conjunto2`."
    },
    {
        "input": "¿Cómo creo una clase en Python?",
        "output": "Usa la palabra clave `class`. Ejemplo: `class MiClase: pass`."
    },
    {
        "input": "¿Cómo defino un constructor en una clase?",
        "output": "Usa el método `__init__`. Ejemplo: `class MiClase: def __init__(self, atributo): self.atributo = atributo`."
    },
    {
        "input": "¿Cómo obtengo la fecha y hora actuales?",
        "output": "Usa el módulo `datetime`. Ejemplo: `from datetime import datetime; ahora = datetime.now()`."
    },
    {
        "input": "¿Cómo verifico si un número es par o impar?",
        "output": "Usa el operador `%`. Ejemplo: `if numero % 2 == 0: print('Par') else: print('Impar')`."
    },
    {
        "input": "¿Cómo genero un número aleatorio?",
        "output": "Usa el módulo `random`. Ejemplo: `import random; numero = random.randint(1, 10)`."
    },
    {
        "input": "¿Cómo hago una consulta a una base de datos SQLite?",
        "output": "Usa el módulo `sqlite3`. Ejemplo: `cursor.execute('SELECT * FROM tabla')`."
    },
    {
        "input": "¿Cómo puedo manejar argumentos desde la línea de comandos?",
        "output": "Usa el módulo `argparse`. Ejemplo: `import argparse; parser = argparse.ArgumentParser(); parser.add_argument('--nombre')`."
    },
    {
        "input": "¿Cómo creo una variable en Python?",
        "output": "Solo necesitas asignar un valor a un nombre. Ejemplo: `mi_variable = 10`."
    },
    {
        "input": "¿Cómo hago un ciclo `for` en Python?",
        "output": "Usa la estructura `for`. Ejemplo: `for i in range(5): print(i)` imprime los números del 0 al 4."
    },
    {
        "input": "¿Cómo hago un ciclo `while`?",
        "output": "Usa la estructura `while`. Ejemplo: `contador = 0; while contador < 5: print(contador); contador += 1`."
    },
    {
        "input": "¿Cómo creo una lista en Python?",
        "output": "Usa corchetes para definirla. Ejemplo: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}` para definirlo. Ejemplo: `mi_diccionario = {'nombre': 'Juan', 'edad': 30}`."
    },
    {
        "input": "¿Cómo imprimo algo en pantalla?",
        "output": "Usa la función `print()`. Ejemplo: `print('Hola, mundo')`."
    },
    {
        "input": "¿Cómo pido datos al usuario?",
        "output": "Usa la función `input()`. Ejemplo: `nombre = input('¿Cómo te llamas? ')`."
    },
    {
        "input": "¿Cómo convierto un string a un número?",
        "output": "Usa las funciones `int()` o `float()`. Ejemplo: `numero = int('10')` o `decimal = float('3.14')`."
    },
    {
        "input": "¿Cómo hago una condición `if` en Python?",
        "output": "Usa la estructura `if`. Ejemplo: `if edad > 18: print('Eres mayor de edad')`."
    },
    {
        "input": "¿Cómo hago una condición `if-else`?",
        "output": "Añade un bloque `else`. Ejemplo: `if numero > 0: print('Positivo') else: print('Negativo o cero')`."
    },
    {
        "input": "¿Cómo defino una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Cómo paso parámetros a una función?",
        "output": "Inclúyelos entre paréntesis al definir la función. Ejemplo: `def sumar(a, b): return a + b`."
    },
    {
        "input": "¿Cómo uso un bucle para recorrer una lista?",
        "output": "Usa un bucle `for`. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Cómo verifico si un número es positivo?",
        "output": "Usa una condición `if`. Ejemplo: `if numero > 0: print('Es positivo')`."
    },
    {
        "input": "¿Cómo verifico si un número es par?",
        "output": "Usa el operador `%`. Ejemplo: `if numero % 2 == 0: print('Es par')`."
    },
    {
        "input": "¿Cómo creo un rango de números?",
        "output": "Usa la función `range()`. Ejemplo: `for i in range(1, 6): print(i)` imprime los números del 1 al 5."
    },
    {
        "input": "¿Cómo detengo un ciclo antes de que termine?",
        "output": "Usa la instrucción `break`. Ejemplo: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "¿Cómo salto a la siguiente iteración en un ciclo?",
        "output": "Usa la instrucción `continue`. Ejemplo: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "¿Cómo agrego un elemento a una lista?",
        "output": "Usa el método `.append()`. Ejemplo: `mi_lista.append(4)`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista?",
        "output": "Usa el método `.remove()`. Ejemplo: `mi_lista.remove(2)` elimina el valor `2` de la lista."
    },
    {
        "input": "¿Cómo obtengo la longitud de una lista?",
        "output": "Usa la función `len()`. Ejemplo: `len(mi_lista)`."
    },
    {
        "input": "¿Cómo accedo a un elemento de una lista?",
        "output": "Usa el índice del elemento entre corchetes. Ejemplo: `mi_lista[0]` devuelve el primer elemento."
    },
    {
        "input": "¿Cómo obtengo el último elemento de una lista?",
        "output": "Usa el índice `-1`. Ejemplo: `mi_lista[-1]`."
    },
    {
        "input": "¿Cómo ordeno una lista?",
        "output": "Usa el método `.sort()` o la función `sorted()`. Ejemplo: `mi_lista.sort()`."
    },
    {
        "input": "¿Cómo convierto una lista en un string?",
        "output": "Usa el método `join()`. Ejemplo: `', '.join(['a', 'b', 'c'])` devuelve `'a, b, c'`."
    },
    {
        "input": "¿Cómo creo una variable en Python?",
        "output": "Solo necesitas asignarle un valor. Ejemplo: `mi_variable = 10`."
    },
    {
        "input": "¿Cómo se imprime algo en Python?",
        "output": "Usa la función `print()`. Ejemplo: `print('Hola, mundo')`."
    },
    {
        "input": "¿Cómo hago un ciclo `for` en Python?",
        "output": "Usa `for` seguido de un iterable. Ejemplo: `for i in range(5): print(i)` imprime los números del 0 al 4."
    },
    {
        "input": "¿Cómo hago un ciclo `while` en Python?",
        "output": "Usa `while` con una condición. Ejemplo: `i = 0; while i < 5: print(i); i += 1`."
    },
    {
        "input": "¿Cómo creo una lista en Python?",
        "output": "Usa corchetes. Ejemplo: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Cómo verifico si un número es mayor que otro?",
        "output": "Usa operadores como `>` o `<`. Ejemplo: `if x > y: print('x es mayor que y')`."
    },
    {
        "input": "¿Cómo hago una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Cómo sumo dos números en Python?",
        "output": "Usa el operador `+`. Ejemplo: `resultado = 5 + 3`."
    },
    {
        "input": "¿Cómo concateno cadenas de texto?",
        "output": "Usa el operador `+`. Ejemplo: `saludo = 'Hola' + ' ' + 'mundo'`."
    },
    {
        "input": "¿Cómo se usa `if` en Python?",
        "output": "Define una condición. Ejemplo: `if x > 0: print('x es positivo')`."
    },
    {
        "input": "¿Cómo agrego un elemento a una lista?",
        "output": "Usa el método `.append()`. Ejemplo: `mi_lista.append(4)`."
    },
    {
        "input": "¿Cómo creo un diccionario en Python?",
        "output": "Usa llaves `{}`. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo verifico si una clave está en un diccionario?",
        "output": "Usa el operador `in`. Ejemplo: `if 'clave' in mi_diccionario: print('Clave encontrada')`."
    },
    {
        "input": "¿Cómo creo un bucle que recorra una lista?",
        "output": "Usa un ciclo `for`. Ejemplo: `for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Cómo divido un número entre otro?",
        "output": "Usa el operador `/`. Ejemplo: `resultado = 10 / 2`."
    },
    {
        "input": "¿Cómo obtengo el resto de una división?",
        "output": "Usa el operador `%`. Ejemplo: `resto = 10 % 3`."
    },
    {
        "input": "¿Cómo puedo repetir algo un número específico de veces?",
        "output": "Usa `for` con `range()`. Ejemplo: `for i in range(5): print('Hola')`."
    },
    {
        "input": "¿Cómo genero una lista de números consecutivos?",
        "output": "Usa `list()` y `range()`. Ejemplo: `list(range(5))` devuelve `[0, 1, 2, 3, 4]`."
    },
    {
        "input": "¿Cómo convierto un número a cadena?",
        "output": "Usa `str()`. Ejemplo: `str(123)` devuelve `'123'`."
    },
    {
        "input": "¿Cómo convierto una cadena a número?",
        "output": "Usa `int()` o `float()`. Ejemplo: `int('123')` devuelve `123`."
    },
    {
        "input": "¿Cómo compruebo si una cadena contiene otra?",
        "output": "Usa el operador `in`. Ejemplo: `if 'mundo' in 'Hola mundo': print('Encontrado')`."
    },
    {
        "input": "¿Cómo creo una tupla en Python?",
        "output": "Usa paréntesis. Ejemplo: `mi_tupla = (1, 2, 3)`."
    },
    {
        "input": "¿Cómo defino una constante en Python?",
        "output": "No hay constantes reales en Python, pero por convención usa mayúsculas. Ejemplo: `CONSTANTE = 3.14`."
    },
    {
        "input": "¿Cómo hago que un programa espere unos segundos?",
        "output": "Usa el módulo `time`. Ejemplo: `import time; time.sleep(2)` espera 2 segundos."
    },
    {
        "input": "¿Cómo obtengo la entrada del usuario?",
        "output": "Usa la función `input()`. Ejemplo: `nombre = input('¿Cuál es tu nombre? ')`."
    },
    {
        "input": "¿Cómo verifico si un número es impar?",
        "output": "Comprueba si el resto de la división entre 2 no es cero. Ejemplo: `if numero % 2 != 0: print('Impar')`."
    },
    {
        "input": "¿Cómo hago una comparación con `elif`?",
        "output": "Usa `elif` para condiciones adicionales. Ejemplo: `if x > 0: print('Positivo') elif x == 0: print('Cero') else: print('Negativo')`."
    },
    {
        "input": "¿Cómo uso una variable dentro de una cadena?",
        "output": "Usa una f-string. Ejemplo: `nombre = 'Juan'; print(f'Hola, {nombre}')`."
    },
    {
        "input": "¿Cómo puedo terminar un programa en Python?",
        "output": "Usa `exit()` o `sys.exit()`. Ejemplo: `import sys; sys.exit()`."
    },
    {
        "input": "¿Cómo multiplico cadenas?",
        "output": "Usa el operador `*`. Ejemplo: `'Hola' * 3` devuelve `'HolaHolaHola'`."
    },
    {
        "input": "¿Cómo verifico si una lista está vacía?",
        "output": "Comprueba su longitud. Ejemplo: `if not mi_lista: print('Lista vacía')`."
    },
    {
        "input": "¿Cómo se usa `pass` en Python?",
        "output": "Es un marcador de posición que no hace nada. Ejemplo: `if True: pass`."
    },
    {
        "input": "¿Cómo puedo redondear un número?",
        "output": "Usa la función `round()`. Ejemplo: `round(3.14159, 2)` devuelve `3.14`."
    },
    {
        "input": "¿Qué es una computadora?",
        "output": "Una computadora es una máquina electrónica que procesa datos y realiza operaciones según las instrucciones que recibe, ejecutando tareas de manera rápida y precisa."
    },
    {
        "input": "¿Cómo funciona una computadora?",
        "output": "Una computadora funciona a través de la interacción de su hardware y software. El hardware realiza las operaciones físicas, mientras que el software proporciona las instrucciones para que esas operaciones se lleven a cabo."
    },
    {
        "input": "¿Qué es el hardware de una computadora?",
        "output": "El hardware de una computadora incluye todos los componentes físicos, como la CPU, la memoria, el disco duro, el monitor, y los periféricos como el teclado y el ratón."
    },
    {
        "input": "¿Qué es el software de una computadora?",
        "output": "El software es el conjunto de programas y aplicaciones que permiten a la computadora realizar tareas específicas, como procesadores de texto, navegadores web y sistemas operativos."
    },
    {
        "input": "¿Cuál es la diferencia entre hardware y software?",
        "output": "El hardware son los componentes físicos de la computadora, mientras que el software son los programas y sistemas que controlan el hardware para ejecutar tareas."
    },
    {
        "input": "¿Qué es una CPU?",
        "output": "La CPU (Unidad Central de Procesamiento) es el cerebro de la computadora, responsable de ejecutar instrucciones y coordinar todas las operaciones dentro del sistema."
    },
    {
        "input": "¿Qué es la memoria RAM?",
        "output": "La memoria RAM (Memoria de Acceso Aleatorio) es un tipo de memoria volátil que la computadora usa para almacenar datos temporales mientras está en funcionamiento."
    },
    {
        "input": "¿Qué es un disco duro?",
        "output": "El disco duro es un dispositivo de almacenamiento permanente que guarda el sistema operativo, programas y datos del usuario, incluso cuando la computadora está apagada."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es un software que gestiona el hardware de la computadora y permite que los usuarios interactúen con el sistema, ejecutando aplicaciones y gestionando recursos."
    },
    {
        "input": "¿Cuáles son los sistemas operativos más comunes?",
        "output": "Los sistemas operativos más comunes incluyen Windows, macOS, Linux, y los sistemas móviles como Android e iOS."
    },
    {
        "input": "¿Qué es la tarjeta gráfica?",
        "output": "La tarjeta gráfica es un componente de hardware que maneja el procesamiento de imágenes, videos y gráficos, permitiendo la visualización en el monitor."
    },
    {
        "input": "¿Qué es una placa base?",
        "output": "La placa base o motherboard es la tarjeta principal de la computadora, donde se conectan todos los componentes esenciales como la CPU, la RAM, y los periféricos."
    },
    {
        "input": "¿Qué es un puerto USB?",
        "output": "Un puerto USB es una interfaz que permite conectar dispositivos periféricos, como teclados, ratones, y memorias externas, a la computadora."
    },
    {
        "input": "¿Qué es una tarjeta de sonido?",
        "output": "Una tarjeta de sonido es un dispositivo que permite a la computadora procesar y emitir audio, gestionando la entrada y salida de sonido."
    },
    {
        "input": "¿Qué es una red informática?",
        "output": "Una red informática es un conjunto de computadoras y otros dispositivos conectados entre sí para compartir recursos e información."
    },
    {
        "input": "¿Qué es un servidor?",
        "output": "Un servidor es una computadora o programa que ofrece servicios, como almacenamiento de datos o acceso a aplicaciones, a otras computadoras en una red."
    },
    {
        "input": "¿Qué es la nube?",
        "output": "La nube es un servicio que permite almacenar datos y ejecutar aplicaciones a través de Internet, sin necesidad de tenerlos en un dispositivo físico local."
    },
    {
        "input": "¿Qué es un navegador web?",
        "output": "Un navegador web es un software que permite acceder y visualizar sitios web en Internet, como Google Chrome, Firefox, y Safari."
    },
    {
        "input": "¿Qué es el BIOS?",
        "output": "El BIOS (Basic Input Output System) es un software básico que se encuentra en la placa base de la computadora y gestiona el arranque y la configuración inicial del hardware."
    },
    {
        "input": "¿Qué es la tarjeta madre?",
        "output": "La tarjeta madre, o placa base, es el componente central de la computadora que conecta todos los demás componentes, como la CPU, la memoria RAM y los dispositivos de almacenamiento."
    },
    {
        "input": "¿Qué son los periféricos de una computadora?",
        "output": "Los periféricos son dispositivos externos que se conectan a la computadora para agregarle funcionalidad, como impresoras, escáneres, ratones y teclados."
    },
    {
        "input": "¿Qué es un teclado?",
        "output": "Un teclado es un dispositivo de entrada que permite al usuario interactuar con la computadora mediante la introducción de texto y comandos."
    },
    {
        "input": "¿Qué es un ratón o mouse?",
        "output": "Un ratón es un dispositivo de entrada que permite al usuario mover un puntero en la pantalla de la computadora para seleccionar o interactuar con objetos."
    },
    {
        "input": "¿Qué es una impresora?",
        "output": "Una impresora es un dispositivo periférico que permite imprimir documentos o imágenes desde la computadora en papel."
    },
    {
        "input": "¿Qué es un monitor?",
        "output": "Un monitor es un dispositivo de salida que muestra información visual generada por la computadora, como texto, imágenes y videos."
    },
    {
        "input": "¿Qué son las tarjetas de expansión?",
        "output": "Las tarjetas de expansión son componentes adicionales que se pueden insertar en la placa base de la computadora para mejorar o añadir funcionalidades, como tarjetas gráficas, de sonido o de red."
    },
    {
        "input": "¿Qué es la tecnología de 64 bits?",
        "output": "La tecnología de 64 bits se refiere a la capacidad de una computadora de procesar datos en bloques de 64 bits, lo que permite un mejor rendimiento y mayor capacidad de memoria."
    },
    {
        "input": "¿Qué es una dirección IP?",
        "output": "Una dirección IP (Protocolo de Internet) es una etiqueta numérica que identifica de manera única a una computadora o dispositivo en una red."
    },
    {
        "input": "¿Qué es la RAM?",
        "output": "La RAM (Memoria de Acceso Aleatorio) es un tipo de memoria volátil que permite a la computadora almacenar temporalmente datos que se utilizan mientras se ejecutan aplicaciones."
    },
    {
        "input": "¿Qué es el almacenamiento SSD?",
        "output": "El almacenamiento SSD (Unidad de Estado Sólido) es un tipo de almacenamiento que utiliza memoria flash para guardar datos, lo que proporciona velocidades de lectura y escritura mucho más rápidas que los discos duros tradicionales."
    },
    {
        "input": "¿Qué es un sistema de enfriamiento en una computadora?",
        "output": "Un sistema de enfriamiento es un conjunto de componentes, como ventiladores o disipadores de calor, que mantienen la temperatura de la computadora dentro de un rango seguro para evitar el sobrecalentamiento."
    },
    {
        "input": "¿Qué es la arquitectura de una computadora?",
        "output": "La arquitectura de una computadora se refiere al diseño y la organización de sus componentes, incluyendo la CPU, memoria, almacenamiento y los sistemas de entrada y salida."
    },
    {
        "input": "¿Qué es un byte?",
        "output": "Un byte es una unidad de información que representa 8 bits, y es la cantidad mínima de datos que una computadora puede manejar a la vez."
    },
    {
        "input": "¿Qué es un bit?",
        "output": "Un bit es la unidad más pequeña de información en computación y puede tener un valor de 0 o 1."
    },
    {
        "input": "¿Qué es una GPU?",
        "output": "La GPU (Unidad de Procesamiento Gráfico) es un componente especializado que maneja el procesamiento gráfico de la computadora, especialmente en tareas como juegos y renderizado de imágenes."
    },
    {
        "input": "¿Qué es el overclocking?",
        "output": "El overclocking es la práctica de aumentar la velocidad de operación de los componentes de la computadora, como la CPU o la GPU, más allá de su especificación estándar para mejorar el rendimiento."
    },
    {
        "input": "¿Qué es la conectividad Wi-Fi?",
        "output": "La conectividad Wi-Fi es una tecnología que permite a los dispositivos conectarse a Internet y a otras redes de manera inalámbrica mediante ondas de radio."
    },
    {
        "input": "¿Qué es un firewall?",
        "output": "Un firewall es una herramienta de seguridad que controla el tráfico de red, permitiendo o bloqueando comunicaciones según un conjunto de reglas predefinidas."
    },
    {
        "input": "¿Qué es un antivirus?",
        "output": "Un antivirus es un software diseñado para detectar, prevenir y eliminar virus y otros tipos de malware de una computadora."
    },
    {
        "input": "¿Qué es la virtualización?",
        "output": "La virtualización es una tecnología que permite ejecutar varios sistemas operativos o instancias de software en una sola computadora, creando entornos independientes dentro de la misma máquina."
    },
    {
        "input": "¿Qué es un dispositivo de almacenamiento externo?",
        "output": "Un dispositivo de almacenamiento externo es un equipo que permite guardar datos fuera de la computadora, como discos duros externos, memorias USB o tarjetas SD."
    },
    {
        "input": "¿Qué es el procesador de texto?",
        "output": "Un procesador de texto es un software que permite crear, editar, formatear y guardar documentos de texto, como Microsoft Word o Google Docs."
    },
    {
        "input": "¿Qué es un sistema de archivos?",
        "output": "Un sistema de archivos es la estructura que organiza cómo se almacenan y acceden los datos en un dispositivo de almacenamiento."
    },
    {
        "input": "¿Qué es la computación en la nube?",
        "output": "La computación en la nube es un modelo que permite almacenar y procesar datos en servidores remotos, accesibles a través de Internet, en lugar de en la computadora local."
    },
    {
        "input": "¿Qué es un dispositivo de entrada?",
        "output": "Un dispositivo de entrada es cualquier periférico que permite al usuario introducir datos en la computadora, como el teclado, el ratón o el escáner."
    },
    {
        "input": "¿Qué es un dispositivo de salida?",
        "output": "Un dispositivo de salida es cualquier periférico que permite a la computadora mostrar datos al usuario, como el monitor, la impresora o los altavoces."
    },
    {
        "input": "¿Qué tipos de sistemas tecnológicos existen?",
        "output": "Existen diversos tipos de sistemas tecnológicos, entre ellos: sistemas operativos, sistemas de comunicación, sistemas de control, sistemas embebidos, sistemas de redes, sistemas de información, y sistemas de software, entre otros."
    },
    {
        "input": "¿Cuántos tipos de sistemas operativos hay?",
        "output": "Hay varios tipos de sistemas operativos, como los sistemas operativos de escritorio (Windows, macOS, Linux), sistemas operativos móviles (Android, iOS), y sistemas operativos en tiempo real, entre otros."
    },
    {
        "input": "¿Qué es un sistema de comunicación en tecnología?",
        "output": "Un sistema de comunicación es un conjunto de componentes tecnológicos que permite la transmisión de datos entre dispositivos, como las redes móviles, el Internet y las redes locales."
    },
    {
        "input": "¿Qué es un sistema embebido?",
        "output": "Un sistema embebido es un sistema de computación que está dedicado a realizar una tarea específica y está integrado en dispositivos como electrodomésticos, automóviles y sistemas industriales."
    },
    {
        "input": "¿Cuántos tipos de sistemas de redes existen?",
        "output": "Existen diferentes tipos de sistemas de redes, como redes LAN (Local Area Network), WAN (Wide Area Network), MAN (Metropolitan Area Network), y redes inalámbricas (Wi-Fi, Bluetooth, 5G), entre otros."
    },
    {
        "input": "¿Qué es un sistema de información?",
        "output": "Un sistema de información es un conjunto de componentes tecnológicos que permiten la recopilación, almacenamiento, procesamiento y distribución de información para apoyar la toma de decisiones y la gestión empresarial."
    },
    {
        "input": "¿Qué son los sistemas distribuidos?",
        "output": "Un sistema distribuido es un conjunto de computadoras interconectadas que trabajan conjuntamente para proporcionar un servicio, compartiendo recursos como procesamiento y almacenamiento, sin depender de una máquina central."
    },
    {
        "input": "¿Qué es un sistema de software?",
        "output": "Un sistema de software es un conjunto de programas y aplicaciones diseñadas para ejecutar tareas específicas en una computadora o dispositivo, como procesadores de texto, navegadores web y sistemas operativos."
    },
    {
        "input": "¿Qué es un sistema de control?",
        "output": "Un sistema de control es un sistema que regula y monitorea el comportamiento de un proceso o dispositivo para mantenerlo dentro de ciertos límites, como los sistemas de control de temperatura o de velocidad."
    },
    {
        "input": "¿Qué es un sistema experto?",
        "output": "Un sistema experto es un tipo de sistema basado en inteligencia artificial diseñado para simular el proceso de toma de decisiones de un experto en un área específica, usando bases de conocimiento y reglas de inferencia."
    },
    {
        "input": "¿Qué es un sistema de almacenamiento en la nube?",
        "output": "Un sistema de almacenamiento en la nube es un servicio que permite almacenar y acceder a datos a través de Internet en lugar de depender de almacenamiento local, como Google Drive, Dropbox y OneDrive."
    },
    {
        "input": "¿Qué es un sistema de seguridad cibernética?",
        "output": "Un sistema de seguridad cibernética es un conjunto de tecnologías y prácticas diseñadas para proteger las redes, dispositivos y datos contra accesos no autorizados, ataques o daños."
    },
    {
        "input": "¿Qué es un sistema de gestión empresarial?",
        "output": "Un sistema de gestión empresarial (ERP) es una solución tecnológica que ayuda a las empresas a gestionar de manera integrada diferentes procesos como contabilidad, inventarios, ventas y recursos humanos."
    },
    {
        "input": "¿Cuántos tipos de sistemas de bases de datos existen?",
        "output": "Existen diferentes tipos de sistemas de bases de datos, como bases de datos relacionales, no relacionales (NoSQL), distribuidas, jerárquicas, de objetos, entre otros."
    },
    {
        "input": "¿Qué es un sistema de comunicación inalámbrica?",
        "output": "Un sistema de comunicación inalámbrica es un sistema que transmite datos sin cables, usando señales de radiofrecuencia, como en el caso de Wi-Fi, Bluetooth, y las redes móviles."
    },
    {
        "input": "¿Qué es un sistema de gestión de contenido?",
        "output": "Un sistema de gestión de contenido (CMS) es una plataforma que permite crear, gestionar y modificar contenido digital, como texto, imágenes y videos, sin necesidad de conocimientos técnicos de programación."
    },
    {
        "input": "¿Qué es un sistema de virtualización?",
        "output": "Un sistema de virtualización permite ejecutar múltiples sistemas operativos en una sola máquina física, creando entornos virtuales aislados para maximizar el uso de recursos."
    },
    {
        "input": "¿Qué es un sistema de monitoreo remoto?",
        "output": "Un sistema de monitoreo remoto es un sistema que permite supervisar y controlar dispositivos o procesos a distancia, utilizando redes y tecnologías de comunicación."
    },
    {
        "input": "¿Qué es un sistema de navegación?",
        "output": "Un sistema de navegación es un conjunto de dispositivos y software que permite determinar la ubicación de un objeto y guiarlo hacia un destino, como en los GPS o sistemas de navegación de vehículos."
    },
    {
        "input": "¿Qué es un sistema de procesamiento de pagos?",
        "output": "Un sistema de procesamiento de pagos es un sistema que facilita la transacción de dinero entre compradores y vendedores, como los sistemas de pago en línea o las terminales de punto de venta."
    },
    {
        "input": "¿Qué es un sistema de inteligencia artificial?",
        "output": "Un sistema de inteligencia artificial es un conjunto de tecnologías que permiten a las máquinas realizar tareas que normalmente requieren inteligencia humana, como reconocimiento de voz, aprendizaje automático y toma de decisiones."
    },
    {
        "input": "¿Qué es un sistema de soporte técnico?",
        "output": "Un sistema de soporte técnico es un conjunto de herramientas y servicios que ayudan a resolver problemas técnicos relacionados con software, hardware o sistemas informáticos."
    },
    {
        "input": "¿Qué es un sistema de automatización?",
        "output": "Un sistema de automatización es un sistema diseñado para realizar tareas o procesos sin intervención humana, utilizando dispositivos controlados electrónicamente, como en la fabricación y en el hogar inteligente."
    },
    {
        "input": "¿Qué es un sistema de control industrial?",
        "output": "Un sistema de control industrial es un sistema tecnológico utilizado para gestionar y supervisar la operación de maquinaria y procesos industriales, como los controladores lógicos programables (PLC)."
    },
    {
        "input": "¿Qué es un sistema de recomendación?",
        "output": "Un sistema de recomendación es un sistema basado en algoritmos que sugiere productos, servicios o contenidos a los usuarios en función de sus preferencias y comportamientos previos, como los de Amazon o Netflix."
    },
    {
        "input": "¿Qué es un sistema de mensajería instantánea?",
        "output": "Un sistema de mensajería instantánea es un servicio de comunicación en línea que permite enviar y recibir mensajes en tiempo real, como WhatsApp, Telegram y Slack."
    },
    {
        "input": "¿Qué es un sistema de detección de intrusos?",
        "output": "Un sistema de detección de intrusos (IDS) es un sistema de seguridad que monitorea las redes y sistemas para detectar actividades sospechosas o maliciosas que puedan indicar un intento de acceso no autorizado."
    },
    {
        "input": "¿Qué es un sistema operativo en tiempo real?",
        "output": "Un sistema operativo en tiempo real es un sistema operativo diseñado para garantizar que las tareas se completen en un tiempo específico, siendo fundamental en aplicaciones como la aviación o la medicina."
    },
    {
        "input": "¿Qué es un sistema de control de versiones?",
        "output": "Un sistema de control de versiones es una herramienta de software que ayuda a gestionar los cambios en el código fuente de los programas, como Git, permitiendo rastrear y revertir modificaciones."
    },
    {
        "input": "¿Qué es un sistema de computación cuántica?",
        "output": "Un sistema de computación cuántica es una tecnología que utiliza los principios de la mecánica cuántica para realizar cálculos, lo que podría permitir la resolución de problemas muy complejos a una velocidad mucho mayor que las computadoras tradicionales."
    },
    {
        "input": "¿Qué es un sistema de reconocimiento facial?",
        "output": "Un sistema de reconocimiento facial es un sistema de inteligencia artificial que analiza y compara patrones faciales para identificar o verificar la identidad de una persona."
    },
    {
        "input": "¿Qué es un sistema de inteligencia empresarial?",
        "output": "Un sistema de inteligencia empresarial (BI) es un conjunto de herramientas y tecnologías que ayudan a las empresas a recopilar, analizar e interpretar datos para tomar decisiones informadas."
    },
    {
        "input": "¿Qué es un sistema de análisis de datos?",
        "output": "Un sistema de análisis de datos es una plataforma o conjunto de herramientas que permite recolectar, procesar y analizar grandes cantidades de datos para obtener información útil y tomar decisiones basadas en datos."
    },
    {
        "input": "¿Qué es un sistema de protección contra desastres?",
        "output": "Un sistema de protección contra desastres es un sistema tecnológico que permite la protección de datos e infraestructura ante eventos inesperados, como desastres naturales o fallos del sistema."
    },
    {
        "input": "¿Qué es un sistema de respaldo?",
        "output": "Un sistema de respaldo es una solución que crea copias de seguridad de los datos para garantizar su recuperación en caso de pérdida o daño, como servicios de almacenamiento en la nube o discos duros externos."
    },
    {
        "input": "¿Qué es un sistema de control de tráfico?",
        "output": "Un sistema de control de tráfico es un sistema tecnológico utilizado para gestionar el flujo de vehículos y peatones, utilizando semáforos, cámaras y sensores para mejorar la seguridad y la eficiencia."
    },
    {
        "input": "¿Qué es un sistema de pago móvil?",
        "output": "Un sistema de pago móvil es un sistema que permite realizar transacciones financieras a través de teléfonos móviles, como Apple Pay, Google Pay y otros servicios de pago digital."
    },
    {
        "input": "¿Qué es un sistema de monitoreo de salud?",
        "output": "Un sistema de monitoreo de salud es un sistema que recopila y analiza datos sobre la salud de una persona en tiempo real, como los dispositivos de seguimiento de actividad o los sistemas de telemedicina."
    },
    {
        "input": "¿Qué es un sistema de control de inventario?",
        "output": "Un sistema de control de inventario es un sistema tecnológico que ayuda a gestionar las existencias de productos en una tienda o almacén, optimizando el proceso de compra, almacenamiento y venta."
    },
    {
        "input": "¿Qué es un sistema de análisis predictivo?",
        "output": "Un sistema de análisis predictivo utiliza algoritmos de machine learning y big data para analizar datos históricos y hacer predicciones sobre eventos futuros, como en la previsión de demanda de productos."
    },
    {
        "input": "¿Qué es un sistema de automatización del hogar?",
        "output": "Un sistema de automatización del hogar es un sistema que controla y automatiza dispositivos domésticos, como luces, termostatos y cámaras de seguridad, permitiendo su gestión a través de aplicaciones o asistentes virtuales."
    },
    {
        "input": "¿Qué es un sistema de verificación de identidad?",
        "output": "Un sistema de verificación de identidad es un sistema que asegura que una persona o entidad es quien dice ser, mediante métodos como contraseñas, huellas dactilares, reconocimiento facial o autenticación de dos factores."
    },
    {
        "input": "¿Cómo creo una variable en Python?",
        "output": "En Python, se crea una variable simplemente asignando un valor a un nombre, por ejemplo: `mi_variable = 10`."
    },
    {
        "input": "¿Puedo crear una variable sin darle un valor?",
        "output": "No, en Python debes asignar un valor a la variable cuando la creas. Si intentas usar una variable sin asignarle un valor, obtendrás un error."
    },
    {
        "input": "¿Qué tipo de valores puedo asignar a una variable?",
        "output": "Puedes asignar varios tipos de valores a una variable, como enteros, cadenas de texto, números decimales (flotantes), listas, tuplas, diccionarios, entre otros."
    },
    {
        "input": "¿Cómo creo una variable con un valor entero?",
        "output": "Para crear una variable con un valor entero, solo necesitas asignar un número sin decimales, como: `edad = 25`."
    },
    {
        "input": "¿Cómo creo una variable con un valor decimal?",
        "output": "Para crear una variable con un valor decimal (flotante), asigna un número con punto decimal, como: `precio = 19.99`."
    },
    {
        "input": "¿Cómo asigno un valor de texto a una variable?",
        "output": "Para asignar un texto (cadena de caracteres) a una variable, debes rodearlo con comillas simples o dobles, como: `nombre = 'Juan'` o `nombre = \"Juan\"`."
    },
    {
        "input": "¿Cómo puedo cambiar el valor de una variable?",
        "output": "Puedes cambiar el valor de una variable simplemente asignándole un nuevo valor, como: `edad = 30` si anteriormente tenías `edad = 25`."
    },
    {
        "input": "¿Puedo crear una variable sin asignar un valor inicial?",
        "output": "En Python, siempre debes asignar un valor inicial a la variable cuando la creas. No puedes declarar una variable sin un valor."
    },
    {
        "input": "¿Qué pasa si asigno un valor incorrecto a una variable?",
        "output": "Si intentas asignar un valor incompatible con el tipo de la variable, Python generará un error. Por ejemplo, asignar un texto a una variable que espera un número causará un error."
    },
    {
        "input": "¿Cómo puedo saber el tipo de una variable?",
        "output": "Para saber el tipo de una variable, puedes usar la función `type()`, como: `print(type(mi_variable))`."
    },
    {
        "input": "¿Puedo usar espacios en los nombres de las variables?",
        "output": "No, en Python los nombres de las variables no pueden contener espacios. Si necesitas separar palabras, puedes usar guiones bajos, como: `mi_variable`."
    },
    {
        "input": "¿Las variables en Python son sensibles a mayúsculas y minúsculas?",
        "output": "Sí, las variables en Python son sensibles a mayúsculas y minúsculas. Por ejemplo, `edad` y `Edad` son dos variables diferentes."
    },
    {
        "input": "¿Cuáles son las reglas para nombrar una variable en Python?",
        "output": "Los nombres de las variables deben comenzar con una letra o un guion bajo (`_`), seguido de letras, números o guiones bajos. No pueden comenzar con un número ni ser palabras reservadas en Python."
    },
    {
        "input": "¿Cómo creo una variable global en Python?",
        "output": "Para crear una variable global en Python, solo debes definirla fuera de cualquier función, de modo que esté disponible en todo el programa."
    },
    {
        "input": "¿Qué es una variable local en Python?",
        "output": "Una variable local es aquella que se define dentro de una función y solo es accesible dentro de esa función."
    },
    {
        "input": "¿Puedo usar variables dentro de cadenas de texto?",
        "output": "Sí, puedes usar variables dentro de cadenas de texto mediante concatenación o interpolación de cadenas. Por ejemplo: `nombre = 'Juan'` y `saludo = 'Hola ' + nombre`."
    },
    {
        "input": "¿Cómo hago interpolación de variables dentro de una cadena en Python?",
        "output": "Para interpolar una variable dentro de una cadena en Python, puedes usar f-strings, como: `saludo = f'Hola {nombre}'`."
    },
    {
        "input": "¿Cómo crear una lista de variables?",
        "output": "Puedes crear una lista de variables utilizando corchetes `[]`, por ejemplo: `numeros = [1, 2, 3, 4, 5]`."
    },
    {
        "input": "¿Cómo asigno un valor booleano a una variable?",
        "output": "Para asignar un valor booleano a una variable, puedes usar `True` o `False`, como: `es_adulto = True`."
    },
    {
        "input": "¿Cómo asigno un valor vacío a una variable?",
        "output": "Puedes asignar un valor vacío a una variable usando `None`, como: `mi_variable = None`."
    },
    {
        "input": "¿Cómo uso una variable dentro de una función?",
        "output": "Puedes usar una variable dentro de una función siempre que esté definida dentro del ámbito de la función o que sea global. Por ejemplo, si `edad` es una variable global, puedes usarla en la función sin problemas."
    },
    {
        "input": "¿Puedo cambiar el tipo de una variable después de haberla creado?",
        "output": "Sí, en Python las variables no tienen un tipo fijo, por lo que puedes cambiar el tipo de una variable. Por ejemplo, puedes asignar un número entero a una variable y luego asignarle una cadena de texto."
    },
    {
        "input": "¿Qué pasa si intento usar una variable que no he definido?",
        "output": "Si intentas usar una variable que no ha sido definida, Python generará un error de tipo `NameError`."
    },
    {
        "input": "¿Cómo defino una variable dentro de una clase?",
        "output": "Dentro de una clase, puedes definir una variable como un atributo de clase. Usas `self` para acceder a ella, por ejemplo: `self.mi_variable = 10`."
    },
    {
        "input": "¿Cómo puedo usar variables dentro de una lista?",
        "output": "Puedes usar variables dentro de una lista asignando los valores de las variables como elementos de la lista. Ejemplo: `mi_lista = [mi_variable, 5, 'texto']`."
    },
    {
        "input": "¿Qué es una variable constante?",
        "output": "En Python no existe un tipo específico para constantes. Sin embargo, es una convención usar todas las letras mayúsculas para denotar una variable constante, como: `PI = 3.1416`."
    },
    {
        "input": "¿Cómo puedo asignar varias variables en una sola línea?",
        "output": "Puedes asignar varias variables en una sola línea separando las asignaciones con comas. Por ejemplo: `a, b, c = 1, 2, 3`."
    },
    {
        "input": "¿Cómo borro una variable?",
        "output": "Puedes borrar una variable utilizando la palabra clave `del`, por ejemplo: `del mi_variable`."
    },
    {
        "input": "¿Cómo se crean variables en un diccionario?",
        "output": "En un diccionario, se crean variables como pares clave-valor. Por ejemplo: `mi_diccionario = {'nombre': 'Juan', 'edad': 25}`."
    },
    {
        "input": "¿Puedo usar palabras reservadas como nombres de variables?",
        "output": "No, no puedes usar palabras reservadas de Python (como `def`, `if`, `else`) como nombres de variables."
    },
    {
        "input": "¿Cómo se crean variables dentro de un bucle?",
        "output": "Las variables dentro de un bucle se crean de la misma manera que fuera del bucle, solo que su valor puede cambiar en cada iteración del bucle."
    },
    {
        "input": "¿Cómo puedo asignar el valor de una variable a otra?",
        "output": "Puedes asignar el valor de una variable a otra simplemente usando el operador de asignación, por ejemplo: `otra_variable = mi_variable`."
    },
    {
        "input": "¿Cómo puedo comprobar si una variable existe?",
        "output": "Puedes usar la función `locals()` o `globals()` para comprobar si una variable está definida en el ámbito local o global, respectivamente."
    },
    {
        "input": "¿Qué es una variable dinámica?",
        "output": "Una variable dinámica es aquella cuyo tipo puede cambiar en tiempo de ejecución. Python es un lenguaje de tipado dinámico, por lo que las variables pueden cambiar de tipo durante la ejecución del programa."
    },
    {
        "input": "¿Puedo usar una variable antes de declararla?",
        "output": "No, en Python debes declarar una variable antes de usarla, o recibirás un error `NameError`."
    },
    {
        "input": "¿Qué es una variable de instancia?",
        "output": "Una variable de instancia es una variable que pertenece a una instancia de una clase, y se define generalmente dentro del método `__init__` usando `self`."
    },
    {
        "input": "¿Qué significa `global` en una variable?",
        "output": "La palabra clave `global` se usa dentro de una función para indicar que la variable que se está modificando es global, es decir, que pertenece al ámbito global."
    },
    {
        "input": "¿Puedo asignar una variable de una función a una variable global?",
        "output": "Sí, para modificar una variable global dentro de una función, debes usar la palabra clave `global`, como: `global mi_variable`."
    },
    {
        "input": "¿Cómo puedo concatenar variables de tipo texto?",
        "output": "Puedes concatenar variables de tipo texto utilizando el operador `+`, por ejemplo: `mensaje = 'Hola ' + nombre`."
    },
    {
        "input": "¿Cómo asigno un valor a una variable dentro de una función?",
        "output": "Dentro de una función, puedes asignar un valor a una variable de la siguiente manera: `mi_variable = 10`."
    },
    {
        "input": "¿Cómo puedo sumar dos variables numéricas?",
        "output": "Puedes sumar dos variables numéricas utilizando el operador `+`, por ejemplo: `suma = num1 + num2`."
    },
    {
        "input": "¿Cómo puedo saber el valor de una variable?",
        "output": "Puedes ver el valor de una variable utilizando la función `print()`, por ejemplo: `print(mi_variable)`."
    },
    {
        "input": "¿Qué es un bucle en Python?",
        "output": "Un bucle en Python es una estructura de control que permite ejecutar un bloque de código de manera repetitiva, mientras se cumpla una condición específica."
    },
    {
        "input": "¿Cuáles son los tipos de bucles en Python?",
        "output": "En Python, los principales tipos de bucles son el bucle `for` y el bucle `while`."
    },
    {
        "input": "¿Cómo funciona un bucle `for` en Python?",
        "output": "El bucle `for` en Python itera sobre una secuencia (como una lista, tupla o rango) y ejecuta un bloque de código por cada elemento en la secuencia."
    },
    {
        "input": "¿Cómo se usa un bucle `for` para iterar sobre una lista?",
        "output": "Puedes usar un bucle `for` para iterar sobre una lista de la siguiente manera: `for item in lista: print(item)`."
    },
    {
        "input": "¿Qué es la función `range()` en un bucle `for`?",
        "output": "La función `range()` en Python genera una secuencia de números, que se puede utilizar con un bucle `for` para iterar un número específico de veces. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Cómo funciona un bucle `while` en Python?",
        "output": "Un bucle `while` ejecuta un bloque de código repetidamente mientras una condición booleana sea verdadera."
    },
    {
        "input": "¿Cómo se termina un bucle en Python?",
        "output": "Puedes usar la palabra clave `break` para salir de un bucle antes de que la condición sea falsa."
    },
    {
        "input": "¿Qué hace la palabra clave `continue` en un bucle?",
        "output": "La palabra clave `continue` se utiliza para saltar a la siguiente iteración de un bucle, omitiendo el código que sigue después de ella para la iteración actual."
    },
    {
        "input": "¿Puedo tener un bucle infinito en Python?",
        "output": "Sí, un bucle infinito puede ocurrir si la condición del bucle `while` siempre es verdadera. Por ejemplo, `while True: pass`."
    },
    {
        "input": "¿Qué es un bucle anidado?",
        "output": "Un bucle anidado es un bucle dentro de otro. Puedes tener bucles `for` o `while` dentro de otros bucles para realizar iteraciones múltiples."
    },
    {
        "input": "¿Cómo se usan los bucles anidados en Python?",
        "output": "Los bucles anidados se utilizan cuando necesitas realizar iteraciones dentro de cada iteración de un bucle externo. Ejemplo: `for i in range(3): for j in range(2): print(i, j)`."
    },
    {
        "input": "¿Qué es un iterador en Python?",
        "output": "Un iterador es un objeto que permite recorrer una secuencia (como una lista o un rango) uno por uno. Los bucles `for` utilizan iteradores de manera implícita."
    },
    {
        "input": "¿Puedo usar un `break` dentro de un bucle anidado?",
        "output": "Sí, puedes usar `break` para salir del bucle en el que se encuentra. Si lo usas en un bucle anidado, solo saldrá del bucle más interno."
    },
    {
        "input": "¿Cómo puedo saltarme una iteración en un bucle?",
        "output": "Puedes usar `continue` para saltarte una iteración de un bucle, lo que hará que el código que sigue en esa iteración se omita y pase a la siguiente."
    },
    {
        "input": "¿Cómo puedo recorrer una lista con su índice en un bucle `for`?",
        "output": "Puedes usar la función `enumerate()` para recorrer una lista con su índice. Ejemplo: `for index, item in enumerate(lista): print(index, item)`."
    },
    {
        "input": "¿Se puede modificar una lista mientras se recorre con un bucle?",
        "output": "Aunque es posible modificar una lista durante la iteración, puede causar errores si se cambian elementos mientras el bucle aún está ejecutándose. Es mejor evitar modificar la lista durante la iteración o hacerlo con cuidado."
    },
    {
        "input": "¿Qué es un bucle `for` en Python?",
        "output": "Un bucle `for` en Python se utiliza para iterar sobre una secuencia de elementos, como una lista, tupla o rango, y ejecutar un bloque de código para cada uno de los elementos."
    },
    {
        "input": "¿Cómo se puede evitar un bucle infinito en Python?",
        "output": "Asegúrate de que la condición del bucle `while` pueda volverse falsa en algún momento. Si usas un bucle `while True`, asegúrate de incluir un `break` o una condición de salida."
    },
    {
        "input": "¿Qué es el operador `else` en un bucle?",
        "output": "El operador `else` en un bucle se ejecuta cuando el bucle termina normalmente (es decir, no se interrumpe con un `break`). Es útil para realizar acciones después de que se complete el bucle."
    },
    {
        "input": "¿Puedo usar `else` con un bucle `while`?",
        "output": "Sí, puedes usar `else` con un bucle `while`. El bloque de código en `else` se ejecutará si el bucle termina sin que se haya usado un `break`."
    },
    {
        "input": "¿Cómo crear un bucle que imprima los números del 1 al 10?",
        "output": "Puedes usar un bucle `for` con `range()`, así: `for i in range(1, 11): print(i)`."
    },
    {
        "input": "¿Cómo puedo iterar sobre una cadena de texto en Python?",
        "output": "Puedes iterar sobre una cadena de texto utilizando un bucle `for`, por ejemplo: `for letra in 'hola': print(letra)`."
    },
    {
        "input": "¿Qué es un bucle `while` en Python?",
        "output": "Un bucle `while` en Python ejecuta un bloque de código repetidamente mientras una condición sea verdadera. Ejemplo: `while condicion: hacer_algo()`."
    },
    {
        "input": "¿Cómo hago un bucle que se ejecute 5 veces?",
        "output": "Puedes usar `range(5)` con un bucle `for`, de esta manera: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Cómo puedo crear un bucle que no imprima números negativos?",
        "output": "Puedes usar un bucle `for` y una sentencia `if` para verificar si el número es negativo, y solo imprimir los números no negativos. Ejemplo: `for i in range(-5, 6): if i >= 0: print(i)`."
    },
    {
        "input": "¿Qué sucede si se usa `break` en un bucle `for`?",
        "output": "Cuando usas `break` en un bucle `for`, el bucle se detiene inmediatamente y el programa continúa con el código que sigue después del bucle."
    },
    {
        "input": "¿Se puede usar un `continue` dentro de un bucle `for`?",
        "output": "Sí, el `continue` se usa dentro de un bucle `for` para saltar la iteración actual y pasar a la siguiente."
    },
    {
        "input": "¿Qué pasa si olvido la condición de un bucle `while`?",
        "output": "Si olvidas la condición de un bucle `while`, el bucle se convertirá en un bucle infinito, ya que siempre se ejecutará."
    },
    {
        "input": "¿Cómo puedo evitar que un bucle imprima algo varias veces?",
        "output": "Puedes evitar que un bucle imprima algo varias veces utilizando una sentencia `if` para comprobar si ya se ha impreso esa información antes."
    },
    {
        "input": "¿Cómo puedo romper un bucle si una condición es verdadera?",
        "output": "Puedes usar la sentencia `break` para salir del bucle si una condición específica es verdadera."
    },
    {
        "input": "¿Cómo uso un bucle `for` con una lista de diccionarios?",
        "output": "Puedes iterar sobre una lista de diccionarios de la siguiente manera: `for diccionario in lista: print(diccionario['clave'])`."
    },
    {
        "input": "¿Se puede usar `else` en un bucle `for`?",
        "output": "Sí, puedes usar `else` con un bucle `for`. El bloque `else` se ejecutará si el bucle no termina por un `break`."
    },
    {
        "input": "¿Cómo imprimo el índice de cada elemento en un bucle `for`?",
        "output": "Puedes usar `enumerate()` para obtener el índice de cada elemento, como: `for index, item in enumerate(lista): print(index, item)`."
    },
    {
        "input": "¿Cómo puedo hacer que un bucle se ejecute solo una vez?",
        "output": "Puedes hacer que un bucle se ejecute solo una vez utilizando un bucle `while` con una condición que se haga falsa después de la primera ejecución, o usando un bucle `for` con un rango de 1."
    },
    {
        "input": "¿Puedo tener un bucle `for` dentro de un bucle `while`?",
        "output": "Sí, puedes anidar un bucle `for` dentro de un bucle `while` o viceversa, lo que te permite realizar iteraciones complejas."
    },
    {
        "input": "¿Qué es un bucle `while` infinito?",
        "output": "Un bucle `while` infinito es un bucle cuya condición siempre es verdadera, lo que hace que nunca termine, como: `while True:`."
    },
    {
        "input": "¿Puedo usar un `break` dentro de un bucle `while`?",
        "output": "Sí, puedes usar `break` dentro de un bucle `while` para salir del bucle antes de que la condición se vuelva falsa."
    },
    {
        "input": "¿Cómo puedo salir de un bucle anidado?",
        "output": "Para salir de un bucle anidado, puedes usar `break` en el bucle más interno, o usar un conjunto de banderas para controlar la salida de bucles exteriores."
    },
    {
        "input": "¿Qué puedes hacer sobre Python?",
        "output": "Puedo ayudarte con conceptos básicos y avanzados de Python, desde escribir scripts simples hasta desarrollar aplicaciones y manejar bibliotecas populares."
    },
    {
        "input": "¿Puedes explicarme algo sobre Python?",
        "output": "Puedo explicarte desde lo básico, como variables y ciclos, hasta temas avanzados como decoradores, generadores, y manejo de excepciones en Python."
    },
    {
        "input": "¿Qué puedes hacer relacionado con Guatemala?",
        "output": "Puedo ofrecer información sobre la cultura, historia, geografía y datos interesantes de Guatemala."
    },
    {
        "input": "¿Qué puedes hacer sobre Xela?",
        "output": "Puedo proporcionarte datos sobre la ciudad de Quetzaltenango, incluyendo su historia, cultura, lugares turísticos y eventos importantes."
    },
    {
        "input": "¿Qué puedes hacer acerca de la Teoría de la Inteligencia Artificial?",
        "output": "Puedo explicarte conceptos teóricos de inteligencia artificial, como aprendizaje automático, redes neuronales y aplicaciones prácticas de la IA."
    },
    {
        "input": "¿Qué sabes sobre la carrera de Ingeniería en Sistemas?",
        "output": "Puedo explicar temas relacionados con la carrera, como algoritmos, diseño de software, redes, bases de datos y desarrollo de sistemas."
    },
    {
        "input": "¿Qué puedes hacer relacionado con la programación?",
        "output": "Puedo ayudarte a entender conceptos fundamentales, resolver problemas, y escribir código en diferentes lenguajes, especialmente Python."
    },
    {
        "input": "¿Qué puedes hacer sobre tecnología?",
        "output": "Puedo brindarte información sobre conceptos tecnológicos, tendencias actuales y aplicaciones prácticas en áreas como computación y sistemas."
    },
    {
        "input": "¿Qué puedes hacer sobre sistemas?",
        "output": "Puedo ayudarte a entender la arquitectura de sistemas informáticos, diseño de software, y conceptos relacionados con redes y bases de datos."
    },
    {
        "input": "¿Qué puedes hacer sobre videojuegos?",
        "output": "Puedo explicarte conceptos básicos de desarrollo de videojuegos, motores como Unity, y ayudarte a planificar la lógica y mecánicas de un juego."
    },
    {
        "input": "¿Qué sabes sobre computadoras?",
        "output": "Puedo explicarte conceptos básicos sobre el hardware y software de las computadoras, su funcionamiento, y cómo interactúan los sistemas."
    },
    {
        "input": "¿Qué puedes hacer relacionado con adaptadores?",
        "output": "Puedo explicarte qué son los adaptadores, cómo funcionan, y su importancia en la conexión de dispositivos electrónicos o sistemas."
    },
    {
        "input": "¿Qué puedes hacer sobre la inteligencia artificial?",
        "output": "Puedo explicarte fundamentos teóricos, algoritmos básicos, y cómo se aplican los conceptos de IA en la vida real o en sistemas."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender programación?",
        "output": "Puedo enseñarte los conceptos básicos de programación, ayudarte con ejercicios prácticos y explicarte la lógica detrás de los algoritmos."
    },
    {
        "input": "¿Qué puedes hacer relacionado con computadoras y sistemas?",
        "output": "Puedo explicarte cómo funcionan las computadoras, la interacción entre hardware y software, y conceptos básicos de sistemas operativos y redes."
    },
    {
        "input": "¿Qué puedes hacer sobre adaptadores en computadoras?",
        "output": "Puedo explicarte los tipos de adaptadores que existen, como adaptadores de red o gráficos, y su uso en sistemas computacionales."
    },
    {
        "input": "¿Qué puedes hacer relacionado con videojuegos y programación?",
        "output": "Puedo ayudarte a entender cómo programar videojuegos, desde el diseño de la lógica hasta el uso de motores como Pygame o Unity."
    },
    {
        "input": "¿Qué puedes hacer sobre la tecnología en Guatemala?",
        "output": "Puedo ofrecer información sobre el desarrollo tecnológico en Guatemala y cómo se relaciona con áreas como la educación y los negocios."
    },
    {
        "input": "¿Qué puedes hacer sobre la programación de sistemas?",
        "output": "Puedo explicarte cómo programar sistemas básicos, interactuar con hardware y optimizar recursos en aplicaciones específicas."
    },
    {
        "input": "¿Cómo creo un bucle `for` básico en Python?",
        "output": "Puedes crear un bucle `for` básico en Python utilizando la sintaxis: `for variable in secuencia:`. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Cómo se crea un bucle `for` para iterar sobre una lista?",
        "output": "Puedes iterar sobre una lista utilizando un bucle `for` así: `for item in lista: print(item)`."
    },
    {
        "input": "¿Cómo se crea un bucle `for` con `range()`?",
        "output": "Puedes usar `range()` para generar una secuencia de números. Ejemplo: `for i in range(3): print(i)` imprimirá los números del 0 al 2."
    },
    {
        "input": "¿Cómo se crea un bucle `while` en Python?",
        "output": "Puedes crear un bucle `while` en Python con la sintaxis: `while condicion: hacer_algo()`. Ejemplo: `while i < 5: print(i); i += 1`."
    },
    {
        "input": "¿Cómo crear un bucle `while` que termine cuando una condición sea falsa?",
        "output": "Usa la sintaxis básica de un bucle `while` con una condición booleana. Ejemplo: `while x < 10: x += 1`."
    },
    {
        "input": "¿Cómo crear un bucle `while` con un contador?",
        "output": "Puedes usar un contador en un bucle `while` así: `contador = 0; while contador < 5: print(contador); contador += 1`."
    },
    {
        "input": "¿Cómo crear un bucle `for` para iterar sobre un rango específico?",
        "output": "Usa `range(start, stop)` para especificar un rango. Ejemplo: `for i in range(2, 6): print(i)` imprimirá los números 2, 3, 4 y 5."
    },
    {
        "input": "¿Cómo crear un bucle `for` para iterar sobre un diccionario?",
        "output": "Puedes iterar sobre un diccionario usando `.items()`. Ejemplo: `for clave, valor in diccionario.items(): print(clave, valor)`."
    },
    {
        "input": "¿Cómo crear un bucle `for` con una condición `if` dentro?",
        "output": "Puedes usar un `if` dentro de un bucle `for` para aplicar condiciones a los elementos. Ejemplo: `for i in range(5): if i % 2 == 0: print(i)` imprimirá solo los números pares."
    },
    {
        "input": "¿Cómo crear un bucle `for` con un paso diferente?",
        "output": "Usa la función `range(start, stop, step)` para definir un paso. Ejemplo: `for i in range(0, 10, 2): print(i)` imprimirá 0, 2, 4, 6, 8."
    },
    {
        "input": "¿Cómo usar un bucle `for` para imprimir elementos de una lista en orden inverso?",
        "output": "Puedes usar la función `reversed()` o el índice negativo de la lista. Ejemplo: `for item in reversed(lista): print(item)` o `for i in range(len(lista)-1, -1, -1): print(lista[i])`."
    },
    {
        "input": "¿Cómo salir de un bucle en Python?",
        "output": "Puedes usar la palabra clave `break` para salir de un bucle prematuramente. Ejemplo: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "¿Cómo usar un bucle `while` para esperar hasta que una condición sea verdadera?",
        "output": "Puedes usar un bucle `while` con la condición deseada. Ejemplo: `while x != 5: x = int(input('Ingresa 5: '))`."
    },
    {
        "input": "¿Cómo crear un bucle infinito en Python?",
        "output": "Puedes crear un bucle infinito utilizando `while True:`. Ejemplo: `while True: print('Este bucle es infinito')`."
    },
    {
        "input": "¿Cómo evitar que un bucle infinito cause problemas?",
        "output": "Usa una condición de salida o un `break` dentro del bucle. Ejemplo: `while True: x = input('Escribe fin para salir: '); if x == 'fin': break`."
    },
    {
        "input": "¿Cómo puedo usar `break` para salir de un bucle anidado?",
        "output": "Para salir de un bucle anidado, usa `break` en el bucle más interno. Ejemplo: `for i in range(3): for j in range(3): if j == 2: break`."
    },
    {
        "input": "¿Cómo puedo usar `continue` en un bucle `for`?",
        "output": "La palabra clave `continue` se usa para omitir el resto de la iteración y pasar a la siguiente. Ejemplo: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "¿Cómo usar un bucle `for` para iterar sobre caracteres de una cadena?",
        "output": "Puedes iterar sobre los caracteres de una cadena de texto directamente en un bucle `for`. Ejemplo: `for char in 'Hola': print(char)`."
    },
    {
        "input": "¿Cómo crear un bucle `for` que itere sobre múltiples listas a la vez?",
        "output": "Puedes usar la función `zip()` para iterar sobre varias listas al mismo tiempo. Ejemplo: `for a, b in zip(lista1, lista2): print(a, b)`."
    },
    {
        "input": "¿Cómo crear un bucle `while` que dependa de una entrada del usuario?",
        "output": "Puedes usar un bucle `while` junto con `input()` para depender de la entrada del usuario. Ejemplo: `while input('Escribe algo: ') != 'salir': print('Hiciste una entrada')`."
    },
    {
        "input": "¿Cómo crear un bucle `while` con un contador decreciente?",
        "output": "Puedes usar un contador que disminuya dentro de un bucle `while`. Ejemplo: `contador = 5; while contador > 0: print(contador); contador -= 1`."
    },
    {
        "input": "¿Cómo utilizar un bucle anidado con un `if` dentro?",
        "output": "Puedes anidar un `if` dentro de un bucle anidado. Ejemplo: `for i in range(3): for j in range(3): if j == 1: print(f'{i},{j}')`."
    },
    {
        "input": "¿Cómo evitar un bucle infinito en un programa?",
        "output": "Asegúrate de que la condición de tu bucle `while` o `for` eventualmente se haga falsa, o usa `break` para controlarlo."
    },
    {
        "input": "¿Cómo utilizar un bucle para contar cuántos números son mayores a 5?",
        "output": "Puedes usar un bucle `for` con un contador. Ejemplo: `contador = 0; for i in range(10): if i > 5: contador += 1`."
    },
    {
        "input": "¿Cómo crear un bucle para multiplicar números en una lista?",
        "output": "Puedes usar un bucle `for` para multiplicar los números de una lista. Ejemplo: `resultado = 1; for num in lista: resultado *= num`."
    },
    {
        "input": "¿Cómo iterar con un bucle `for` para imprimir las claves de un diccionario?",
        "output": "Puedes usar `for clave in diccionario:` para iterar sobre las claves de un diccionario. Ejemplo: `for clave in diccionario: print(clave)`."
    },
    {
        "input": "¿Cómo usar `else` con un bucle `for`?",
        "output": "El bloque `else` de un bucle `for` se ejecuta si el bucle no se interrumpe con un `break`. Ejemplo: `for i in range(3): if i == 2: break; else: print('Bucle completado')`."
    },
    {
        "input": "¿Cómo hacer que un bucle `while` dependa de una condición que cambia dentro del bucle?",
        "output": "Puedes cambiar la condición dentro del bucle. Ejemplo: `while x < 10: x += 1; print(x)`."
    },
    {
        "input": "¿Cómo usar un bucle para imprimir los números impares del 1 al 10?",
        "output": "Puedes usar un bucle `for` con una condición `if` para verificar los números impares. Ejemplo: `for i in range(1, 11): if i % 2 != 0: print(i)`."
    },
    {
        "input": "¿Cómo imprimir todos los números del 1 al 10, pero omitir el número 5?",
        "output": "Usa `continue` para omitir el número 5. Ejemplo: `for i in range(1, 11): if i == 5: continue; print(i)`."
    },
    {
        "input": "¿Cómo usar un bucle `for` para recorrer una lista de diccionarios?",
        "output": "Puedes recorrer una lista de diccionarios y acceder a sus valores. Ejemplo: `for dic in lista: print(dic['clave'])`."
    },
    {
        "input": "¿Cómo usar `break` para salir de un bucle si un valor es encontrado?",
        "output": "Usa `break` para salir del bucle cuando se cumple una condición. Ejemplo: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "¿Cómo hacer un bucle `for` que imprima los cuadrados de los números?",
        "output": "Puedes usar `for` con una operación matemática. Ejemplo: `for i in range(5): print(i**2)`."
    },
    {
        "input": "¿Cómo usar `else` con un bucle `while`?",
        "output": "El bloque `else` en un bucle `while` se ejecuta cuando el bucle termina sin un `break`. Ejemplo: `while x < 5: x += 1; else: print('Fin del bucle')`."
    },
    {
        "input": "¿Cómo evitar una iteración en un bucle `for` cuando se cumple una condición?",
        "output": "Puedes usar `continue` para saltar la iteración actual. Ejemplo: `for i in range(10): if i == 5: continue; print(i)`."
    },
    {
        "input": "¿Cómo contar las veces que un número aparece en una lista usando un bucle?",
        "output": "Puedes usar un contador dentro de un bucle. Ejemplo: `contador = 0; for num in lista: if num == 5: contador += 1`."
    },
    {
        "input": "¿Cómo crear un bucle que haga algo en cada iteración y termine cuando se cumpla una condición?",
        "output": "Puedes usar un bucle `while` con una condición que cambie dentro del bucle. Ejemplo: `while x < 10: x += 1; if x == 7: break`."
    },
    {
        "input": "¿Qué puedes hacer?",
        "output": "Puedo ayudarte con temas relacionados a Python, programación, inteligencia artificial, sistemas, tecnología, videojuegos, y conceptos sobre Guatemala, Xela, computadoras y adaptadores."
    },
    {
        "input": "¿En qué puedes ayudarme?",
        "output": "Puedo ayudarte a aprender sobre programación, resolver dudas técnicas, explicar conceptos relacionados con sistemas, inteligencia artificial, computadoras, videojuegos, y más."
    },
    {
        "input": "¿Cómo puedes ayudarme con Python?",
        "output": "Puedo enseñarte desde los fundamentos hasta temas avanzados de Python, ayudarte a depurar código, implementar funciones o desarrollar proyectos pequeños."
    },
    {
        "input": "¿Qué puedes explicarme sobre programación?",
        "output": "Puedo explicarte los fundamentos de programación, estructuras de control, algoritmos, y ayudarte a escribir código eficiente en Python."
    },
    {
        "input": "¿Cómo puedes ayudarme con inteligencia artificial?",
        "output": "Puedo explicarte teorías de inteligencia artificial, cómo funcionan los algoritmos de aprendizaje automático y darte ejemplos prácticos para empezar."
    },
    {
        "input": "¿Qué temas puedes abarcar?",
        "output": "Puedo abarcar temas relacionados con Python, programación, inteligencia artificial, sistemas, tecnología, computadoras, adaptadores, videojuegos, Guatemala y Xela."
    },
    {
        "input": "¿Qué sabes hacer?",
        "output": "Sé explicar conceptos, enseñar programación, guiarte en la solución de problemas técnicos y proporcionarte información sobre los temas mencionados."
    },
    {
        "input": "¿Cómo puedo usar esta IA?",
        "output": "Puedes usar esta IA para aprender sobre Python, entender temas de tecnología, sistemas y videojuegos, o para resolver dudas específicas relacionadas con adaptadores y computadoras."
    },
    {
        "input": "¿Qué puedes enseñarme?",
        "output": "Puedo enseñarte programación en Python, fundamentos de inteligencia artificial, lógica de sistemas y desarrollo básico de videojuegos."
    },
    {
        "input": "¿Qué tipo de ayuda puedes ofrecerme?",
        "output": "Puedo ofrecer ayuda técnica en programación, explicarte conceptos, enseñarte a resolver problemas y guiarte en proyectos básicos relacionados con sistemas y tecnología."
    },
    {
        "input": "¿Cómo me puedes ayudar si quiero aprender programación?",
        "output": "Puedo enseñarte desde lo más básico, como variables y ciclos, hasta lógica avanzada y estructuras de datos en Python."
    },
    {
        "input": "¿Qué puedes explicarme sobre computadoras?",
        "output": "Puedo explicarte cómo funcionan las computadoras, los componentes principales, y cómo interactúan con software y adaptadores."
    },
    {
        "input": "¿Qué tipo de problemas puedes resolver?",
        "output": "Puedo ayudarte con problemas relacionados con programación en Python, sistemas básicos, lógica de videojuegos y resolución de conceptos técnicos."
    },
    {
        "input": "¿En qué temas eres experto?",
        "output": "Soy experto en Python, programación, sistemas, inteligencia artificial, computadoras, adaptadores y temas relacionados con Guatemala y Xela."
    },
    {
        "input": "¿Puedes ayudarme con sistemas?",
        "output": "Puedo ayudarte a entender conceptos básicos de sistemas, redes, diseño de software y arquitectura de computadoras."
    },
    {
        "input": "¿Qué sabes sobre videojuegos?",
        "output": "Puedo explicarte conceptos de desarrollo de videojuegos, motores básicos como Pygame o Unity, y lógica de programación para juegos."
    },
    {
        "input": "¿Puedes resolver problemas de Python?",
        "output": "Sí, puedo ayudarte a depurar código, escribir funciones y resolver problemas comunes en Python."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender sobre adaptadores?",
        "output": "Puedo explicarte qué son los adaptadores, cómo funcionan, y cómo se usan en computadoras y sistemas electrónicos."
    },
    {
        "input": "¿Qué temas puedes abordar relacionados con Guatemala?",
        "output": "Puedo ofrecer información sobre la historia, cultura, tecnología y datos importantes de Guatemala, incluyendo Xela."
    },
    {
        "input": "¿Qué puedes hacer si necesito entender más sobre sistemas?",
        "output": "Puedo explicarte temas de arquitectura de sistemas, diseño de software, bases de datos y redes, adaptados a tus necesidades."
    },
    {
        "input": "¿Cómo puedes ayudarme con videojuegos?",
        "output": "Puedo ayudarte a empezar a programar videojuegos, entender conceptos básicos de diseño y explorar herramientas como motores de desarrollo."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender sobre inteligencia artificial?",
        "output": "Puedo explicarte teorías de inteligencia artificial, cómo funcionan los algoritmos básicos, y ayudarte a implementar ejemplos sencillos."
    },
    {
        "input": "¿Cómo puedes ayudarme si quiero aprender sobre tecnología?",
        "output": "Puedo explicarte conceptos tecnológicos, tendencias actuales, y cómo aplicar esos conocimientos en proyectos prácticos."
    },
    {
        "input": "¿Qué puedes hacer si quiero empezar en Python?",
        "output": "Puedo enseñarte desde los fundamentos, como variables y ciclos, hasta ayudarte a desarrollar tus primeros proyectos."
    },
    {
        "input": "¿Qué áreas abarcas en sistemas?",
        "output": "Puedo ayudarte con conceptos de sistemas operativos, redes, bases de datos y diseño de software, aplicados a tareas prácticas."
    },
    {
        "input": "¿Qué es una instrucción `if` en Python?",
        "output": "Una instrucción `if` en Python permite ejecutar un bloque de código si se cumple una condición. Su sintaxis es: `if condicion: hacer_algo()`."
    },
    {
        "input": "¿Cómo se crea una instrucción `if` en Python?",
        "output": "Puedes crear una instrucción `if` de la siguiente manera: `if condicion: hacer_algo()`. Ejemplo: `if x > 5: print('Mayor que 5')`."
    },
    {
        "input": "¿Cómo puedo usar `else` con una instrucción `if`?",
        "output": "Puedes usar `else` para ejecutar un bloque de código si la condición del `if` no se cumple. Ejemplo: `if x > 5: print('Mayor que 5'); else: print('Menor o igual a 5')`."
    },
    {
        "input": "¿Cómo usar `elif` en una estructura `if`?",
        "output": "El `elif` permite verificar múltiples condiciones. Ejemplo: `if x > 5: print('Mayor que 5'); elif x == 5: print('Igual a 5'); else: print('Menor que 5')`."
    },
    {
        "input": "¿Cómo usar una instrucción `if` para comparar dos números?",
        "output": "Puedes comparar dos números con operadores como `>`, `<`, `==`, `!=`. Ejemplo: `if a > b: print('a es mayor que b')`."
    },
    {
        "input": "¿Qué pasa si la condición en un `if` es falsa?",
        "output": "Si la condición es falsa, el bloque de código dentro del `if` no se ejecuta y el programa continúa con el siguiente código."
    },
    {
        "input": "¿Cómo hacer un `if` con más de una condición?",
        "output": "Puedes combinar condiciones con operadores lógicos como `and`, `or`. Ejemplo: `if x > 5 and x < 10: print('Entre 5 y 10')`."
    },
    {
        "input": "¿Cómo crear un operador ternario en Python?",
        "output": "Un operador ternario es una forma compacta de hacer un `if`-`else`. La sintaxis es: `valor_if_true if condicion else valor_if_false`. Ejemplo: `resultado = 'Mayor' if x > 5 else 'Menor o igual'`."
    },
    {
        "input": "¿Cómo usar un operador ternario para asignar un valor?",
        "output": "Puedes usar un operador ternario para asignar un valor dependiendo de una condición. Ejemplo: `mensaje = 'Positivo' if numero > 0 else 'Negativo'`."
    },
    {
        "input": "¿Es posible anidar un `if` dentro de otro en Python?",
        "output": "Sí, puedes anidar `if` dentro de otro. Ejemplo: `if x > 5: if x < 10: print('Entre 5 y 10')`."
    },
    {
        "input": "¿Cómo usar `and` en una condición `if`?",
        "output": "Puedes usar `and` para verificar que ambas condiciones sean verdaderas. Ejemplo: `if x > 5 and y < 10: print('x > 5 y y < 10')`."
    },
    {
        "input": "¿Qué es un operador ternario y cuándo debería usarlo?",
        "output": "Un operador ternario es una forma compacta de una declaración `if`-`else`. Es útil para asignaciones simples. Ejemplo: `x = 10 if a > 5 else 5`."
    },
    {
        "input": "¿Puedo usar operadores ternarios en varias líneas?",
        "output": "Sí, puedes usar operadores ternarios en varias líneas si es necesario, aunque normalmente se usan en una sola línea. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo' if x < 0 else 'Cero'`."
    },
    {
        "input": "¿Cómo usar un `if` para comprobar si un número es par?",
        "output": "Puedes usar el operador `%` para verificar si un número es divisible entre 2. Ejemplo: `if x % 2 == 0: print('Par')`."
    },
    {
        "input": "¿Cómo usar `if` y `elif` para verificar múltiples condiciones?",
        "output": "Puedes usar `if` para la primera condición y `elif` para las siguientes. Ejemplo: `if x > 10: print('Mayor que 10'); elif x == 10: print('Igual a 10')`."
    },
    {
        "input": "¿Cómo usar un operador ternario con `if` anidado?",
        "output": "Puedes anidar operadores ternarios dentro de otros. Ejemplo: `resultado = 'Mayor' if x > 5 else 'Menor' if x < 5 else 'Igual a 5'`."
    },
    {
        "input": "¿Se puede usar un operador ternario para verificar igualdad?",
        "output": "Sí, puedes usar un operador ternario para verificar si dos valores son iguales. Ejemplo: `resultado = 'Iguales' if a == b else 'Diferentes'`."
    },
    {
        "input": "¿Cómo comprobar si una variable está vacía usando `if`?",
        "output": "Puedes comprobar si una variable está vacía usando `if not variable`. Ejemplo: `if not lista: print('Lista vacía')`."
    },
    {
        "input": "¿Cómo usar un `if` para verificar si un número es negativo?",
        "output": "Puedes verificar si un número es negativo con la condición `x < 0`. Ejemplo: `if x < 0: print('Negativo')`."
    },
    {
        "input": "¿Cómo usar `else` para manejar la condición cuando el `if` es falso?",
        "output": "El bloque `else` se ejecuta cuando la condición en `if` es falsa. Ejemplo: `if x > 0: print('Positivo'); else: print('No positivo')`."
    },
    {
        "input": "¿Cómo hacer un `if` con múltiples condiciones y `or`?",
        "output": "Puedes usar `or` para que se ejecute el bloque si al menos una de las condiciones es verdadera. Ejemplo: `if x == 0 or y == 0: print('Al menos uno es cero')`."
    },
    {
        "input": "¿Cómo hacer un `if` con un valor booleano?",
        "output": "Puedes usar un valor booleano directamente en un `if`. Ejemplo: `if es_verdadero: print('Es verdadero')`."
    },
    {
        "input": "¿Cómo usar un operador ternario para asignar un valor basado en una comparación?",
        "output": "Un operador ternario puede ser utilizado para asignar valores según una comparación. Ejemplo: `resultado = 'Adulto' if edad >= 18 else 'Menor'`."
    },
    {
        "input": "¿Cómo hacer un `if` con más de dos condiciones?",
        "output": "Puedes combinar múltiples condiciones usando `elif`. Ejemplo: `if x > 10: print('Mayor que 10'); elif x == 10: print('Igual a 10'); else: print('Menor que 10')`."
    },
    {
        "input": "¿Cómo hacer un `if` con condiciones complejas?",
        "output": "Puedes usar operadores lógicos para hacer condiciones más complejas. Ejemplo: `if (x > 5 and x < 10) or (y == 2): print('Condición cumplida')`."
    },
    {
        "input": "¿Cómo puedo anidar un operador ternario en un `if`?",
        "output": "Puedes usar un operador ternario dentro de otro para obtener múltiples opciones. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo' if x < 0 else 'Cero'`."
    },
    {
        "input": "¿Cómo hacer un `if` que ejecute algo cuando un número es mayor o igual a 5?",
        "output": "Usa la condición `if x >= 5:`. Ejemplo: `if x >= 5: print('Mayor o igual a 5')`."
    },
    {
        "input": "¿Cómo verificar si un número está dentro de un rango usando `if`?",
        "output": "Puedes usar el operador `and` para verificar si un número está dentro de un rango. Ejemplo: `if 5 <= x <= 10: print('Dentro del rango')`."
    },
    {
        "input": "¿Qué diferencia hay entre `if` y `elif`?",
        "output": "`if` se usa para la primera condición, mientras que `elif` se usa para condiciones adicionales. Ejemplo: `if x > 5: print('Mayor que 5'); elif x == 5: print('Igual a 5')`."
    },
    {
        "input": "¿Cómo utilizar un `if` para comprobar si un número es divisible entre 3?",
        "output": "Puedes usar el operador `%` para comprobar la divisibilidad. Ejemplo: `if x % 3 == 0: print('Divisible entre 3')`."
    },
    {
        "input": "¿Cómo usar un operador ternario para verificar si un número es positivo o negativo?",
        "output": "Puedes usar un operador ternario para verificar el signo de un número. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo'`."
    },
    {
        "input": "¿Cómo comprobar si una cadena está vacía usando `if`?",
        "output": "Puedes comprobar si una cadena está vacía con `if not cadena:`. Ejemplo: `if not nombre: print('Cadena vacía')`."
    },
    {
        "input": "¿Cómo hacer un `if` con una lista?",
        "output": "Puedes comprobar si una lista está vacía con `if not lista:`. Ejemplo: `if not lista: print('Lista vacía')`."
    },
    {
        "input": "¿Cómo hacer un `if` que imprima un mensaje si un número es impar?",
        "output": "Puedes usar el operador `%` para comprobar si el número es impar. Ejemplo: `if x % 2 != 0: print('Impar')`."
    },
    {
        "input": "¿Cómo combinar varias condiciones en un solo `if`?",
        "output": "Puedes usar `and`, `or` o `not` para combinar condiciones. Ejemplo: `if x > 0 and y > 0: print('Ambos son positivos')`."
    },
    {
        "input": "¿Qué es un operador ternario en Python?",
        "output": "Un operador ternario es una forma compacta de realizar una condición `if-else` en una sola línea. Ejemplo: `x = 10 if a > 5 else 5`."
    },
    {
        "input": "¿Cómo utilizar `elif` para manejar más de dos condiciones?",
        "output": "`elif` se usa para manejar condiciones adicionales después del primer `if`. Ejemplo: `if x > 10: print('Mayor a 10'); elif x == 10: print('Igual a 10')`."
    },
    {
        "input": "¿Cómo hacer un `if` para comprobar si una variable es `None`?",
        "output": "Puedes usar `if variable is None:` para comprobar si una variable es `None`. Ejemplo: `if valor is None: print('Es None')`."
    },
    {
        "input": "¿Cómo realizar un operador ternario con más de dos opciones?",
        "output": "Puedes usar un operador ternario anidado para múltiples opciones. Ejemplo: `resultado = 'Positivo' if x > 0 else 'Negativo' if x < 0 else 'Cero'`."
    },
    {
        "input": "¿Puedo usar operadores ternarios dentro de un bucle?",
        "output": "Sí, puedes usar operadores ternarios dentro de bucles para asignaciones rápidas. Ejemplo: `for i in range(5): resultado = 'Par' if i % 2 == 0 else 'Impar'; print(resultado)`."
    },
    {
        "input": "¿Cómo comprobar si una lista contiene un valor usando `if`?",
        "output": "Puedes usar `if valor in lista:`. Ejemplo: `if 3 in lista: print('El 3 está en la lista')`."
    },
    {
        "input": "¿Cómo usar `if` para verificar si una cadena es mayor que otra?",
        "output": "Puedes comparar cadenas alfabéticamente usando los operadores de comparación. Ejemplo: `if cadena1 > cadena2: print('cadena1 es mayor')`."
    },
    {
        "input": "¿Cómo usar `else` para ejecutar un bloque de código si un número es menor a 5?",
        "output": "Puedes usar `else` para manejar el caso en que la condición no se cumple. Ejemplo: `if x >= 5: print('Mayor o igual a 5'); else: print('Menor a 5')`."
    },
    {
        "input": "¿Qué es una biblioteca en Python?",
        "output": "Una biblioteca en Python es un conjunto de módulos predefinidos que facilitan la realización de tareas comunes, como manejo de archivos, matemáticas, y más."
    },
    {
        "input": "¿Cómo instalar una biblioteca en Python?",
        "output": "Puedes instalar una biblioteca en Python utilizando el gestor de paquetes `pip`. Ejemplo: `pip install nombre_biblioteca`."
    },
    {
        "input": "¿Qué es `pip`?",
        "output": "`pip` es el gestor de paquetes oficial de Python, utilizado para instalar y gestionar bibliotecas o paquetes de Python."
    },
    {
        "input": "¿Qué es la biblioteca `math` en Python?",
        "output": "La biblioteca `math` proporciona funciones matemáticas, como `sqrt()`, `sin()`, `cos()`, entre otras, para realizar operaciones matemáticas."
    },
    {
        "input": "¿Cómo importar una biblioteca en Python?",
        "output": "Puedes importar una biblioteca en Python utilizando la palabra clave `import`. Ejemplo: `import math`."
    },
    {
        "input": "¿Qué es la biblioteca `os` en Python?",
        "output": "La biblioteca `os` proporciona funciones para interactuar con el sistema operativo, como manipular archivos y directorios."
    },
    {
        "input": "¿Para qué sirve la biblioteca `datetime`?",
        "output": "La biblioteca `datetime` se usa para trabajar con fechas y horas. Permite crear, manipular y formatear objetos de fecha y hora."
    },
    {
        "input": "¿Cómo puedo leer un archivo con la biblioteca `os`?",
        "output": "Con la biblioteca `os` puedes usar funciones como `os.open()` o `os.read()` para trabajar con archivos a nivel de sistema operativo."
    },
    {
        "input": "¿Qué es la biblioteca `requests` en Python?",
        "output": "La biblioteca `requests` facilita realizar solicitudes HTTP en Python, permitiendo interactuar con APIs y sitios web."
    },
    {
        "input": "¿Cómo instalar `requests` en Python?",
        "output": "Para instalar la biblioteca `requests`, usa el comando `pip install requests` en la terminal."
    },
    {
        "input": "¿Qué hace la biblioteca `numpy`?",
        "output": "La biblioteca `numpy` proporciona soporte para trabajar con arreglos multidimensionales, así como herramientas para realizar cálculos matemáticos y científicos."
    },
    {
        "input": "¿Qué es `pandas` en Python?",
        "output": "`pandas` es una biblioteca para el análisis y manipulación de datos. Ofrece estructuras de datos como `DataFrame` para trabajar con tablas y series."
    },
    {
        "input": "¿Cómo puedo leer un archivo CSV con `pandas`?",
        "output": "Puedes leer un archivo CSV con `pandas` usando el método `pd.read_csv('archivo.csv')`."
    },
    {
        "input": "¿Qué hace la biblioteca `matplotlib`?",
        "output": "La biblioteca `matplotlib` se usa para crear gráficos estáticos, animados e interactivos en Python."
    },
    {
        "input": "¿Cómo crear un gráfico con `matplotlib`?",
        "output": "Para crear un gráfico con `matplotlib`, usa el siguiente código básico: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()`."
    },
    {
        "input": "¿Qué es `seaborn`?",
        "output": "`seaborn` es una biblioteca basada en `matplotlib` que facilita la creación de gráficos estadísticos complejos con una sintaxis más sencilla."
    },
    {
        "input": "¿Para qué sirve la biblioteca `json`?",
        "output": "La biblioteca `json` se usa para trabajar con datos en formato JSON, permitiendo convertir entre cadenas JSON y objetos de Python."
    },
    {
        "input": "¿Cómo leer un archivo JSON en Python?",
        "output": "Puedes leer un archivo JSON con `json.load()`. Ejemplo: `import json; with open('archivo.json', 'r') as f: data = json.load(f)`."
    },
    {
        "input": "¿Qué es `tkinter`?",
        "output": "`tkinter` es una biblioteca estándar de Python que proporciona herramientas para crear interfaces gráficas de usuario (GUI) simples."
    },
    {
        "input": "¿Cómo crear una ventana con `tkinter`?",
        "output": "Puedes crear una ventana con `tkinter` usando el siguiente código: `import tkinter as tk; root = tk.Tk(); root.mainloop()`."
    },
    {
        "input": "¿Cómo instalo `matplotlib`?",
        "output": "Puedes instalar `matplotlib` usando `pip install matplotlib`."
    },
    {
        "input": "¿Qué hace la biblioteca `scikit-learn`?",
        "output": "`scikit-learn` es una biblioteca de Python para realizar aprendizaje automático. Proporciona herramientas para clasificación, regresión, clustering, y más."
    },
    {
        "input": "¿Cómo importar `scikit-learn`?",
        "output": "Puedes importar `scikit-learn` con `import sklearn` o importando módulos específicos, como `from sklearn.model_selection import train_test_split`."
    },
    {
        "input": "¿Qué es `flask`?",
        "output": "`flask` es un micro-framework para construir aplicaciones web en Python, proporcionando herramientas para manejar rutas, formularios, y bases de datos."
    },
    {
        "input": "¿Cómo instalar `flask`?",
        "output": "Puedes instalar `flask` usando el comando `pip install flask`."
    },
    {
        "input": "¿Qué hace la biblioteca `sqlalchemy`?",
        "output": "`sqlalchemy` es una biblioteca para trabajar con bases de datos en Python. Proporciona una capa de abstracción para SQL y ORM (Object Relational Mapper)."
    },
    {
        "input": "¿Cómo conectar a una base de datos con `sqlalchemy`?",
        "output": "Puedes conectar a una base de datos con `sqlalchemy` usando: `from sqlalchemy import create_engine; engine = create_engine('sqlite:///mi_base_de_datos.db')`."
    },
    {
        "input": "¿Qué es `beautifulsoup4`?",
        "output": "`beautifulsoup4` es una biblioteca para analizar y extraer información de páginas web en formato HTML y XML."
    },
    {
        "input": "¿Cómo extraer datos de una página web con `beautifulsoup4`?",
        "output": "Puedes extraer datos usando `beautifulsoup4` de esta manera: `from bs4 import BeautifulSoup; soup = BeautifulSoup(html, 'html.parser'); titulo = soup.title.text`."
    },
    {
        "input": "¿Cómo instalar `beautifulsoup4`?",
        "output": "Puedes instalar `beautifulsoup4` usando el comando `pip install beautifulsoup4`."
    },
    {
        "input": "¿Qué es `pytest`?",
        "output": "`pytest` es una biblioteca de Python para realizar pruebas unitarias, facilitando la escritura y ejecución de pruebas de código."
    },
    {
        "input": "¿Cómo escribir una prueba con `pytest`?",
        "output": "Puedes escribir una prueba con `pytest` creando una función que comience con `test_`. Ejemplo: `def test_suma(): assert suma(2, 3) == 5`."
    },
    {
        "input": "¿Cómo instalar `pytest`?",
        "output": "Puedes instalar `pytest` usando el comando `pip install pytest`."
    },
    {
        "input": "¿Qué hace la biblioteca `nltk`?",
        "output": "`nltk` (Natural Language Toolkit) es una biblioteca para trabajar con procesamiento de lenguaje natural (NLP), incluyendo análisis de texto, tokenización, y más."
    },
    {
        "input": "¿Cómo instalar `nltk`?",
        "output": "Puedes instalar `nltk` usando `pip install nltk`."
    },
    {
        "input": "¿Qué es `openpyxl`?",
        "output": "`openpyxl` es una biblioteca para leer, escribir y manipular archivos de Excel (XLSX) en Python."
    },
    {
        "input": "¿Cómo leer un archivo Excel con `openpyxl`?",
        "output": "Puedes leer un archivo Excel con `openpyxl` así: `from openpyxl import load_workbook; wb = load_workbook('archivo.xlsx'); sheet = wb.active`."
    },
    {
        "input": "¿Qué es `pyqt`?",
        "output": "`pyqt` es un conjunto de bibliotecas que permiten crear interfaces gráficas de usuario (GUI) utilizando el framework Qt con Python."
    },
    {
        "input": "¿Cómo instalar `pyqt`?",
        "output": "Puedes instalar `pyqt` usando el comando `pip install pyqt5`."
    },
    {
        "input": "¿Qué es `requests`?",
        "output": "`requests` es una biblioteca que permite realizar solicitudes HTTP de manera simple y eficiente en Python."
    },
    {
        "input": "¿Cómo realizar una solicitud GET con `requests`?",
        "output": "Puedes realizar una solicitud GET con `requests` usando: `import requests; response = requests.get('http://example.com')`."
    },
    {
        "input": "¿Qué es `pytest`?",
        "output": "`pytest` es una herramienta para realizar pruebas de software en Python. Permite escribir pruebas de manera sencilla y realizar verificaciones automáticas."
    },
    {
        "input": "¿Cómo utilizar `numpy` para crear una matriz?",
        "output": "Puedes crear una matriz con `numpy` usando `numpy.array()`. Ejemplo: `import numpy as np; matriz = np.array([[1, 2], [3, 4]])`."
    },
    {
        "input": "¿Qué es `pillow`?",
        "output": "`pillow` es una biblioteca de procesamiento de imágenes en Python que permite abrir, editar y guardar imágenes."
    },
    {
        "input": "¿Cómo abrir una imagen con `pillow`?",
        "output": "Puedes abrir una imagen con `pillow` usando: `from PIL import Image; img = Image.open('imagen.jpg')`."
    },
    {
        "input": "¿Qué es `scipy`?",
        "output": "`scipy` es una biblioteca de Python que proporciona algoritmos y funciones avanzadas para cálculos científicos y técnicos, como optimización y álgebra lineal."
    },
    {
        "input": "¿Cómo instalar `scipy`?",
        "output": "Puedes instalar `scipy` usando el comando `pip install scipy`."
    },
    {
        "input": "¿Qué es `statsmodels`?",
        "output": "`statsmodels` es una biblioteca de Python para estimación de modelos estadísticos, pruebas y exploración de datos."
    },
    {
        "input": "¿Cómo realizar una regresión lineal con `statsmodels`?",
        "output": "Puedes realizar una regresión lineal con `statsmodels` usando: `import statsmodels.api as sm; X = sm.add_constant(X); model = sm.OLS(y, X).fit()`."
    },
    {
        "input": "¿Qué es `pyinstaller`?",
        "output": "`pyinstaller` es una herramienta para convertir programas Python en ejecutables independientes."
    },
    {
        "input": "¿Cómo instalar `pyinstaller`?",
        "output": "Puedes instalar `pyinstaller` usando el comando `pip install pyinstaller`."
    },
    {
        "input": "¿Cómo crear un ejecutable con `pyinstaller`?",
        "output": "Puedes crear un ejecutable con `pyinstaller` usando: `pyinstaller mi_programa.py`."
    },
    {
        "input": "¿En qué áreas puedes ayudarme?",
        "output": "Puedo ayudarte con Python, programación, sistemas, inteligencia artificial, tecnología, videojuegos, computadoras, adaptadores, y temas relacionados con Guatemala y Xela."
    },
    {
        "input": "¿Qué habilidades tienes?",
        "output": "Tengo habilidades para explicar conceptos, resolver problemas técnicos, enseñar programación en Python, y brindar información sobre sistemas y tecnología."
    },
    {
        "input": "¿Qué temas puedes tratar?",
        "output": "Puedo tratar temas relacionados con Python, programación, sistemas, inteligencia artificial, computadoras, adaptadores, tecnología, videojuegos, Guatemala y Xela."
    },
    {
        "input": "¿Qué conocimientos tienes?",
        "output": "Tengo conocimientos en Python, desarrollo de sistemas, programación, inteligencia artificial, diseño de videojuegos, computadoras y adaptadores."
    },
    {
        "input": "¿Qué tipo de soporte puedes ofrecer?",
        "output": "Puedo ofrecer soporte técnico en programación, resolver dudas teóricas sobre inteligencia artificial y sistemas, y guiarte en proyectos prácticos."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender algo nuevo?",
        "output": "Puedo enseñarte desde los fundamentos hasta temas avanzados en programación, tecnología, sistemas, y más, adaptándome a tus necesidades."
    },
    {
        "input": "¿Cómo puedes ayudarme con mis dudas?",
        "output": "Puedo resolver tus dudas sobre Python, sistemas, tecnología, inteligencia artificial y temas relacionados de forma clara y práctica."
    },
    {
        "input": "¿En qué me puedes ser útil?",
        "output": "Puedo ser útil para aprender, resolver problemas técnicos, entender conceptos teóricos, y explorar áreas como programación y tecnología."
    },
    {
        "input": "¿Qué puedes hacer en el ámbito de la programación?",
        "output": "Puedo ayudarte a entender fundamentos, resolver problemas de código, implementar funciones y guiarte en el desarrollo de proyectos en Python."
    },
    {
        "input": "¿Qué puedes hacer si quiero aprender sobre sistemas?",
        "output": "Puedo explicarte la arquitectura de sistemas, conceptos de redes, bases de datos, y cómo interactúan con la programación y hardware."
    },
    {
        "input": "¿Qué puedes hacer sobre videojuegos y tecnología?",
        "output": "Puedo enseñarte a programar videojuegos, explicarte motores como Unity o Pygame, y cómo aplican conceptos tecnológicos en el desarrollo."
    },
    {
        "input": "¿Cómo puedes ayudarme con mis proyectos?",
        "output": "Puedo guiarte en la planificación, resolución de problemas y desarrollo de proyectos relacionados con programación, sistemas y videojuegos."
    },
    {
        "input": "¿Qué podrías enseñarme si quiero aprender algo nuevo?",
        "output": "Puedo enseñarte programación en Python, conceptos de inteligencia artificial, diseño de videojuegos, o fundamentos de sistemas y tecnología."
    },
    {
        "input": "¿Qué puedes hacer si quiero resolver un problema?",
        "output": "Puedo analizar el problema, ofrecerte soluciones claras y explicarte cómo implementarlas, especialmente en Python, sistemas o tecnología."
    },
    {
        "input": "¿Qué puedes hacer si quiero entender mejor un concepto?",
        "output": "Puedo explicarte el concepto en detalle, proporcionarte ejemplos prácticos y responder tus preguntas para asegurarte de comprenderlo completamente."
    },
    {
        "input": "¿Cómo puedes apoyarme en aprendizaje?",
        "output": "Puedo enseñarte paso a paso, adaptarme a tu nivel de conocimiento y proporcionarte ejemplos claros y ejercicios prácticos."
    },
    {
        "input": "¿En qué formas puedes ser útil?",
        "output": "Puedo resolver dudas, explicar temas, ayudar con proyectos y enseñarte sobre Python, sistemas, tecnología y videojuegos."
    },
    {
        "input": "¿Qué tipo de tareas puedes realizar?",
        "output": "Puedo realizar tareas relacionadas con resolver problemas de código, explicar conceptos técnicos, y guiarte en aprendizaje y proyectos."
    },
    {
        "input": "¿Qué sabes hacer específicamente?",
        "output": "Sé explicar conceptos de Python, enseñar programación, resolver problemas técnicos, y ofrecer información sobre sistemas, tecnología y videojuegos."
    },
    {
        "input": "¿Cómo podrías ayudarme si estoy aprendiendo?",
        "output": "Puedo proporcionarte explicaciones claras, ejemplos prácticos, y ayudarte a resolver problemas mientras aprendes."
    },
    {
        "input": "¿Cómo puedes ayudarme con conceptos complicados?",
        "output": "Puedo desglosar conceptos complicados en pasos simples, darte ejemplos claros y guiarte hasta que los entiendas completamente."
    },
    {
        "input": "¿Qué tipo de preguntas puedes responder?",
        "output": "Puedo responder preguntas sobre Python, programación, sistemas, tecnología, videojuegos, inteligencia artificial, computadoras y adaptadores."
    },
    {
        "input": "¿Qué puedes hacer relacionado con computadoras y adaptadores?",
        "output": "Puedo explicarte cómo funcionan los adaptadores, cómo interactúan con computadoras, y para qué se utilizan en diferentes sistemas."
    },
    {
        "input": "¿Qué puedes hacer sobre la inteligencia artificial aplicada?",
        "output": "Puedo explicarte cómo implementar algoritmos básicos, qué aplicaciones prácticas tiene y cómo se integra con sistemas reales."
    },
    {
        "input": "¿Qué puedes hacer sobre proyectos prácticos?",
        "output": "Puedo ayudarte a planificar, desarrollar y resolver problemas en proyectos prácticos relacionados con programación, sistemas y tecnología."
    },
    {
        "input": "¿En qué tipo de proyectos puedes ayudarme?",
        "output": "Puedo ayudarte en proyectos de programación, sistemas, videojuegos, desarrollo de algoritmos de inteligencia artificial, y manejo de tecnología."
    },
    {
        "input": "¿Cómo puedes apoyarme en un tema que no entiendo?",
        "output": "Puedo explicarte el tema paso a paso, darte ejemplos claros y ayudarte a comprenderlo mediante ejercicios prácticos."
    },
    {
        "input": "¿Qué puedes hacer si quiero saber más sobre tecnología?",
        "output": "Puedo proporcionarte información sobre tendencias tecnológicas, aplicaciones prácticas y cómo se relacionan con sistemas y programación."
    },
    {
        "input": "¿Qué es un arreglo en Python?",
        "output": "En Python, un arreglo se refiere comúnmente a una lista, que es una colección ordenada y mutable de elementos."
    },
    {
        "input": "¿Cómo crear un arreglo en Python?",
        "output": "Puedes crear un arreglo (lista) en Python utilizando corchetes. Ejemplo: `mi_lista = [1, 2, 3, 4]`."
    },
    {
        "input": "¿Puedo tener diferentes tipos de datos en un arreglo?",
        "output": "Sí, en Python los arreglos (listas) pueden contener elementos de diferentes tipos de datos, como enteros, cadenas, y más."
    },
    {
        "input": "¿Cómo acceder a un elemento de un arreglo en Python?",
        "output": "Puedes acceder a un elemento de un arreglo usando su índice. Ejemplo: `mi_lista[0]` accede al primer elemento."
    },
    {
        "input": "¿Cómo cambiar un valor de un arreglo?",
        "output": "Puedes cambiar el valor de un arreglo asignando un nuevo valor al índice específico. Ejemplo: `mi_lista[0] = 10`."
    },
    {
        "input": "¿Cómo agregar un elemento a un arreglo?",
        "output": "Puedes agregar un elemento a un arreglo usando el método `append()`. Ejemplo: `mi_lista.append(5)`."
    },
    {
        "input": "¿Cómo insertar un elemento en una posición específica?",
        "output": "Puedes insertar un elemento en una posición específica usando el método `insert()`. Ejemplo: `mi_lista.insert(2, 10)`."
    },
    {
        "input": "¿Cómo eliminar un elemento de un arreglo?",
        "output": "Puedes eliminar un elemento de un arreglo usando el método `remove()`. Ejemplo: `mi_lista.remove(10)`."
    },
    {
        "input": "¿Cómo eliminar un elemento por índice?",
        "output": "Puedes eliminar un elemento por índice usando el método `pop()`. Ejemplo: `mi_lista.pop(1)` elimina el segundo elemento."
    },
    {
        "input": "¿Cómo obtener la longitud de un arreglo?",
        "output": "Puedes obtener la longitud de un arreglo usando la función `len()`. Ejemplo: `len(mi_lista)`."
    },
    {
        "input": "¿Cómo ordenar un arreglo?",
        "output": "Puedes ordenar un arreglo usando el método `sort()`. Ejemplo: `mi_lista.sort()` ordenará los elementos en orden ascendente."
    },
    {
        "input": "¿Cómo ordenar un arreglo en orden descendente?",
        "output": "Puedes ordenar un arreglo en orden descendente usando `sort(reverse=True)`. Ejemplo: `mi_lista.sort(reverse=True)`."
    },
    {
        "input": "¿Cómo invertir el orden de un arreglo?",
        "output": "Puedes invertir el orden de un arreglo usando el método `reverse()`. Ejemplo: `mi_lista.reverse()`."
    },
    {
        "input": "¿Cómo verificar si un elemento está en un arreglo?",
        "output": "Puedes verificar si un elemento está en un arreglo usando el operador `in`. Ejemplo: `10 in mi_lista`."
    },
    {
        "input": "¿Cómo concatenar dos arreglos?",
        "output": "Puedes concatenar dos arreglos usando el operador `+`. Ejemplo: `mi_lista + otro_arreglo`."
    },
    {
        "input": "¿Cómo repetir un arreglo varias veces?",
        "output": "Puedes repetir un arreglo usando el operador `*`. Ejemplo: `mi_lista * 3` repetirá los elementos tres veces."
    },
    {
        "input": "¿Cómo cortar un arreglo?",
        "output": "Puedes cortar un arreglo usando el operador de corte `[:]`. Ejemplo: `mi_lista[1:4]` obtiene una sublista de los elementos de índice 1 a 3."
    },
    {
        "input": "¿Qué pasa si accedo a un índice fuera del rango del arreglo?",
        "output": "Si accedes a un índice fuera del rango, obtendrás un error `IndexError`."
    },
    {
        "input": "¿Cómo comprobar si un arreglo está vacío?",
        "output": "Puedes comprobar si un arreglo está vacío usando la función `len()`. Ejemplo: `len(mi_lista) == 0`."
    },
    {
        "input": "¿Cómo copiar un arreglo?",
        "output": "Puedes copiar un arreglo utilizando el método `copy()` o el operador de corte `[:]`. Ejemplo: `mi_lista_copy = mi_lista.copy()`."
    },
    {
        "input": "¿Cómo agregar varios elementos a un arreglo?",
        "output": "Puedes agregar varios elementos a un arreglo usando el método `extend()`. Ejemplo: `mi_lista.extend([5, 6, 7])`."
    },
    {
        "input": "¿Cómo encontrar el índice de un elemento?",
        "output": "Puedes encontrar el índice de un elemento usando el método `index()`. Ejemplo: `mi_lista.index(10)`."
    },
    {
        "input": "¿Cómo contar cuántas veces aparece un elemento en un arreglo?",
        "output": "Puedes contar las ocurrencias de un elemento usando el método `count()`. Ejemplo: `mi_lista.count(10)`."
    },
    {
        "input": "¿Cómo eliminar todos los elementos de un arreglo?",
        "output": "Puedes eliminar todos los elementos de un arreglo usando el método `clear()`. Ejemplo: `mi_lista.clear()`."
    },
    {
        "input": "¿Cómo crear una lista de números del 0 al 9?",
        "output": "Puedes crear una lista de números del 0 al 9 usando la función `range()`. Ejemplo: `list(range(10))`."
    },
    {
        "input": "¿Cómo multiplicar cada elemento de un arreglo por 2?",
        "output": "Puedes multiplicar cada elemento de un arreglo usando una comprensión de lista. Ejemplo: `[x * 2 for x in mi_lista]`."
    },
    {
        "input": "¿Cómo convertir un arreglo de cadenas a un arreglo de enteros?",
        "output": "Puedes convertir un arreglo de cadenas a enteros usando una comprensión de lista. Ejemplo: `[int(x) for x in mi_lista]`."
    },
    {
        "input": "¿Qué es una comprensión de lista?",
        "output": "Una comprensión de lista es una forma concisa de crear listas a partir de otras listas o iterables. Ejemplo: `[x for x in range(5)]` crea una lista de 0 a 4."
    },
    {
        "input": "¿Cómo sumo los elementos de un arreglo?",
        "output": "Puedes sumar los elementos de un arreglo usando la función `sum()`. Ejemplo: `sum(mi_lista)`."
    },
    {
        "input": "¿Cómo verificar el tipo de un arreglo?",
        "output": "Puedes verificar el tipo de un arreglo usando la función `type()`. Ejemplo: `type(mi_lista)`."
    },
    {
        "input": "¿Cómo hacer que un arreglo sea inmutable?",
        "output": "Para hacer que un arreglo sea inmutable, puedes usar una tupla en lugar de una lista. Ejemplo: `mi_tupla = (1, 2, 3)`."
    },
    {
        "input": "¿Cómo puedo dividir un arreglo en partes iguales?",
        "output": "Puedes dividir un arreglo en partes iguales usando una comprensión de lista y el operador de corte. Ejemplo: `mi_lista[i:i+tamano]`."
    },
    {
        "input": "¿Cómo encontrar el valor máximo de un arreglo?",
        "output": "Puedes encontrar el valor máximo de un arreglo usando la función `max()`. Ejemplo: `max(mi_lista)`."
    },
    {
        "input": "¿Cómo encontrar el valor mínimo de un arreglo?",
        "output": "Puedes encontrar el valor mínimo de un arreglo usando la función `min()`. Ejemplo: `min(mi_lista)`."
    },
    {
        "input": "¿Qué es un arreglo bidimensional?",
        "output": "Un arreglo bidimensional es una lista de listas, es decir, una tabla o matriz. Ejemplo: `mi_matriz = [[1, 2], [3, 4]]`."
    },
    {
        "input": "¿Cómo acceder a un elemento de un arreglo bidimensional?",
        "output": "Puedes acceder a un elemento de un arreglo bidimensional usando dos índices. Ejemplo: `mi_matriz[0][1]` accede al segundo elemento de la primera fila."
    },
    {
        "input": "¿Cómo recorrer todos los elementos de un arreglo?",
        "output": "Puedes recorrer todos los elementos de un arreglo usando un ciclo `for`. Ejemplo: `for x in mi_lista: print(x)`."
    },
    {
        "input": "¿Cómo verificar si un arreglo contiene otro arreglo?",
        "output": "Puedes verificar si un arreglo contiene otro arreglo usando el operador `in`. Ejemplo: `[1, 2] in mi_lista`."
    },
    {
        "input": "¿Cómo convertir un arreglo en una cadena?",
        "output": "Puedes convertir un arreglo en una cadena usando el método `join()`. Ejemplo: `','.join([str(x) for x in mi_lista])`."
    },
    {
        "input": "¿Cómo agregar un arreglo dentro de otro?",
        "output": "Puedes agregar un arreglo dentro de otro utilizando el método `append()` o `extend()`. Ejemplo: `mi_lista.append([5, 6])`."
    },
    {
        "input": "¿Cómo eliminar un arreglo de una lista de listas?",
        "output": "Puedes eliminar un arreglo de una lista de listas usando `remove()`. Ejemplo: `mi_lista.remove([5, 6])`."
    },
    {
        "input": "¿Cómo comprobar si un arreglo está ordenado?",
        "output": "Puedes comprobar si un arreglo está ordenado comparándolo con su versión ordenada. Ejemplo: `mi_lista == sorted(mi_lista)`."
    },
    {
        "input": "¿Cómo eliminar los duplicados de un arreglo?",
        "output": "Puedes eliminar los duplicados de un arreglo convirtiéndolo en un conjunto. Ejemplo: `list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo hacer que un arreglo tenga solo elementos únicos?",
        "output": "Puedes hacer que un arreglo tenga solo elementos únicos convirtiéndolo en un conjunto y luego volviéndolo a una lista. Ejemplo: `mi_lista = list(set(mi_lista))`."
    },
    {
        "input": "¿Cómo agrupar elementos de un arreglo por tipo?",
        "output": "Puedes agrupar elementos de un arreglo por tipo usando un diccionario y un ciclo. Ejemplo: `{type(x): [x for x in mi_lista if type(x) == tipo]}`."
    },
    {
        "input": "¿Cómo comprobar si dos arreglos son iguales?",
        "output": "Puedes comprobar si dos arreglos son iguales utilizando el operador `==`. Ejemplo: `mi_lista == otro_arreglo`."
    },
    {
        "input": "¿Cómo convertir un arreglo en una tupla?",
        "output": "Puedes convertir un arreglo en una tupla utilizando la función `tuple()`. Ejemplo: `tuple(mi_lista)`."
    },
    {
        "input": "¿Cómo convertir una tupla en un arreglo?",
        "output": "Puedes convertir una tupla en un arreglo utilizando la función `list()`. Ejemplo: `list(mi_tupla)`."
    },
    {
        "input": "¿Cómo funciona el ciclo for en Python?",
        "output": "El ciclo `for` en Python se utiliza para iterar sobre secuencias como listas, tuplas, cadenas o rangos. Ejemplo: `for i in range(5): print(i)` imprimirá números del 0 al 4."
    },
    {
        "input": "¿Qué es un ciclo for?",
        "output": "Un ciclo `for` es una estructura que permite recorrer los elementos de una secuencia uno por uno."
    },
    {
        "input": "¿Cómo se usa el ciclo for con listas?",
        "output": "Puedes iterar sobre los elementos de una lista usando `for`. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Cómo hacer un ciclo for que recorra un rango de números?",
        "output": "Usa la función `range()`. Ejemplo: `for i in range(1, 6): print(i)` imprimirá los números del 1 al 5."
    },
    {
        "input": "¿Cómo interrumpir un ciclo for antes de que termine?",
        "output": "Usa la instrucción `break`. Ejemplo: `for i in range(10): if i == 5: break`."
    },
    {
        "input": "¿Cómo puedo usar el ciclo for con cadenas?",
        "output": "Puedes iterar sobre cada carácter de una cadena. Ejemplo: `for letra in 'Python': print(letra)` imprimirá cada letra de la palabra 'Python'."
    },
    {
        "input": "¿Qué hace el ciclo for-else?",
        "output": "La cláusula `else` de un ciclo `for` se ejecuta si el ciclo termina normalmente, sin usar `break`. Ejemplo: `for i in range(5): if i == 3: break else: print('Terminó sin interrupción')`."
    },
    {
        "input": "¿Cómo iterar con índices en un ciclo for?",
        "output": "Usa `enumerate()` para obtener tanto los índices como los valores. Ejemplo: `for indice, valor in enumerate(['a', 'b', 'c']): print(indice, valor)`."
    },
    {
        "input": "¿Cómo hacer un ciclo for que recorra una tupla?",
        "output": "Itera sobre los elementos directamente. Ejemplo: `mi_tupla = (1, 2, 3); for elemento in mi_tupla: print(elemento)`."
    },
    {
        "input": "¿Cómo usar el ciclo for con un diccionario?",
        "output": "Puedes iterar sobre las claves, los valores o ambos. Ejemplo: `mi_dic = {'a': 1, 'b': 2}; for clave, valor in mi_dic.items(): print(clave, valor)`."
    },
    {
        "input": "¿Cómo puedo hacer que un ciclo for se salte una iteración?",
        "output": "Usa la instrucción `continue`. Ejemplo: `for i in range(5): if i == 3: continue; print(i)`."
    },
    {
        "input": "¿Cómo hacer un ciclo for que cuente hacia atrás?",
        "output": "Usa `range()` con valores decrecientes. Ejemplo: `for i in range(5, 0, -1): print(i)` imprimirá del 5 al 1."
    },
    {
        "input": "¿Puedo usar varias variables en un ciclo for?",
        "output": "Sí, puedes usar desempaquetado. Ejemplo: `pares = [(1, 2), (3, 4)]; for x, y in pares: print(x, y)`."
    },
    {
        "input": "¿Qué pasa si el ciclo for no tiene elementos que recorrer?",
        "output": "El ciclo no se ejecutará. Ejemplo: `for i in []: print(i)` no imprimirá nada."
    },
    {
        "input": "¿Cómo imprimir solo los números pares usando un ciclo for?",
        "output": "Usa una condición dentro del ciclo. Ejemplo: `for i in range(10): if i % 2 == 0: print(i)`."
    },
    {
        "input": "¿Cómo puedo anidar ciclos for?",
        "output": "Coloca un ciclo `for` dentro de otro. Ejemplo: `for i in range(2): for j in range(3): print(i, j)`."
    },
    {
        "input": "¿Cómo uso un ciclo for para calcular la suma de números en una lista?",
        "output": "Usa un acumulador. Ejemplo: `mi_lista = [1, 2, 3]; suma = 0; for num in mi_lista: suma += num; print(suma)`."
    },
    {
        "input": "¿Qué es un iterador y cómo se relaciona con el ciclo for?",
        "output": "Un iterador es un objeto que devuelve sus elementos uno por uno. El ciclo `for` usa internamente iteradores para recorrer secuencias."
    },
    {
        "input": "¿Cómo puedo usar un ciclo for para crear una lista nueva?",
        "output": "Usa una comprensión de listas. Ejemplo: `[x**2 for x in range(5)]` crea una lista con los cuadrados de 0 a 4."
    },
    {
        "input": "¿Cómo recorrer dos listas al mismo tiempo con un ciclo for?",
        "output": "Usa la función `zip()`. Ejemplo: `for x, y in zip([1, 2], ['a', 'b']): print(x, y)`."
    },
    {
        "input": "¿Qué hace la función range() en un ciclo for?",
        "output": "`range()` genera una secuencia de números para iterar. Ejemplo: `for i in range(5): print(i)` imprime del 0 al 4."
    },
    {
        "input": "¿Puedo usar un ciclo for sin cuerpo?",
        "output": "Sí, pero necesitas `pass` para que sea sintácticamente válido. Ejemplo: `for i in range(5): pass`."
    },
    {
        "input": "¿Cómo manejar grandes cantidades de datos en un ciclo for?",
        "output": "Usa generadores para manejar datos grandes sin cargar todo en memoria. Ejemplo: `for x in (i for i in range(10**6) if i % 2 == 0): print(x)`."
    },
    {
        "input": "¿Puedo modificar una lista mientras la recorro con un ciclo for?",
        "output": "Es mejor no hacerlo directamente. En su lugar, usa una copia de la lista o un índice explícito."
    },
    {
        "input": "¿Cómo hago un ciclo for en Python?",
        "output": "Usa la palabra clave `for` seguida de una variable y un iterable. Ejemplo: `for i in range(5): print(i)`."
    },
    {
        "input": "¿Qué es un ciclo for y para qué sirve?",
        "output": "Un ciclo `for` se utiliza para repetir una acción iterando sobre una secuencia como listas, cadenas o rangos."
    },
    {
        "input": "¿Cómo puedo recorrer una lista con un ciclo for?",
        "output": "Usa `for` para iterar sobre la lista. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Qué debo poner dentro de un ciclo for?",
        "output": "Dentro de un ciclo `for` puedes poner cualquier código que desees ejecutar repetidamente, como imprimir o realizar cálculos."
    },
    {
        "input": "¿Cómo repito algo 10 veces con un ciclo for?",
        "output": "Usa `range()`. Ejemplo: `for i in range(10): print('Esto se repite 10 veces')`."
    },
    {
        "input": "¿Qué significa `in` en un ciclo for?",
        "output": "`in` se usa para recorrer elementos de una secuencia, como listas o cadenas, en un ciclo `for`."
    },
    {
        "input": "¿Puedo usar un ciclo for para contar números?",
        "output": "Sí, usa `range()`. Ejemplo: `for i in range(1, 6): print(i)` imprimirá los números del 1 al 5."
    },
    {
        "input": "¿Cómo se usa el ciclo for con cadenas?",
        "output": "Puedes iterar sobre cada carácter de una cadena. Ejemplo: `for letra in 'hola': print(letra)`."
    },
    {
        "input": "¿Qué pasa si mi ciclo for no tiene elementos para recorrer?",
        "output": "Si no hay elementos en la secuencia, el ciclo no se ejecutará. Ejemplo: `for i in []: print(i)` no imprimirá nada."
    },
    {
        "input": "¿Cómo hago un ciclo for que recorra una lista de palabras?",
        "output": "Usa `for` con la lista. Ejemplo: `palabras = ['hola', 'mundo']; for palabra in palabras: print(palabra)`."
    },
    {
        "input": "¿Cómo usar un ciclo for para sumar números en una lista?",
        "output": "Usa una variable acumuladora. Ejemplo: `suma = 0; for num in [1, 2, 3]: suma += num; print(suma)`."
    },
    {
        "input": "¿Cómo saber cuántas veces se ejecuta un ciclo for?",
        "output": "El ciclo se ejecutará una vez por cada elemento en la secuencia que estés recorriendo."
    },
    {
        "input": "¿Cómo hacer un ciclo for que empiece en 5 y termine en 10?",
        "output": "Usa `range()`. Ejemplo: `for i in range(5, 11): print(i)`."
    },
    {
        "input": "¿Qué variable debo usar en un ciclo for?",
        "output": "Puedes usar cualquier nombre de variable. Ejemplo: `for numero in range(3): print(numero)`."
    },
    {
        "input": "¿Cómo funciona `range()` en un ciclo for?",
        "output": "`range()` genera números para iterar. Ejemplo: `range(3)` genera los números 0, 1 y 2."
    },
    {
        "input": "¿Puedo usar números negativos en un ciclo for?",
        "output": "Sí, usa `range()` con valores negativos. Ejemplo: `for i in range(-5, 0): print(i)`."
    },
    {
        "input": "¿Cómo imprimir los números del 1 al 10 con un ciclo for?",
        "output": "Usa `range(1, 11)`. Ejemplo: `for i in range(1, 11): print(i)`."
    },
    {
        "input": "¿Qué es un iterable en un ciclo for?",
        "output": "Un iterable es un objeto como una lista, cadena o rango que puede ser recorrido por un ciclo `for`."
    },
    {
        "input": "¿Qué hace el ciclo for cuando se encuentra con `break`?",
        "output": "`break` detiene el ciclo inmediatamente, sin importar cuántas iteraciones faltan."
    },
    {
        "input": "¿Cómo hacer que un ciclo for se salte un número?",
        "output": "Usa `continue` para pasar a la siguiente iteración. Ejemplo: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "¿Cómo puedo imprimir una lista en un ciclo for?",
        "output": "Itera sobre la lista y usa `print()`. Ejemplo: `mi_lista = [1, 2, 3]; for elemento in mi_lista: print(elemento)`."
    },
    {
        "input": "¿Es necesario usar un rango en un ciclo for?",
        "output": "No, también puedes iterar sobre listas, cadenas u otros objetos iterables directamente."
    },
    {
        "input": "¿Qué pasa si no pongo nada dentro de un ciclo for?",
        "output": "Necesitas usar `pass` para evitar un error de sintaxis. Ejemplo: `for i in range(5): pass`."
    },
    {
        "input": "¿Cómo uso un ciclo for con números pares?",
        "output": "Usa `range()` con un paso de 2. Ejemplo: `for i in range(0, 11, 2): print(i)`."
    },
    {
        "input": "¿Cómo hago un ciclo while en Python?",
        "output": "Usa la palabra clave `while` seguida de una condición. Ejemplo: `x = 0; while x < 5: print(x); x += 1`."
    },
    {
        "input": "¿Qué es un ciclo while y para qué sirve?",
        "output": "Un ciclo `while` repite un bloque de código mientras una condición sea verdadera."
    },
    {
        "input": "¿Cómo funciona el ciclo while?",
        "output": "El ciclo `while` ejecuta el bloque de código asociado hasta que la condición se vuelva falsa."
    },
    {
        "input": "¿Qué pasa si la condición en el while siempre es verdadera?",
        "output": "El ciclo se ejecutará indefinidamente, creando un bucle infinito. Debes asegurarte de que la condición eventualmente sea falsa."
    },
    {
        "input": "¿Cómo puedo detener un ciclo while manualmente?",
        "output": "Usa la instrucción `break`. Ejemplo: `while True: if x > 10: break`."
    },
    {
        "input": "¿Cómo hacer un ciclo while que cuente del 1 al 10?",
        "output": "Define un contador. Ejemplo: `x = 1; while x <= 10: print(x); x += 1`."
    },
    {
        "input": "¿Cómo se usa `continue` en un ciclo while?",
        "output": "`continue` salta el resto del bloque actual y pasa a la siguiente iteración. Ejemplo: `x = 0; while x < 5: x += 1; if x == 3: continue; print(x)`."
    },
    {
        "input": "¿Cómo evito un bucle infinito en un ciclo while?",
        "output": "Asegúrate de que la condición del `while` eventualmente se vuelva falsa modificando las variables involucradas."
    },
    {
        "input": "¿Puedo usar una condición compuesta en un ciclo while?",
        "output": "Sí, usa operadores lógicos como `and` o `or`. Ejemplo: `x = 0; while x < 5 and x != 3: print(x); x += 1`."
    },
    {
        "input": "¿Qué diferencia hay entre un ciclo for y un while?",
        "output": "Un `for` se usa para iterar sobre secuencias conocidas, mientras que un `while` se usa cuando no sabes cuántas iteraciones serán necesarias, pero tienes una condición."
    },
    {
        "input": "¿Cómo uso un ciclo while para sumar números?",
        "output": "Usa un acumulador. Ejemplo: `x = 1; suma = 0; while x <= 5: suma += x; x += 1; print(suma)`."
    },
    {
        "input": "¿Qué pasa si pongo `True` como condición en un while?",
        "output": "El ciclo será infinito a menos que lo detengas manualmente con `break`."
    },
    {
        "input": "¿Cómo hacer un ciclo while que se detenga cuando se cumpla una condición?",
        "output": "Usa un `break` dentro del ciclo. Ejemplo: `x = 0; while True: if x == 5: break; x += 1; print(x)`."
    },
    {
        "input": "¿Qué es una condición en un ciclo while?",
        "output": "Es una expresión lógica que se evalúa antes de cada iteración para determinar si el ciclo debe continuar."
    },
    {
        "input": "¿Puedo usar el ciclo while con una lista?",
        "output": "Sí, puedes recorrer una lista verificando sus elementos. Ejemplo: `mi_lista = [1, 2, 3]; while mi_lista: print(mi_lista.pop())`."
    },
    {
        "input": "¿Cómo usar un ciclo while para imprimir números pares?",
        "output": "Usa un contador y una condición. Ejemplo: `x = 0; while x <= 10: print(x); x += 2`."
    },
    {
        "input": "¿Cómo usar un ciclo while con un contador decreciente?",
        "output": "Resta al contador en cada iteración. Ejemplo: `x = 10; while x > 0: print(x); x -= 1`."
    },
    {
        "input": "¿Qué pasa si olvido incrementar una variable dentro de un while?",
        "output": "Si la variable es parte de la condición, el ciclo podría volverse infinito."
    },
    {
        "input": "¿Puedo usar `else` en un ciclo while?",
        "output": "Sí, la cláusula `else` se ejecuta si el ciclo termina normalmente, sin usar `break`. Ejemplo: `x = 0; while x < 5: x += 1; else: print('Terminado')`."
    },
    {
        "input": "¿Cómo uso el ciclo while para pedir entrada al usuario hasta que sea válida?",
        "output": "Usa un ciclo con una condición. Ejemplo: `while True: entrada = input('Ingresa algo: '); if entrada == 'ok': break`."
    },
    {
        "input": "¿Cómo hacer un bucle infinito con while?",
        "output": "Usa `while True:`. Ejemplo: `while True: print('Bucle infinito')`."
    },
    {
        "input": "¿Qué debo hacer si mi ciclo while se ejecuta infinitamente por error?",
        "output": "Asegúrate de revisar la condición y de que las variables cambien dentro del ciclo para evitar el bucle infinito."
    },
    {
        "input": "¿Cómo imprimir números del 1 al 100 con un ciclo while?",
        "output": "Usa un contador. Ejemplo: `x = 1; while x <= 100: print(x); x += 1`."
    },
    {
        "input": "¿Qué significa la palabra clave `pass` en un ciclo while?",
        "output": "`pass` se usa como un marcador de posición que no hace nada. Ejemplo: `while True: pass`."
    },
    {
        "input": "¿Qué hace el ciclo for?",
        "output": "El ciclo `for` itera sobre los elementos de una secuencia, como listas, cadenas o rangos, y ejecuta un bloque de código para cada elemento."
    },
    {
        "input": "¿Qué hace el ciclo while?",
        "output": "El ciclo `while` ejecuta un bloque de código mientras una condición especificada sea verdadera."
    },
    {
        "input": "¿Qué hace la función print?",
        "output": "La función `print()` muestra información en la consola o salida estándar."
    },
    {
        "input": "¿Qué hace la palabra clave break?",
        "output": "`break` detiene inmediatamente la ejecución de un ciclo, ya sea `for` o `while`."
    },
    {
        "input": "¿Qué hace la palabra clave continue?",
        "output": "`continue` salta el resto del código en la iteración actual y pasa a la siguiente iteración del ciclo."
    },
    {
        "input": "¿Qué hace la función range?",
        "output": "`range()` genera una secuencia de números, útil para iterar con un ciclo `for`."
    },
    {
        "input": "¿Qué hace la función input?",
        "output": "`input()` permite al usuario ingresar datos desde el teclado y devuelve la entrada como una cadena."
    },
    {
        "input": "¿Qué hace la instrucción pass?",
        "output": "`pass` no realiza ninguna acción; se utiliza como un marcador de posición donde se requiere código sintácticamente válido."
    },
    {
        "input": "¿Qué hace la función len?",
        "output": "`len()` devuelve la longitud de un objeto, como una lista, cadena o tupla."
    },
    {
        "input": "¿Qué hace la función str?",
        "output": "`str()` convierte un valor en una cadena de texto."
    },
    {
        "input": "¿Qué hace la función int?",
        "output": "`int()` convierte un valor a un número entero, si es posible."
    },
    {
        "input": "¿Qué hace la función float?",
        "output": "`float()` convierte un valor en un número decimal (flotante)."
    },
    {
        "input": "¿Qué hace el operador in?",
        "output": "El operador `in` verifica si un elemento está presente en una secuencia, como una lista, cadena o tupla."
    },
    {
        "input": "¿Qué hace el operador not?",
        "output": "El operador `not` invierte el valor de una expresión booleana, convirtiendo `True` en `False` y viceversa."
    },
    {
        "input": "¿Qué hace la función type?",
        "output": "`type()` devuelve el tipo de un objeto. Ejemplo: `type(5)` devuelve `<class 'int'>`."
    },
    {
        "input": "¿Qué hace la función enumerate?",
        "output": "`enumerate()` devuelve un objeto que contiene pares índice-valor al iterar sobre una secuencia."
    },
    {
        "input": "¿Qué hace un bucle infinito?",
        "output": "Un bucle infinito repite su bloque de código sin detenerse porque la condición nunca se vuelve falsa."
    },
    {
        "input": "¿Qué hace un iterable?",
        "output": "Un iterable es un objeto que puede ser recorrido elemento por elemento en un ciclo, como listas, cadenas o diccionarios."
    },
    {
        "input": "¿Qué hace un índice en Python?",
        "output": "Un índice especifica la posición de un elemento en una secuencia, como en una lista o cadena."
    },
    {
        "input": "¿Qué hace la función zip?",
        "output": "`zip()` combina dos o más iterables, devolviendo un iterador de pares de elementos."
    },
    {
        "input": "¿Qué hace el operador %?",
        "output": "El operador `%` calcula el resto de la división entre dos números."
    },
    {
        "input": "¿Qué hace el operador //?",
        "output": "El operador `//` realiza una división entera, devolviendo solo la parte entera del resultado."
    },
    {
        "input": "¿Qué hace la función map?",
        "output": "`map()` aplica una función a cada elemento de un iterable y devuelve un objeto map."
    },
    {
        "input": "¿Qué hace la función filter?",
        "output": "`filter()` devuelve un iterable con los elementos que cumplen una condición especificada."
    },
    {
        "input": "¿Qué hace el operador **?",
        "output": "El operador `**` eleva un número a la potencia de otro."
    },
    {
        "input": "¿Qué hace la palabra clave return?",
        "output": "`return` finaliza la ejecución de una función y devuelve un valor opcional."
    },
    {
        "input": "¿Qué hace la palabra clave def?",
        "output": "`def` se utiliza para definir una nueva función en Python."
    },
    {
        "input": "¿Qué hace el método append?",
        "output": "`append()` agrega un elemento al final de una lista."
    },
    {
        "input": "¿Qué hace el método pop?",
        "output": "`pop()` elimina y devuelve el último elemento de una lista o uno en un índice especificado."
    },
    {
        "input": "¿Qué hace el método split?",
        "output": "`split()` divide una cadena en una lista de subcadenas, usando un delimitador especificado."
    },
    {
        "input": "¿Qué hace el método join?",
        "output": "`join()` une los elementos de una lista o iterable en una cadena, separados por un delimitador."
    },
    {
        "input": "¿Qué hace el método upper?",
        "output": "`upper()` convierte todos los caracteres de una cadena en mayúsculas."
    },
    {
        "input": "¿Qué hace el método lower?",
        "output": "`lower()` convierte todos los caracteres de una cadena en minúsculas."
    },
    {
        "input": "¿Cómo empiezo a programar en Python?",
        "output": "Puedes empezar instalando Python desde su sitio oficial, abriendo un editor de texto o IDE como VS Code, y escribiendo tu primer script. Ejemplo: `print('¡Hola, mundo!')`."
    },
    {
        "input": "¿Qué es una variable en Python?",
        "output": "Es un contenedor para almacenar datos. Se crea asignando un valor a un nombre. Ejemplo: `x = 5`."
    },
    {
        "input": "¿Cómo se usa el ciclo for en Python?",
        "output": "El ciclo `for` recorre elementos de una secuencia. Ejemplo: `for i in range(3): print(i)`."
    },
    {
        "input": "¿Qué diferencia hay entre for y while?",
        "output": "El ciclo `for` se usa para iterar sobre una secuencia conocida, mientras que `while` repite mientras una condición sea verdadera."
    },
    {
        "input": "¿Qué es un string en Python?",
        "output": "Es una cadena de caracteres, como un texto. Se define entre comillas simples o dobles. Ejemplo: `'Hola'` o `\"Hola\"`."
    },
    {
        "input": "¿Cómo convierto un string en un número?",
        "output": "Usa `int()` para enteros o `float()` para decimales. Ejemplo: `numero = int('5')`."
    },
    {
        "input": "¿Qué es una lista en Python?",
        "output": "Una lista es una colección ordenada y mutable de elementos. Ejemplo: `mi_lista = [1, 2, 3]`."
    },
    {
        "input": "¿Cómo elimino un elemento de una lista?",
        "output": "Usa `remove()` para eliminar por valor o `pop()` para eliminar por índice. Ejemplo: `mi_lista.remove(2)`."
    },
    {
        "input": "¿Cómo sumo los números de una lista?",
        "output": "Usa la función `sum()`. Ejemplo: `mi_lista = [1, 2, 3]; total = sum(mi_lista)`."
    },
    {
        "input": "¿Qué es un diccionario en Python?",
        "output": "Es una colección de pares clave-valor. Ejemplo: `mi_diccionario = {'clave': 'valor'}`."
    },
    {
        "input": "¿Cómo accedo a un valor en un diccionario?",
        "output": "Usa la clave entre corchetes. Ejemplo: `valor = mi_diccionario['clave']`."
    },
    {
        "input": "¿Qué hace la función input?",
        "output": "Permite recibir datos del usuario. Ejemplo: `nombre = input('¿Cómo te llamas? ')`."
    },
    {
        "input": "¿Cómo hago que mi programa espere unos segundos?",
        "output": "Usa `time.sleep()`. Ejemplo: `import time; time.sleep(2)` espera 2 segundos."
    },
    {
        "input": "¿Cómo divido un número en Python?",
        "output": "Usa `/` para división normal o `//` para división entera. Ejemplo: `resultado = 10 / 3`."
    },
    {
        "input": "¿Qué es un bucle infinito?",
        "output": "Es un ciclo que nunca se detiene porque la condición siempre es verdadera. Ejemplo: `while True: print('Infinito')`."
    },
    {
        "input": "¿Cómo termino un programa en Python?",
        "output": "Usa `exit()` o `sys.exit()`. Ejemplo: `import sys; sys.exit()`."
    },
    {
        "input": "¿Qué diferencia hay entre listas y tuplas?",
        "output": "Las listas son mutables, mientras que las tuplas son inmutables. Ejemplo: `mi_lista = [1, 2]`, `mi_tupla = (1, 2)`."
    },
    {
        "input": "¿Qué hace la función len?",
        "output": "Devuelve la longitud de un objeto, como una lista o cadena. Ejemplo: `len('hola')` devuelve `4`."
    },
    {
        "input": "¿Cómo hago una función en Python?",
        "output": "Usa la palabra clave `def`. Ejemplo: `def saludar(): print('Hola')`."
    },
    {
        "input": "¿Cómo encuentro el valor más grande de una lista?",
        "output": "Usa la función `max()`. Ejemplo: `max([1, 2, 3])` devuelve `3`."
    },
    {
        "input": "¿Cómo sé qué tipo de dato es una variable?",
        "output": "Usa la función `type()`. Ejemplo: `type(5)` devuelve `<class 'int'>`."
    },
    {
        "input": "¿Cómo uso la función print con múltiples líneas?",
        "output": "Usa un string multilínea o varias llamadas a `print`. Ejemplo: `print('Primera línea\\nSegunda línea')`."
    },
    {
        "input": "¿Qué es un operador lógico en Python?",
        "output": "Un operador lógico, como `and`, `or` o `not`, evalúa expresiones booleanas."
    },
    {
        "input": "¿Cómo hago que un programa repita una acción varias veces?",
        "output": "Usa ciclos como `for` o `while`. Ejemplo: `for i in range(5): print('Hola')`."
    },
    {
        "input": "¿Cómo uso Python para realizar cálculos?",
        "output": "Usa operadores matemáticos como `+`, `-`, `*`, `/` para sumar, restar, multiplicar o dividir."
    },
    {
        "input": "¿Qué es un archivo .py?",
        "output": "Es un archivo que contiene código Python y se ejecuta con el intérprete de Python."
    },
    {
        "input": "¿Cómo escribo en un archivo con Python?",
        "output": "Usa la función `open()` con el modo de escritura. Ejemplo: `with open('archivo.txt', 'w') as f: f.write('Hola')`."
    },
    {
        "input": "¿Qué es una excepción en Python?",
        "output": "Una excepción es un error durante la ejecución del programa que puede manejarse con `try-except`."
    },
    {
        "input": "¿Cómo manejo errores en Python?",
        "output": "Usa un bloque `try-except`. Ejemplo: `try: x = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "¿Qué es un módulo en Python?",
        "output": "Un módulo es un archivo que contiene código Python reutilizable. Puedes importarlo con `import nombre_modulo`."
    },
    {
        "input": "¿Qué hace la función dir?",
        "output": "Muestra una lista de los atributos y métodos de un objeto. Ejemplo: `dir([])` muestra los métodos de una lista."
    },
    {
        "input": "¿Cómo instalo una biblioteca en Python?",
        "output": "Usa el comando `pip install`. Ejemplo: `pip install requests`."
    },
    {
        "input": "¿Qué es un decorador en Python?",
        "output": "Un decorador es una función que modifica el comportamiento de otra función. Ejemplo: `@decorador`."
    },
    {
        "input": "¿Cómo puedo automatizar una tarea en Python?",
        "output": "Puedes usar bibliotecas como `os`, `shutil` o `subprocess` para automatizar tareas, dependiendo de lo que necesites hacer."
    },
    {
        "input": "¿Qué lugares turísticos recomiendas visitar en Xela?",
        "output": "En Xela puedes visitar el Parque Central, las Fuentes Georginas, el Volcán Santa María y la Catedral del Espíritu Santo."
    },
    {
        "input": "¿Qué algoritmos son comunes en inteligencia artificial?",
        "output": "Algoritmos como árboles de decisión, redes neuronales, regresión logística, y SVM son comunes en inteligencia artificial."
    },
    {
        "input": "¿Qué materias puedo esperar en la carrera de Ingeniería en Sistemas?",
        "output": "En la carrera de Ingeniería en Sistemas estudiarás programación, bases de datos, redes, inteligencia artificial, sistemas operativos y desarrollo de software."
    },
    {
        "input": "¿Cómo puedo aprender a programar videojuegos?",
        "output": "Puedes empezar con motores como Unity o Pygame, aprender lógica de programación y practicar con proyectos pequeños."
    },
    {
        "input": "¿Cómo funciona un adaptador de corriente para computadoras?",
        "output": "Un adaptador de corriente convierte la energía eléctrica de la toma de corriente a un voltaje adecuado para tu computadora portátil."
    },
    {
        "input": "¿Qué tecnología es común en sistemas de videojuegos modernos?",
        "output": "Tecnologías como motores gráficos avanzados (Unreal Engine, Unity), ray tracing, y soporte para realidad virtual son comunes en videojuegos modernos."
    },
    {
        "input": "¿Qué diferencia hay entre hardware y software en computadoras?",
        "output": "El hardware se refiere a los componentes físicos, como el procesador y la memoria, mientras que el software son los programas y sistemas operativos que ejecutan las tareas."
    },
    {
        "input": "¿Cómo desarrollo un sistema básico en Python?",
        "output": "Puedes usar frameworks como Flask o Django para desarrollar sistemas web básicos o escribir scripts que manejen datos y procesos específicos."
    },
    {
        "input": "¿Qué impacto tiene la tecnología en Guatemala?",
        "output": "La tecnología está transformando sectores como la educación, el comercio y la comunicación en Guatemala, ayudando a cerrar la brecha digital."
    },
    {
        "input": "¿Qué lenguaje es mejor para inteligencia artificial, Python u otro?",
        "output": "Python es ampliamente preferido para inteligencia artificial debido a su ecosistema de bibliotecas como TensorFlow, PyTorch y scikit-learn."
    },
    {
        "input": "¿Qué componentes necesito para armar una computadora?",
        "output": "Necesitas un procesador, placa base, memoria RAM, almacenamiento (HDD o SSD), tarjeta gráfica (si es necesario), fuente de poder, y un gabinete."
    },
    {
        "input": "¿Qué aplicaciones tienen los sistemas en la vida diaria?",
        "output": "Los sistemas están presentes en banca, transporte, comunicación, atención médica y cualquier área que dependa de la tecnología."
    },
    {
        "input": "¿Cómo optimizo un videojuego para mejor rendimiento?",
        "output": "Puedes optimizar reduciendo la resolución de texturas, usando modelos 3D menos complejos, y ajustando las configuraciones de iluminación y físicas."
    },
    {
        "input": "¿Qué necesitas saber para diseñar una base de datos?",
        "output": "Debes entender la normalización, relaciones entre tablas, tipos de datos y cómo optimizar consultas para el rendimiento."
    },
    {
        "input": "¿Qué adaptadores son esenciales para computadoras modernas?",
        "output": "Adaptadores de red (Wi-Fi o Ethernet), USB-C a HDMI, y adaptadores de corriente son comunes en computadoras modernas."
    },
    {
        "input": "¿Cómo empezar un proyecto de inteligencia artificial en Python?",
        "output": "Empieza instalando bibliotecas como NumPy, pandas y scikit-learn. Define tu problema, recolecta datos y entrena un modelo con esos datos."
    },
    {
        "input": "¿Qué diferencia hay entre un sistema operativo y un programa?",
        "output": "Un sistema operativo gestiona los recursos de hardware y software de la computadora, mientras que un programa realiza tareas específicas para el usuario."
    },
    {
        "input": "¿Cómo aprendo sobre ciberseguridad en sistemas?",
        "output": "Puedes empezar con conceptos básicos como criptografía, redes y análisis de vulnerabilidades, usando herramientas como Wireshark y Metasploit."
    },
    {
        "input": "¿Qué frameworks son útiles para desarrollo rápido en Python?",
        "output": "Frameworks como Flask, Django y FastAPI son útiles para desarrollar aplicaciones web rápidamente."
    },
    {
        "input": "¿Qué características hacen de Xela un buen lugar para estudiar tecnología?",
        "output": "Xela tiene universidades reconocidas, un ambiente tranquilo y una comunidad creciente interesada en tecnología y programación."
    },
    {
        "input": "¿Qué dispositivos utilizan inteligencia artificial?",
        "output": "Asistentes virtuales como Alexa o Siri, cámaras de seguridad inteligentes y automóviles autónomos son ejemplos de dispositivos que utilizan IA."
    },
    {
        "input": "¿Cómo me preparo para un trabajo en Ingeniería en Sistemas?",
        "output": "Aprende lenguajes de programación, fortalece tus habilidades en bases de datos, redes y desarrollo de software, y participa en proyectos prácticos."
    },
    {
        "input": "¿Qué lenguajes son comunes en desarrollo de videojuegos?",
        "output": "C++, C#, Python y JavaScript son comunes en el desarrollo de videojuegos, dependiendo del motor utilizado."
    },
    {
        "input": "¿Qué debo considerar al comprar un adaptador de red?",
        "output": "Asegúrate de que sea compatible con tu dispositivo, soporte las velocidades necesarias y sea adecuado para el tipo de conexión (Wi-Fi o Ethernet)."
    },
    {
        "input": "¿Qué impacto tienen los sistemas en la sociedad moderna?",
        "output": "Los sistemas facilitan la automatización, mejoran la comunicación y aumentan la eficiencia en casi todos los aspectos de la vida moderna."
    },
    {
        "input": "¿Cómo se usa Python en la educación en Guatemala?",
        "output": "Python se utiliza en Guatemala para enseñar programación básica y desarrollo de aplicaciones en colegios y universidades debido a su simplicidad."
    },
    {
        "input": "¿Qué eventos tecnológicos se realizan en Xela?",
        "output": "Xela organiza hackatones, talleres de programación y eventos relacionados con tecnología, especialmente en universidades locales."
    },
    {
        "input": "¿Cómo se aplica la inteligencia artificial en videojuegos?",
        "output": "La inteligencia artificial se usa en videojuegos para crear NPCs, ajustar la dificultad automáticamente y mejorar la experiencia del jugador."
    },
    {
        "input": "¿Qué tipo de proyectos puedo hacer en la carrera de Ingeniería en Sistemas?",
        "output": "Puedes desarrollar aplicaciones web, sistemas de gestión, análisis de datos, aplicaciones móviles y proyectos de inteligencia artificial."
    },
    {
        "input": "¿Qué diferencia hay entre un sistema distribuido y uno centralizado?",
        "output": "Un sistema distribuido divide las tareas entre múltiples nodos, mientras que uno centralizado depende de un único servidor principal."
    },
    {
        "input": "¿Qué lenguajes debo aprender para sistemas modernos?",
        "output": "Lenguajes como Python, Java, C++, y JavaScript son esenciales para sistemas modernos por su versatilidad y soporte en diversas plataformas."
    },
    {
        "input": "¿Cómo influye la tecnología en la economía de Guatemala?",
        "output": "La tecnología impulsa sectores como el comercio electrónico, la banca y las startups, ayudando al crecimiento económico del país."
    },
    {
        "input": "¿Qué motores de videojuegos son mejores para principiantes?",
        "output": "Motores como Unity y Godot son ideales para principiantes por su documentación y facilidad de uso."
    },
    {
        "input": "¿Qué adaptadores necesito para conectar dos monitores a una laptop?",
        "output": "Necesitarás adaptadores HDMI, USB-C a HDMI, o DisplayPort, dependiendo de las salidas disponibles en tu laptop."
    },
    {
        "input": "¿Cómo puedo usar Python para crear un chatbot?",
        "output": "Puedes usar bibliotecas como `ChatterBot` o `NLTK` para procesar texto y desarrollar un chatbot básico."
    },
    {
        "input": "¿Qué herramientas se usan en inteligencia artificial para procesar imágenes?",
        "output": "Herramientas como OpenCV, TensorFlow y PyTorch son populares para el procesamiento y análisis de imágenes en IA."
    },
    {
        "input": "¿Qué tecnología está impulsando el desarrollo de videojuegos?",
        "output": "Tecnologías como ray tracing, realidad virtual, inteligencia artificial y motores gráficos avanzados están impulsando el desarrollo de videojuegos."
    },
    {
        "input": "¿Cómo crear un sistema de inicio de sesión básico?",
        "output": "Puedes usar Python con Flask o Django para crear un sistema básico que valide usuarios y contraseñas almacenadas en una base de datos."
    },
    {
        "input": "¿Qué tecnologías están revolucionando los sistemas de salud?",
        "output": "La inteligencia artificial, la telemedicina y el análisis de big data están revolucionando los sistemas de salud al mejorar diagnósticos y tratamientos."
    },
    {
        "input": "¿Qué impacto tienen los videojuegos en la educación?",
        "output": "Los videojuegos pueden mejorar habilidades como la resolución de problemas, el trabajo en equipo y el aprendizaje interactivo en entornos educativos."
    },
    {
        "input": "¿Cómo elegir un buen adaptador de energía para una laptop?",
        "output": "Asegúrate de que sea compatible con el voltaje y amperaje de tu laptop, y que sea de un fabricante confiable."
    },
    {
        "input": "¿Qué frameworks son útiles para sistemas en tiempo real?",
        "output": "Frameworks como Node.js, Flask y FastAPI son útiles para desarrollar sistemas que requieran respuestas rápidas en tiempo real."
    },
    {
        "input": "¿Cómo optimizo un sistema distribuido?",
        "output": "Puedes optimizar un sistema distribuido balanceando la carga, reduciendo la latencia de la red y utilizando almacenamiento distribuido eficiente."
    },
    {
        "input": "¿Qué métodos de aprendizaje supervisado existen en inteligencia artificial?",
        "output": "Métodos como regresión lineal, árboles de decisión, SVM y redes neuronales son ejemplos comunes de aprendizaje supervisado."
    },
    {
        "input": "¿Qué necesitas para empezar a programar videojuegos?",
        "output": "Necesitas aprender un lenguaje de programación como Python o C#, elegir un motor de desarrollo como Unity, y practicar con proyectos pequeños."
    },
    {
        "input": "¿Qué aplicaciones prácticas tiene Python en Guatemala?",
        "output": "En Guatemala, Python se usa en proyectos de análisis de datos, desarrollo de software educativo y automatización de procesos empresariales."
    },
    {
        "input": "¿Qué técnicas se usan para enseñar tecnología en Xela?",
        "output": "En Xela se usan talleres, cursos online, y proyectos prácticos para enseñar tecnología en universidades y academias locales."
    },
    {
        "input": "¿Cómo integrar inteligencia artificial en un sistema existente?",
        "output": "Puedes integrar inteligencia artificial usando APIs preentrenadas o desarrollando modelos personalizados con bibliotecas como TensorFlow o PyTorch."
    },
    {
        "input": "¿Qué tipo de proyectos prácticos puedo hacer en Ingeniería en Sistemas?",
        "output": "Puedes desarrollar aplicaciones web, gestionar bases de datos, crear aplicaciones móviles o implementar modelos de inteligencia artificial."
    },
    {
        "input": "¿Cómo puedo mejorar la eficiencia energética de mi computadora?",
        "output": "Ajusta la configuración de energía, reduce el brillo de la pantalla y cierra programas que no estés utilizando."
    },
    {
        "input": "¿Qué lenguajes son mejores para construir sistemas empresariales?",
        "output": "Java, Python y C# son excelentes para sistemas empresariales debido a su estabilidad, escalabilidad y soporte empresarial."
    },
    {
        "input": "¿Cómo contribuyen los videojuegos al desarrollo social?",
        "output": "Los videojuegos fomentan la creatividad, el trabajo en equipo y habilidades de resolución de problemas, además de conectar comunidades globales."
    },
    {
        "input": "¿Qué adaptadores son ideales para conectar laptops a proyectores antiguos?",
        "output": "Un adaptador VGA a HDMI o USB-C a VGA sería ideal para conectar laptops modernas a proyectores antiguos."
    },
    {
        "input": "¿Qué desafíos enfrenta Guatemala en el desarrollo tecnológico?",
        "output": "Desafíos como el acceso limitado a internet, la falta de infraestructura y la desigualdad educativa dificultan el desarrollo tecnológico en Guatemala."
    },
    {
        "input": "¿Qué bibliotecas de Python son útiles para analizar datos?",
        "output": "Bibliotecas como pandas, NumPy y Matplotlib son esenciales para el análisis y visualización de datos en Python."
    },
    {
        "input": "¿Qué es pandas?",
        "output": "Pandas es una biblioteca de Python para la manipulación y análisis de datos. Permite trabajar con estructuras de datos como DataFrames de manera eficiente."
    },
    {
        "input": "¿Qué es un adaptador VGA?",
        "output": "VGA es un estándar para conectar dispositivos de video como monitores y proyectores. Un adaptador VGA permite la compatibilidad con dispositivos que usan esta tecnología."
    },
    {
        "input": "¿Qué es Java?",
        "output": "Java es un lenguaje de programación orientado a objetos, ampliamente utilizado en aplicaciones empresariales, desarrollo móvil y sistemas distribuidos."
    },
    {
        "input": "¿Qué es un framework?",
        "output": "Un framework es una estructura predefinida de código que facilita el desarrollo de aplicaciones al proporcionar herramientas y funcionalidades comunes."
    },
    {
        "input": "¿Qué es TensorFlow?",
        "output": "TensorFlow es una biblioteca de código abierto para el aprendizaje automático y redes neuronales, ampliamente utilizada en proyectos de inteligencia artificial."
    },
    {
        "input": "¿Qué es un DataFrame en pandas?",
        "output": "Un DataFrame es una estructura de datos bidimensional en pandas, similar a una tabla, que permite organizar datos en filas y columnas."
    },
    {
        "input": "¿Qué es una API?",
        "output": "Una API (Interfaz de Programación de Aplicaciones) es un conjunto de reglas que permiten que diferentes aplicaciones se comuniquen entre sí."
    },
    {
        "input": "¿Qué es Python Flask?",
        "output": "Flask es un microframework de Python para el desarrollo de aplicaciones web. Es ligero y fácil de usar, ideal para proyectos pequeños."
    },
    {
        "input": "¿Qué es un motor de videojuegos?",
        "output": "Un motor de videojuegos es un software que proporciona herramientas para el desarrollo de videojuegos, como motores gráficos, físicas y sistemas de animación."
    },
    {
        "input": "¿Qué es Unity?",
        "output": "Unity es un motor de videojuegos popular que permite crear juegos en 2D y 3D, utilizado por desarrolladores de todos los niveles."
    },
    {
        "input": "¿Qué es ray tracing?",
        "output": "El ray tracing es una técnica de renderizado que simula el comportamiento realista de la luz para crear gráficos altamente detallados en videojuegos y simulaciones."
    },
    {
        "input": "¿Qué es inteligencia artificial?",
        "output": "La inteligencia artificial es una rama de la informática que busca crear sistemas capaces de realizar tareas que requieren inteligencia humana, como aprender y tomar decisiones."
    },
    {
        "input": "¿Qué es NumPy?",
        "output": "NumPy es una biblioteca de Python utilizada para cálculos numéricos, especialmente con arreglos y matrices multidimensionales."
    },
    {
        "input": "¿Qué es aprendizaje supervisado?",
        "output": "El aprendizaje supervisado es un tipo de aprendizaje automático donde un modelo es entrenado con datos etiquetados para hacer predicciones o clasificaciones."
    },
    {
        "input": "¿Qué es un sistema distribuido?",
        "output": "Un sistema distribuido es un conjunto de computadoras independientes que trabajan juntas para resolver problemas como si fueran un único sistema."
    },
    {
        "input": "¿Qué es un motor gráfico?",
        "output": "Un motor gráfico es un software que permite renderizar gráficos en tiempo real, comúnmente usado en videojuegos y simulaciones."
    },
    {
        "input": "¿Qué es un archivo .py?",
        "output": "Un archivo `.py` es un archivo que contiene código escrito en Python. Puedes ejecutarlo usando un intérprete de Python."
    },
    {
        "input": "¿Qué es Pygame?",
        "output": "Pygame es una biblioteca de Python diseñada para el desarrollo de videojuegos 2D, proporcionando herramientas para gráficos, sonido y eventos de usuario."
    },
    {
        "input": "¿Qué es una red neuronal?",
        "output": "Una red neuronal es un modelo computacional inspirado en el cerebro humano, utilizado en inteligencia artificial para tareas como reconocimiento de patrones."
    },
    {
        "input": "¿Qué es un Data Lake?",
        "output": "Un Data Lake es un repositorio de datos donde se almacenan grandes volúmenes de información en su formato original, listo para análisis futuros."
    },
    {
        "input": "¿Qué es un adaptador USB-C?",
        "output": "Un adaptador USB-C permite la conexión de dispositivos USB-C a otros tipos de puertos, como HDMI, VGA o USB-A."
    },
    {
        "input": "¿Qué es FastAPI?",
        "output": "FastAPI es un framework de Python para construir APIs rápidas y eficientes, conocido por su rendimiento y soporte para tipado estático."
    },
    {
        "input": "¿Qué es un IDE?",
        "output": "Un IDE (Entorno de Desarrollo Integrado) es una herramienta que combina un editor de código, depurador y otras funcionalidades para facilitar la programación."
    },
    {
        "input": "¿Qué es scikit-learn?",
        "output": "Scikit-learn es una biblioteca de Python para aprendizaje automático, que incluye herramientas para clasificación, regresión y clustering."
    },
    {
        "input": "¿Qué es un sistema operativo?",
        "output": "Un sistema operativo es el software que gestiona el hardware y software de una computadora, permitiendo que los programas se ejecuten."
    },
    {
        "input": "¿Qué es un modelo de aprendizaje automático?",
        "output": "Es un algoritmo entrenado con datos que puede hacer predicciones o clasificaciones basadas en información nueva."
    },
    {
        "input": "¿Qué es un objeto iterable en Python?",
        "output": "Un objeto iterable es cualquier objeto que puede ser recorrido con un ciclo, como listas, tuplas o cadenas."
    },
    {
        "input": "¿Qué es OpenCV?",
        "output": "OpenCV es una biblioteca de código abierto para el procesamiento de imágenes y visión por computadora, utilizada en proyectos de inteligencia artificial."
    },
    {
        "input": "¿Qué es una consulta SQL?",
        "output": "Una consulta SQL es una instrucción que se ejecuta en una base de datos para recuperar, insertar, actualizar o eliminar datos."
    },
    {
        "input": "¿Qué es un modelo preentrenado en IA?",
        "output": "Es un modelo de inteligencia artificial que ya ha sido entrenado con un gran conjunto de datos y puede ser reutilizado o ajustado para tareas específicas."
    },
    {
        "input": "¿Qué es Git?",
        "output": "Git es un sistema de control de versiones que permite a los desarrolladores rastrear cambios en su código y colaborar con otros en proyectos."
    },
    {
        "input": "¿Qué es una API REST?",
        "output": "Una API REST es un tipo de interfaz que permite la comunicación entre sistemas mediante operaciones HTTP como GET, POST, PUT y DELETE."
    },
    {
        "input": "¿Qué diferencia hay entre una lista y un diccionario en Python?",
        "output": "Una lista es una colección ordenada de elementos accesibles por índices, mientras que un diccionario almacena pares clave-valor y los valores se acceden mediante claves."
    },
    {
        "input": "¿Cómo uso pandas para leer un archivo CSV?",
        "output": "Usa el método `pd.read_csv('archivo.csv')` para cargar un archivo CSV como un DataFrame en pandas."
    },
    {
        "input": "¿Qué significa que Python sea de alto nivel?",
        "output": "Significa que Python está diseñado para ser fácil de leer y escribir, abstrae detalles complejos del hardware y se centra en la lógica del problema."
    },
    {
        "input": "¿Qué es un bucle infinito y cómo puedo evitarlo?",
        "output": "Un bucle infinito ocurre cuando la condición de un ciclo nunca se vuelve falsa. Puedes evitarlo asegurándote de que la condición cambie dentro del bucle."
    },
    {
        "input": "¿Cómo funciona un DataFrame en pandas?",
        "output": "Un DataFrame es como una tabla bidimensional en la que puedes manipular datos usando filas y columnas de forma similar a Excel o SQL."
    },
    {
        "input": "¿Qué puedo hacer con un diccionario en Python?",
        "output": "Puedes agregar, eliminar y actualizar pares clave-valor, acceder a valores usando claves, y recorrer sus elementos con un ciclo `for`."
    },
    {
        "input": "¿Qué diferencia hay entre inteligencia artificial y aprendizaje automático?",
        "output": "La inteligencia artificial es el campo general que busca crear sistemas inteligentes, mientras que el aprendizaje automático es una subdisciplina que se enfoca en entrenar modelos con datos."
    },
    {
        "input": "¿Qué ventajas tiene Unity frente a otros motores de videojuegos?",
        "output": "Unity es fácil de usar, tiene una gran comunidad, soporta múltiples plataformas y ofrece herramientas integradas para 2D y 3D."
    },
    {
        "input": "¿Qué significa que un sistema sea distribuido?",
        "output": "Un sistema distribuido divide las tareas entre múltiples computadoras conectadas, permitiendo mayor escalabilidad y disponibilidad."
    },
    {
        "input": "¿Cómo sé si un adaptador es compatible con mi laptop?",
        "output": "Debes verificar que el adaptador tenga el tipo de conexión y especificaciones (voltaje, amperaje) compatibles con tu dispositivo."
    },
    {
        "input": "¿Qué métodos de aprendizaje supervisado existen?",
        "output": "Métodos comunes incluyen regresión lineal, árboles de decisión, redes neuronales, máquinas de soporte vectorial (SVM), y bosques aleatorios."
    },
    {
        "input": "¿Qué es un ciclo while y cuándo debería usarlo?",
        "output": "Un ciclo `while` ejecuta un bloque de código mientras una condición sea verdadera. Es útil cuando no sabes cuántas iteraciones necesitas."
    },
    {
        "input": "¿Cómo uso Python para analizar datos?",
        "output": "Usa bibliotecas como pandas para manipular datos, NumPy para cálculos numéricos y Matplotlib para visualización de datos."
    },
    {
        "input": "¿Qué tipos de inteligencia artificial existen?",
        "output": "Existen tres tipos: IA estrecha (especializada en una tarea), IA general (capaz de realizar tareas como un humano) e IA superinteligente (teórica)."
    },
    {
        "input": "¿Cómo inicio un proyecto con Flask?",
        "output": "Instala Flask con `pip install flask`, crea un archivo Python con la estructura básica de un servidor y ejecútalo con `flask run`."
    },
    {
        "input": "¿Qué es OpenCV y para qué sirve?",
        "output": "OpenCV es una biblioteca para procesamiento de imágenes y visión por computadora. Se usa en reconocimiento facial, análisis de video, y más."
    },
    {
        "input": "¿Cómo puedo optimizar un programa en Python?",
        "output": "Identifica cuellos de botella, usa estructuras de datos eficientes, evita bucles innecesarios y aprovecha bibliotecas optimizadas como NumPy."
    },
    {
        "input": "¿Qué diferencia hay entre Python y Java para sistemas?",
        "output": "Python es más fácil de aprender y rápido para prototipos, mientras que Java es más adecuado para sistemas grandes y empresariales debido a su robustez."
    },
    {
        "input": "¿Qué significa que un videojuego use ray tracing?",
        "output": "Significa que el videojuego utiliza una técnica avanzada de renderizado para simular la luz de manera realista, mejorando los gráficos."
    },
    {
        "input": "¿Qué ventajas ofrece Python para la inteligencia artificial?",
        "output": "Python ofrece bibliotecas especializadas como TensorFlow, PyTorch y scikit-learn, además de una sintaxis sencilla y una comunidad activa."
    },
    {
        "input": "¿Cómo se usa la inteligencia artificial en sistemas empresariales?",
        "output": "Se utiliza para análisis de datos, predicción de tendencias, automatización de procesos y mejoras en la atención al cliente."
    },
    {
        "input": "¿Qué pasos debo seguir para aprender a programar videojuegos?",
        "output": "Empieza aprendiendo un lenguaje como Python o C#, elige un motor de desarrollo como Unity, y practica con proyectos pequeños."
    },
    {
        "input": "¿Qué diferencia hay entre sistemas operativos y aplicaciones?",
        "output": "Un sistema operativo gestiona el hardware y software de la computadora, mientras que una aplicación realiza tareas específicas para el usuario."
    },
    {
        "input": "¿Qué es un modelo de aprendizaje no supervisado?",
        "output": "Es un modelo que encuentra patrones en datos no etiquetados, como agrupamientos o reducciones de dimensionalidad."
    },
    {
        "input": "¿Cómo conecto dos monitores a mi laptop?",
        "output": "Usa puertos disponibles como HDMI o USB-C, y si es necesario, adaptadores para conectar ambos monitores."
    },
    {
        "input": "¿Qué es un modelo entrenado en inteligencia artificial?",
        "output": "Es un algoritmo que ha aprendido a realizar una tarea específica utilizando un conjunto de datos durante el proceso de entrenamiento."
    },
    {
        "input": "¿Cómo sé si un sistema es distribuido o centralizado?",
        "output": "Un sistema distribuido tiene múltiples nodos trabajando juntos, mientras que un sistema centralizado depende de un único servidor o nodo."
    },
    {
        "input": "¿Qué puedo hacer con un DataFrame en pandas?",
        "output": "Puedes filtrar, ordenar, agregar columnas, realizar cálculos y convertir datos a otros formatos, como CSV o JSON."
    },
    {
        "input": "¿Qué diferencia hay entre aprendizaje supervisado y no supervisado?",
        "output": "El aprendizaje supervisado utiliza datos etiquetados para entrenar un modelo, mientras que el no supervisado encuentra patrones en datos no etiquetados."
    },
    {
        "input": "¿Qué usos tiene la visión por computadora?",
        "output": "Se usa en reconocimiento facial, control de calidad en fábricas, conducción autónoma y análisis de imágenes médicas."
    },
    {
        "input": "¿Cómo se filtra un DataFrame en pandas?",
        "output": "Puedes filtrar usando condiciones. Ejemplo: `df_filtrado = df[df['columna'] > 10]` filtra las filas donde el valor de 'columna' es mayor a 10."
    },
    {
        "input": "¿Qué es un nodo en un sistema distribuido?",
        "output": "Un nodo es una computadora o dispositivo en un sistema distribuido que realiza tareas específicas como procesamiento o almacenamiento."
    },
    {
        "input": "¿Qué es un conjunto de datos etiquetados?",
        "output": "Es un conjunto de datos donde cada entrada tiene una etiqueta asociada que indica el resultado esperado, como imágenes con su categoría."
    },
    {
        "input": "¿Qué ventajas tiene usar aprendizaje no supervisado?",
        "output": "El aprendizaje no supervisado es útil para descubrir patrones ocultos o realizar agrupaciones en datos que no están etiquetados."
    },
    {
        "input": "¿Qué es un motor gráfico y cómo funciona?",
        "output": "Un motor gráfico es un software que renderiza gráficos en tiempo real. Funciona transformando datos en imágenes visibles en la pantalla."
    },
    {
        "input": "¿Qué es una red neuronal convolucional?",
        "output": "Es un tipo de red neuronal diseñada para procesar datos con una estructura de cuadrícula, como imágenes. Es común en visión por computadora."
    },
    {
        "input": "¿Cómo puedo optimizar un DataFrame en pandas?",
        "output": "Usa tipos de datos más eficientes como `category` para columnas categóricas, elimina columnas innecesarias y filtra filas irrelevantes."
    },
    {
        "input": "¿Cómo se clasifican los videojuegos según su tecnología?",
        "output": "Pueden clasificarse como juegos 2D, 3D, en realidad virtual o con ray tracing, según las tecnologías utilizadas en su desarrollo."
    },
    {
        "input": "¿Qué es un modelo entrenado en aprendizaje automático?",
        "output": "Es un modelo que ha aprendido patrones a partir de datos de entrenamiento para realizar predicciones o clasificaciones."
    },
    {
        "input": "¿Qué ventajas tiene usar Flask en lugar de Django?",
        "output": "Flask es más ligero y flexible, ideal para proyectos pequeños. Django es más completo, adecuado para proyectos grandes y complejos."
    },
    {
        "input": "¿Qué tipos de adaptadores existen para conexiones de video?",
        "output": "Hay adaptadores VGA, HDMI, DisplayPort y USB-C, que convierten señales entre distintos tipos de dispositivos y estándares."
    },
    {
        "input": "¿Qué aplicaciones tienen los sistemas distribuidos?",
        "output": "Se usan en redes sociales, almacenamiento en la nube, sistemas bancarios y plataformas de streaming para manejar grandes volúmenes de datos."
    },
    {
        "input": "¿Qué es una consulta SQL y cómo se usa?",
        "output": "Una consulta SQL es una instrucción para interactuar con una base de datos, como seleccionar, insertar o actualizar datos. Ejemplo: `SELECT * FROM tabla`."
    },
    {
        "input": "¿Cómo puedo entrenar un modelo en scikit-learn?",
        "output": "Primero define el modelo, luego usa `fit()` con los datos de entrenamiento. Ejemplo: `modelo.fit(X_train, y_train)`."
    },
    {
        "input": "¿Qué es un modelo de clasificación en aprendizaje automático?",
        "output": "Es un modelo que asigna etiquetas a datos de entrada basándose en patrones aprendidos durante el entrenamiento."
    },
    {
        "input": "¿Cómo puedo verificar si mi sistema operativo es compatible con un programa?",
        "output": "Revisa los requisitos del programa, como la versión del sistema operativo, RAM y espacio en disco necesario."
    },
    {
        "input": "¿Qué diferencia hay entre TensorFlow y PyTorch?",
        "output": "TensorFlow es más usado en producción por su soporte empresarial, mientras que PyTorch es preferido para investigación por su flexibilidad."
    },
    {
        "input": "¿Qué es una base de datos relacional?",
        "output": "Es una base de datos que organiza la información en tablas relacionadas mediante claves primarias y foráneas."
    },
    {
        "input": "¿Cómo se crea un servidor básico con Flask?",
        "output": "Define una aplicación con `Flask(__name__)` y usa rutas para manejar solicitudes. Ejemplo: `@app.route('/')` define una página principal."
    },
    {
        "input": "¿Qué es un algoritmo de agrupamiento?",
        "output": "Es un algoritmo que organiza datos en grupos basándose en similitudes. Ejemplo: k-means para agrupar puntos en el espacio."
    },
    {
        "input": "¿Qué diferencia hay entre HDMI y DisplayPort?",
        "output": "HDMI es más común en televisores y proyectores, mientras que DisplayPort se usa más en monitores de alta resolución y rendimiento."
    },
    {
        "input": "¿Cómo puedo integrar un modelo de IA en una aplicación web?",
        "output": "Usa frameworks como Flask o Django para crear una API que llame al modelo y devuelva predicciones a través de solicitudes HTTP."
    },
    {
        "input": "¿Qué significa que Python sea interpretado?",
        "output": "Significa que el código se ejecuta línea por línea sin necesidad de compilarlo previamente, lo que facilita la depuración y desarrollo."
    },
    {
        "input": "¿Qué es una red neuronal recurrente?",
        "output": "Es un tipo de red neuronal diseñada para procesar datos secuenciales, como texto o series temporales, recordando información previa."
    },
    {
        "input": "¿Qué ventajas tienen los motores de videojuegos como Unity?",
        "output": "Ofrecen herramientas integradas para gráficos, físicas, animación y soporte multiplataforma, simplificando el desarrollo de videojuegos."
    },
    {
        "input": "¿Cómo puedo renderizar gráficos en 3D en un videojuego?",
        "output": "Usa motores como Unity o Unreal Engine que proporcionan herramientas para diseñar y renderizar gráficos en 3D."
    },
    {
        "input": "¿Qué diferencias hay entre aprendizaje supervisado y refuerzo?",
        "output": "El aprendizaje supervisado usa datos etiquetados, mientras que el aprendizaje por refuerzo entrena a un agente basado en recompensas y castigos."
    },
    {
        "input": "¿Qué es una clave primaria en una base de datos?",
        "output": "Es un campo único en una tabla que identifica cada registro de forma exclusiva."
    },
    {
        "input": "¿Qué son las librerías en Python?",
        "output": "Son colecciones de módulos predefinidos que contienen funciones y clases para facilitar el desarrollo de aplicaciones específicas."
    },
    {
        "input": "¿Qué es k-means y cómo funciona?",
        "output": "K-means es un algoritmo de agrupamiento que divide datos en k grupos basándose en similitudes. Funciona asignando puntos al centroide más cercano y ajustando los centroides iterativamente."
    },
    {
        "input": "¿Qué diferencia hay entre bases de datos relacionales y no relacionales?",
        "output": "Las bases de datos relacionales organizan datos en tablas con relaciones entre ellas, mientras que las no relacionales (como MongoDB) almacenan datos en formatos flexibles como JSON."
    },
    {
        "input": "¿Cómo implemento una API básica con Flask?",
        "output": "Define rutas usando `@app.route()` y maneja solicitudes con funciones. Ejemplo: `@app.route('/api', methods=['GET'])`."
    },
    {
        "input": "¿Qué ventajas tiene DisplayPort frente a HDMI?",
        "output": "DisplayPort ofrece mayor ancho de banda, soporte para múltiples pantallas y mejor calidad en resoluciones altas."
    },
    {
        "input": "¿Qué significa que un algoritmo sea supervisado?",
        "output": "Un algoritmo supervisado utiliza datos etiquetados para aprender patrones que le permitan realizar predicciones o clasificaciones."
    },
    {
        "input": "¿Cómo funciona un servidor creado con Flask?",
        "output": "Un servidor Flask maneja solicitudes HTTP y devuelve respuestas configuradas por las rutas definidas en la aplicación."
    },
    {
        "input": "¿Qué es un centroide en el algoritmo k-means?",
        "output": "Un centroide es el punto que representa el centro de un grupo en el espacio de características del algoritmo k-means."
    },
    {
        "input": "¿Qué es una red neuronal feedforward?",
        "output": "Es un tipo de red neuronal donde la información fluye en una sola dirección, desde las entradas hacia las salidas, sin ciclos."
    },
    {
        "input": "¿Cómo uso un DataFrame para realizar agrupaciones?",
        "output": "Usa el método `groupby()`. Ejemplo: `df.groupby('columna')['otra_columna'].sum()` agrupa por 'columna' y suma valores de 'otra_columna'."
    },
    {
        "input": "¿Qué es una base de datos no relacional?",
        "output": "Es una base de datos que almacena datos en formatos flexibles, como documentos, clave-valor o gráficos, y no requiere esquemas estrictos."
    },
    {
        "input": "¿Cómo entreno un modelo de clasificación con scikit-learn?",
        "output": "Define el modelo, divídelo en conjuntos de entrenamiento y prueba, y entrena usando `fit()`. Ejemplo: `modelo.fit(X_train, y_train)`."
    },
    {
        "input": "¿Qué significa que una consulta SQL sea optimizada?",
        "output": "Significa que la consulta está diseñada para ejecutarse de manera eficiente, utilizando índices y limitando operaciones innecesarias."
    },
    {
        "input": "¿Qué es una clave foránea en bases de datos?",
        "output": "Es un campo en una tabla que referencia la clave primaria de otra tabla para establecer una relación entre ellas."
    },
    {
        "input": "¿Cómo ajusto el aprendizaje en un modelo de inteligencia artificial?",
        "output": "Puedes ajustar el aprendizaje cambiando parámetros como la tasa de aprendizaje, el número de épocas o el tamaño del lote."
    },
    {
        "input": "¿Qué es una red neuronal convolucional y para qué se usa?",
        "output": "Es una red neuronal especializada en el procesamiento de imágenes, utilizada para tareas como reconocimiento facial y clasificación de objetos."
    },
    {
        "input": "¿Qué diferencia hay entre Flask y FastAPI?",
        "output": "FastAPI es más rápido y ofrece soporte para validación y tipado, mientras que Flask es más ligero y flexible para proyectos pequeños."
    },
    {
        "input": "¿Cómo convierto un DataFrame en un archivo CSV?",
        "output": "Usa el método `to_csv()`. Ejemplo: `df.to_csv('archivo.csv', index=False)` guarda el DataFrame como un archivo CSV sin índices."
    },
    {
        "input": "¿Qué pasos se deben seguir para optimizar una consulta SQL?",
        "output": "Asegúrate de usar índices, evita selecciones innecesarias con `SELECT *`, y reduce la cantidad de uniones y subconsultas cuando sea posible."
    },
    {
        "input": "¿Cómo puedo implementar aprendizaje no supervisado con scikit-learn?",
        "output": "Usa algoritmos como `KMeans` para agrupamiento. Ejemplo: `kmeans = KMeans(n_clusters=3); kmeans.fit(datos)`."
    },
    {
        "input": "¿Qué es una red neuronal recurrente y para qué se usa?",
        "output": "Es un tipo de red neuronal que procesa datos secuenciales y mantiene memoria de entradas anteriores, utilizada en traducción de texto y series temporales."
    },
    {
        "input": "¿Qué diferencias hay entre HDMI y VGA?",
        "output": "HDMI transmite video y audio digital, mientras que VGA solo transmite video analógico y es menos eficiente para resoluciones altas."
    },
    {
        "input": "¿Cómo valido datos en una API de Flask?",
        "output": "Usa bibliotecas como `marshmallow` o valida manualmente los datos dentro de las funciones que manejan las rutas."
    },
    {
        "input": "¿Qué es una arquitectura cliente-servidor?",
        "output": "Es un modelo donde un cliente solicita servicios o datos a un servidor, que los proporciona según lo solicitado."
    },
    {
        "input": "¿Qué es un modelo preentrenado en aprendizaje profundo?",
        "output": "Es un modelo que ya ha sido entrenado en un conjunto de datos grande y puede ser ajustado para tareas específicas mediante fine-tuning."
    },
    {
        "input": "¿Cómo puedo visualizar datos en pandas?",
        "output": "Usa bibliotecas como Matplotlib o Seaborn. Ejemplo: `df['columna'].plot(kind='bar')` genera un gráfico de barras."
    },
    {
        "input": "¿Qué es la regularización en aprendizaje automático?",
        "output": "Es una técnica que agrega un término de penalización a la función de pérdida para evitar sobreajuste y mejorar la generalización del modelo."
    },
    {
        "input": "¿Qué es un modelo de regresión?",
        "output": "Es un modelo de aprendizaje automático que predice valores continuos basados en relaciones entre variables independientes y dependientes."
    },
    {
        "input": "¿Cómo puedo combinar varias tablas en SQL?",
        "output": "Usa comandos como `JOIN`. Ejemplo: `SELECT * FROM tabla1 INNER JOIN tabla2 ON tabla1.id = tabla2.id`."
    },
    {
        "input": "¿Qué diferencia hay entre overfitting y underfitting?",
        "output": "El overfitting ocurre cuando un modelo se adapta demasiado a los datos de entrenamiento, mientras que el underfitting no captura suficientemente los patrones de los datos."
    },
    {
        "input": "¿Cómo puedo probar una API creada con Flask?",
        "output": "Usa herramientas como Postman, Curl o bibliotecas de pruebas en Python como `requests` para enviar solicitudes a la API."
    },
    {
        "input": "¿Cómo elijo entre Flask y Django para mi proyecto?",
        "output": "Elige Flask para proyectos pequeños y flexibles, y Django para proyectos más grandes y estructurados que requieren muchas funcionalidades integradas."
    },
    {
        "input": "¿Qué es fine-tuning en aprendizaje profundo?",
        "output": "El fine-tuning ajusta un modelo preentrenado para realizar una tarea específica, utilizando un conjunto de datos más pequeño y específico."
    },
    {
        "input": "¿Cómo funciona un `JOIN` en SQL?",
        "output": "`JOIN` combina filas de dos o más tablas basándose en una condición común, como claves primarias y foráneas."
    },
    {
        "input": "¿Qué tipos de regularización existen en aprendizaje automático?",
        "output": "Existen regularizaciones como L1 (Lasso), L2 (Ridge), y Elastic Net, que agregan penalizaciones diferentes a la función de pérdida."
    },
    {
        "input": "¿Qué es Matplotlib y cómo se usa?",
        "output": "Matplotlib es una biblioteca de Python para crear gráficos. Ejemplo: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3])`."
    },
    {
        "input": "¿Qué es un gráfico de barras y cuándo se usa?",
        "output": "Un gráfico de barras representa datos categóricos con barras rectangulares. Se usa para comparar diferentes categorías o grupos."
    },
    {
        "input": "¿Qué es el overfitting y cómo lo evito?",
        "output": "El overfitting ocurre cuando un modelo se ajusta demasiado a los datos de entrenamiento. Se puede evitar con regularización, validación cruzada o más datos."
    },
    {
        "input": "¿Cómo hago un gráfico en Seaborn?",
        "output": "Usa funciones como `sns.barplot()` para gráficos de barras o `sns.lineplot()` para gráficos de líneas. Ejemplo: `sns.barplot(x='col1', y='col2', data=df)`."
    },
    {
        "input": "¿Qué es un `LEFT JOIN` y en qué se diferencia de un `INNER JOIN`?",
        "output": "Un `LEFT JOIN` incluye todas las filas de la tabla izquierda y las coincidentes de la derecha, mientras que un `INNER JOIN` solo incluye filas con coincidencias en ambas tablas."
    },
    {
        "input": "¿Qué es un hiperparámetro en aprendizaje automático?",
        "output": "Es un parámetro que se configura antes del entrenamiento del modelo, como la tasa de aprendizaje o el número de árboles en un bosque aleatorio."
    },
    {
        "input": "¿Qué es Seaborn y por qué usarlo?",
        "output": "Seaborn es una biblioteca de Python para visualización de datos que facilita la creación de gráficos estadísticos atractivos y fáciles de entender."
    },
    {
        "input": "¿Cómo comparo dos modelos de aprendizaje automático?",
        "output": "Usa métricas de evaluación como precisión, F1-score o AUC-ROC, y compara sus resultados en un conjunto de prueba."
    },
    {
        "input": "¿Cómo hago validación cruzada en scikit-learn?",
        "output": "Usa `cross_val_score()` para dividir los datos en múltiples subconjuntos y evaluar el modelo en cada uno. Ejemplo: `cross_val_score(modelo, X, y, cv=5)`."
    },
    {
        "input": "¿Qué diferencia hay entre L1 y L2 en regularización?",
        "output": "L1 agrega una penalización basada en el valor absoluto de los coeficientes, favoreciendo la sparsidad. L2 penaliza el cuadrado de los coeficientes, reduciendo magnitudes grandes."
    },
    {
        "input": "¿Qué es Elastic Net en aprendizaje automático?",
        "output": "Elastic Net combina las regularizaciones L1 y L2, equilibrando la sparsidad y la reducción de coeficientes grandes."
    },
    {
        "input": "¿Cómo hago un gráfico de dispersión con Matplotlib?",
        "output": "Usa `plt.scatter(x, y)` para crear un gráfico de dispersión. Ejemplo: `plt.scatter([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "¿Cómo entreno un modelo de regresión lineal en scikit-learn?",
        "output": "Importa `LinearRegression`, ajusta el modelo con `fit()` y realiza predicciones con `predict()`. Ejemplo: `modelo = LinearRegression(); modelo.fit(X, y)`."
    },
    {
        "input": "¿Qué es AUC-ROC y cómo se interpreta?",
        "output": "AUC-ROC mide la capacidad de un modelo para diferenciar entre clases. Un valor cercano a 1 indica un buen rendimiento."
    },
    {
        "input": "¿Qué es una métrica de evaluación en aprendizaje automático?",
        "output": "Es una medida para evaluar el rendimiento de un modelo, como precisión, recall, F1-score o error cuadrático medio."
    },
    {
        "input": "¿Qué es validación cruzada y por qué se usa?",
        "output": "La validación cruzada divide los datos en subconjuntos para entrenar y validar el modelo en diferentes combinaciones, reduciendo el riesgo de overfitting."
    },
    {
        "input": "¿Cómo integro Seaborn con pandas?",
        "output": "Puedes usar un DataFrame directamente como entrada en los gráficos de Seaborn. Ejemplo: `sns.barplot(x='col1', y='col2', data=df)`."
    },
    {
        "input": "¿Qué es una regresión logística?",
        "output": "Es un modelo de aprendizaje automático que predice probabilidades para variables categóricas binarias o multinomiales."
    },
    {
        "input": "¿Cómo optimizo el rendimiento de un modelo de clasificación?",
        "output": "Ajusta hiperparámetros, usa técnicas de regularización y aplica validación cruzada para mejorar la generalización del modelo."
    },
    {
        "input": "¿Qué diferencia hay entre precision y recall?",
        "output": "Precision mide la proporción de predicciones positivas correctas, mientras que recall mide la proporción de verdaderos positivos detectados."
    },
    {
        "input": "¿Cómo puedo interpretar un gráfico de calor en Seaborn?",
        "output": "Un gráfico de calor muestra datos tabulares con colores que representan valores. Es útil para identificar patrones y relaciones entre variables."
    },
    {
        "input": "¿Qué es un gráfico de caja y bigotes?",
        "output": "Es un gráfico que muestra la distribución de datos, destacando los cuartiles y valores atípicos. Se usa para análisis exploratorio."
    },
    {
        "input": "¿Qué pasos debo seguir para crear un modelo de clasificación?",
        "output": "Recopila datos, preprocésalos, divide los datos en entrenamiento y prueba, ajusta un modelo, evalúalo y ajusta los hiperparámetros si es necesario."
    },
    {
        "input": "¿Qué significa sparsidad en aprendizaje automático?",
        "output": "La sparsidad se refiere a matrices o modelos con muchos valores cero, lo que puede mejorar la eficiencia computacional."
    },
    {
        "input": "¿Cómo creo un gráfico de líneas con Matplotlib?",
        "output": "Usa `plt.plot(x, y)` para crear un gráfico de líneas. Ejemplo: `plt.plot([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "¿Qué es una matriz de confusión y cómo se usa?",
        "output": "Es una tabla que muestra el rendimiento de un modelo de clasificación al comparar predicciones con valores reales en todas las clases."
    },
    {
        "input": "¿Cómo ajusto hiperparámetros en scikit-learn?",
        "output": "Usa `GridSearchCV` o `RandomizedSearchCV` para buscar los mejores hiperparámetros basados en métricas de validación."
    }, 
    {
        "input": "¿Cómo interpreto una matriz de confusión?",
        "output": "En una matriz de confusión, los valores diagonales indican predicciones correctas, mientras que los valores fuera de la diagonal son errores de clasificación."
    },
    {
        "input": "¿Qué diferencia hay entre GridSearchCV y RandomizedSearchCV?",
        "output": "GridSearchCV prueba todas las combinaciones de hiperparámetros, mientras que RandomizedSearchCV selecciona un subconjunto aleatorio para una búsqueda más rápida."
    },
    {
        "input": "¿Qué es un gráfico de calor y cómo lo creo con Seaborn?",
        "output": "Un gráfico de calor representa datos tabulares con colores. En Seaborn, usa `sns.heatmap(datos)` para crear uno."
    },
    {
        "input": "¿Cómo identifico valores atípicos en un gráfico de caja y bigotes?",
        "output": "Los valores fuera de los extremos del bigote (líneas horizontales) son considerados atípicos en un gráfico de caja y bigotes."
    },
    {
        "input": "¿Qué pasos debo seguir para evitar overfitting en un modelo?",
        "output": "Usa regularización, aumenta el conjunto de datos, aplica validación cruzada y reduce la complejidad del modelo."
    },
    {
        "input": "¿Qué métricas puedo usar para evaluar un modelo de regresión?",
        "output": "Puedes usar el error cuadrático medio (MSE), error absoluto medio (MAE) y coeficiente de determinación (R²)."
    },
    {
        "input": "¿Cómo puedo mejorar el recall de mi modelo?",
        "output": "Ajusta el umbral de clasificación, recopila más datos positivos o modifica el modelo para priorizar los falsos negativos."
    },
    {
        "input": "¿Qué es un gráfico de dispersión y para qué sirve?",
        "output": "Un gráfico de dispersión muestra la relación entre dos variables continuas, útil para identificar patrones y correlaciones."
    },
    {
        "input": "¿Qué ventajas tiene usar regularización L1 sobre L2?",
        "output": "L1 fomenta la sparsidad, eliminando características irrelevantes al asignar coeficientes exactos de 0, lo que mejora la interpretabilidad del modelo."
    },
    {
        "input": "¿Cómo interpreto un gráfico de líneas?",
        "output": "Un gráfico de líneas muestra cómo una variable cambia con respecto a otra. Es útil para observar tendencias en datos secuenciales."
    },
    {
        "input": "¿Qué es un cuartil en un gráfico de caja y bigotes?",
        "output": "Un cuartil divide un conjunto de datos en cuatro partes iguales. Los gráficos de caja y bigotes muestran el primer, segundo y tercer cuartil."
    },
    {
        "input": "¿Cómo comparo precisión y recall para evaluar un modelo?",
        "output": "La precisión es útil cuando los falsos positivos son críticos, mientras que el recall es más importante cuando los falsos negativos son costosos."
    },
    {
        "input": "¿Qué es un error cuadrático medio (MSE) y cómo se calcula?",
        "output": "MSE mide el promedio de los cuadrados de las diferencias entre valores predichos y reales. Se calcula como `mean((y_pred - y_true)^2)`."
    },
    {
        "input": "¿Qué diferencia hay entre regresión lineal y logística?",
        "output": "La regresión lineal predice valores continuos, mientras que la logística predice probabilidades de categorías discretas."
    },
    {
        "input": "¿Qué es el coeficiente de determinación R²?",
        "output": "R² mide qué tan bien un modelo explica la variabilidad de los datos. Un valor cercano a 1 indica un buen ajuste."
    },
    {
        "input": "¿Qué son los falsos positivos y falsos negativos?",
        "output": "Los falsos positivos ocurren cuando un modelo predice positivo incorrectamente, y los falsos negativos cuando falla al detectar un positivo real."
    },
    {
        "input": "¿Cómo ajusto el umbral de clasificación en un modelo?",
        "output": "Puedes ajustar el umbral cambiando el valor predeterminado para decidir entre clases, por ejemplo, usando `model.decision_function()` o `model.predict_proba()`."
    },
    {
        "input": "¿Qué significa sparsidad en un modelo regularizado?",
        "output": "Significa que muchos coeficientes del modelo son cero, lo que reduce la complejidad y mejora la interpretabilidad."
    },
    {
        "input": "¿Qué diferencia hay entre precisión y F1-score?",
        "output": "La precisión mide la proporción de predicciones correctas, mientras que el F1-score equilibra precisión y recall en un solo valor."
    },
    {
        "input": "¿Cómo evalúo un modelo usando una matriz de confusión?",
        "output": "Calcula métricas como precisión, recall y F1-score a partir de los valores de verdaderos positivos, falsos positivos, verdaderos negativos y falsos negativos."
    },
    {
        "input": "¿Qué es validación cruzada estratificada?",
        "output": "Es un tipo de validación cruzada que mantiene la proporción de clases en cada pliegue, útil para conjuntos de datos desbalanceados."
    },
    {
        "input": "¿Cómo puedo interpretar un gráfico de calor?",
        "output": "Observa las intensidades de los colores para identificar patrones y relaciones entre variables en una matriz de datos."
    },
    {
        "input": "¿Cómo optimizo un modelo de regresión lineal?",
        "output": "Usa regularización, elimina características irrelevantes y ajusta hiperparámetros como la tasa de aprendizaje en el optimizador."
    },
    {
        "input": "¿Qué es un gráfico de dispersión con Seaborn?",
        "output": "Es un gráfico que muestra la relación entre dos variables. Usa `sns.scatterplot(x='var1', y='var2', data=df)` para crearlo."
    },
    {
        "input": "¿Cómo determino la importancia de las características en un modelo?",
        "output": "Examina los coeficientes del modelo (en regresión lineal) o usa métodos como `feature_importances_` en árboles de decisión."
    },
    {
        "input": "¿Qué es un outlier y cómo lo identifico?",
        "output": "Un outlier es un valor atípico que se desvía significativamente del resto de los datos. Puedes usar gráficos de caja y bigotes para detectarlos."
    },
    {
        "input": "¿Qué es un gráfico de residuales?",
        "output": "Es un gráfico que muestra las diferencias entre valores predichos y reales, útil para diagnosticar problemas en modelos de regresión."
    },
    {
        "input": "¿Cómo puedo calcular el MAE en Python?",
        "output": "Usa `mean_absolute_error` de scikit-learn. Ejemplo: `from sklearn.metrics import mean_absolute_error; mae = mean_absolute_error(y_true, y_pred)`."
    },
    {
        "input": "¿Qué es un pipeline en aprendizaje automático?",
        "output": "Un pipeline organiza pasos secuenciales como preprocesamiento y entrenamiento, asegurando que las transformaciones se apliquen consistentemente."
    },
    {
        "input": "¿Cómo hago un gráfico de barras apiladas con Seaborn?",
        "output": "Usa `sns.barplot()` y organiza los datos de manera que las categorías estén apiladas en cada barra. Usa colores para diferenciarlas."
    },
    {
        "input": "¿Qué es una curva ROC?",
        "output": "Es un gráfico que muestra la relación entre la tasa de verdaderos positivos y falsos positivos a diferentes umbrales de clasificación."
    },
    {
        "input": "¿Cuáles son los principales volcanes de Guatemala?",
        "output": "Algunos de los principales volcanes de Guatemala son el Volcán de Fuego, el Volcán Acatenango, el Volcán Pacaya y el Volcán Tajumulco."
    },
    {
        "input": "¿Qué tradiciones destacan en Xela?",
        "output": "En Xela destacan tradiciones como la Feria de Independencia, el Día de los Muertos con fiambre y visitas al Cementerio General."
    },
    {
        "input": "¿Qué impacto tiene la tecnología en Guatemala?",
        "output": "La tecnología está impulsando el comercio electrónico, la educación a distancia y el desarrollo de startups en Guatemala."
    },
    {
        "input": "¿Cómo puedo aprender a programar videojuegos?",
        "output": "Puedes comenzar con lenguajes como Python o C#, usando motores como Unity o Godot, y practicando con proyectos pequeños."
    },
    {
        "input": "¿Qué es un sistema operativo y para qué sirve?",
        "output": "Un sistema operativo gestiona el hardware y software de una computadora, permitiendo la interacción entre el usuario y los programas."
    },
    {
        "input": "¿Qué adaptadores necesito para conectar mi laptop a un proyector antiguo?",
        "output": "Necesitarás adaptadores como USB-C a VGA o HDMI a VGA, dependiendo de las salidas disponibles en tu laptop."
    },
    {
        "input": "¿Qué lugares turísticos puedo visitar en Xela?",
        "output": "Puedes visitar las Fuentes Georginas, el Cerro El Baúl, el Parque Central y la Catedral del Espíritu Santo."
    },
    {
        "input": "¿Cómo ha avanzado la industria de videojuegos en los últimos años?",
        "output": "La industria ha evolucionado con tecnologías como ray tracing, realidad virtual, inteligencia artificial y juegos basados en la nube."
    },
    {
        "input": "¿Qué elementos son esenciales en un sistema de cómputo?",
        "output": "Elementos esenciales incluyen CPU, memoria RAM, almacenamiento (HDD/SSD), placa base, fuente de poder y dispositivos de entrada/salida."
    },
    {
        "input": "¿Qué ventajas tiene un adaptador USB-C frente a HDMI?",
        "output": "USB-C soporta video, datos y carga en un solo puerto, mientras que HDMI solo transmite audio y video."
    },
    {
        "input": "¿Qué lenguajes de programación son populares para sistemas?",
        "output": "Python, Java, C++, y C# son populares para sistemas por su versatilidad y amplio soporte en diferentes plataformas."
    },
    {
        "input": "¿Qué tecnología usan los videojuegos modernos para gráficos realistas?",
        "output": "Usan técnicas como ray tracing, sombreado avanzado y motores gráficos como Unreal Engine y Unity."
    },
    {
        "input": "¿Qué tradiciones culturales son únicas en Guatemala?",
        "output": "Guatemala es conocida por tradiciones como las alfombras de Semana Santa, el fiambre para el Día de los Muertos y la celebración de la Quema del Diablo."
    },
    {
        "input": "¿Qué tipos de adaptadores existen para laptops modernas?",
        "output": "Existen adaptadores USB-C a HDMI, USB-C a VGA, USB-A a USB-C, y Ethernet a USB, entre otros."
    },
    {
        "input": "¿Qué significa que un videojuego sea multiplataforma?",
        "output": "Significa que está diseñado para ejecutarse en diferentes sistemas operativos o consolas, como PC, PlayStation y Xbox."
    },
    {
        "input": "¿Cómo puedo optimizar el rendimiento de mi computadora para videojuegos?",
        "output": "Actualiza los controladores, ajusta las configuraciones gráficas del juego, y asegúrate de tener suficiente memoria RAM y espacio en disco."
    },
    {
        "input": "¿Qué importancia tiene Xela en la educación de Guatemala?",
        "output": "Xela es un importante centro educativo, con universidades como la USAC y centros de formación técnica que impulsan el desarrollo académico en la región."
    },
    {
        "input": "¿Qué es un servidor en un sistema de cómputo?",
        "output": "Un servidor es una computadora que proporciona servicios a otras computadoras o dispositivos, como almacenamiento, datos o aplicaciones."
    },
    {
        "input": "¿Qué aplicaciones tienen los sistemas distribuidos?",
        "output": "Se usan en redes sociales, sistemas bancarios, plataformas de streaming, y servicios en la nube como Google Drive o Dropbox."
    },
    {
        "input": "¿Qué es la realidad virtual en videojuegos?",
        "output": "Es una tecnología que permite al jugador sumergirse en un entorno virtual interactivo usando dispositivos como gafas VR y controladores de movimiento."
    },
    {
        "input": "¿Cómo se utilizan los adaptadores en la industria tecnológica?",
        "output": "Los adaptadores conectan dispositivos con puertos incompatibles, facilitando la integración de tecnologías antiguas y modernas."
    },
    {
        "input": "¿Qué recursos tecnológicos se usan en educación en Guatemala?",
        "output": "Recursos como plataformas de aprendizaje en línea, dispositivos móviles, y aplicaciones interactivas son cada vez más comunes en la educación guatemalteca."
    },
    {
        "input": "¿Qué componentes necesita una computadora para diseño gráfico?",
        "output": "Necesitas una GPU potente, procesador de alta gama, 16 GB de RAM o más, almacenamiento SSD y un monitor con buena resolución."
    },
    {
        "input": "¿Cómo se relaciona la inteligencia artificial con los videojuegos?",
        "output": "La inteligencia artificial se usa para crear NPCs más realistas, ajustar dinámicamente la dificultad y generar entornos y diálogos interactivos."
    },
    {
        "input": "¿Qué servicios tecnológicos están creciendo en Xela?",
        "output": "Servicios como coworking, desarrollo de software, talleres de programación y educación en línea están ganando popularidad en Xela."
    },
    {
        "input": "¿Qué es un sistema de gestión de bases de datos?",
        "output": "Es un software que permite almacenar, organizar y gestionar datos, como MySQL, PostgreSQL o MongoDB."
    },
    {
        "input": "¿Qué avances tecnológicos destacan en Guatemala?",
        "output": "Destacan el crecimiento de startups tecnológicas, el desarrollo de plataformas educativas en línea y el aumento del acceso a internet."
    },
    {
        "input": "¿Qué tecnologías facilitan el trabajo remoto?",
        "output": "Herramientas como Zoom, Google Workspace, Slack y plataformas de colaboración como Notion y Trello son clave para el trabajo remoto."
    },
    {
        "input": "¿Cómo se desarrollan videojuegos para dispositivos móviles?",
        "output": "Se utilizan motores como Unity o Unreal Engine, con herramientas específicas para optimizar gráficos y rendimiento en dispositivos móviles."
    },
    {
        "input": "¿Qué beneficios tiene la nube para sistemas empresariales?",
        "output": "La nube ofrece escalabilidad, reducción de costos, accesibilidad global y servicios como almacenamiento, bases de datos y análisis de datos."
    },
    {
        "input": "¿Qué otros volcanes puedo visitar en Guatemala además del Tajumulco?",
        "output": "Además del Tajumulco, puedes visitar el Volcán de Fuego, el Volcán Acatenango, el Volcán Pacaya y el Volcán Atitlán."
    },
    {
        "input": "¿Cómo afectan las startups tecnológicas al desarrollo en Guatemala?",
        "output": "Las startups impulsan la innovación, crean empleos y mejoran el acceso a tecnologías modernas en sectores como educación, salud y comercio."
    },
    {
        "input": "¿Qué herramientas puedo usar para crear un videojuego móvil?",
        "output": "Motores como Unity, Unreal Engine y Construct 3 son excelentes opciones para desarrollar videojuegos móviles."
    },
    {
        "input": "¿Cómo influye la realidad virtual en la educación?",
        "output": "La realidad virtual permite experiencias inmersivas, como simulaciones de laboratorio, visitas virtuales a lugares históricos y aprendizaje interactivo."
    },
    {
        "input": "¿Qué diferencia hay entre un servidor físico y uno en la nube?",
        "output": "Un servidor físico está ubicado en instalaciones propias, mientras que uno en la nube es gestionado por un proveedor externo y es accesible desde cualquier lugar."
    },
    {
        "input": "¿Qué plataformas de aprendizaje en línea son populares en Guatemala?",
        "output": "Plataformas como Duolingo, Khan Academy, Platzi y Coursera son populares para el aprendizaje en línea en Guatemala."
    },
    {
        "input": "¿Cómo elijo un buen monitor para diseño gráfico?",
        "output": "Busca un monitor con resolución alta (al menos 4K), amplia gama de colores (AdobeRGB o sRGB) y precisión de color calibrada."
    },
    {
        "input": "¿Qué juegos utilizan inteligencia artificial avanzada?",
        "output": "Juegos como The Last of Us, Red Dead Redemption 2 y Shadow of Mordor destacan por su inteligencia artificial avanzada en NPCs y entornos."
    },
    {
        "input": "¿Qué diferencia hay entre Zoom y Google Meet?",
        "output": "Zoom ofrece funciones avanzadas para reuniones masivas, mientras que Google Meet está integrado con herramientas de Google Workspace, ideal para colaboración."
    },
    {
        "input": "¿Qué tipo de coworking existe en Xela?",
        "output": "En Xela hay espacios de coworking que ofrecen internet de alta velocidad, áreas de trabajo compartidas y eventos de networking para emprendedores."
    },
    {
        "input": "¿Qué ventajas tiene MongoDB frente a MySQL?",
        "output": "MongoDB es una base de datos no relacional que ofrece mayor flexibilidad para datos no estructurados, mientras que MySQL es relacional y sigue esquemas estrictos."
    },
    {
        "input": "¿Qué eventos tecnológicos suelen realizarse en Guatemala?",
        "output": "Hackatones, ferias tecnológicas y talleres de programación son eventos comunes en Guatemala para fomentar el desarrollo tecnológico."
    },
    {
        "input": "¿Cómo optimizo el rendimiento de un videojuego en mi PC?",
        "output": "Cierra aplicaciones en segundo plano, ajusta las configuraciones gráficas del juego y asegúrate de tener los controladores actualizados."
    },
    {
        "input": "¿Qué es un sistema de cómputo distribuido?",
        "output": "Es un sistema donde múltiples computadoras trabajan juntas para realizar tareas como si fueran una única unidad."
    },
    {
        "input": "¿Qué adaptador necesito para conectar un MacBook a un monitor HDMI?",
        "output": "Necesitas un adaptador USB-C a HDMI compatible con tu MacBook."
    },
    {
        "input": "¿Qué es un motor de videojuegos y cuáles son ejemplos?",
        "output": "Un motor de videojuegos es un software para crear juegos. Ejemplos: Unity, Unreal Engine, y Godot."
    },
    {
        "input": "¿Qué tradiciones tecnológicas se han desarrollado en Guatemala?",
        "output": "En Guatemala se desarrollan hackatones y capacitaciones tecnológicas como parte de iniciativas para fomentar la innovación local."
    },
    {
        "input": "¿Qué factores considerar al elegir una base de datos para un sistema?",
        "output": "Considera el tipo de datos, la escalabilidad, la velocidad de consulta y el soporte para datos estructurados o no estructurados."
    },
    {
        "input": "¿Cómo la nube está transformando los negocios en Guatemala?",
        "output": "La nube permite a las empresas en Guatemala acceder a herramientas avanzadas como CRM, análisis de datos y almacenamiento flexible sin grandes inversiones iniciales."
    },
    {
        "input": "¿Qué significa ray tracing en videojuegos?",
        "output": "Es una técnica de renderizado que simula el comportamiento realista de la luz para mejorar la calidad visual en los videojuegos."
    },
    {
        "input": "¿Cómo se aplica la tecnología en sistemas educativos en Xela?",
        "output": "Se utiliza para clases virtuales, plataformas de gestión educativa y talleres de programación para estudiantes."
    },
    {
        "input": "¿Qué es un adaptador Ethernet y cuándo lo necesito?",
        "output": "Un adaptador Ethernet permite conectar tu dispositivo a internet por cable, ideal cuando no hay Wi-Fi disponible o se necesita una conexión más estable."
    },
    {
        "input": "¿Qué especificaciones debe tener una computadora para videojuegos?",
        "output": "Debe tener una tarjeta gráfica potente, un procesador rápido, al menos 16 GB de RAM y almacenamiento SSD."
    },
    {
        "input": "¿Qué motores gráficos usan los videojuegos más populares?",
        "output": "Motores como Unreal Engine, Unity y CryEngine son usados en videojuegos populares por su potencia y flexibilidad."
    },
    {
        "input": "¿Qué tecnologías son clave para el desarrollo de startups tecnológicas?",
        "output": "Tecnologías como la nube, inteligencia artificial, análisis de datos y desarrollo de aplicaciones móviles son clave para startups tecnológicas."
    },
    {
        "input": "¿Qué impacto tienen las ferias tecnológicas en Guatemala?",
        "output": "Promueven la innovación, conectan a emprendedores con inversores y fomentan el aprendizaje de nuevas tecnologías."
    },
    {
        "input": "¿Cómo funciona un coworking y cuáles son sus beneficios?",
        "output": "Es un espacio compartido de trabajo con recursos como internet rápido y salas de reuniones, ideal para networking y productividad."
    },
    {
        "input": "¿Qué herramientas puedo usar para aprender programación en línea?",
        "output": "Plataformas como Codecademy, freeCodeCamp y Khan Academy son excelentes para aprender programación desde cero."
    },
    {
        "input": "¿Cómo se mide la calidad gráfica de un videojuego?",
        "output": "Se mide por factores como resolución, iluminación, texturas, sombreado y efectos especiales como ray tracing."
    },
    {
        "input": "¿Qué diferencia hay entre un coworking y una oficina tradicional?",
        "output": "Un coworking es un espacio compartido con recursos comunes, mientras que una oficina tradicional suele ser privada y dedicada a una sola empresa."
    },
    {
        "input": "¿Qué motores gráficos son mejores para principiantes?",
        "output": "Motores como Unity y Godot son ideales para principiantes debido a su facilidad de uso y extensa documentación."
    },
    {
        "input": "¿Qué impacto tienen los hackatones en la comunidad tecnológica?",
        "output": "Los hackatones fomentan la innovación, permiten resolver problemas en equipo y ayudan a los participantes a aprender nuevas habilidades tecnológicas."
    },
    {
        "input": "¿Qué ventajas tiene una base de datos no relacional como MongoDB?",
        "output": "MongoDB es flexible, almacena datos en formato JSON y maneja fácilmente estructuras dinámicas o no estructuradas."
    },
    {
        "input": "¿Qué significa que un videojuego tenga resolución 4K?",
        "output": "Significa que el videojuego tiene una resolución de 3840x2160 píxeles, ofreciendo gráficos más detallados y nítidos."
    },
    {
        "input": "¿Qué tecnologías son necesarias para desarrollar aplicaciones móviles?",
        "output": "Tecnologías como Swift para iOS, Kotlin para Android, o frameworks multiplataforma como Flutter o React Native son ideales."
    },
    {
        "input": "¿Qué factores afectan la calidad de conexión en un adaptador Ethernet?",
        "output": "Factores como la velocidad del adaptador, la calidad del cable, y la capacidad del router afectan la calidad de la conexión."
    },
    {
        "input": "¿Cómo puedo mejorar mi experiencia de trabajo en un coworking?",
        "output": "Mantén una rutina, usa los recursos disponibles, participa en eventos de networking y organiza tu espacio de trabajo."
    },
    {
        "input": "¿Qué especificaciones necesita un monitor para videojuegos?",
        "output": "Un monitor para videojuegos debe tener alta frecuencia de actualización (144 Hz o más), baja latencia y compatibilidad con G-Sync o FreeSync."
    },
    {
        "input": "¿Cómo elegir el mejor motor gráfico para mi proyecto?",
        "output": "Considera la complejidad del proyecto, tu nivel de experiencia y las plataformas de destino. Unity es ideal para principiantes y multiplataforma."
    },
    {
        "input": "¿Qué es un hackatón y cómo puedo participar?",
        "output": "Un hackatón es un evento donde programadores trabajan en equipo para resolver problemas. Puedes participar registrándote en eventos locales o en línea."
    },
    {
        "input": "¿Qué diferencia hay entre Flutter y React Native?",
        "output": "Flutter usa Dart y proporciona widgets propios, mientras que React Native usa JavaScript y permite usar componentes nativos del sistema operativo."
    },
    {
        "input": "¿Cómo conecto múltiples pantallas a mi laptop?",
        "output": "Usa los puertos disponibles como HDMI o USB-C, y si es necesario, adaptadores para conectar pantallas adicionales."
    },
    {
        "input": "¿Qué habilidades se necesitan para participar en un hackatón?",
        "output": "Habilidades como programación, diseño UX/UI, resolución de problemas y trabajo en equipo son esenciales para participar en un hackatón."
    },
    {
        "input": "¿Qué diferencia hay entre una startup y una empresa tradicional?",
        "output": "Una startup es una empresa joven enfocada en innovación y crecimiento rápido, mientras que una empresa tradicional suele tener estructuras más establecidas."
    },
    {
        "input": "¿Qué importancia tienen las ferias tecnológicas en la innovación?",
        "output": "Las ferias tecnológicas permiten presentar nuevas ideas, conectar a emprendedores con inversores y fomentar colaboraciones en proyectos innovadores."
    },
    {
        "input": "¿Qué factores considerar al comprar una computadora para diseño gráfico?",
        "output": "Considera la potencia del procesador, la calidad de la tarjeta gráfica, la cantidad de RAM (al menos 16 GB) y la resolución de la pantalla."
    },
    {
        "input": "¿Qué aplicaciones tiene el ray tracing más allá de los videojuegos?",
        "output": "El ray tracing se usa en simulaciones arquitectónicas, efectos visuales en películas y diseño de productos para representar iluminación realista."
    },
    {
        "input": "¿Qué herramientas de colaboración son populares en coworking?",
        "output": "Herramientas como Slack, Trello, Google Workspace y Notion son comunes para la colaboración en entornos de coworking."
    },
    {
        "input": "¿Qué ventajas tiene el trabajo remoto para empresas tecnológicas?",
        "output": "El trabajo remoto reduce costos operativos, permite contratar talento global y mejora la flexibilidad para los empleados."
    },
    {
        "input": "¿Qué tecnología es clave para las startups en Guatemala?",
        "output": "Tecnologías como plataformas en la nube, inteligencia artificial y desarrollo de aplicaciones móviles son clave para startups en Guatemala."
    },
    {
        "input": "¿Cómo optimizo el almacenamiento de mi computadora para videojuegos?",
        "output": "Usa un SSD para cargar juegos más rápido, desinstala juegos que no uses y organiza los archivos en carpetas específicas."
    },
    {
        "input": "¿Qué diferencias hay entre coworking y home office?",
        "output": "El coworking ofrece un entorno colaborativo y profesional, mientras que el home office brinda comodidad pero puede ser más solitario."
    },
    {
        "input": "¿Qué impacto tiene el ray tracing en el rendimiento de un videojuego?",
        "output": "El ray tracing puede disminuir el rendimiento debido a su alta demanda de recursos, pero tarjetas gráficas modernas mitigan este impacto."
    },
    {
        "input": "¿Qué plataformas en línea enseñan sobre desarrollo de videojuegos?",
        "output": "Plataformas como Unity Learn, Udemy y Coursera ofrecen cursos detallados sobre desarrollo de videojuegos."
    },
    {
        "input": "¿Qué eventos tecnológicos destacan en Xela?",
        "output": "Hackatones, talleres de programación y eventos de networking para emprendedores tecnológicos destacan en Xela."
    },
    {
        "input": "¿Qué factores afectan la calidad gráfica de un videojuego?",
        "output": "Factores como resolución, texturas, iluminación, sombreado y efectos especiales afectan la calidad gráfica de un videojuego."
    },
    {
        "input": "¿Cómo elijo una laptop para desarrollo de software?",
        "output": "Busca una laptop con buen procesador (i5 o superior), al menos 16 GB de RAM, SSD y batería de larga duración."
    },
    {
        "input": "¿Qué impacto tiene el coworking en la productividad?",
        "output": "El coworking fomenta la colaboración, ofrece un entorno profesional y reduce las distracciones del hogar, mejorando la productividad."
    },
    {
        "input": "¿Qué tradiciones guatemaltecas son más reconocidas internacionalmente?",
        "output": "Las alfombras de Semana Santa, el fiambre para el Día de los Muertos y las danzas tradicionales como la del Rabinal Achí son ampliamente reconocidas."
    },
    {
        "input": "¿Qué idiomas se hablan en Guatemala además del español?",
        "output": "En Guatemala se hablan 22 idiomas mayas, además del español. Algunos ejemplos son K'iche', Q'eqchi' y Mam."
    },
    {
        "input": "¿Cuáles son los destinos arqueológicos más importantes de Guatemala?",
        "output": "Tikal, El Mirador y Yaxhá son algunos de los destinos arqueológicos más importantes de Guatemala."
    },
    {
        "input": "¿Qué impacto tiene el turismo en Guatemala?",
        "output": "El turismo es una fuente clave de ingresos, fomentando el desarrollo económico y promoviendo la cultura guatemalteca a nivel internacional."
    },
    {
        "input": "¿Qué platos típicos destacan en la gastronomía de Guatemala?",
        "output": "Platos como el pepián, los tamales, el kak'ik y el jocón son algunos de los más representativos de la gastronomía guatemalteca."
    },
    {
        "input": "¿Qué universidades destacan en Xela?",
        "output": "La Universidad de San Carlos de Guatemala (USAC) y la Universidad Mariano Gálvez son algunas de las principales instituciones educativas en Xela."
    },
    {
        "input": "¿Qué festividades se celebran en Xela?",
        "output": "La Feria de Independencia, celebrada en septiembre, es una de las festividades más importantes de Xela."
    },
    {
        "input": "¿Qué atractivos naturales hay cerca de Xela?",
        "output": "Atractivos como las Fuentes Georginas, el Volcán Santa María y el Cerro El Baúl están cerca de Xela."
    },
    {
        "input": "¿Cómo es el clima en Xela?",
        "output": "Xela tiene un clima templado, con temperaturas frescas durante todo el año y una temporada de lluvias de mayo a octubre."
    },
    {
        "input": "¿Qué importancia tiene Xela en la historia de Guatemala?",
        "output": "Xela, o Quetzaltenango, fue una ciudad clave durante la época colonial y es conocida por su papel en la independencia de Centroamérica."
    },
    {
        "input": "¿Qué avances tecnológicos se están impulsando en Guatemala?",
        "output": "Se están desarrollando startups en fintech, plataformas educativas en línea y soluciones tecnológicas para comercio electrónico."
    },
    {
        "input": "¿Qué oportunidades ofrece la tecnología en el sector educativo?",
        "output": "La tecnología facilita el aprendizaje en línea, el acceso a materiales educativos y la formación en habilidades digitales."
    },
    {
        "input": "¿Cómo afecta la inteligencia artificial a la tecnología moderna?",
        "output": "La inteligencia artificial mejora la automatización, permite el análisis avanzado de datos y facilita la personalización de servicios."
    },
    {
        "input": "¿Qué desafíos enfrenta Guatemala en su desarrollo tecnológico?",
        "output": "Desafíos como la falta de acceso a internet en áreas rurales y la desigualdad en la educación tecnológica limitan el avance tecnológico."
    },
    {
        "input": "¿Qué herramientas tecnológicas son clave para emprendedores?",
        "output": "Herramientas como Google Workspace, Slack, Trello y plataformas de comercio electrónico como Shopify son esenciales para emprendedores."
    },
    {
        "input": "¿Qué géneros de videojuegos son más populares?",
        "output": "Géneros como acción, aventura, RPG, shooters y simulación son muy populares entre los jugadores."
    },
    {
        "input": "¿Qué plataformas son ideales para desarrollar videojuegos?",
        "output": "Plataformas como Unity, Unreal Engine y Godot son ideales para desarrollar videojuegos debido a sus herramientas integradas."
    },
    {
        "input": "¿Qué papel juega la narrativa en los videojuegos?",
        "output": "La narrativa en los videojuegos mejora la inmersión del jugador y crea una conexión emocional con los personajes y la historia."
    },
    {
        "input": "¿Qué beneficios educativos tienen los videojuegos?",
        "output": "Los videojuegos pueden mejorar habilidades como la resolución de problemas, la memoria y el trabajo en equipo, y pueden usarse para enseñar conceptos complejos."
    },
    {
        "input": "¿Qué tecnologías emergentes están transformando los videojuegos?",
        "output": "Tecnologías como la realidad virtual, el ray tracing y la inteligencia artificial están transformando la experiencia de los videojuegos."
    },
    {
        "input": "¿Qué es un sistema embebido?",
        "output": "Un sistema embebido es un sistema computacional diseñado para realizar tareas específicas dentro de un dispositivo, como microcontroladores en electrodomésticos."
    },
    {
        "input": "¿Qué tipos de sistemas distribuidos existen?",
        "output": "Existen sistemas distribuidos como redes de almacenamiento, sistemas de computación distribuida y sistemas de archivos distribuidos."
    },
    {
        "input": "¿Qué es la arquitectura cliente-servidor?",
        "output": "Es un modelo donde los clientes envían solicitudes a un servidor, que las procesa y devuelve la información o servicio solicitado."
    },
    {
        "input": "¿Qué ventajas tiene la virtualización en sistemas empresariales?",
        "output": "La virtualización permite reducir costos de hardware, mejorar la escalabilidad y facilitar la recuperación ante desastres."
    },
    {
        "input": "¿Qué rol juega la ciberseguridad en los sistemas modernos?",
        "output": "La ciberseguridad protege los sistemas contra amenazas como malware, ataques de phishing y accesos no autorizados, garantizando la integridad de los datos."
    },
    {
        "input": "¿Qué características debo buscar en una computadora para edición de video?",
        "output": "Busca un procesador rápido, una GPU potente, al menos 16 GB de RAM y un SSD para almacenamiento rápido."
    },
    {
        "input": "¿Qué tipos de adaptadores de video son comunes?",
        "output": "Los adaptadores HDMI, DisplayPort, VGA y USB-C son los más comunes para conectar dispositivos a monitores o proyectores."
    },
    {
        "input": "¿Qué es un adaptador multipuerto y para qué sirve?",
        "output": "Es un dispositivo que permite conectar múltiples tipos de periféricos a un puerto, como USB-C a HDMI, Ethernet y USB-A simultáneamente."
    },
    {
        "input": "¿Cómo elegir un adaptador de corriente para mi laptop?",
        "output": "Asegúrate de que sea compatible con el voltaje y amperaje requeridos por tu laptop y, si es posible, compra uno del fabricante original."
    },
    {
        "input": "¿Qué diferencia hay entre HDMI y DisplayPort?",
        "output": "HDMI es más común en televisores y proyectores, mientras que DisplayPort se usa más en monitores para PCs debido a su mayor ancho de banda."
    },
    {
        "input": "Hello!",
        "output": "Hello how are you?"
    },
    {
        "input": "Good morning",
        "output": "Good morning! How can I help you today?"
    },
    {
        "input": "Hey! How are you?",
        "output": "Hey! I'm fine, thanks for asking. How about you?"
    },
    {
        "input": "How are you?",
        "output": "All good! How are you?"
    },
    {
        "input": "Good afternoon!",
        "output": "Good afternoon! How are you?"
    },
    {
        "input": "Good night!",
        "output": "Good evening! How can I help you today?"
    },
    {
        "input": "Hello how are you?",
        "output": "Hello! I'm fine, thanks. And you?"
    },
    {
        "input": "How's everything?",
        "output": "Everything is fine, thank you. How are you?"
    },
    {
        "input": "How are you?",
        "output": "I'm fine, thanks. And you?"
    },
    {
        "input": "What's up!",
        "output": "What's up! How are you?"
    },
    {
        "input": "Hello, nice to meet you!",
        "output": "The pleasure is mine! How are you doing?"
    },
    {
        "input": "How are you, everything okay?",
        "output": "Everything is great! How are you?"
    },
    {
        "input": "Hello, how are you?",
        "output": "Hello! Everything's fine, and you?"
    },
    {
        "input": "What's new?",
        "output": "All calm. And you, what's new?"
    },
    {
        "input": "Hello, how's everything going?",
        "output": "All good, thanks for asking. And you, how's everything going?"
    },
    {
        "input": "Hello, is everything okay?",
        "output": "Hello! Everything's fine. How are you?"
    },
    {
        "input": "Hello, how are you today?",
        "output": "Hello! I'm fine, and you? How are you feeling today?"
    },
    {
        "input": "What's happening!",
        "output": "What's up! How are you?"
    },
    {
        "input": "Greetings!",
        "output": "Greetings! How can I help you?"
    },
    {
        "input": "Hello, how are you?",
        "output": "Hello! Everything's fine, and how are you?"
    },
    {
        "input": "Hello, nice to see you!",
        "output": "The pleasure is mine! How are you doing?"
    },
    {
        "input": "How are you? How is everything?",
        "output": "Everything's fine, thank you. And you, how is everything?"
    },
    {
        "input": "Hello, is everything okay?",
        "output": "Hello! Yes, everything is fine. And you?"
    },
    {
        "input": "Hello, how are you doing today?",
        "output": "Hello! Everything is calm. How are you today?"
    },
    {
        "input": "How was your day?",
        "output": "My day is going well, thank you. How about yours?"
    },
    {
        "input": "Hello, how's life?",
        "output": "All good! How's life for you?"
    },
    {
        "input": "Hello! How did it go?",
        "output": "Hello! Everything went well, and you? How did it go?"
    },
    {
        "input": "Greetings, how are you?",
        "output": "Greetings! I'm fine, thanks. How are you?"
    },
    {
        "input": "Hello! How's everything going?",
        "output": "Hello! Everything is calm. And you, how are things going?"
    },
    {
        "input": "Hello! How is your day going?",
        "output": "Hello! Everything is calm. And yours?"
    },
    {
        "input": "How are you? Everything okay there?",
        "output": "All good! And how are things over there?"
    },
    {
        "input": "Hello, how are you?",
        "output": "Hello! I'm fine, and how are you?"
    },
    {
        "input": "Hello, nice to meet you today!",
        "output": "The pleasure is mine! How's everything going?"
    },
    {
        "input": "Hello! How is your day?",
        "output": "Hello! Everything is fine, thanks. And yours?"
    },
    {
        "input": "Hello, how are you doing here?",
        "output": "All calm! And how are things over there?"
    },
    {
        "input": "Hello! What's new?",
        "output": "Hello! Everything's okay, and what's new with you?"
    },
    {
        "input": "Hello, how are you feeling today?",
        "output": "Hello! I'm fine, and you?"
    },
    {
        "input": "Hello, nice to see you again!",
        "output": "The pleasure is mine! How are you doing?"
    },
    {
        "input": "Hi, how's everything going there?",
        "output": "Hello! Everything's calm, how are you doing over there?"
    },
    {
        "input": "Hello! How are you doing?",
        "output": "Hello! Everything is fine, and you?"
    },
    {
        "input": "What's up, how are you?",
        "output": "What's up! Everything's fine, and how are you?"
    },
    {
        "input": "Hello! How are you feeling today?",
        "output": "Hello! Everything is fine, and how are you today?"
    },
    {
        "input": "Hello! Is everything okay?",
        "output": "Yes, everything is fine! And you, is everything okay?"
    },
    {
        "input": "Hello, how are you today?",
        "output": "Hello! Everything is fine, and you?"
    },
    {
        "input": "Hello! Is everything okay with you?",
        "output": "Yes, everything is fine! And you, everything is fine?"
    },
    {
        "input": "Hello, how was your day?",
        "output": "Hello! It went well, thanks. And how have you been?"
    },
    {
        "input": "Greetings! Everything okay there?",
        "output": "Greetings! Yes, everything is fine. And over there?"
    },
    {
        "input": "See you later?",
        "output": "See you later! I hope you have a great day."
    },
    {
        "input": "See you soon",
        "output": "See you soon! Don't hesitate to come back if you need anything else."
    },
    {
        "input": "Bye",
        "output": "Goodbye! Take care of yourself."
    },
    {
        "input": "Thanks for your help",
        "output": "You're welcome! I'm glad I could help. See you next time!"
    },
    {
        "input": "Shall we talk later?",
        "output": "Sure, talk to you later! I'll be here when you need me."
    },
    {
        "input": "Bye",
        "output": "Bye! I hope you have a nice day."
    },
    {
        "input": "Until next time",
        "output": "Until next time! Don't hesitate to come back."
    },
    {
        "input": "Take care of yourself",
        "output": "Take care of yourself! See you soon."
    },
    {
        "input": "See you",
        "output": "See you! I'll be here if you need any more help."
    },
    {
        "input": "Thank God",
        "output": "Thank you! Goodbye and have a great day!"
    },
    {
        "input": "See you later",
        "output": "See you later! See you soon!"
    },
    {
        "input": "Well, I'm leaving",
        "output": "Have a nice day! See you later!"
    },
    {
        "input": "Can you say goodbye?",
        "output": "Sure! Bye and have a nice day!"
    },
    {
        "input": "It was a pleasure",
        "output": "The pleasure was mine! See you soon!"
    },
    {
        "input": "See you another time",
        "output": "See you soon! Take care of yourself."
    },
    {
        "input": "See you soon?",
        "output": "See you soon! Don't hesitate to come back if you need anything else."
    },
    {
        "input": "I'm leaving, thanks for everything",
        "output": "You're welcome! It was a pleasure helping you. See you next time!"
    },
    {
        "input": "Goodbye, take care",
        "output": "Goodbye and take care too! Until next time."
    },
    {
        "input": "Take a rest",
        "output": "Likewise! Have a great afternoon or evening."
    },
    {
        "input": "See you another day",
        "output": "See you another day! I'll be waiting for your return."
    },
    {
        "input": "Thank you for your time",
        "output": "You're welcome! It was a pleasure. See you soon!"
    },
    {
        "input": "I have to go",
        "output": "Got it! Take care and see you soon."
    },
    {
        "input": "Goodbye, have a nice day",
        "output": "Thank you! I wish you the same. See you later!"
    },
    {
        "input": "Well, I'm leaving.",
        "output": "Have a great day! See you soon."
    },
    {
        "input": "See you, thanks",
        "output": "See you soon! It's a pleasure to help you."
    },
    {
        "input": "Thank you very much",
        "output": "Thank you! See you soon!"
    },
    {
        "input": "It's time for me to go",
        "output": "It's okay! Take care of yourself. See you soon!"
    },
    {
        "input": "Thank you, be well",
        "output": "Thank you! I hope you are doing well too. See you next time!"
    },
    {
        "input": "See you later, friend",
        "output": "See you later, friend! See you soon."
    },
    {
        "input": "I'm leaving now, thanks for everything!",
        "output": "You're welcome! See you soon!"
    },
    {
        "input": "Have a nice rest",
        "output": "Thank you! Have a good rest anyway."
    },
    {
        "input": "I'm going to rest",
        "output": "Have a great evening! See you soon."
    },
    {
        "input": "Until the next meeting",
        "output": "Until next time! See you soon."
    },
    {
        "input": "I'll be back later",
        "output": "I'll wait for you! Come back whenever you want."
    },
    {
        "input": "See you, have a good rest",
        "output": "See you! Have a nice rest."
    },
    {
        "input": "Thank you for being here",
        "output": "Thank you for chatting with me! See you soon!"
    },
    {
        "input": "See you later, see you soon",
        "output": "See you later! I hope to see you soon."
    },
    {
        "input": "May everything go well for you",
        "output": "Thank you! I hope everything goes well for you too."
    },
    {
        "input": "See you around",
        "output": "See you later! Take care of yourself."
    },
    {
        "input": "See you soon, have a nice day",
        "output": "See you soon! Have a great day anyway!"
    },
    {
        "input": "Goodbye, good day",
        "output": "Goodbye! Have a fantastic day."
    },
    {
        "input": "See you tomorrow",
        "output": "See you tomorrow! Have a great day!"
    },
    {
        "input": "I have to go now",
        "output": "It's okay! Take care of yourself, see you soon."
    },
    {
        "input": "Bye, see you soon",
        "output": "Bye! See you soon."
    },
    {
        "input": "See you later, take care of yourself",
        "output": "Take care of yourself too! See you later."
    },
    {
        "input": "See you later, friend",
        "output": "See you later! Take care of yourself."
    },
    {
        "input": "See you another time",
        "output": "See you soon! It will be a pleasure to help you again."
    },
    {
        "input": "Well, I'm off.",
        "output": "Have a great day! See you soon!"
    },
    {
        "input": "See you later, have a good one",
        "output": "Have a great trip! See you later."
    },
    {
        "input": "Goodbye, take care",
        "output": "Take care of yourself! See you soon."
    },
    {
        "input": "Until next time, thanks for everything!",
        "output": "See you next time! It was a pleasure helping you."
    },
    {
        "input": "See you later",
        "output": "See you later! Have a good time."
    },
    {
        "input": "See you soon, have a good one",
        "output": "See you soon! Have a great day!"
    },
    {
        "input": "Thank you, see you soon!",
        "output": "See you soon! Have a nice day!"
    },
    {
        "input": "I'm leaving, goodbye",
        "output": "Goodbye! See you soon."
    },
    {
        "input": "Thanks for everything, take care",
        "output": "You're welcome! Take care of yourself, until next time."
    },
    {
        "input": "See you later",
        "output": "See you later! Take care of yourself."
    },
    {
        "input": "I want to learn Python",
        "output": "Great! Python is a great language. What are you interested in learning first?"
    },
    {
        "input": "can you teach me how to use python?",
        "output": "Sure! Where do you want to start? I can explain everything from the basics to advanced topics."
    },
    {
        "input": "How do I make a program in Python?",
        "output": "To get started, open a text editor or IDE, write your Python code, and save it with the `.py` extension. Then run it with `python file_name.py`."
    },
    {
        "input": "show me a basic python example",
        "output": "Of course, here you go: print('Hello, world!')"
    },
    {
        "input": "hey, how do i add two numbers in python?",
        "output": "It's super simple, like this: result = 2 + 3; print(result)"
    },
    {
        "input": "What is a loop in Python?",
        "output": "A loop in Python is a way to repeat code. For example, with a `for` or `while`."
    },
    {
        "input": "Explain to me what a function is in Python",
        "output": "A function is a reusable block of code that you write when you need to perform specific tasks. Example: def greet(): print('Hello')"
    },
    {
        "input": "How do I create a file in Python?",
        "output": "Use the `open()` function with the `w` mode. Example: with open('file.txt', 'w') as file: file.write('Hello, world')"
    },
    {
        "input": "can you explain to me what a list is in Python?",
        "output": "Sure! A list is an ordered collection of elements. Example: my_list = [1, 2, 3]"
    },
    {
        "input": "bro, how do i handle errors in python?",
        "output": "Use try-except blocks. Example: try: print(1/0) except ZeroDivisionError: print('Error: Division by zero')"
    },
    {
        "input": "What libraries do you recommend in Python?",
        "output": "It depends on what you need. For data analysis: pandas and numpy. For charts: matplotlib. For web: Flask or Django."
    },
    {
        "input": "teach me how to install a library",
        "output": "It's easy: open the terminal and type `pip install library_name`. For example, `pip install requests`."
    },
    {
        "input": "I want to learn about pandas",
        "output": "Great! Pandas is great for handling data. Start by importing it: `import pandas as pd`. You can then load data with `pd.read_csv()`."
    },
    {
        "input": "can you show me an example using pandas?",
        "output": "Sure, here you go: `import pandas as pd; df = pd.DataFrame({'Column': [1, 2, 3]}); print(df)`"
    },
    {
        "input": "How do I get started with Django?",
        "output": "First install Django: `pip install django`. Then create a project with `django-admin startproject project_name`."
    },
    {
        "input": "What can I do with Python?",
        "output": "Lots of stuff! Web development, data analysis, artificial intelligence, automated scripts, and much more."
    },
    {
        "input": "can you help me with a problem in my code?",
        "output": "Sure! Send me your code or describe the problem, and I'll be happy to help."
    },
    {
        "input": "hey, how do i write to a file?",
        "output": "Use `open()` in write mode: `with open('file.txt', 'w') as file: file.write('Hello')`."
    },
    {
        "input": "How do I connect Python to a database?",
        "output": "Use libraries like sqlite3, psycopg2 (for PostgreSQL) or pymongo (for MongoDB). Which database do you want to use?"
    },
    {
        "input": "Explain to me what a class is in Python",
        "output": "A class is a blueprint for creating objects. Example: `class Dog: def __init__(self, name): self. name = name`"
    },
    {
        "input": "Can I use Python to make web applications?",
        "output": "Yes! With frameworks like Flask or Django you can create robust web applications."
    },
    {
        "input": "help me with nested loops",
        "output": "Here is an example: `for i in range(3): for j in range(2): print(i, j)`"
    },
    {
        "input": "What is a decorator in Python?",
        "output": "A decorator is a function that modifies the behavior of another function. Example: `@decorator` on the function you want to modify."
    },
    {
        "input": "How do I make an interactive program?",
        "output": "Use `input()` to receive data from the user. Example: `name = input('What is your name? '); print('Hello,', name)`"
    },
    {
        "input": "help me with regular expressions",
        "output": "Of course, use the `re` library. Example: `import re; re.match(r'\\d+', '123')`."
    },
    {
        "input": "I want to learn about graphics in Python",
        "output": "For graphs, I recommend matplotlib. Basic example: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()`."
    },
    {
        "input": "hey, can i automate tasks with python?",
        "output": "Sure! Use libraries like `os`, `shutil` or `subprocess` to automate tasks."
    },
    {
        "input": "What is Python?",
        "output": "Python is a high-level, interpreted, general-purpose programming language."
    },
    {
        "input": "What is Python used for?",
        "output": "Python is used for web development, data analysis, artificial intelligence, software development, automation, and more."
    },
    {
        "input": "Is Python a difficult language?",
        "output": "Python is known for being easy to learn thanks to its clear and readable syntax."
    },
    {
        "input": "Who created Python?",
        "output": "Python was created by Guido van Rossum in 1991."
    },
    {
        "input": "What is a variable in Python?",
        "output": "A variable is a container for storing data in a program."
    },
    {
        "input": "Is Python free?",
        "output": "Yes, Python is free and open source."
    },
    {
        "input": "What is a Python IDE?",
        "output": "An IDE is an integrated development environment where you can write and run Python code, such as PyCharm or VS Code."
    },
    {
        "input": "What are Python libraries?",
        "output": "They are collections of pre-written modules that make specific tasks easier, such as NumPy for mathematics or Pandas for data analysis."
    },
    {
        "input": "What is a function in Python?",
        "output": "A function is a reusable block of code that performs a specific task."
    },
    {
        "input": "What is a module in Python?",
        "output": "A module is a file that contains definitions and functions that can be reused in other programs."
    },
    {
        "input": "What is a loop in Python?",
        "output": "A loop allows you to execute a block of code repeatedly, such as with 'for' or 'while'."
    },
    {
        "input": "What is a list in Python?",
        "output": "A list is an ordered, mutable collection of elements."
    },
    {
        "input": "How do you declare a list in Python?",
        "output": "Using brackets, for example: list = [1, 2, 3]."
    },
    {
        "input": "What is a dictionary in Python?",
        "output": "It is a collection of key-value pairs that allows data to be accessed using keys."
    },
    {
        "input": "What are exceptions in Python?",
        "output": "Exceptions are errors that occur during the execution of a program and can be handled with 'try-except' blocks."
    },
    {
        "input": "Is Python compiled or interpreted?",
        "output": "Python is an interpreted language."
    },
    {
        "input": "What is a string in Python?",
        "output": "A string is a sequence of characters enclosed in quotation marks."
    },
    {
        "input": "How do you comment lines in Python?",
        "output": "Using the # symbol for single-line comments."
    },
    {
        "input": "What is a class in Python?",
        "output": "A class is a template for creating objects, defining attributes and methods."
    },
    {
        "input": "What is an object in Python?",
        "output": "An object is an instance of a class."
    },
    {
        "input": "What is a decorator in Python?",
        "output": "A decorator is a function that modifies the behavior of another function or method."
    },
    {
        "input": "What is Python Flask?",
        "output": "Flask is a microframework for developing web applications with Python."
    },
    {
        "input": "What is Python Django?",
        "output": "Django is a complete framework for web development with Python."
    },
    {
        "input": "What is NumPy?",
        "output": "NumPy is a Python library for performing mathematical calculations and working with arrays."
    },
    {
        "input": "What is Pandas in Python?",
        "output": "Pandas is a library for data analysis and manipulation."
    },
    {
        "input": "What is a package in Python?",
        "output": "A package is a collection of modules organized in a directory."
    },
    {
        "input": "What is pip in Python?",
        "output": "Pip is a tool for installing and managing Python packages."
    },
    {
        "input": "What is a tuple in Python?",
        "output": "A tuple is a collection of ordered, immutable elements."
    },
    {
        "input": "How to create a tuple in Python?",
        "output": "Using parentheses, for example: tuple = (1, 2, 3)."
    },
    {
        "input": "What is a set in Python?",
        "output": "A set is an unordered collection of unique elements."
    },
    {
        "input": "What is a .py file?",
        "output": "It is a text file containing Python code."
    },
    {
        "input": "What is a .pyc file?",
        "output": "It is a compiled Python file that is automatically generated when you run a program."
    },
    {
        "input": "How to run a Python script?",
        "output": "Using the command 'python filename.py' in the terminal."
    },
    {
        "input": "What is a Python interpreter?",
        "output": "It is the program that executes Python code line by line."
    },
    {
        "input": "Does Python support object-oriented programming?",
        "output": "Yes, Python supports object-oriented programming."
    },
    {
        "input": "What is a list comprehension in Python?",
        "output": "It is a compact way to create lists using an expression in a loop."
    },
    {
        "input": "What is recursion in Python?",
        "output": "It is a technique where a function calls itself to solve a problem."
    },
    {
        "input": "Is Python case-sensitive?",
        "output": "Yes, Python is case sensitive."
    },
    {
        "input": "What is an iterator in Python?",
        "output": "An iterator is an object that allows you to traverse elements of a collection."
    },
    {
        "input": "What is a generator in Python?",
        "output": "A generator is a function that lazily produces a sequence of values."
    },
    {
        "input": "How to install Python?",
        "output": "You can download it from the official Python website: https://www.python.org/."
    },
    {
        "input": "What is a breakpoint in Python?",
        "output": "A breakpoint is a point in code where execution stops for debugging."
    },
    {
        "input": "What is a multiline string in Python?",
        "output": "It is a string enclosed between three double or single quotes."
    },
    {
        "input": "What is indentation in Python?",
        "output": "Indentation is the space at the beginning of a line that defines blocks of code."
    },
    {
        "input": "What is the 'print' function in Python?",
        "output": "The 'print' function is used to display information on the screen."
    },
    {
        "input": "What is the 'input' function in Python?",
        "output": "The 'input' function is used to receive data from the user."
    },
    {
        "input": "How to handle files in Python?",
        "output": "Using functions like 'open', 'read', 'write', and 'close'."
    },
    {
        "input": "What is Zen of Python?",
        "output": "It is a set of principles that guide the design of Python, accessible with 'import this'."
    },
    {
        "input": "How to install libraries in Python?",
        "output": "Using the command 'pip install library_name'."
    },
    {
        "input": "What is programming?",
        "output": "Programming is the process of writing and designing code to create applications or software."
    },
    {
        "input": "What is programming for?",
        "output": "Programming is used to develop digital solutions, automate tasks and build computer systems."
    },
    {
        "input": "What programming languages ​​exist?",
        "output": "Some common programming languages ​​are Python, Java, C++, and JavaScript."
    },
    {
        "input": "Is it difficult to learn to program?",
        "output": "Learning to program can be challenging at first, but with practice it gets easier."
    },
    {
        "input": "What do I need to start programming?",
        "output": "To start programming you need a computer, a code editor and to learn the basics."
    },
    {
        "input": "What is an algorithm?",
        "output": "An algorithm is a set of organized steps to solve a problem or perform a task."
    },
    {
        "input": "What is a programming language?",
        "output": "It is a language used to write instructions that computers can understand."
    },
    {
        "input": "What is a loop in programming?",
        "output": "A loop is a structure that allows a block of code to be repeated several times."
    },
    {
        "input": "What is a syntax error?",
        "output": "A syntax error occurs when code does not follow the rules of the programming language."
    },
    {
        "input": "What is an IDE?",
        "output": "An IDE (Integrated Development Environment) is a software that provides tools to program more efficiently."
    },
    {
        "input": "What does debugging mean?",
        "output": "Debugging is the process of identifying and correcting errors in a program."
    },
    {
        "input": "What is a framework?",
        "output": "A framework is a set of tools and libraries that facilitates software development."
    },
    {
        "input": "What is a compiled language?",
        "output": "It is a language whose programs are translated into machine code before being executed."
    },
    {
        "input": "What is an interpreted language?",
        "output": "It is a language whose code is executed line by line without the need to compile it previously."
    },
    {
        "input": "What is a variable?",
        "output": "A variable is a space in memory where a value is stored that can change during the execution of the program."
    },
    {
        "input": "What is a conditional?",
        "output": "A conditional is a structure that allows code to be executed depending on whether a condition is true or false."
    },
    {
        "input": "What is a function?",
        "output": "A function is a reusable block of code that performs a specific task."
    },
    {
        "input": "What is object-oriented programming?",
        "output": "It is a programming paradigm based on the use of objects that contain data and methods."
    },
    {
        "input": "What is an object in programming?",
        "output": "An object is an instance of a class that contains properties and methods."
    },
    {
        "input": "What is a class in programming?",
        "output": "A class is a template for creating objects that defines their properties and behaviors."
    },
    {
        "input": "What is a source file?",
        "output": "It is the file where the code of a program is written."
    },
    {
        "input": "What is functional programming?",
        "output": "It is a paradigm that is based on mathematical functions and avoids the use of mutable states."
    },
    {
        "input": "What is an array?",
        "output": "An array is a data structure that stores multiple values ​​in a single variable."
    },
    {
        "input": "What is a linked list?",
        "output": "It is a data structure in which each element points to the next in the list."
    },
    {
        "input": "What is a compiler?",
        "output": "A compiler is a program that translates source code into machine code."
    },
    {
        "input": "What is an interpreter?",
        "output": "An interpreter executes the code line by line without having to compile it first."
    },
    {
        "input": "What is a code repository?",
        "output": "A repository is a place where a project's source code is stored and managed."
    },
    {
        "input": "What is version control?",
        "output": "It is a system that records changes made to source code over time."
    },
    {
        "input": "What is Git?",
        "output": "Git is a version control system widely used in software development."
    },
    {
        "input": "What is a commit in Git?",
        "output": "A commit is a record of changes made to code."
    },
    {
        "input": "What is a branch in Git?",
        "output": "A branch is an independent line of development in a code repository."
    },
    {
        "input": "What is a merge in Git?",
        "output": "A merge combines changes from one branch into another."
    },
    {
        "input": "What is web programming?",
        "output": "It is the creation of sites and applications that run in web browsers."
    },
    {
        "input": "What is HTML?",
        "output": "HTML is a markup language used to structure content on the web."
    },
    {
        "input": "What is CSS?",
        "output": "CSS is a style language that defines the appearance of HTML elements."
    },
    {
        "input": "What is JavaScript?",
        "output": "JavaScript is a programming language used to add interactivity to websites."
    },
    {
        "input": "What is a backend?",
        "output": "The backend is the part of the software that runs on the server and handles logic and data."
    },
    {
        "input": "What is a frontend?",
        "output": "The frontend is the visual and interactive part of an application that runs in the browser."
    },
    {
        "input": "What is an API?",
        "output": "An API is an interface that allows different applications to communicate with each other."
    },
    {
        "input": "What is a database?",
        "output": "A database is an organized system for storing, managing and retrieving data."
    },
    {
        "input": "What is SQL?",
        "output": "SQL is a language used to manage relational databases."
    },
    {
        "input": "What is NoSQL?",
        "output": "NoSQL is a type of database that does not use relational tables to organize data."
    },
    {
        "input": "What is a server?",
        "output": "A server is a computer that provides services or resources to other computers."
    },
    {
        "input": "What is a library in programming?",
        "output": "A library is a set of reusable functions and utilities that facilitate development."
    },
    {
        "input": "What is a unit test?",
        "output": "It is a technique for testing individual parts of a program."
    },
    {
        "input": "What is the software life cycle?",
        "output": "It is the process that covers everything from planning to software maintenance."
    },
    {
        "input": "What is a neural network?",
        "output": "It is a computational model inspired by the functioning of the human brain."
    },
    {
        "input": "What is artificial intelligence?",
        "output": "It is the simulation of human intelligence processes by computer systems."
    },
    {
        "input": "What is machine learning?",
        "output": "It is a subfield of artificial intelligence that allows systems to learn from data."
    },
    {
        "input": "What is a development environment?",
        "output": "It is the set of tools and software used to write and test code."
    },
    {
        "input": "What is artificial intelligence?",
        "output": "It is the simulation of human intelligence processes by computer systems."
    },
    {
        "input": "What are the applications of artificial intelligence?",
        "output": "Some applications include virtual assistants, data analytics, computer vision, and autonomous robots."
    },
    {
        "input": "What is machine learning?",
        "output": "It is a subfield of artificial intelligence that allows machines to learn from data and improve their performance over time."
    },
    {
        "input": "What is supervised learning?",
        "output": "It is a machine learning approach where models are trained with labeled data."
    },
    {
        "input": "What is unsupervised learning?",
        "output": "It is a machine learning approach where models find patterns in unlabeled data."
    },
    {
        "input": "What is reinforcement learning?",
        "output": "It is a learning technique where an agent makes decisions to maximize a cumulative reward."
    },
    {
        "input": "What is an artificial neural network?",
        "output": "It is a computational model inspired by the structure of the human brain, used in tasks such as pattern recognition."
    },
    {
        "input": "What is natural language processing?",
        "output": "It is a field of AI that focuses on the interaction between computers and human language."
    },
    {
        "input": "What is computer vision?",
        "output": "It is a field of AI that allows computers to interpret and process real-world images."
    },
    {
        "input": "What is a language model?",
        "output": "It is an AI model designed to process and generate natural language text."
    },
    {
        "input": "What is a chatbot?",
        "output": "It is an AI program designed to simulate human conversations."
    },
    {
        "input": "What is a virtual assistant?",
        "output": "It is an AI application that helps users with tasks using voice or text commands."
    },
    {
        "input": "What is voice recognition?",
        "output": "It is an AI technology that converts speech into text."
    },
    {
        "input": "What is sentiment analysis?",
        "output": "It is the use of AI to identify and analyze emotions in texts."
    },
    {
        "input": "What is a generative model?",
        "output": "It is an AI model that can generate new data similar to the training data."
    },
    {
        "input": "What is GAN?",
        "output": "A generative adversarial network (GAN) is a type of AI model that uses two competing networks to generate realistic data."
    },
    {
        "input": "What is a clustering algorithm?",
        "output": "It is an unsupervised learning method for grouping similar data."
    },
    {
        "input": "What is style transfer?",
        "output": "It is an AI technique that applies the artistic style of one image to another image."
    },
    {
        "input": "What is an expert system?",
        "output": "It is an AI system that uses specialized knowledge to make decisions or solve problems."
    },
    {
        "input": "What is robotics?",
        "output": "It is a field that combines AI and mechatronics to design and operate robots."
    },
    {
        "input": "What is an intelligent agent?",
        "output": "It is an AI program that perceives its environment and acts to achieve specific goals."
    },
    {
        "input": "What is ethics in artificial intelligence?",
        "output": "It is the study of ethical principles related to the design and use of AI systems."
    },
    {
        "input": "What is training data?",
        "output": "It is data used to teach an AI model to perform a specific task."
    },
    {
        "input": "What is overfitting?",
        "output": "It is a problem where an AI model learns too many details of the training data and does not generalize well."
    },
    {
        "input": "What is underestimation?",
        "output": "It is a problem where an AI model does not sufficiently capture the complexity of the data."
    },
    {
        "input": "What is regression?",
        "output": "It is a machine learning technique for predicting continuous values."
    },
    {
        "input": "What is classification?",
        "output": "It is a machine learning technique for assigning categories to data."
    },
    {
        "input": "What is predictive analytics?",
        "output": "It is the use of AI techniques to make predictions based on historical data."
    },
    {
        "input": "What is cognitive computing?",
        "output": "It is the use of AI to simulate human cognitive processes such as learning and reasoning."
    },
    {
        "input": "What is process automation?",
        "output": "It is the use of AI to perform repetitive tasks without human intervention."
    },
    {
        "input": "What is data mining?",
        "output": "It is the process of discovering patterns and relationships in large sets of data."
    },
    {
        "input": "What is strong artificial intelligence?",
        "output": "It is an AI concept capable of performing any intellectual task that a human can do."
    },
    {
        "input": "What is weak artificial intelligence?",
        "output": "It is an AI designed to perform specific tasks, such as playing chess or recommending movies."
    },
    {
        "input": "What is a cost function?",
        "output": "It is a measure used in machine learning to evaluate the performance of a model."
    },
    {
        "input": "What is facial recognition?",
        "output": "It is an AI application that identifies or verifies identities from facial images."
    },
    {
        "input": "What is algorithmic bias?",
        "output": "It is a problem where an AI model produces biased results due to imbalanced data or poor design."
    },
    {
        "input": "What is transparency in AI?",
        "output": "It refers to the ability to understand how and why an AI system makes decisions."
    },
    {
        "input": "What is a pre-trained model?",
        "output": "It is an AI model that has already been trained on a dataset and can be tuned for specific tasks."
    },
    {
        "input": "What is deep learning?",
        "output": "It is a subfield of machine learning that uses deep neural networks to process data."
    },
    {
        "input": "What is a sequential model?",
        "output": "It is an AI model designed to process sequential data, such as text or time series."
    },
    {
        "input": "What is a hyperparameter?",
        "output": "It is a parameter whose value is set before training an AI model."
    },
    {
        "input": "What is distributed computing?",
        "output": "It is the use of multiple computers to process large volumes of data collaboratively."
    },
    {
        "input": "What is a knowledge graph?",
        "output": "It is a structure that organizes information into nodes and relationships to facilitate searching and reasoning."
    },
    {
        "input": "What is optical character recognition?",
        "output": "It is an AI technology that converts images of text into editable text."
    },
    {
        "input": "What is swarm intelligence?",
        "output": "It is an AI approach inspired by the collective behavior of organisms such as bees or ants."
    },
    {
        "input": "What is regularization?",
        "output": "It is a technique used to prevent overfitting in AI models."
    },
    {
        "input": "What is real-time processing?",
        "output": "It is the ability of an AI system to process and analyze data instantly."
    },
    {
        "input": "What is augmented intelligence?",
        "output": "It is the use of AI to augment human capabilities rather than replace them."
    },
    {
        "input": "What is a synthetic dataset?",
        "output": "It is an artificially generated dataset to train AI models when real data is limited."
    },
    {
        "input": "What is Python?",
        "output": "Python is a high-level programming language, easy to learn and widely used in web development, data analysis, artificial intelligence, among others."
    },
    {
        "input": "What is Python used for?",
        "output": "Python is used for many things: web development, data analysis, machine learning, task automation, and more."
    },
    {
        "input": "How do I get started with Python?",
        "output": "Download Python from python.org, install it, and open an editor like VS Code or PyCharm to start writing code."
    },
    {
        "input": "What text editor do you recommend for Python?",
        "output": "I recommend Visual Studio Code, PyCharm or even Jupyter Notebook to get started."
    },
    {
        "input": "How do I install libraries in Python?",
        "output": "Use the pip package manager. For example: `pip install requests`."
    },
    {
        "input": "What is pip?",
        "output": "Pip is the Python package manager that allows you to install and manage third-party libraries."
    },
    {
        "input": "What do I do if pip doesn't work?",
        "output": "Try upgrading pip with `python -m pip install --upgrade pip` or verify that Python is correctly installed."
    },
    {
        "input": "How do I create a program in Python?",
        "output": "Write your code in a file with the extension `.py` and run it in the terminal with `python file.py`."
    },
    {
        "input": "How do I run Python in the terminal?",
        "output": "Open your terminal, type `python` to access the interactive interpreter, or `python file.py` to run a file."
    },
    {
        "input": "What is a list in Python?",
        "output": "A list is an ordered collection of elements. You can create a list using square brackets: `my_list = [1, 2, 3]`."
    },
    {
        "input": "Can I have lists within lists?",
        "output": "Yes! They are nested lists. Example: `my_list = [[1, 2], [3, 4]]`."
    },
    {
        "input": "How do I access an item in a list?",
        "output": "Use indexes. Example: `my_list[0]` to access the first element."
    },
    {
        "input": "What is a loop in Python?",
        "output": "A loop is a way to execute a block of code multiple times. Example: `for i in range(5): print(i)`."
    },
    {
        "input": "What is a range in Python?",
        "output": "It is a function that generates a sequence of numbers. Example: `range(5)` generates 0, 1, 2, 3, 4."
    },
    {
        "input": "How do I stop a loop in Python?",
        "output": "Use the `break` keyword. Example: `for i in range(5): if i == 3: break`."
    },
    {
        "input": "What is a function in Python?",
        "output": "A function is a reusable block of code that performs a specific task. Example: `def greet(): print('Hello')`."
    },
    {
        "input": "What is a parameter in a function?",
        "output": "It is a value that you pass to a function to customize its behavior. Example: `def greet(name): print('Hello', name)`."
    },
    {
        "input": "How do I return a value from a function?",
        "output": "Use the `return` keyword. Example: `def add(a, b): return a + b`."
    },
    {
        "input": "What is a file in Python?",
        "output": "A file is a resource where you can store data. Example: `with open('file.txt', 'w') as file: file.write('Hello')`."
    },
    {
        "input": "What does 'w' mean in open?",
        "output": "It means that you are opening the file in write mode. If the file does not exist, it is created."
    },
    {
        "input": "What is an exception in Python?",
        "output": "It is an error that occurs during execution. You can handle it with try-except blocks."
    },
    {
        "input": "How do I handle an exception?",
        "output": "Use `try` and `except`. Example: `try: print(1/0) except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "What is a dictionary in Python?",
        "output": "It is a collection of key-value pairs. Example: `my_dictionary = {'name': 'John', 'age': 25}`."
    },
    {
        "input": "How do I access a value in a dictionary?",
        "output": "Use the key. Example: `my_dictionary['name']` returns 'John'."
    },
    {
        "input": "How can I remove an item from a dictionary?",
        "output": "Use `del`. Example: `del my_dictionary['name']`."
    },
    {
        "input": "What bookstores do you recommend?",
        "output": "For data analysis: pandas, numpy. For graphics: matplotlib, seaborn. For AI: tensorflow, pytorch."
    },
    {
        "input": "What is pandas?",
        "output": "Pandas is a library for data manipulation and analysis in Python."
    },
    {
        "input": "How do I load data into pandas?",
        "output": "Use `pd.read_csv()` for CSV files. Example: `df = pd.read_csv('data.csv')`."
    },
    {
        "input": "What is matplotlib?",
        "output": "Matplotlib is a library for creating graphics in Python. Example: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "What is Flask?",
        "output": "Flask is a lightweight framework for building web applications in Python."
    },
    {
        "input": "How do I create an API with Flask?",
        "output": "Define a route with a decorator: `@app.route('/')`. Example: `from flask import Flask; app = Flask(__name__); @app.route('/'): return 'Hello'`."
    },
    {
        "input": "Where is Guatemala located?",
        "output": "Guatemala is in Central America, south of Mexico."
    },
    {
        "input": "What is the capital of Guatemala?",
        "output": "The capital of Guatemala is Guatemala City."
    },
    {
        "input": "What is the currency of Guatemala?",
        "output": "The currency of Guatemala is the quetzal."
    },
    {
        "input": "What language is spoken in Guatemala?",
        "output": "The official language of Guatemala is Spanish, but 22 Mayan languages ​​are also spoken."
    },
    {
        "input": "What is the national bird of Guatemala?",
        "output": "The national bird of Guatemala is the quetzal."
    },
    {
        "input": "What does the name Guatemala mean?",
        "output": "Guatemala comes from the Nahuatl 'Quauhtlemallan', which means 'place of many trees'."
    },
    {
        "input": "What is cold cuts?",
        "output": "Fiambre is a traditional Guatemalan dish eaten on All Saints' Day."
    },
    {
        "input": "When is Guatemala's independence celebrated?",
        "output": "Guatemala's independence is celebrated on September 15."
    },
    {
        "input": "What is the Popol Vuh?",
        "output": "The Popol Vuh is a sacred book of the Quiché Mayans."
    },
    {
        "input": "What is huipil?",
        "output": "The huipil is a traditional garment worn by indigenous women of Guatemala."
    },
    {
        "input": "What is the most famous archaeological site in Guatemala?",
        "output": "The most famous archaeological site is Tikal, an ancient Mayan city."
    },
    {
        "input": "What is marimba?",
        "output": "The marimba is the national musical instrument of Guatemala."
    },
    {
        "input": "What is the Coffee Corner?",
        "output": "Guatemala is known for producing some of the best coffee in the world."
    },
    {
        "input": "What is Holy Week in Guatemala?",
        "output": "It is a religious celebration famous for its sawdust carpets and processions."
    },
    {
        "input": "What is Lake Atitlán?",
        "output": "Lake Atitlán is a volcanic lake surrounded by indigenous villages and volcanoes."
    },
    {
        "input": "How many departments does Guatemala have?",
        "output": "Guatemala has 22 departments."
    },
    {
        "input": "What are the ruins of Quiriguá?",
        "output": "They are a Mayan archaeological site known for their carved stone stelae."
    },
    {
        "input": "Who was Miguel Angel Asturias?",
        "output": "Miguel Ángel Asturias was a Guatemalan writer who won the Nobel Prize for Literature in 1967."
    },
    {
        "input": "What are giant kites?",
        "output": "They are huge kites that are flown during All Saints' Day in Sumpango and Santiago Sacatepéquez."
    },
    {
        "input": "What is the typical food of Guatemala?",
        "output": "Some typical dishes are pepián, tamales, chuchitos and kak'ik."
    },
    {
        "input": "What is the Tecún Umán Monument?",
        "output": "It is a monument in honor of the national hero and last K'iche' Mayan leader."
    },
    {
        "input": "What is Antigua Guatemala?",
        "output": "Antigua Guatemala is a colonial city and a UNESCO World Heritage Site."
    },
    {
        "input": "What is jade in Guatemalan culture?",
        "output": "Jade was a sacred stone to the ancient Mayans and remains important in Guatemala."
    },
    {
        "input": "What is Rabinal Achí?",
        "output": "It is a Mayan theatrical work recognized as Oral and Intangible Heritage of Humanity."
    },
    {
        "input": "What are the volcanoes of Guatemala?",
        "output": "Guatemala has more than 30 volcanoes, with Fuego and Pacaya being the most active."
    },
    {
        "input": "What is paabanc?",
        "output": "The paabanc is a traditional Mayan ceremony celebrated in Alta Verapaz."
    },
    {
        "input": "What is cocoa for the Mayans?",
        "output": "Cocoa was considered a sacred drink and was used as currency."
    },
    {
        "input": "What is Chichicastenango?",
        "output": "It is a town famous for its traditional market and its church, Santo Tomás."
    },
    {
        "input": "What is the Ixchel Museum?",
        "output": "It is a museum in Guatemala City dedicated to indigenous textile art."
    },
    {
        "input": "What are Guatemalan fabrics?",
        "output": "They are colorful handmade textiles that reflect indigenous culture."
    },
    {
        "input": "What is Tikal National Park?",
        "output": "It is a park that houses Mayan ruins and is a World Heritage Site."
    },
    {
        "input": "What does the flag of Guatemala represent?",
        "output": "Its blue stripes represent the Atlantic and Pacific oceans, and the white stripes represent peace."
    },
    {
        "input": "What is the Flying Stick?",
        "output": "It is a Mayan ceremonial dance practiced in Joyabaj, Quiché."
    },
    {
        "input": "What is the Mazatenango Carnival?",
        "output": "It is one of the most important festivals in the country, celebrated with parades and music."
    },
    {
        "input": "What is the Santiago Atitlán festival?",
        "output": "It is a celebration in honor of Maximón, a syncretic figure venerated locally."
    },
    {
        "input": "What is the Yaxhá archaeological zone?",
        "output": "It is an ancient Mayan city located near Lake Yaxhá."
    },
    {
        "input": "What are Guatemalan stuffed chiles?",
        "output": "They are poblano peppers stuffed with meat and vegetables, served with tomato sauce."
    },
    {
        "input": "What is Army Day in Guatemala?",
        "output": "It is a national holiday celebrated on June 30."
    },
    {
        "input": "What is the Dulce River?",
        "output": "It is an important river that connects Lake Izabal with the Caribbean Sea."
    },
    {
        "input": "What is the National Palace of Culture?",
        "output": "It is a historic building in Guatemala City that symbolizes national unity."
    },
    {
        "input": "What are the Mayans?",
        "output": "The Mayans are a pre-Columbian civilization that left a significant cultural legacy in Guatemala."
    },
    {
        "input": "What is the Mayan calendar?",
        "output": "It is a complex calendar system used by the Mayan civilization."
    },
    {
        "input": "What is marimba music?",
        "output": "It is a traditional musical style performed with marimbas, very popular in Guatemala."
    },
    {
        "input": "What is the Day of the Dead in Guatemala?",
        "output": "It is a celebration where families honor their dead with food and offerings."
    },
    {
        "input": "What is Semuc Champey Park?",
        "output": "It is a natural place famous for its turquoise water pools in Alta Verapaz."
    },
    {
        "input": "What is the Giant Kite Festival?",
        "output": "It is a cultural event in which huge kites are flown during All Saints' Day."
    },
    {
        "input": "What is Guatemalan tamale?",
        "output": "It is a corn dough stuffed with meat and sauce, wrapped in leaves and steamed."
    },
    {
        "input": "What is Antigua coffee?",
        "output": "It is a high quality coffee grown in the mountains of Antigua Guatemala."
    },
    {
        "input": "What is Ceiba?",
        "output": "The Ceiba is the national tree of Guatemala, sacred to the Mayans."
    },
    {
        "input": "What is the Cobán fair?",
        "output": "It is a festival in Alta Verapaz known for the Rabin Ajaw, 'Daughter of the King', contest."
    },
    {
        "input": "How do I download Python?",
        "output": "Go to the official Python page at python.org, select your operating system, and download the installer."
    },
    {
        "input": "What version of Python should I use?",
        "output": "I recommend using the latest stable version, unless you are working on a project that requires a specific version."
    },
    {
        "input": "How do I check if Python is installed on my computer?",
        "output": "Open terminal and type `python --version` or `python3 --version`."
    },
    {
        "input": "How do I install Visual Studio Code?",
        "output": "Download it from code.visualstudio.com, follow the installation instructions, and then add the Python extension."
    },
    {
        "input": "What is Jupyter Notebook?",
        "output": "It is an interactive tool for writing and running Python code, ideal for data analysis and learning."
    },
    {
        "input": "What is the difference between lists and tuples in Python?",
        "output": "Lists are mutable, you can change them after you create them. Tuples are immutable."
    },
    {
        "input": "How do I convert a list to a tuple?",
        "output": "Use the `tuple()` function. Example: `my_tuple = tuple(my_list)`."
    },
    {
        "input": "What is a list comprehension?",
        "output": "It is a concise way to create lists. Example: `squares = [x**2 for x in range(5)]`."
    },
    {
        "input": "How does a while loop work in Python?",
        "output": "A while loop repeats code as long as a condition is true. Example: `while x < 5: print(x); x += 1`."
    },
    {
        "input": "How do I stop an infinite loop?",
        "output": "Use the key combination `Ctrl + C` in the terminal to stop it."
    },
    {
        "input": "What is an iterator in Python?",
        "output": "It is an object that allows you to go through elements one by one. Example: `iterator = iter([1, 2, 3])`."
    },
    {
        "input": "How do I declare a function with optional parameters?",
        "output": "Defines default values ​​for parameters. Example: `def greet(name='Friend'): print('Hello', name)`."
    },
    {
        "input": "What is a decorator?",
        "output": "It is a function that modifies the behavior of another function. Example: `@decorator` before the definition of a function."
    },
    {
        "input": "How do I handle multiple exceptions?",
        "output": "Use multiple except blocks or group exceptions. Example: `except (ValueError, TypeError):`."
    },
    {
        "input": "What types of data does a dictionary support?",
        "output": "Keys must be immutable (such as strings, numbers, or tuples), and values ​​can be of any type."
    },
    {
        "input": "How do I check if a key exists in a dictionary?",
        "output": "Use the `in` operator. Example: `if 'name' in my_dictionary:`."
    },
    {
        "input": "How do I add an item to a dictionary?",
        "output": "Assigning a new key-value. Example: `my_dictionary['age'] = 30`."
    },
    {
        "input": "How do I remove an item from a list?",
        "output": "Use the `remove()` method or the `del` statement. Example: `my_list.remove(2)`."
    },
    {
        "input": "What is a DataFrame in pandas?",
        "output": "It is a tabular data structure similar to a table in a database or spreadsheet."
    },
    {
        "input": "How do I delete columns in pandas?",
        "output": "Use `drop()`. Example: `df = df.drop('column', axis=1)`."
    },
    {
        "input": "How do I filter data in pandas?",
        "output": "Use conditions. Example: `df_filtering = df[df['column'] > 10]`."
    },
    {
        "input": "How do I install pandas?",
        "output": "Run `pip install pandas` in the terminal."
    },
    {
        "input": "What other web frameworks are there besides Flask?",
        "output": "You can use Django, FastAPI or Tornado, depending on your needs."
    },
    {
        "input": "How do I start a server in Flask?",
        "output": "Run `python app.py` and Flask will start the local server."
    },
    {
        "input": "How do I handle dynamic routes in Flask?",
        "output": "Use variables in routes. Example: `@app.route('/user/<name>')`."
    },
    {
        "input": "What is matplotlib?",
        "output": "It is a library for creating graphs in Python. Example: `plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "How do I save a graph in matplotlib?",
        "output": "Use `plt.savefig('graphic.png')` before `plt.show()`."
    },
    {
        "input": "What other graphics packages are there?",
        "output": "Try seaborn for more aesthetically pleasing charts or plotly for interactive charts."
    },
    {
        "input": "What is a library in Python?",
        "output": "It is a set of functions and tools that you can use to make your work easier. Example: requests to work with APIs."
    },
    {
        "input": "How do I create my own library in Python?",
        "output": "Write your functions in a `.py` file and then import them with `import`. For something more advanced, create a package with `setup.py`."
    },
    {
        "input": "What is an API?",
        "output": "It is an interface that allows two applications to communicate with each other. You can use APIs to get or send data."
    },
    {
        "input": "How do I call an API in Python?",
        "output": "Use the `requests` library. Example: `import requests; response = requests.get('https://api.example.com'); print(response.json())`."
    },
    {
        "input": "What is the difference between Python 2 and Python 3?",
        "output": "Python 3 is the current release and has significant improvements over Python 2, such as better Unicode support and more modern features."
    },
    {
        "input": "Why should I learn Python?",
        "output": "Python is easy to learn, versatile, and has a great supportive community. It's great for beginners and advanced projects."
    },
    {
        "input": "What can I do with Python besides web development?",
        "output": "You can use Python for data analysis, machine learning, task automation, gaming, and much more."
    },
    {
        "input": "Is Python slower than other languages?",
        "output": "Python may be slower than compiled languages ​​like C or Java, but its simplicity and libraries make up for this in many cases."
    },
    {
        "input": "How do I check the type of a variable in Python?",
        "output": "Use the `type()` function. Example: `print(type(my_variable))`."
    },
    {
        "input": "How do I convert a string to a number?",
        "output": "Use `int()` for integers or `float()` for decimals. Example: `number = int('123')`."
    },
    {
        "input": "What does indentation mean in Python?",
        "output": "Indentation organizes code and defines blocks such as functions or loops. In Python, it is mandatory."
    },
    {
        "input": "How do I set up Python on Windows?",
        "output": "Download Python from python.org, run the installer and select 'Add Python to PATH' during installation."
    },
    {
        "input": "How do I install Python on Linux?",
        "output": "Use your distribution's package manager. For example, on Ubuntu: `sudo apt install python3`."
    },
    {
        "input": "How do I set up a virtual environment in Python?",
        "output": "Use `python -m venv environment_name`. Then activate it with `source environment_name/bin/activate` on Linux/Mac or `environment_name\\Scripts\\activate` on Windows."
    },
    {
        "input": "What do I do if I have multiple versions of Python installed?",
        "output": "Use specific commands like `python3` or set an alias for the version you want to use."
    },
    {
        "input": "How can I sort a list in Python?",
        "output": "Use the `sort()` method to sort instead or `sorted()` to get a new sorted list."
    },
    {
        "input": "What do I do if I want to remove duplicates from a list?",
        "output": "Convert the list to a set with `set()` and then convert it back to a list. Example: `list_without_duplicates = list(set(my_list))`."
    },
    {
        "input": "How do I merge two dictionaries?",
        "output": "In Python 3.9 or higher, use the `|` operator. Example: `new_dictionary = dic1 | dic2`."
    },
    {
        "input": "What types of exceptions exist in Python?",
        "output": "Some common examples are: `ValueError`, `TypeError`, `KeyError`, `IndexError`, and `ZeroDivisionError`."
    },
    {
        "input": "How do I create my own exceptions?",
        "output": "Create a class that inherits from `Exception`. Example: `class MyError(Exception): pass`."
    },
    {
        "input": "How do I catch any errors?",
        "output": "Use `except Exception as e:` to catch any type of exception."
    },
    {
        "input": "How do I add a new column to a DataFrame?",
        "output": "Assigning directly. Example: `df['new_column'] = values`."
    },
    {
        "input": "What do I do if my DataFrame is too large?",
        "output": "You can use `chunksize` when reading data with `pd.read_csv()` or tools like Dask for large data sets."
    },
    {
        "input": "How do I delete rows with null values?",
        "output": "Use `df.dropna()`. You can also specify columns with `subset`."
    },
    {
        "input": "How do I set up a development environment in Flask?",
        "output": "Enable development mode with `app.run(debug=True)` or by setting the environment variable `FLASK_ENV=development`."
    },
    {
        "input": "How do I handle forms in Flask?",
        "output": "Use the POST method to receive form data. Example: `request.form['field']`."
    },
    {
        "input": "How do I secure my Flask app?",
        "output": "Use extensions like Flask-Login for authentication and Flask-WTF for secure forms."
    },
    {
        "input": "How do I change the color of a chart?",
        "output": "Use the `color` parameter in the plot method. Example: `plt.plot(x, y, color='red')`."
    },
    {
        "input": "How do I add a legend to my chart?",
        "output": "Use `plt.legend()` and pass a list of labels. Example: `plt.legend(['Series 1'])`."
    },
    {
        "input": "How do I create a bar chart?",
        "output": "Use `plt.bar()`. Example: `plt.bar(x, y)`."
    },
    {
        "input": "How do I schedule repetitive tasks with Python?",
        "output": "Use the `schedule` library to schedule tasks or the `time` module to use time intervals."
    },
    {
        "input": "How do I run a script automatically?",
        "output": "On Linux, use cron. On Windows, use Task Scheduler."
    },
    {
        "input": "What can I automate with Python?",
        "output": "You can automate file handling, emails, web scraping, and many other repetitive tasks."
    },
    {
        "input": "What is Xela?",
        "output": "Xela is the colloquial name for Quetzaltenango, a city in western Guatemala."
    },
    {
        "input": "Where is Xela located?",
        "output": "Xela is located in the western highlands of Guatemala, in the department of Quetzaltenango."
    },
    {
        "input": "Why is it called Xela?",
        "output": "Xela comes from 'Xelajú', a K'iche' name that means 'under the ten ideas' or 'ten hills'."
    },
    {
        "input": "What language is spoken in Xela?",
        "output": "Spanish is the main language, but K'iche' is also spoken in many communities."
    },
    {
        "input": "What is the climate of Xela?",
        "output": "The climate in Xela is temperate and cold, with temperatures that tend to drop at night."
    },
    {
        "input": "What is El Baúl Hill?",
        "output": "Cerro El Baúl is an ecological park and one of the most emblematic places in Xela."
    },
    {
        "input": "What is the Independence Fair?",
        "output": "It is an annual celebration in Xela that commemorates the independence of Guatemala, with cultural activities and parades."
    },
    {
        "input": "What typical dishes are eaten in Xela?",
        "output": "Some typical dishes are chuchitos, pepián and garnachas."
    },
    {
        "input": "What does Quetzaltenango mean?",
        "output": "Quetzaltenango means 'wall of the quetzal' in Nahuatl."
    },
    {
        "input": "What is the Municipal Theatre of Xela?",
        "output": "It is a historic theatre built in the 19th century, famous for its architecture and cultural events."
    },
    {
        "input": "What is the Democracy Market?",
        "output": "It is a popular market in Xela known for its variety of local and artisanal products."
    },
    {
        "input": "What sports are popular in Xela?",
        "output": "Football is very popular, and the most famous team is CSD Xelajú MC."
    },
    {
        "input": "What is Central America Park?",
        "output": "It is the central square of Xela, surrounded by historic buildings and a popular meeting place."
    },
    {
        "input": "What is the Marimba Monument?",
        "output": "It is a monument dedicated to the marimba, the national musical instrument of Guatemala, located in Xela."
    },
    {
        "input": "What volcanoes are near Xela?",
        "output": "Near Xela are the Santa Maria, Santiaguito and Cerro Quemado volcanoes."
    },
    {
        "input": "What is the Santa Maria volcano?",
        "output": "It is an active volcano near Xela, popular with hikers and famous for its views."
    },
    {
        "input": "What is the Santiaguito volcano?",
        "output": "It is a very active volcano, located at the base of the Santa María volcano."
    },
    {
        "input": "What important festivals are celebrated in Xela?",
        "output": "Major festivities include the Independence Fair and Holy Week celebrations."
    },
    {
        "input": "What is Casa No'j?",
        "output": "It is a cultural center in Xela that promotes art, music and local culture."
    },
    {
        "input": "What tourist attractions are there in Xela?",
        "output": "Some tourist attractions include the Centroamérica Park, the Municipal Theater and the Fuentes Georginas hot springs."
    },
    {
        "input": "What are the Georgian Springs?",
        "output": "They are natural thermal baths located near Xela, famous for their hot waters and natural views."
    },
    {
        "input": "What are cicadas?",
        "output": "Chicharras are a typical Xela snack made from fried tortillas with meat and sauce."
    },
    {
        "input": "What is the Xela Natural History Museum?",
        "output": "It is a museum that exhibits collections of natural history, archaeology and culture of the region."
    },
    {
        "input": "What is the General Cemetery of Xela?",
        "output": "It is a historic cemetery known for its mausoleums and distinctive architecture."
    },
    {
        "input": "What extreme sports can be practiced near Xela?",
        "output": "Near Xela you can go hiking, volcano climbing and mountain biking."
    },
    {
        "input": "What universities are there in Xela?",
        "output": "Some universities in Xela include the University of San Carlos and the Mesoamerican University."
    },
    {
        "input": "What is Almolonga?",
        "output": "It is a municipality near Xela known as 'the garden of America' for its agricultural production."
    },
    {
        "input": "What are the All Saints' Day kites?",
        "output": "They are giant kites that are flown in Santiago Sacatepéquez and Sumpango during All Saints' Day."
    },
    {
        "input": "What is the importance of Xela in Guatemala?",
        "output": "Xela is the second largest city in Guatemala and an important cultural and educational center."
    },
    {
        "input": "What cultural activities are there in Xela?",
        "output": "Xela offers theatre, concerts, art exhibitions and traditional festivals."
    },
    {
        "input": "What indigenous groups live in Xela?",
        "output": "In Xela live mainly people of Mayan K'iche' origin."
    },
    {
        "input": "What is Quetzalteco?",
        "output": "Quetzalteco is the demonym of the people who live in Quetzaltenango."
    },
    {
        "input": "What is the Cuchilla Viewpoint?",
        "output": "It is a popular place in Xela to watch the sunrise and views of the city."
    },
    {
        "input": "What typical drinks are there in Xela?",
        "output": "Some typical drinks are corn atol and hot chocolate."
    },
    {
        "input": "What is the Cathedral of the Holy Spirit?",
        "output": "It is a historic church located in Central America Park, known for its architecture."
    },
    {
        "input": "What traditional markets are there in Xela?",
        "output": "In addition to the La Democracia Market, the Minerva Market is another popular market."
    },
    {
        "input": "What activities can be done around Xela?",
        "output": "You can visit nearby towns, such as Zunil and Almolonga, and explore volcanoes or hot springs."
    },
    {
        "input": "What is the Church of St. Nicholas?",
        "output": "It is a historic church located in the center of Xela."
    },
    {
        "input": "What crafts are produced in Xela?",
        "output": "In Xela, textiles, ceramics and carved wooden objects are produced."
    },
    {
        "input": "What is the USAC Central Campus in Xela?",
        "output": "It is an extension of the University of San Carlos in Quetzaltenango."
    },
    {
        "input": "What cultural markets are there in Xela?",
        "output": "The Intercultural Center of Quetzaltenango organizes cultural activities and markets."
    },
    {
        "input": "What is Salcaja?",
        "output": "Salcajá is a municipality near Xela famous for its colonial church and its traditional drink, fruit broth."
    },
    {
        "input": "What is fruit broth?",
        "output": "It is a traditional alcoholic drink from Salcajá, made with fermented fruits."
    },
    {
        "input": "What is the Xela fair?",
        "output": "The Xela fair celebrates Guatemala's independence with parades, food and cultural activities."
    },
    {
        "input": "What religious festivals are popular in Xela?",
        "output": "Holy Week and the celebrations of patron saints are very important."
    },
    {
        "input": "What role does Xela play in education?",
        "output": "Xela is a key educational center, with several universities and institutes."
    },
    {
        "input": "What agricultural products are important in Xela?",
        "output": "Corn, beans and vegetables are grown in Xela, especially in areas such as Almolonga."
    },
    {
        "input": "What tourist routes are there in Xela?",
        "output": "Popular routes include visits to volcanoes, hot springs and indigenous communities."
    },
    {
        "input": "What is Zunil?",
        "output": "Zunil is a town near Xela known for its hot springs and colonial church."
    },
    {
        "input": "What is a video game?",
        "output": "A video game is an interactive electronic game that involves a user interface to generate interaction with a screen."
    },
    {
        "input": "Who invented video games?",
        "output": "The first video game was created by William Higinbotham in 1958, called 'Tennis for Two'."
    },
    {
        "input": "What is the best-selling console in history?",
        "output": "The best-selling console in history is the PlayStation 2, with more than 155 million units sold."
    },
    {
        "input": "What is an 'eSport'?",
        "output": "'eSports' refers to professionally organised video game competitions, where players compete in events to win prizes."
    },
    {
        "input": "What is a PC Gamer?",
        "output": "A gaming PC is a computer designed specifically for playing video games, with high-performance components such as graphics cards and fast processors."
    },
    {
        "input": "What is a 'streamer'?",
        "output": "A 'streamer' is a person who broadcasts their video game sessions live through platforms such as Twitch or YouTube."
    },
    {
        "input": "What is the Fortnite video game?",
        "output": "Fortnite is a battle royale video game developed by Epic Games, popular for its online multiplayer mode and building style."
    },
    {
        "input": "What is Minecraft?",
        "output": "Minecraft is a construction and adventure video game that allows players to explore an open world, collect resources, and create structures."
    },
    {
        "input": "What is a role-playing video game?",
        "output": "A role-playing video game (RPG) is a game in which players assume the roles of characters within a fictional narrative."
    },
    {
        "input": "What is the best-selling video game of all time?",
        "output": "The best-selling video game of all time is 'Minecraft', with more than 200 million copies sold."
    },
    {
        "input": "What is a 'Battle Royale'?",
        "output": "A 'Battle Royale' is a genre of video game in which players compete against each other until only one is left standing, such as in Fortnite or PUBG."
    },
    {
        "input": "What is a fighting game?",
        "output": "A fighting game is a video game where players control characters fighting each other, such as Street Fighter or Mortal Kombat."
    },
    {
        "input": "What is an 'Open World'?",
        "output": "An 'Open World' is a type of video game that allows players to explore an open world without linear restrictions, such as in The Witcher 3."
    },
    {
        "input": "What is a 'sandbox'?",
        "output": "A sandbox is a type of video game that allows players to interact with the game world freely and creatively, such as in Minecraft or Grand Theft Auto."
    },
    {
        "input": "What is an 'MMORPG'?",
        "output": "'MMORPG' stands for 'Massively Multiplayer Online Role-Playing Game', like World of Warcraft."
    },
    {
        "input": "What is a strategy game?",
        "output": "A strategy game is a video game in which players make tactical and strategic decisions to overcome challenges, such as in Starcraft."
    },
    {
        "input": "What is an 'expansion' in video games?",
        "output": "An expansion is additional content for a video game, which adds new missions, characters or maps."
    },
    {
        "input": "What is a 'DLC'?",
        "output": "'DLC' stands for 'Downloadable Content' and is additional downloadable content for a video game, such as new missions or characters."
    },
    {
        "input": "What is virtual reality in video games?",
        "output": "Virtual reality (VR) in video games allows the player to fully immerse themselves in a digital world through the use of VR glasses or helmets."
    },
    {
        "input": "What is the Super Mario Bros game?",
        "output": "Super Mario Bros is a platform video game created by Nintendo, starring Mario, a plumber who must save Princess Peach."
    },
    {
        "input": "What is a 'speedrun'?",
        "output": "A speedrun is an attempt to complete a video game or a section of it as quickly as possible, using advanced tricks and techniques."
    },
    {
        "input": "What is a 'gamer'?",
        "output": "A 'gamer' is a person who plays video games regularly or professionally."
    },
    {
        "input": "What is a 'boss' in video games?",
        "output": "A 'boss' is an enemy or final boss that the player must defeat to advance in a video game."
    },
    {
        "input": "What is a shooting video game?",
        "output": "A shooter video game is a game in which players use guns to shoot enemies or hit targets, such as in Call of Duty."
    },
    {
        "input": "What is 'Grand Theft Auto'?",
        "output": "Grand Theft Auto (GTA) is a series of action-adventure video games where players complete missions in an open world."
    },
    {
        "input": "What is a simulation game?",
        "output": "A simulation game seeks to recreate real-life situations, such as in The Sims or SimCity."
    },
    {
        "input": "What is a platform game?",
        "output": "A platform game is a type of video game in which the player controls a character that jumps between platforms, such as in Sonic or Super Mario."
    },
    {
        "input": "What is an 'RPG'?",
        "output": "'RPG' stands for 'Role Playing Game' and is a type of video game where players take on character roles within a story."
    },
    {
        "input": "What is League of Legends?",
        "output": "League of Legends is a MOBA-type real-time strategy video game, where two teams of five players face each other in tactical matches."
    },
    {
        "input": "What is Fortnite?",
        "output": "Fortnite is an online battle royale and building game developed by Epic Games, popular for its competitive gameplay."
    },
    {
        "input": "What is co-op mode?",
        "output": "Cooperative mode is a type of game in which several players collaborate with each other to achieve a common goal."
    },
    {
        "input": "What is 'Call of Duty'?",
        "output": "Call of Duty is a popular series of first-person shooter video games set during various historical wars and conflicts."
    },
    {
        "input": "What is an action role-playing game?",
        "output": "An action role-playing game combines RPG elements with real-time combat, as in Dark Souls."
    },
    {
        "input": "What is multiplayer mode?",
        "output": "Multiplayer allows multiple players to play together online or on the same console, like in FIFA or Rocket League."
    },
    {
        "input": "What is a 'loot box'?",
        "output": "A loot box is a virtual box in video games that contains random items that players can unlock."
    },
    {
        "input": "What is an 'MMO'?",
        "output": "'MMO' stands for 'Massively Multiplayer Online', and are online games that allow thousands of players to interact in the same world."
    },
    {
        "input": "What is a 'puzzle' in video games?",
        "output": "A puzzle game is a type of video game in which players must solve puzzles or mental challenges."
    },
    {
        "input": "What is a 'sandbox'?",
        "output": "A sandbox is a type of video game that offers the player freedom to explore and create, without a specific objective."
    },
    {
        "input": "What is a racing video game?",
        "output": "A racing video game is a type of game in which players race vehicles to reach the finish line before others, such as in Mario Kart."
    },
    {
        "input": "What is The Legend of Zelda?",
        "output": "The Legend of Zelda is a famous action-adventure video game series from Nintendo, where players control Link to save Princess Zelda."
    },
    {
        "input": "What is Pac-Man?",
        "output": "Pac-Man is a classic arcade video game where players control a yellow character who must eat dots and avoid ghosts."
    },
    {
        "input": "What is a survival game?",
        "output": "A survival game is a type of video game in which players must manage resources and avoid dying in a hostile environment, such as in The Forest."
    },
    {
        "input": "What is a 'gacha'?",
        "output": "A 'gacha' is a system within video games, especially mobile games, where players can obtain characters or items through raffles."
    },
    {
        "input": "What is a 'rage quit'?",
        "output": "'Rage quit' is a term used to describe when a player quits a game due to frustration or anger."
    },
    {
        "input": "What are the main programming languages?",
        "output": "Major programming languages ​​include Python, Java, C++, JavaScript, Ruby, and Swift."
    },
    {
        "input": "What is an algorithm?",
        "output": "An algorithm is a sequence of steps or instructions to solve a problem or perform a specific task."
    },
    {
        "input": "Why is programming important?",
        "output": "Programming is important because it is the basis for the development of software, applications, systems and technologies that we use every day."
    },
    {
        "input": "What is weak artificial intelligence?",
        "output": "Weak AI is AI designed to perform specific tasks, such as virtual assistants or online recommendations, without having general awareness or understanding."
    },
    {
        "input": "How can artificial intelligence change the future?",
        "output": "AI can transform many industries, from healthcare and education to transportation, helping to automate tasks, improve diagnostics and optimize processes."
    },
    {
        "input": "What is supervised learning in AI?",
        "output": "Supervised learning is a type of machine learning where the model learns from labeled examples, i.e. data that already has the correct answer."
    },
    {
        "input": "What is a chatbot?",
        "output": "A chatbot is an artificial intelligence program designed to simulate human conversations, used for customer service or as a virtual assistant."
    },
    {
        "input": "What is Xela in historical terms?",
        "output": "Xela, or Quetzaltenango, was one of the main cities of the Guatemalan highlands during pre-Columbian times, inhabited mainly by the K'iche' Mayans."
    },
    {
        "input": "How does Xela's climate affect its agriculture?",
        "output": "Xela's cool, temperate climate favors the production of agricultural products such as vegetables, coffee and flowers, especially in areas near Almolonga."
    },
    {
        "input": "What are the Georgian Springs?",
        "output": "The Fuentes Georginas are natural hot springs located near Xela, known for their therapeutic properties and beautiful mountain views."
    },
    {
        "input": "How many volcanoes are there near Xela?",
        "output": "Near Xela there are at least three important volcanoes: Santa María, Santiaguito and Cerro Quemado."
    },
    {
        "input": "What cultural events are held in Xela?",
        "output": "Xela is known for its music, theater and dance festivals, especially during the Independence Fair and Holy Week."
    },
    {
        "input": "What makes the Santa Maria volcano unique?",
        "output": "The Santa María volcano is famous for its large size and recent volcanic activity, being one of the highest mountains in the region."
    },
    {
        "input": "How does Mayan culture affect Xela?",
        "output": "Mayan culture has a great influence in Xela, especially through the K'iche' language, gastronomy and religious and social traditions."
    },
    {
        "input": "What are 'chuchitos'?",
        "output": "Chuchitos are a typical Guatemalan dish, consisting of a small corn dough stuffed with meat and wrapped in corn leaves."
    },
    {
        "input": "Which video games were inspired by Mayan mythology?",
        "output": "Some video games, such as 'Guacamelee!' and 'Tomb Raider: The Last Revelation', are influenced by Mayan mythology and culture."
    },
    {
        "input": "How does the use of video games affect education?",
        "output": "Educational video games can improve cognitive, social and problem-solving skills and are increasingly used in interactive learning."
    },
    {
        "input": "What is the difference between a 2D and 3D video game?",
        "output": "A 2D video game is played in a two-dimensional environment, while a 3D game allows for three-dimensional movement, providing a more immersive experience."
    },
    {
        "input": "What is a speedrun and how do you do it?",
        "output": "A 'speedrun' is when a player attempts to complete a video game in the shortest amount of time possible, often using cheats or loopholes in the game's design."
    },
    {
        "input": "What is a tabletop role-playing game?",
        "output": "A tabletop role-playing game is a type of game in which players take on roles and characters in a story, but it is played in person with dice and specific rules, like Dungeons & Dragons."
    },
    {
        "input": "How does technology affect modern video games?",
        "output": "Technology has enabled more realistic graphics, open worlds, advanced artificial intelligence, and massively multiplayer online experiences."
    },
    {
        "input": "What is a 'loot box' in a video game?",
        "output": "'Loot box' is a system within some video games where players buy or win boxes containing random items or characters."
    },
    {
        "input": "What are the benefits of strategy video games?",
        "output": "Strategy video games improve decision making, long-term planning, problem solving, and teamwork."
    },
    {
        "input": "What is a fighting game?",
        "output": "A fighting game is a video game where players control characters fighting each other, such as Mortal Kombat or Street Fighter."
    },
    {
        "input": "What impact does Xela have on Guatemala's cultural industry?",
        "output": "Xela is a key cultural centre in Guatemala, with a rich tradition of theatre, music and art, and its Independence Fair is an important cultural event in the country."
    },
    {
        "input": "What does 'sandbox' mean in a video game?",
        "output": "A sandbox is a type of game where players are free to explore and create in an open world, like in Minecraft."
    },
    {
        "input": "What are the best video games for PC?",
        "output": "Some of the best PC video games include The Witcher 3, Red Dead Redemption 2, League of Legends, and Counter-Strike: Global Offensive."
    },
    {
        "input": "How important is Xela for tourists?",
        "output": "Xela is a historically and culturally rich city, famous for its architecture, nearby volcanoes, hot springs, and its indigenous K'iche' community."
    },
    {
        "input": "What is free software?",
        "output": "Free software is software whose source code is available to be used, modified and distributed freely by anyone."
    },
    {
        "input": "What is a 'bot' in programming?",
        "output": "A bot is a program designed to automate tasks, such as interacting with online users or performing repetitive actions."
    },
    {
        "input": "What is object-oriented programming?",
        "output": "Object-oriented programming is a programming paradigm that organizes software around 'objects', which are instances of classes that contain data and methods."
    },
    {
        "input": "What is gamification?",
        "output": "Gamification is the use of video game elements and mechanics in non-game contexts, such as education or marketing, to motivate people."
    },
    {
        "input": "What is the story of the 'Super Mario' saga?",
        "output": "Super Mario is a video game franchise created by Nintendo, which began in 1985 and focuses on the adventures of Mario, a plumber who rescues Princess Peach."
    },
    {
        "input": "How are graphics made in video games?",
        "output": "Video game graphics are created using digital design programs, which include texturing, 3D modeling, and character animation."
    },
    {
        "input": "What is the origin of 'Tetris'?",
        "output": "Tetris was created in 1984 by Alexey Pajitnov, a Russian scientist, and has become one of the most popular video games in history."
    },
    {
        "input": "What is a 'boss fight' in a video game?",
        "output": "A 'boss fight' is a difficult battle against a boss or powerful enemy at the end of a level or section of the game."
    },
    {
        "input": "How important are video games for mental health?",
        "output": "Some studies suggest that video games can improve cognitive skills, reduce stress and promote socialization, although they can also lead to addiction."
    },
    {
        "input": "What is a multiplayer game?",
        "output": "A multiplayer game is a video game that allows you to play with multiple people, either online or on a local console or PC."
    },
    {
        "input": "What is a 'MOBA'?",
        "output": "'MOBA' stands for 'Multiplayer Online Battle Arena', and is a genre of games in which two teams of players fight on a battlefield, like in League of Legends."
    },
    {
        "input": "What is 'World of Warcraft'?",
        "output": "World of Warcraft is a popular MMORPG in which players create characters to explore the world of Azeroth, complete quests, and participate in online battles."
    },
    {
        "input": "What is a sandbox game?",
        "output": "A sandbox game is a type of video game in which players are free to explore and create in the game world without a predefined goal."
    },
    {
        "input": "What are 'eSports'?",
        "output": "eSports are professional video game competitions, where players or teams compete in organized tournaments."
    },
    {
        "input": "What are the most played games in the world?",
        "output": "Some of the most played games in the world include Fortnite, League of Legends, Minecraft, Apex Legends, and Call of Duty."
    },
    {
        "input": "How are video games developed?",
        "output": "Video games are developed through a process that includes design, programming, graphics creation, testing and distribution."
    },
    {
        "input": "What is user interface in video games?",
        "output": "The user interface in video games is the part of the game that the player interacts with directly, such as menus, controls, and HUD (Heads-Up Display)."
    },
    {
        "input": "What is a game engine?",
        "output": "A game engine is a software that allows you to create and develop video games, managing aspects such as graphics, physics and user interaction."
    },
    {
        "input": "What was the first 3D video game?",
        "output": "One of the first 3D video games was '3D Monster Maze', released in 1981."
    },
    {
        "input": "What is a horror video game?",
        "output": "A horror video game is designed to create an atmosphere of fear and suspense, with elements of tension, terrifying creatures, and unexpected events."
    },
    {
        "input": "What is a survival video game?",
        "output": "A survival video game is a type of game where players must manage resources and survive in a hostile environment, such as in games like Minecraft or Don't Starve."
    },
    {
        "input": "What does 'NPC' mean?",
        "output": "'NPC' stands for 'Non-Player Character', which is a computer-controlled character in a video game."
    },
    {
        "input": "What is 'Minecraft'?",
        "output": "Minecraft is a building and adventure video game where players can explore, build, and survive in a block-generated world."
    },
    {
        "input": "What is an adapter?",
        "output": "An adapter is a device that allows two incompatible electronic components or systems to be connected to each other by adjusting the signals or connections so that they function correctly."
    },
    {
        "input": "What types of adapters are there?",
        "output": "There are many types of adapters, including: power adapters, video adapters, network adapters, audio adapters, and USB adapters."
    },
    {
        "input": "What is a power adapter?",
        "output": "A power adapter converts electrical current from a source into a voltage suitable for the devices it powers, such as phone chargers."
    },
    {
        "input": "What is a video adapter?",
        "output": "A video adapter allows you to connect devices with different types of video output, such as VGA to HDMI, or DisplayPort to DVI."
    },
    {
        "input": "What is a USB adapter?",
        "output": "A USB adapter allows you to connect devices that use different types of USB ports, such as USB-A to USB-C or USB to micro USB."
    },
    {
        "input": "What is an HDMI adapter?",
        "output": "An HDMI adapter is used to convert an HDMI signal to another type of connection, such as VGA or DisplayPort."
    },
    {
        "input": "What is a network adapter used for?",
        "output": "A network adapter allows you to connect a device to a network, either via Wi-Fi, Ethernet, or a different connection port."
    },
    {
        "input": "What is an audio adapter?",
        "output": "An audio adapter converts audio signals from one format to another, for example, from 3.5mm to RCA or from HDMI to 3.5mm jack."
    },
    {
        "input": "What is an SD card adapter?",
        "output": "An SD card adapter is a device that allows you to connect SD cards to other ports, such as a microSD or USB port."
    },
    {
        "input": "What adapter do I need to connect my computer to a TV?",
        "output": "Depending on your computer and TV connections, you may need an HDMI, VGA, or DisplayPort to HDMI adapter."
    },
    {
        "input": "How do I know if I need an adapter for my device?",
        "output": "You need an adapter when two devices or connections are not compatible with each other, for example, if you are trying to connect a cable with a different port than your device."
    },
    {
        "input": "What adapter do I need to connect a USB to an iPhone?",
        "output": "To connect a USB device to an iPhone, you'll need a Lightning to USB adapter or a USB-C to Lightning adapter, depending on your iPhone model."
    },
    {
        "input": "What is a voltage adapter?",
        "output": "A voltage adapter converts electrical power from one voltage to another so that devices can function properly without damage."
    },
    {
        "input": "What is a frequency adapter?",
        "output": "A frequency adapter changes the frequency of a signal, often used in radio or TV transmitters and receivers."
    },
    {
        "input": "What is a digital audio adapter?",
        "output": "A digital audio adapter converts a digital audio signal (such as S/PDIF or Toslink) to an analog signal or vice versa."
    },
    {
        "input": "What adapter do I need for my laptop if it doesn't have an HDMI port?",
        "output": "If your laptop does not have an HDMI port, you can use a VGA or Mini DisplayPort to HDMI adapter, depending on your laptop's outputs."
    },
    {
        "input": "What is the difference between an adapter and a converter?",
        "output": "The main difference is that an adapter usually changes the connector type, while a converter changes the signal type or format (for example, from digital to analog)."
    },
    {
        "input": "What is a universal power adapter?",
        "output": "A universal power adapter is a device that can fit different plug types and voltages, allowing it to be used in multiple countries."
    },
    {
        "input": "Can I use a power adapter for a different device?",
        "output": "It depends on the power and type of current your device needs. It is important to check the specifications of the adapter and the device."
    },
    {
        "input": "What is a Wi-Fi network adapter?",
        "output": "A Wi-Fi network adapter is a device that allows a device to connect to a wireless network if it does not have a built-in Wi-Fi network card."
    },
    {
        "input": "What is an Ethernet network adapter?",
        "output": "An Ethernet network adapter allows a device to connect to a wired network through an Ethernet port."
    },
    {
        "input": "Can I connect my phone to my TV with an adapter?",
        "output": "Yes, you can use a USB-C or microUSB to HDMI adapter to connect your phone to the TV."
    },
    {
        "input": "What is a USB-C adapter?",
        "output": "A USB-C adapter allows you to connect devices with USB-C ports to other ports, such as USB-A or HDMI."
    },
    {
        "input": "What is a laptop power adapter used for?",
        "output": "A laptop power adapter converts the electrical current from a wall outlet into the appropriate voltage to charge the battery or power the laptop."
    },
    {
        "input": "What is a wireless network adapter?",
        "output": "A wireless network adapter is a device that allows a device to connect to a Wi-Fi network if it does not have built-in wireless capability."
    },
    {
        "input": "What is a Bluetooth audio adapter?",
        "output": "A Bluetooth audio adapter converts an audio signal from a non-Bluetooth device into a format compatible with Bluetooth headphones or speakers."
    },
    {
        "input": "How do you use an HDMI to VGA adapter?",
        "output": "An HDMI to VGA adapter is used to connect devices with HDMI output (such as a computer) to monitors or projectors that only have VGA input."
    },
    {
        "input": "What is a VGA adapter?",
        "output": "A VGA adapter allows you to connect devices with a VGA output to other devices, such as monitors, that have different input types."
    },
    {
        "input": "What is a microUSB to USB adapter?",
        "output": "A microUSB to USB adapter allows you to connect a device with a microUSB port (such as a phone) to other USB devices, such as keyboards or mice."
    },
    {
        "input": "What adapter do I need to connect my console to the TV?",
        "output": "You'll usually need an HDMI adapter, as most modern consoles use this type of output."
    },
    {
        "input": "Are there adapters for memory cards?",
        "output": "Yes, there are adapters that allow you to use different types of memory cards, such as SD to microSD or CF to SD."
    },
    {
        "input": "What is a USB to Ethernet adapter?",
        "output": "A USB to Ethernet adapter allows you to connect a device without an Ethernet port to a network using a USB adapter."
    },
    {
        "input": "What is a laptop power adapter?",
        "output": "It is a device that converts alternating current from a power outlet into direct current suitable for charging a laptop."
    },
    {
        "input": "How do I know what type of adapter I need?",
        "output": "It depends on the ports and connections on your devices. Make sure you identify the input and output types of each device before looking for the right adapter."
    },
    {
        "input": "Can I use an adapter to charge my phone?",
        "output": "Yes, you can use an adapter to connect your phone to a charger with the correct port type, such as USB-C or microUSB."
    },
    {
        "input": "What is a vehicle power adapter?",
        "output": "A vehicle power adapter converts a car's power to charge devices such as phones or laptops."
    },
    {
        "input": "What is an RCA audio adapter?",
        "output": "An RCA audio adapter converts 3.5mm audio signals to RCA (red and white) for connecting to older audio devices."
    },
    {
        "input": "What adapter do I need for my Bluetooth device?",
        "output": "You will need a USB Bluetooth adapter if your device does not have built-in Bluetooth capability."
    },
    {
        "input": "What is a Lightning adapter?",
        "output": "A Lightning adapter is a connector used on Apple devices to charge, transfer data, and connect accessories."
    },
    {
        "input": "Can I use an adapter to connect a phone to my PC?",
        "output": "Yes, you can use a USB-C or microUSB to USB adapter to connect a phone to your computer."
    },
    {
        "input": "What is a 3.5mm audio adapter?",
        "output": "A 3.5mm audio adapter converts audio signals from different ports, such as 3.5mm to RCA or 3.5mm to 6.3mm jack."
    },
    {
        "input": "What is a hearing aid adapter?",
        "output": "A headphone adapter allows you to connect headphones with different types of connections, such as 3.5mm to 1/4 inch."
    },
    {
        "input": "What type of adapter do I need for my projector?",
        "output": "Depending on your projector's input, you may need an HDMI to VGA or HDMI to DisplayPort adapter."
    },
    {
        "input": "What is technology?",
        "output": "Technology is the set of knowledge, techniques and tools used to create, develop and improve products, services and processes."
    },
    {
        "input": "What are the most used technologies today?",
        "output": "The most widely used technologies today include artificial intelligence, cloud computing, the Internet of Things (IoT), blockchain and augmented reality."
    },
    {
        "input": "What is artificial intelligence?",
        "output": "Artificial intelligence (AI) is a field of technology that seeks to create systems capable of performing tasks that require human intelligence, such as learning, reasoning, and decision-making."
    },
    {
        "input": "What is the Internet of Things (IoT)?",
        "output": "The Internet of Things (IoT) is a concept that connects physical devices to the internet so they can collect and share data, such as thermostats, smart watches, and home appliances."
    },
    {
        "input": "What is the cloud?",
        "output": "The cloud is a model for storing and processing data through remote servers accessible via the Internet, which allows information to be stored and accessed from anywhere."
    },
    {
        "input": "What is blockchain?",
        "output": "Blockchain is a decentralized ledger technology that allows data to be stored in a secure, transparent and immutable manner, primarily used in cryptocurrencies such as Bitcoin."
    },
    {
        "input": "What is augmented reality?",
        "output": "Augmented reality (AR) is a technology that superimposes virtual elements on the real world through devices such as smartphones or specialized glasses."
    },
    {
        "input": "What is an algorithm?",
        "output": "An algorithm is a set of instructions or rules that are followed to perform a specific task or solve a problem."
    },
    {
        "input": "What is quantum computing?",
        "output": "Quantum computing is an area of ​​computer science that uses principles of quantum mechanics to process information much faster and more efficiently than traditional computers."
    },
    {
        "input": "What is big data?",
        "output": "Big Data refers to the management of large volumes of data that are too complex to be processed by traditional systems, and are used to obtain valuable patterns and analysis."
    },
    {
        "input": "What is cybersecurity?",
        "output": "Cybersecurity is the practice of protecting computer systems, networks, and data from attack, damage, or unauthorized access."
    },
    {
        "input": "What is a mobile device?",
        "output": "A mobile device is a portable device that can perform various functions, such as a smartphone, tablet or smartwatch."
    },
    {
        "input": "What is an operating system?",
        "output": "An operating system is the software that manages a device's hardware and provides services necessary for other applications to function properly, such as Windows, macOS, or Android."
    },
    {
        "input": "What is a web browser?",
        "output": "A web browser is a software used to access and view websites on the Internet, such as Google Chrome, Mozilla Firefox or Safari."
    },
    {
        "input": "What are social networks?",
        "output": "Social media are online platforms where people can interact, share content, and create communities, such as Facebook, Instagram, Twitter, and LinkedIn."
    },
    {
        "input": "What is 5G?",
        "output": "5G is the fifth generation of mobile networks, promising much faster connection speeds, greater network capacity and lower latency."
    },
    {
        "input": "What is a microprocessor?",
        "output": "A microprocessor is a chip that executes the instructions of a computer program and coordinates the operations of a computer system, functioning as the brain of a computer."
    },
    {
        "input": "What is virtual reality?",
        "output": "Virtual reality (VR) is a technology that creates an immersive simulated environment that can interact with the user through devices such as VR glasses."
    },
    {
        "input": "What is a robot?",
        "output": "A robot is a programmable machine capable of performing tasks automatically, often by imitating human behavior or performing repetitive work."
    },
    {
        "input": "What is automation?",
        "output": "Automation is the use of technology to perform tasks without human intervention, optimizing processes in industry, agriculture and other areas."
    },
    {
        "input": "What are cryptocurrencies?",
        "output": "Cryptocurrencies are digital currencies that use cryptography to secure transactions and control the creation of new units, such as Bitcoin or Ethereum."
    },
    {
        "input": "What is a server?",
        "output": "A server is a computer or system that provides services to other computers or devices on a network, such as hosting websites or storing data."
    },
    {
        "input": "What is cloud computing?",
        "output": "Cloud computing is a model for delivering computing services (storage, applications, etc.) over the Internet, without the need for physical servers."
    },
    {
        "input": "What is an IoT device?",
        "output": "An IoT (Internet of Things) device is any physical object that is connected to the internet to collect or share data, such as smart thermostats or security cameras."
    },
    {
        "input": "What is free software?",
        "output": "Free software is software whose source code is available so that anyone can use, modify and distribute it according to their needs."
    },
    {
        "input": "What is a firewall?",
        "output": "A firewall is a security system that controls incoming and outgoing network traffic to protect a computer system from unauthorized access."
    },
    {
        "input": "What is applied artificial intelligence?",
        "output": "Applied artificial intelligence refers to the practical implementation of AI technologies in different industries, such as automation, medicine, and data analysis."
    },
    {
        "input": "What are drones?",
        "output": "Drones are unmanned aerial vehicles used for a variety of applications, from aerial photography to deliveries to exploration."
    },
    {
        "input": "What is a portable device?",
        "output": "A portable device is a small, lightweight device that can be easily carried, such as a mobile phone, tablet or laptop."
    },
    {
        "input": "What is machine learning?",
        "output": "Machine learning is a branch of artificial intelligence that allows machines to learn from data and improve their performance without being explicitly programmed."
    },
    {
        "input": "What is a search algorithm?",
        "output": "A search algorithm is a computational process designed to find an item within a data structure, such as searching for information on the Internet or databases."
    },
    {
        "input": "What is an NFC chip?",
        "output": "An NFC (Near Field Communication) chip is a device that allows wireless data transmission between devices over short distances, used in mobile payments and other applications."
    },
    {
        "input": "What is a virtual assistant?",
        "output": "A virtual assistant is software that uses artificial intelligence to interact with users, answer questions, and perform tasks, such as Siri, Alexa, or Google Assistant."
    },
    {
        "input": "What is responsive design?",
        "output": "Responsive design is a web design approach that allows a site to adapt and look good on different devices and screen sizes."
    },
    {
        "input": "What are smartwatches?",
        "output": "Smartwatches are smart watches that perform functions beyond displaying time, such as health monitoring, notifications, music control, and more."
    },
    {
        "input": "What is a memory chip?",
        "output": "A memory chip is a component of a device that stores data, such as RAM or flash memory in phones and computers."
    },
    {
        "input": "What is a voice assistant?",
        "output": "A voice assistant is software that allows users to interact with devices through voice commands, such as Siri, Alexa, or Google Assistant."
    },
    {
        "input": "What is big data?",
        "output": "Big Data is the term used to describe large volumes of data that cannot be processed by traditional methods, and are used for advanced analysis and decision making."
    },
    {
        "input": "What is a cloud service?",
        "output": "A cloud service is any computing service provided over the Internet, such as storage, processing, or applications."
    },
    {
        "input": "What is a wearable device?",
        "output": "A wearable device is a gadget that is worn on the body and connects to other devices, such as smart watches, fitness trackers, and smart glasses."
    },
    {
        "input": "What is a computer virus?",
        "output": "A computer virus is a type of malicious software that can replicate and spread through files and networks, damaging or disrupting the systems on which it is installed."
    },
    {
        "input": "What is cloud computing?",
        "output": "Cloud computing is a model for delivering computing services over the Internet, allowing businesses and users to access data and applications without the need for physical infrastructure."
    },
    {
        "input": "What is the Systems Engineering degree?",
        "output": "The Systems Engineering degree focuses on the design, development and maintenance of computer and technological systems, combining knowledge of software, hardware, networks and project management."
    },
    {
        "input": "What is studied in Systems Engineering?",
        "output": "Systems Engineering covers topics such as programming, databases, networks, computer security, algorithms, software development, artificial intelligence and technology project management."
    },
    {
        "input": "How long does the Systems Engineering degree last?",
        "output": "The duration of a Systems Engineering degree is generally 5 years, although it may vary depending on the university and the country."
    },
    {
        "input": "What skills are needed to study Systems Engineering?",
        "output": "Analytical, logical-mathematical skills, problem-solving ability, interest in technology and computing, and teamwork skills are required."
    },
    {
        "input": "In what areas can a Systems Engineer work?",
        "output": "A Systems Engineer can work in areas such as software development, database administration, networks and telecommunications, cybersecurity, data analysis, artificial intelligence and technology project management."
    },
    {
        "input": "Is it difficult to study Systems Engineering?",
        "output": "The difficulty depends on each person's interest and skills. The degree has a technical and mathematical focus, so it requires effort and dedication, but it is accessible to those interested in technology."
    },
    {
        "input": "What subjects are the most important in Systems Engineering?",
        "output": "Key subjects include programming, data structures, computer networks, databases, software engineering, algorithms, artificial intelligence and applied mathematics."
    },
    {
        "input": "Can a Systems Engineer work in technology companies?",
        "output": "Yes, a Systems Engineer can work in technology companies, developing software, managing networks, administering databases and participating in innovative technological projects."
    },
    {
        "input": "What is software development?",
        "output": "Software development is the process of designing, creating, testing and maintaining computer applications or systems, using different programming languages ​​and methodologies."
    },
    {
        "input": "What programming languages ​​are learned in Systems Engineering?",
        "output": "In Systems Engineering, you learn languages ​​such as Java, C++, Python, JavaScript, PHP, SQL, Ruby and others used in web development, mobile applications and database systems."
    },
    {
        "input": "What is a database?",
        "output": "A database is an organized system for storing, managing, and accessing data efficiently. Systems Engineers learn to design, create, and manage databases."
    },
    {
        "input": "Is it necessary to know mathematics to study Systems Engineering?",
        "output": "Yes, mathematics is fundamental in Systems Engineering, especially in areas such as algorithms, data structures, programming and networks."
    },
    {
        "input": "What does a Systems Engineer do in the network area?",
        "output": "In the area of ​​networks, a Systems Engineer is responsible for designing, implementing, managing and securing data communication networks in a company or organization."
    },
    {
        "input": "What is cybersecurity?",
        "output": "Cybersecurity is the field of technology concerned with protecting computer systems, networks and data from attacks, unauthorized access and other threats."
    },
    {
        "input": "What is the difference between Systems Engineering and Computer Science?",
        "output": "The main difference is that Systems Engineering focuses more on the implementation and management of technological systems, while Computer Science is more focused on algorithm theory and computing research."
    },
    {
        "input": "What is object-oriented programming?",
        "output": "Object-oriented programming is a programming paradigm that organizes software into objects, which contain data and methods for operating on that data."
    },
    {
        "input": "What is an operating system?",
        "output": "An operating system is the software that manages a computer's hardware and resources, providing an interface between the user and the hardware, such as Windows, Linux, or macOS."
    },
    {
        "input": "What is an algorithm?",
        "output": "An algorithm is a set of instructions or rules defined to solve a problem or perform a specific task efficiently."
    },
    {
        "input": "Does a Systems Engineer work alone?",
        "output": "No, you typically work in multidisciplinary teams with other engineers, designers, analysts and management staff to develop complex technology solutions."
    },
    {
        "input": "What is data analysis?",
        "output": "Data analysis is the process of inspecting, cleaning, and modeling data in order to discover useful insights, draw conclusions, and support decision making."
    },
    {
        "input": "What is artificial intelligence?",
        "output": "Artificial intelligence is the field of computer science that develops systems capable of performing tasks that normally require human intelligence, such as learning, pattern recognition, and decision making."
    },
    {
        "input": "What is web programming?",
        "output": "Web programming is the development of applications and websites, using technologies such as HTML, CSS, JavaScript, and databases to create interactive online experiences."
    },
    {
        "input": "What is a database management system?",
        "output": "A database management system (DBMS) is software that allows you to create, manage, and access databases, such as MySQL, PostgreSQL, or Microsoft SQL Server."
    },
    {
        "input": "What is Agile Software Development?",
        "output": "Agile development is a software development methodology that promotes constant collaboration, flexibility, and incremental delivery of products."
    },
    {
        "input": "What is a server?",
        "output": "A server is a computer or system that provides services, such as website hosting or file storage, to other devices or users on a network."
    },
    {
        "input": "Can a Systems Engineer work in the hardware field?",
        "output": "Yes, although it focuses more on software, a Systems Engineer can also work with hardware, designing and managing physical systems that support applications and networks."
    },
    {
        "input": "What is systems analysis?",
        "output": "Systems analysis is the process of studying existing systems, understanding their needs, and designing IT solutions to optimize their performance."
    },
    {
        "input": "What is a data model?",
        "output": "A data model is a structured representation of data, showing how it is organized, related, and accessed within a system or database."
    },
    {
        "input": "What is the Internet of Things?",
        "output": "The Internet of Things (IoT) is a concept that connects physical devices to the Internet so they can share and receive data, improving interaction between them."
    },
    {
        "input": "What is Python programming?",
        "output": "Python is a high-level programming language known for its simple syntax and versatility, used in a variety of areas such as web development, data science, and automation."
    },
    {
        "input": "What is software testing?",
        "output": "Software testing is the process of verifying and validating that software functions correctly, identifying errors and ensuring its quality."
    },
    {
        "input": "What is cloud computing?",
        "output": "Cloud computing is the use of computing resources, such as servers and storage, provided over the Internet, without the need for proprietary infrastructure."
    },
    {
        "input": "What is a framework?",
        "output": "A framework is a set of preconfigured tools and libraries that facilitate application development by providing a standard structure."
    },
    {
        "input": "What is a software prototype?",
        "output": "A software prototype is a preliminary version or functional model of an application that allows testing and evaluating its functionalities before final development."
    },
    {
        "input": "What is a programming language?",
        "output": "A programming language is a communication system used to write instructions that a computer can execute, such as Java, C++, or JavaScript."
    },
    {
        "input": "What is a requirements analysis?",
        "output": "Requirements analysis is the process of identifying, understanding and documenting customer or user needs in order to develop a system that meets them."
    },
    {
        "input": "What is a software development life cycle?",
        "output": "The software development life cycle is a set of phases or stages that guide the process of creating, implementing, and maintaining software, such as planning, design, development, testing, and maintenance."
    },
    {
        "input": "What is virtualization?",
        "output": "Virtualization is the process of creating a virtual version of a physical resource, such as servers, operating systems, or storage, to improve efficiency and reduce costs."
    },
    {
        "input": "What is a chatbot?",
        "output": "A chatbot is an artificial intelligence program designed to simulate conversations with users, providing automatic answers to common questions."
    },
    {
        "input": "Can a Systems Engineer work in the public sector?",
        "output": "Yes, a Systems Engineer can work in the public sector, managing technological projects for government institutions, implementing information systems and securing technological infrastructure."
    },
    {
        "input": "What is business management software?",
        "output": "Enterprise resource planning software is an application that helps businesses manage internal resources, processes and operations, such as ERP (Enterprise Resource Planning) or CRM (Customer Relationship Management)."
    },
    {
        "input": "What is data analysis?",
        "output": "Data analysis is the process of inspecting, cleaning, and transforming data to discover useful insights and support decision making."
    },
    {
        "input": "What is object-oriented programming?",
        "output": "It is a programming paradigm based on objects, which contain data and methods to operate on that data."
    },
    {
        "input": "What is a flowchart?",
        "output": "It is a graphical representation of an algorithm or process, using symbols to represent actions and arrows for flow."
    },
    {
        "input": "How can I learn to program from scratch?",
        "output": "Start with an easy language like Python, learn the basics and practice solving simple problems."
    },
    {
        "input": "Which programming languages ​​are best for artificial intelligence?",
        "output": "Python is the most popular for AI, thanks to its libraries like TensorFlow and PyTorch."
    },
    {
        "input": "How do I import a library in Python?",
        "output": "Use the `import` keyword. For example: `import math`."
    },
    {
        "input": "What is a JSON file?",
        "output": "It is a format for storing structured data in key-value pairs, commonly used for data exchange."
    },
    {
        "input": "How do I convert a list to a string in Python?",
        "output": "Use the `.join()` method. Example: `','.join(my_list)`."
    },
    {
        "input": "What is the difference between a list and a dictionary?",
        "output": "A list is an ordered collection of elements, while a dictionary is a collection of key-value pairs."
    },
    {
        "input": "How do I install Django?",
        "output": "Run `pip install django` in the terminal."
    },
    {
        "input": "How do I set up a virtual environment in Python?",
        "output": "Use the command `python -m venv environment_name` and activate it with `source environment_name/bin/activate` on Linux/Mac or `environment_name\\Scripts\\activate` on Windows."
    },
    {
        "input": "What is a virtual environment?",
        "output": "It is a way to isolate Python projects, ensuring that each has its own dependencies."
    },
    {
        "input": "How do I use pip to install multiple libraries?",
        "output": "Create a `requirements.txt` file with the library names and use `pip install -r requirements.txt`."
    },
    {
        "input": "Can you give me an example of recursion?",
        "output": "Sure, here's an example of a recursive factorial: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "How do I make a program to count words?",
        "output": "Use `split()` to split text into words and `len()` to count. Example: `len(text.split())`."
    },
    {
        "input": "Can you show me how to create a bar chart?",
        "output": "Sure: `import matplotlib.pyplot as plt; plt.bar(['A', 'B', 'C'], [10, 20, 30]); plt.show()`."
    },
    {
        "input": "How do I connect Python to a MySQL database?",
        "output": "Uses the `mysql-connector-python` library. Basic example: `import mysql.connector` and establishes the connection with `mysql.connector.connect()`."
    },
    {
        "input": "How to print a message in Python?",
        "output": "You can print a message in Python using the 'print' function. Example: print('Hello, world!')"
    },
    {
        "input": "How to declare a variable in Python?",
        "output": "To declare a variable in Python, you simply assign a value to a name. Example: x = 5"
    },
    {
        "input": "How to add two numbers in Python?",
        "output": "You can add two numbers with the '+' operator as follows: result = 5 + 3"
    },
    {
        "input": "How to make an if condition in Python?",
        "output": "The basic syntax for an if statement in Python is: if condition: \ncode. Example: if x > 0: print('Positive')"
    },
    {
        "input": "How to use a for loop in Python?",
        "output": "A 'for' loop in Python is used to iterate over a sequence. Example: for i in range(5): print(i)"
    },
    {
        "input": "How to use a while loop in Python?",
        "output": "A 'while' loop executes a block of code as long as a condition is met. Example: while x < 5: x += 1"
    },
    {
        "input": "How to create a function in Python?",
        "output": "To create a function in Python, you use 'def'. Example: def greet(): print('Hello!')"
    },
    {
        "input": "How to pass arguments to a function in Python?",
        "output": "You can pass arguments to a function when defining it. Example: def greet(name): print('Hello, ' + name)"
    },
    {
        "input": "How to return a value in a Python function?",
        "output": "You can return a value using the 'return' keyword. Example: def add(a, b): return a + b"
    },
    {
        "input": "How to concatenate strings in Python?",
        "output": "You can concatenate strings using the '+' operator. Example: greeting = 'Hello' + ' ' + 'World'"
    },
    {
        "input": "How to convert a number to string in Python?",
        "output": "You can convert a number to a string using the 'str' function. Example: str(5)"
    },
    {
        "input": "How to convert a string to a number in Python?",
        "output": "You can convert a string to a number using 'int' or 'float'. Example: int('5') or float('5.5')"
    },
    {
        "input": "How to create a list in Python?",
        "output": "You can create a list with brackets []. Example: my_list = [1, 2, 3]"
    },
    {
        "input": "How to access an element of a list in Python?",
        "output": "You access an element of a list using its index. Example: my_list[0]"
    },
    {
        "input": "How to add an item to a list in Python?",
        "output": "You can add an item using 'append'. Example: my_list.append(4)"
    },
    {
        "input": "How to remove an element from a list in Python?",
        "output": "You can remove an item using 'remove'. Example: my_list.remove(3)"
    },
    {
        "input": "How to check if an element is in a list in Python?",
        "output": "You can use the 'in' operator. Example: 3 in my_list"
    },
    {
        "input": "How to create a dictionary in Python?",
        "output": "You can create a dictionary with curly braces {}. Example: my_dictionary = {'key': 'value'}"
    },
    {
        "input": "How to access a value in a dictionary in Python?",
        "output": "You access a value using the key. Example: my_dictionary['key']"
    },
    {
        "input": "How to add an item to a dictionary in Python?",
        "output": "You can add an item by assigning a value to a new key. Example: my_dictionary['new_key'] = 'new_value'"
    },
    {
        "input": "How to remove an item from a dictionary in Python?",
        "output": "You can delete an item using 'del'. Example: del my_dictionary['key']"
    },
    {
        "input": "How to check if a key exists in a dictionary in Python?",
        "output": "You can use the 'in' operator. Example: 'key' in my_dictionary"
    },
    {
        "input": "How to make a list comprehension in Python?",
        "output": "A list comprehension allows you to create a list in a compact way. Example: squares = [x**2 for x in range(5)]"
    },
    {
        "input": "How to read a file in Python?",
        "output": "You can read a file with the 'open' function and the 'read' method. Example: file = open('file.txt', 'r'); content = file.read()"
    },
    {
        "input": "How to write to a file in Python?",
        "output": "You can write to a file using the 'write' method. Example: file = open('file.txt', 'w'); file.write('Text')"
    },
    {
        "input": "How to handle exceptions in Python?",
        "output": "You can handle exceptions with a 'try-except' block. Example: try: 1/0 except ZeroDivisionError: print('Division by zero error')"
    },
    {
        "input": "How to generate a random number in Python?",
        "output": "You can generate a random number with the 'randint' function of the 'random' module. Example: import random; num = random.randint(1, 10)"
    },
    {
        "input": "How to sort a list in Python?",
        "output": "You can sort a list using the 'sort' method. Example: my_list.sort()"
    },
    {
        "input": "How to reverse a list in Python?",
        "output": "You can reverse a list using the 'reverse' method. Example: my_list.reverse()"
    },
    {
        "input": "How to count the number of times an element appears in a list in Python?",
        "output": "You can use the 'count' method. Example: my_list.count(3)"
    },
    {
        "input": "How to get the index of an element in a list in Python?",
        "output": "You can use the 'index' method. Example: my_list.index(3)"
    },
    {
        "input": "How to create a tuple in Python?",
        "output": "You can create a tuple with parentheses (). Example: my_tuple = (1, 2, 3)"
    },
    {
        "input": "How to access an element of a tuple in Python?",
        "output": "You access an element of a tuple using its index. Example: my_tuple[0]"
    },
    {
        "input": "How to concatenate tuples in Python?",
        "output": "You can concatenate tuples using the '+' operator. Example: my_tuple1 + my_tuple2"
    },
    {
        "input": "How to convert a tuple to a list in Python?",
        "output": "You can convert a tuple to a list using 'list'. Example: list = list(my_tuple)"
    },
    {
        "input": "What is a set in Python?",
        "output": "A set in Python is an unordered collection of unique elements. It is created with curly braces {}. Example: my_set = {1, 2, 3}"
    },
    {
        "input": "How to add an element to a set in Python?",
        "output": "You can add an element using 'add'. Example: my_set.add(4)"
    },
    {
        "input": "How to remove an element from a set in Python?",
        "output": "You can remove an item using 'remove'. Example: my_set.remove(3)"
    },
    {
        "input": "How to check if an element is in a set in Python?",
        "output": "You can use the 'in' operator. Example: 3 in my_set"
    },
    {
        "input": "How to create a recursive function in Python?",
        "output": "A recursive function is a function that calls itself. Example: def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"
    },
    {
        "input": "How to generate a float random number in Python?",
        "output": "You can generate a floating point random number with 'uniform' from the 'random' module. Example: random.uniform(1.0, 10.0)"
    },
    {
        "input": "How to check if a list is empty in Python?",
        "output": "You can check if a list is empty with 'not'. Example: if not my_list: print('Empty list')"
    },
    {
        "input": "How to combine two lists in Python?",
        "output": "You can combine two lists with the '+' operator. Example: combined_list = list1 + list2"
    },
    {
        "input": "How to create a set of keys in a dictionary in Python?",
        "output": "You can get the keys of a dictionary with the 'keys' method. Example: dictionary.keys()"
    },
    {
        "input": "How to get values ​​from a dictionary in Python?",
        "output": "You can get the values ​​from a dictionary with the 'values' method. Example: dictionary.values()"
    },
    {
        "input": "How to remove all elements from a dictionary in Python?",
        "output": "You can remove all the elements using the 'clear' method. Example: dictionary.clear()"
    },
    {
        "input": "How to check if a list contains all elements of another list in Python?",
        "output": "You can use the 'all' operator with a list comprehension. Example: all(elem in list2 for elem in list1)"
    },
    {
        "input": "How to find the maximum value in a list in Python?",
        "output": "You can find the maximum value using 'max'. Example: max(my_list)"
    },
    {
        "input": "How to find minimum value in a list in Python?",
        "output": "You can find the minimum value using 'min'. Example: min(my_list)"
    },
    {
        "input": "How do I make a function in Python?",
        "output": "Use the `def` keyword. Example: `def greet(): print('Hello, world')`."
    },
    {
        "input": "How do you run a Python program?",
        "output": "Use the command `python filename.py` in the terminal."
    },
    {
        "input": "What is an exception in Python?",
        "output": "It is an error during program execution that can be handled using `try-except` blocks."
    },
    {
        "input": "How do I handle multiple exceptions in Python?",
        "output": "Use multiple `except` blocks. Example: `try: ... except ValueError: ... except TypeError: ...`."
    },
    {
        "input": "How do I read a file in Python?",
        "output": "Use the `open()` method in read mode. Example: `with open('file.txt', 'r') as file: contents = file.read()`."
    },
    {
        "input": "How do I write a file in Python?",
        "output": "Use write (`w`) or append (`a`) mode. Example: `with open('file.txt', 'w') as file: file.write('Text')`."
    },
    {
        "input": "What are list comprehensions in Python?",
        "output": "It is a compact way to create lists. Example: `squares = [x**2 for x in range(10)]`."
    },
    {
        "input": "How do I make a for loop in Python?",
        "output": "Use the `for` keyword. Example: `for i in range(5): print(i)`."
    },
    {
        "input": "What is a module in Python?",
        "output": "It is a file containing definitions and reusable functions. You can import it with `import module_name`."
    },
    {
        "input": "How do I install a library in Python?",
        "output": "Use the command `pip install library_name`. For example: `pip install requests`."
    },
    {
        "input": "How do I remove an item from a list in Python?",
        "output": "Use `remove()` or `del`. Example: `my_list.remove('item')` or `del my_list[index]`."
    },
    {
        "input": "How do I find the size of a list in Python?",
        "output": "Use the `len()` function. Example: `len(my_list)`."
    },
    {
        "input": "How do I convert a string to an integer in Python?",
        "output": "Use the `int()` function. Example: `number = int('123')`."
    },
    {
        "input": "How do I convert an integer to a string in Python?",
        "output": "Use the `str()` function. Example: `text = str(123)`."
    },
    {
        "input": "What is a set in Python?",
        "output": "It is an unordered collection of unique elements. Example: `my_set = {1, 2, 3}`."
    },
    {
        "input": "How do I remove duplicates from a list in Python?",
        "output": "Converts the list to a set. Example: `no_duplicates = list(set(my_list))`."
    },
    {
        "input": "How do I sort a list in Python?",
        "output": "Use the `sort()` method or the `sorted()` function. Example: `my_list.sort()` or `sorted(my_list)`."
    },
    {
        "input": "How do I reverse a list in Python?",
        "output": "Use the `reverse()` or slicing method. Example: `my_list.reverse()` or `my_list[::-1]`."
    },
    {
        "input": "How do I use arguments in a function in Python?",
        "output": "Declare them inside parentheses. Example: `def add(a, b): return a + b`."
    },
    {
        "input": "What is a default argument in Python?",
        "output": "It is a default value for an argument. Example: `def greet(name='World'): print('Hello,', name)`."
    },
    {
        "input": "What is a lambda function in Python?",
        "output": "It is a single-line anonymous function. Example: `lambda x: x**2`."
    },
    {
        "input": "How do I filter a list in Python?",
        "output": "Use `filter()` with a function. Example: `list(filter(lambda x: x > 0, my_list))`."
    },
    {
        "input": "How do I use map in Python?",
        "output": "Applies a function to all elements of a list. Example: `list(map(lambda x: x**2, my_list))`."
    },
    {
        "input": "What is a tuple in Python?",
        "output": "It is an immutable collection of ordered elements. Example: `my_tuple = (1, 2, 3)`."
    },
    {
        "input": "How do I create a class in Python?",
        "output": "Use the `class` keyword. Example: `class Dog: def __init__(self, name): self. name = name`."
    },
    {
        "input": "What is inheritance in Python?",
        "output": "It is a mechanism where one class can use attributes and methods of another. Example: `class Son(Parent): ...`."
    },
    {
        "input": "How do I generate random numbers in Python?",
        "output": "Use the `random` library. Example: `import random; random.randint(1, 10)`."
    },
    {
        "input": "How do I convert a string to a list?",
        "output": "Use the `split()` method. Example: `'hello world'.split()`."
    },
    {
        "input": "How do I combine two lists in Python?",
        "output": "Use the `+` or `extend()` operator. Example: `list1 + list2` or `list1.extend(list2)`."
    },
    {
        "input": "How do I create a dictionary in Python?",
        "output": "Use `{}` braces with key-value pairs. Example: `my_dictionary = {'key': 'value'}`."
    },
    {
        "input": "How do I access a value in a dictionary?",
        "output": "Use the key in brackets. Example: `my_dictionary['key']`."
    },
    {
        "input": "How do I add an item to a dictionary?",
        "output": "Use a new key. Example: `my_dictionary['new_key'] = 'value'`."
    },
    {
        "input": "What is Python Flask?",
        "output": "Flask is a microframework for developing web applications with Python."
    },
    {
        "input": "What is a REST API?",
        "output": "It is a web service that allows communication between applications using HTTP and RESTful principles."
    },
    {
        "input": "How do I create an API with Flask?",
        "output": "Use Flask to define routes. Example: `from flask import Flask; app = Flask(__name__); @app.route('/') def home(): return 'Hello, world'`."
    },
    {
        "input": "What is NumPy in Python?",
        "output": "NumPy is a library for mathematical calculations and array handling."
    },
    {
        "input": "How do I create an array in NumPy?",
        "output": "Use `numpy.array()`. Example: `import numpy as np; my_array = np.array([1, 2, 3])`."
    },
    {
        "input": "How do I load a CSV file into Pandas?",
        "output": "Use `pandas.read_csv()`. Example: `import pandas as pd; df = pd.read_csv('file.csv')`."
    },
    {
        "input": "How do I select columns in Pandas?",
        "output": "Access with brackets. Example: `df['column']` or `df[['column1', 'column2']]`."
    },
    {
        "input": "What is Zen of Python?",
        "output": "It is a set of principles for writing Python code, accessible with `import this`."
    },
    {
        "input": "How can I write a program in Python that calculates the factorial of a number?",
        "output": "You can write a recursive function to calculate the factorial of a number. Example: def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"
    },
    {
        "input": "How can I do a binary search in Python?",
        "output": "You can implement recursive or iterative binary search. Example: def binary_search(arr, x): low, high = 0, len(arr) - 1; while low <= high: mid = (low + high) // 2; if arr[mid] == x: return mid; elif arr[mid] < x: low = mid + 1; else: high = mid - 1; return -1"
    },
    {
        "input": "How can I create a list of dictionaries in Python?",
        "output": "You can create a dictionary list just like any other list in Python. Example: list = [{'name': 'John', 'age': 30}, {'name': 'Anna', 'age': 25}]"
    },
    {
        "input": "How can I write a function that converts a string to uppercase in Python?",
        "output": "You can use the 'upper' method to convert a string to uppercase. Example: def convert_upper(text): return text.upper()"
    },
    {
        "input": "How can I create a function that counts the number of times a word appears in a string in Python?",
        "output": "You can use the 'count' method to count occurrences. Example: def count_word(text, word): return text.count(word)"
    },
    {
        "input": "How can I sort a list of tuples by the second value of each tuple in Python?",
        "output": "You can use the 'sorted' function with a 'key' parameter that sorts by the second value. Example: sorted(tuple_list, key=lambda x: x[1])"
    },
    {
        "input": "How can I generate a Fibonacci sequence in Python?",
        "output": "You can generate the Fibonacci sequence iteratively or recursively. Example: def fibonacci(n): a, b = 0, 1; for _ in range(n): yield a; a, b = b, a"
    },
    {
        "input": "How can I remove duplicate elements from a list in Python?",
        "output": "You can remove duplicates by converting the list to a set and then back to a list. Example: list_without_duplicates = list(set(my_list))"
    },
    {
        "input": "How can I check if a number is prime in Python?",
        "output": "You can check if a number is prime by checking if it has divisors between 2 and the square root of that number. Example: def is_prime(n): for i in range(2, int(n**0.5) + 1): if n % i == 0: return False; return True"
    },
    {
        "input": "How can I calculate the greatest common divisor (GCD) of two numbers in Python?",
        "output": "You can use Euclidean algorithm. Example: def gcd(a, b): while b: a, b = b, a % b; return a"
    },
    {
        "input": "How can I count the occurrences of each word in a list of words in Python?",
        "output": "You can use a dictionary or the 'collections.Counter' module. Example: from collections import Counter; counter = Counter(word_list)"
    },
    {
        "input": "How can I write a program that calculates the sum of numbers in a list in Python?",
        "output": "You can use the 'sum' function. Example: def sum_list(list): return sum(list)"
    },
    {
        "input": "How can I read a CSV file in Python?",
        "output": "You can use the 'csv' module. Example: import csv; with open('file.csv', mode='r') as file: reader = csv.reader(file); for row in reader: print(row)"
    },
    {
        "input": "How can I convert a dictionary to a JSON object in Python?",
        "output": "You can use the 'json' module. Example: import json; json_object = json.dumps(dictionary)"
    },
    {
        "input": "How can I make a function accept a variable number of arguments in Python?",
        "output": "You can use '*' to accept a variable number of arguments. Example: def my_function(*args): for arg in args: print(arg)"
    },
    {
        "input": "How can I write a program that checks if a string is a palindrome in Python?",
        "output": "You can check if a string is a palindrome by comparing it to its reverse. Example: def is_palindrome(text): return text == text[::-1]"
    },
    {
        "input": "How can I read user input in Python?",
        "output": "You can use the 'input' function to read data from the user. Example: name = input('What is your name? ')"
    },
    {
        "input": "How can I create a file in Python?",
        "output": "You can use the 'open' function with the 'w' mode. Example: with open('file.txt', 'w') as file: file.write('Hello World')"
    },
    {
        "input": "How can I do a linear search in Python?",
        "output": "You can iterate through the list and compare each element to the searched value. Example: def linear_search(list, value): for i, val in enumerate(list): if val == value: return i; return -1"
    },
    {
        "input": "How can I create a class in Python that handles a list of students?",
        "output": "You can create a class that contains a list of students as an attribute and methods to add and list students. Example: class Students: def __init__(self): self. list = [] def add(self, student): self. list. append(student) def list(self): return self. list"
    },
    {
        "input": "How can I write a program that sorts a list of strings by their length in Python?",
        "output": "You can use 'sorted' with a 'key' function that measures the length of strings. Example: list = sorted(list_strings, key=len)"
    },
    {
        "input": "How can I create a dictionary from two lists in Python?",
        "output": "You can use the 'zip' function to combine the lists and then convert it to a dictionary. Example: dictionary = dict(zip(list_keys, list_values))"
    },
    {
        "input": "How can I create a function that takes a variable number of keyword arguments in Python?",
        "output": "You can use '**kwargs' to accept a variable number of named arguments. Example: def my_function(**kwargs): for key, value in kwargs.items(): print(key, value)"
    },
    {
        "input": "How can I find the index of a value in a list in Python?",
        "output": "You can use the 'index' method. Example: index = my_list.index(value)"
    },
    {
        "input": "How can I generate a list of numbers from a specific sequence in Python?",
        "output": "You can use 'range'. Example: list = list(range(1, 11))"
    },
    {
        "input": "How can I write a program that removes duplicate elements from a list in Python?",
        "output": "You can use 'set' to remove duplicates and then convert back to list. Example: list_without_duplicates = list(set(my_list))"
    },
    {
        "input": "How can I check if a number is within a range in Python?",
        "output": "You can use the 'in' operator with 'range'. Example: if x in range(1, 10): print('Is in range')"
    },
    {
        "input": "How can I write a function that calculates the power of a number in Python?",
        "output": "You can use the '**' operator to calculate the power. Example: def power(base, exponent): return base ** exponent"
    },
    {
        "input": "How can I split a list into smaller parts in Python?",
        "output": "You can use a 'slicing' approach to split a list. Example: parts = [my_list[i:i+3] for i in range(0, len(my_list), 3)]"
    },
    {
        "input": "How can I count how many times an item appears in a dictionary in Python?",
        "output": "You can use the 'values' and 'count' methods. Example: my_dictionary.values().count(value)"
    },
    {
        "input": "How can I combine multiple lists into one in Python?",
        "output": "You can use the '+' operator or the 'extend' method. Example: combined_list = list1 + list2 or list1. extend(list2)"
    },
    {
        "input": "How can I reverse a list in Python?",
        "output": "You can use the 'reverse' method or slicing. Example: my_list.reverse() or my_list[::-1]"
    },
    {
        "input": "How can I create a program that checks if a list is sorted in Python?",
        "output": "You can compare the list with its sorted version. Example: if my_list == sorted(my_list): print('It is sorted')"
    },
    {
        "input": "How can I create a function that returns the first non-null element of a list in Python?",
        "output": "You can use a 'for' loop to iterate through the list. Example: def first_not_null(list): for element in list: if element is not None: return element"
    },
    {
        "input": "How can I generate a random number in a range in Python?",
        "output": "You can use 'randint' from the 'random' module. Example: import random; num = random.randint(1, 100)"
    },
    {
        "input": "How can I count the characters in a string in Python?",
        "output": "You can use the 'len' function. Example: len(string)"
    },
    {
        "input": "How can I convert a list of strings to lowercase in Python?",
        "output": "You can use a list comprehension with 'lower'. Example: lower_list = [x.lower() for x in string_list]"
    },
    {
        "input": "How can I sort a dictionary by its values ​​in Python?",
        "output": "You can use the 'sorted' function with a 'key' that is based on the values ​​in the dictionary. Example: sorted(dictionary.items(), key=lambda x: x[1])"
    },
    {
        "input": "How can I get the common elements between two lists in Python?",
        "output": "You can use the set intersection operation. Example: commons = list(set(list1) & set(list2))"
    },
    {
        "input": "How can I combine two dictionaries into one in Python?",
        "output": "You can use the 'update' method or the '**' operator. Example: dictionary1.update(dictionary2) or combined_dictionary = {**dictionary1, **dictionary2}"
    },
    {
        "input": "How can I do email validation in Python?",
        "output": "You can use regular expressions with the 're' module. Example: import re; if re.match(r'[^@]+@[^@]+\\.[^@]+', mail): print('Valid')"
    },
    {
        "input": "How can I concatenate multiple strings in Python?",
        "output": "You can use the '+' operator or the 'join' method. Example: concatenated_string = ''.join(list_strings)"
    },
    {
        "input": "How can I remove an item from a dictionary in Python?",
        "output": "You can use the 'del' method. Example: del dictionary['key']"
    },
    {
        "input": "How can I create an object of a class in Python?",
        "output": "You can create an object by calling the class as if it were a function. Example: person = Person('John', 30)"
    },
    {
        "input": "How can I tell if a list is empty in Python?",
        "output": "You can check if the length of the list is zero. Example: if not list: print('The list is empty')"
    },
    {
        "input": "What does the split() method do?",
        "output": "Splits a string into a list of parts based on a separator. For example: `'hello world'.split()` returns `['hello', 'world']`."
    },
    {
        "input": "What is the join() method used for in Python?",
        "output": "Combines elements of a list into a string using a separator. Example: `','.join(['a', 'b', 'c'])` returns `'a,b,c'`."
    },
    {
        "input": "How does the reverse() method work on a list?",
        "output": "Reverses the elements of the list in place. Example: `my_list.reverse()`."
    },
    {
        "input": "What does the len() method do?",
        "output": "Returns the number of elements in an object such as a list, string, or dictionary. Example: `len([1, 2, 3])` returns `3`."
    },
    {
        "input": "What does the sort() method do on a list?",
        "output": "Sorts the list items in place, smallest to largest by default. Example: `my_list.sort()`."
    },
    {
        "input": "How does the pip install command work?",
        "output": "Install Python packages from the PyPI repository. Example: `pip install requests`."
    },
    {
        "input": "What does the int() function do in Python?",
        "output": "Converts a string or float to an integer. Example: `int('10')` returns `10`."
    },
    {
        "input": "How does the print() function work in Python?",
        "output": "Displays information to the console. Example: `print('Hello, world')` prints `Hello, world`."
    },
    {
        "input": "What does the input() function do in Python?",
        "output": "Receives user data from the console as a string. Example: `name = input('What is your name? ')`."
    },
    {
        "input": "What is the open() function used for in Python?",
        "output": "Open files for reading, writing, or appending. Example: `open('file.txt', 'r')`."
    },
    {
        "input": "What does the sorted() function do?",
        "output": "Returns a new sorted list without modifying the original. Example: `sorted([3, 1, 2])` returns `[1, 2, 3]`."
    },
    {
        "input": "How does the def statement work in Python?",
        "output": "Defines a function. Example: `def greet(): print('Hello')` creates a function called `greet`."
    },
    {
        "input": "What does the + operator do with lists in Python?",
        "output": "Combines two lists into a new list. Example: `[1, 2] + [3, 4]` returns `[1, 2, 3, 4]`."
    },
    {
        "input": "What does the class keyword do in Python?",
        "output": "Create a new class to define objects. Example: `class Dog: ...`."
    },
    {
        "input": "How does the append() method work on lists?",
        "output": "Appends an item to the end of a list. Example: `my_list.append(4)`."
    },
    {
        "input": "What is the remove() method used for in lists?",
        "output": "Removes the first occurrence of an item in the list. Example: `my_list.remove(3)`."
    },
    {
        "input": "What does the in operator do in Python?",
        "output": "Checks if an element is present in a collection. Example: `3 in [1, 2, 3]` returns `True`."
    },
    {
        "input": "What does the keys() method do on a dictionary?",
        "output": "Returns a view of all the keys in the dictionary. Example: `my_dictionary.keys()`."
    },
    {
        "input": "What does the values() method do on a dictionary?",
        "output": "Returns a view of all the values ​​in the dictionary. Example: `my_dictionary.values()`."
    },
    {
        "input": "What does the random library do in Python?",
        "output": "Generates random numbers and selects elements at random. Example: `random.randint(1, 10)` generates a number between 1 and 10."
    },
    {
        "input": "What does the lambda function do?",
        "output": "Creates a one-line anonymous function. Example: `lambda x: x + 1` is a function that adds 1 to `x`."
    },
    {
        "input": "What does the filter() function do in Python?",
        "output": "Filters items in a collection based on a condition. Example: `filter(lambda x: x > 0, [-1, 0, 1])` returns `[1]`."
    },
    {
        "input": "What does the map() function do in Python?",
        "output": "Applies a function to each element of a collection. Example: `map(lambda x: x**2, [1, 2, 3])` returns `[1, 4, 9]`."
    },
    {
        "input": "What does the zip() function do?",
        "output": "Combines elements of two or more iterables into pairs. Example: `zip([1, 2], ['a', 'b'])` returns `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "What does pandas.read_csv() do?",
        "output": "Load data from a CSV file into a DataFrame. Example: `pd.read_csv('data.csv')`."
    },
    {
        "input": "How does numpy.array() work?",
        "output": "Creates a NumPy array. Example: `np.array([1, 2, 3])`."
    },
    {
        "input": "What does plt.plot() do in Matplotlib?",
        "output": "Create a line graph. Example: `plt.plot([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "What does the django-admin startproject command do?",
        "output": "Create the initial structure for a Django project."
    },
    {
        "input": "What does the add() method do on a set?",
        "output": "Adds an element to the set. Example: `my_set.add(4)`."
    },
    {
        "input": "What does the pop() method do on an array?",
        "output": "Removes and returns an arbitrary element from the set. Example: `my_set.pop()`."
    },
    {
        "input": "What does the @staticmethod decorator do?",
        "output": "Defines a static method that does not need access to the class instance."
    },
    {
        "input": "What does the import command do?",
        "output": "Load modules or libraries into your program. Example: `import math`."
    },
    {
        "input": "What does math.sqrt() do?",
        "output": "Calculates the square root of a number. Example: `math.sqrt(16)` returns `4.0`."
    },
    {
        "input": "How does try-except work in Python?",
        "output": "Handles errors during execution. Example: `try: x = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "What does the enumerate() function do in Python?",
        "output": "Returns an iterable with indices and elements. Example: `enumerate(['a', 'b'])` returns `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "What does the range() function do in Python?",
        "output": "Creates an iterable that generates a sequence of numbers. Example: `range(5)` generates `0, 1, 2, 3, 4`."
    },
    {
        "input": "How does the not operator work in Python?",
        "output": "Negates the boolean value of an expression. Example: `not True` returns `False`."
    },
    {
        "input": "What does the zip() function do?",
        "output": "Combines elements of iterables into tuples. Example: `zip([1, 2], ['a', 'b'])` returns `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "What does the == operator do in Python?",
        "output": "Compares whether two values ​​are equal. Example: `3 == 3` returns `True`."
    },
    {
        "input": "What does the // operator do in Python?",
        "output": "Performs an integer division, discarding the decimal part. Example: `7 // 2` returns `3`."
    },
    {
        "input": "What does the ** operator do in Python?",
        "output": "Calculates the power of a number. Example: `2 ** 3` returns `8`."
    },
    {
        "input": "How does the in operator work in Python?",
        "output": "Checks if an element is in a collection. Example: `'a' in ['a', 'b', 'c']` returns `True`."
    },
    {
        "input": "What does pandas.DataFrame() do?",
        "output": "Creates a DataFrame from data such as lists or dictionaries. Example: `pd.DataFrame({'A': [1, 2], 'B': [3, 4]})`."
    },
    {
        "input": "What does plt.bar() do in Matplotlib?",
        "output": "Create a bar chart. Example: `plt.bar(['A', 'B'], [10, 20])`."
    },
    {
        "input": "What does the iloc method do in Pandas?",
        "output": "Select rows and columns by indices. Example: `df.iloc[0, 1]` selects the element in the first row and second column."
    },
    {
        "input": "What does the loc method do in Pandas?",
        "output": "Select rows and columns by labels. Example: `df.loc[0, 'column']`."
    },
    {
        "input": "What does numpy.mean() do?",
        "output": "Calculates the average of an array. Example: `np.mean([1, 2, 3])` returns `2.0`."
    },
    {
        "input": "What does numpy.median() do?",
        "output": "Calculates the median of an array. Example: `np.median([1, 2, 3, 4])` returns `2.5`."
    },
    {
        "input": "What does numpy.std() do?",
        "output": "Calculates the standard deviation of an array. Example: `np.std([1, 2, 3])` returns `0.816`."
    },
    {
        "input": "How does matplotlib.pyplot.show() work?",
        "output": "Displays the generated graph in a popup window. Example: `plt.plot([1, 2, 3]); plt.show()`."
    },
    {
        "input": "What does the @classmethod decorator do?",
        "output": "Defines a method that takes the class as its first argument instead of the instance. Example: `@classmethod def my_method(cls): ...`."
    },
    {
        "input": "What does the @property decorator do?",
        "output": "Makes a method a read-only attribute. Example: `@property def name(self): return self._name`."
    },
    {
        "input": "What does the isinstance() function do?",
        "output": "Checks whether an object belongs to a class or subclass. Example: `isinstance(3, int)` returns `True`."
    },
    {
        "input": "How does the hasattr() function work?",
        "output": "Checks if an object has a specific attribute. Example: `hasattr(obj, 'attribute')`."
    },
    {
        "input": "What does the getattr() function do?",
        "output": "Gets the value of an attribute of an object. Example: `getattr(obj, 'attribute')`."
    },
    {
        "input": "How does the setattr() function work?",
        "output": "Assigns a value to an attribute of an object. Example: `setattr(obj, 'attribute', value)`."
    },
    {
        "input": "What does dict.get() do?",
        "output": "Returns the value of a key or a default value if the key does not exist. Example: `my_dictionary.get('key', 'default_value')`."
    },
    {
        "input": "What does the pass keyword do in Python?",
        "output": "Indicates an empty code block. Example: `def empty_function(): pass`."
    },
    {
        "input": "What does the yield keyword do in Python?",
        "output": "Create a generator that returns values ​​one by one instead of all at once. Example: `yield x`."
    },
    {
        "input": "What does the popitem() method do on a dictionary?",
        "output": "Removes and returns an arbitrary key-value pair from the dictionary. Example: `my_dictionary.popitem()`."
    },
    {
        "input": "What does the clear() method do on a dictionary?",
        "output": "Removes all elements from the dictionary. Example: `my_dictionary.clear()`."
    },
    {
        "input": "How does the with keyword work in Python?",
        "output": "Automatically handles resources as files. Example: `with open('file.txt') as file:`."
    },
    {
        "input": "What does the isdigit() method do on a string?",
        "output": "Checks if all characters in the string are digits. Example: `'123'.isdigit()` returns `True`."
    },
    {
        "input": "What does the upper() method do on a string?",
        "output": "Converts all characters in the string to uppercase. Example: `'hello'.upper()` returns `'HELLO'`."
    },
    {
        "input": "What does the lower() method do on a string?",
        "output": "Converts all characters in the string to lowercase. Example: `'HELLO'.lower()` returns `'hello'`."
    },
    {
        "input": "What does the replace() method do on a string?",
        "output": "Replaces one substring with another. Example: `'hello world'.replace('world', 'Python')` returns `'hello Python'`."
    },
    {
        "input": "What does the eval() function do in Python?",
        "output": "Evaluates a Python expression as a string. Example: `eval('2 + 3')` returns `5`."
    },
    {
        "input": "What does the exec() function do in Python?",
        "output": "Executes Python code in the form of a string. Example: `exec('print(1 + 2)')` prints `3`."
    },
    {
        "input": "What does the is operator do in Python?",
        "output": "Checks if two references point to the same object in memory. Example: `a is b`."
    },
    {
        "input": "What does the and operator do in Python?",
        "output": "Evaluates two expressions and returns `True` if both are true. Example: `True and False` returns `False`."
    },
    {
        "input": "How does the assert keyword work?",
        "output": "Checks a condition and throws an exception if it is not met. Example: `assert 2 + 2 == 4`."
    },
    {
        "input": "What does the all() function do in Python?",
        "output": "Returns `True` if all elements of an iterable are true. Example: `all([True, True, False])` returns `False`."
    },
    {
        "input": "What does the any() function do in Python?",
        "output": "Returns `True` if at least one element of an iterable is true. Example: `any([False, False, True])` returns `True`."
    },
    {
        "input": "What does the max() function do in Python?",
        "output": "Returns the maximum element of an iterable. Example: `max([1, 2, 3])` returns `3`."
    },
    {
        "input": "What does the min() function do in Python?",
        "output": "Returns the minimum element of an iterable. Example: `min([1, 2, 3])` returns `1`."
    },
    {
        "input": "What does the count() method do on lists?",
        "output": "Returns the number of times an item appears in the list. Example: `[1, 2, 2, 3].count(2)` returns `2`."
    },
    {
        "input": "What does the index() method do on lists?",
        "output": "Returns the index of the first occurrence of an element. Example: `[1, 2, 3].index(2)` returns `1`."
    },
    {
        "input": "What does the round() function do in Python?",
        "output": "Rounds a number to the nearest integer or to a specified number of decimal places. Example: `round(3.14159, 2)` returns `3.14`."
    },
    {
        "input": "What does the strip() method do on strings?",
        "output": "Removes leading and trailing whitespace from a string. Example: `'hello'.strip()` returns `'hello'`."
    },
    {
        "input": "What does the splitlines() method do on strings?",
        "output": "Splits a string into lines. Example: `'line1\\nline2'.splitlines()` returns `['line1', 'line2']`."
    },
    {
        "input": "What does the startswith() method do on strings?",
        "output": "Checks if a string starts with a specific substring. Example: `'hello'.startswith('ho')` returns `True`."
    },
    {
        "input": "What does the endswith() method do on strings?",
        "output": "Checks if a string ends with a specific substring. Example: `'hello'.endswith('the')` returns `True`."
    },
    {
        "input": "What does the abs() function do in Python?",
        "output": "Returns the absolute value of a number. Example: `abs(-5)` returns `5`."
    },
    {
        "input": "What does the deepcopy() method of the copy library do?",
        "output": "Creates a complete copy of an object, including nested objects. Example: `copy.deepcopy(object)`."
    },
    {
        "input": "What does the shallow copy() method do in Python?",
        "output": "Creates a shallow copy of an object. Nested objects are not copied deeply."
    },
    {
        "input": "What does math.ceil() do?",
        "output": "Returns the smallest integer greater than or equal to a number. Example: `math.ceil(4.2)` returns `5`."
    },
    {
        "input": "What does math.floor() do?",
        "output": "Returns the largest integer less than or equal to a number. Example: `math.floor(4.8)` returns `4`."
    },
    {
        "input": "What does math.log() do?",
        "output": "Calculates the logarithm of a number. Example: `math.log(8, 2)` returns `3.0`."
    },
    {
        "input": "What does math.factorial() do?",
        "output": "Calculates the factorial of an integer. Example: `math.factorial(5)` returns `120`."
    },
    {
        "input": "What does random.choice() do?",
        "output": "Selects a random item from a list. Example: `random.choice([1, 2, 3])` returns a random value from the list."
    },
    {
        "input": "What does random.shuffle() do?",
        "output": "Randomly shuffles the elements of a list. Example: `random.shuffle(my_list)`."
    },
    {
        "input": "What does random.sample() do?",
        "output": "Returns a list with a random sample of elements. Example: `random.sample([1, 2, 3], 2)` returns a list with two random elements."
    },
    {
        "input": "What does os.getcwd() do?",
        "output": "Returns the current working directory. Example: `os.getcwd()`."
    },
    {
        "input": "What does os.listdir() do?",
        "output": "Returns a list of files and directories in the specified directory. Example: `os.listdir('.')`."
    },
    {
        "input": "What does os.remove() do?",
        "output": "Delete a file. Example: `os.remove('file.txt')`."
    },
    {
        "input": "What does os.makedirs() do?",
        "output": "Create a directory and all its parents if they do not exist. Example: `os.makedirs('new/path')`."
    },
    {
        "input": "What does shutil.copy() do?",
        "output": "Copy a file from one location to another. Example: `shutil.copy('source.txt', 'destination.txt')`."
    },
    {
        "input": "What does shutil.move() do?",
        "output": "Moves a file or directory to a new location. Example: `shutil.move('file.txt', 'new_path/')`."
    },
    {
        "input": "What does shutil.rmtree() do?",
        "output": "Removes a directory and all its contents. Example: `shutil.rmtree('directory')`."
    },
    {
        "input": "What does subprocess.run() do?",
        "output": "Runs a system command and waits for it to finish. Example: `subprocess.run(['ls', '-l'])`."
    },
    {
        "input": "What does datetime.now() do?",
        "output": "Returns the current date and time. Example: `datetime.now()`."
    },
    {
        "input": "What does datetime.strptime() do?",
        "output": "Converts a string to a datetime object according to a format. Example: `datetime.strptime('2024-12-19', '%Y-%m-%d')`."
    },
    {
        "input": "What does timedelta do in datetime?",
        "output": "Allows you to perform operations with dates and times. Example: `datetime.now() + timedelta(days=1)` adds one day."
    },
    {
        "input": "What does re.match() do?",
        "output": "Searches for a pattern at the beginning of a string. Example: `re.match(r'\\d+', '123abc')` returns a match object."
    },
    {
        "input": "What does re.search() do?",
        "output": "Search for a pattern anywhere in a string. Example: `re.search(r'\\d+', 'abc123')`."
    },
    {
        "input": "What does re.findall() do?",
        "output": "Returns all matches of a pattern in a string. Example: `re.findall(r'\\d+', 'abc123def456')` returns `['123', '456']`."
    },
    {
        "input": "How do I use the isinstance() function?",
        "output": "It is used to check if an object belongs to a specific class. Example: `isinstance(5, int)` returns `True`."
    },
    {
        "input": "What does hasattr() mean?",
        "output": "Checks if an object has a specific attribute. Example: `hasattr(obj, 'name')` returns `True` if the attribute exists."
    },
    {
        "input": "What does setattr do in Python?",
        "output": "Assigns a value to an attribute of an object. Example: `setattr(obj, 'age', 30)` assigns 30 to the attribute `age`."
    },
    {
        "input": "How can I use the keys() method of a dictionary?",
        "output": "Returns all the keys in a dictionary. Example: `my_dictionary.keys()` returns `dict_keys(['key1', 'key2'])`."
    },
    {
        "input": "What does the max() function do?",
        "output": "Find the largest value in a collection. Example: `max([1, 2, 3])` returns `3`."
    },
    {
        "input": "What is the min() function used for in Python?",
        "output": "Find the smallest value in a collection. Example: `min([5, 3, 7])` returns `3`."
    },
    {
        "input": "How does map() work?",
        "output": "Applies a function to each element of an iterable. Example: `list(map(lambda x: x**2, [1, 2, 3]))` returns `[1, 4, 9]`."
    },
    {
        "input": "What is the use of filter()?",
        "output": "Filters elements of an iterable based on a condition. Example: `list(filter(lambda x: x > 2, [1, 2, 3, 4]))` returns `[3, 4]`."
    },
    {
        "input": "What does zip() do?",
        "output": "Combines elements of multiple iterables into pairs or tuples. Example: `list(zip([1, 2], ['a', 'b']))` returns `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "What does all() return in Python?",
        "output": "Returns `True` if all elements in an iterable are true. Example: `all([True, 1, 'Text'])` returns `True`."
    },
    {
        "input": "How does any() work?",
        "output": "Returns `True` if at least one element of an iterable is true. Example: `any([0, False, 3])` returns `True`."
    },
    {
        "input": "What is the use of re.findall()?",
        "output": "Finds all matches of a pattern in a string. Example: `re.findall(r'\\d+', '123abc456')` returns `['123', '456']`."
    },
    {
        "input": "How to use re.match()?",
        "output": "Searches for a pattern at the beginning of a string. Example: `re.match(r'\\d+', '123abc')` matches `123`."
    },
    {
        "input": "What does the round() function do?",
        "output": "Rounds a number to the nearest integer or to specified decimal places. Example: `round(3.456, 2)` returns `3.46`."
    },
    {
        "input": "How does strip() work on a string?",
        "output": "Removes whitespace from the beginning and end of a string. Example: `'hello'.strip()` returns `'hello'`."
    },
    {
        "input": "What does split() do on strings?",
        "output": "Splits a string into a list using a separator. Example: `'a,b,c'.split(',')` returns `['a', 'b', 'c']`."
    },
    {
        "input": "What does replace() do?",
        "output": "Replaces a substring with another substring in a string. Example: `'Python is awesome'.replace('awesome', 'powerful')` returns `'Python is powerful'`."
    },
    {
        "input": "How do I use math.sqrt()?",
        "output": "Calculates the square root of a number. Example: `math.sqrt(16)` returns `4.0`."
    },
    {
        "input": "What does math.factorial() return?",
        "output": "Calculates the factorial of a number. Example: `math.factorial(5)` returns `120`."
    },
    {
        "input": "How do I use random.randint()?",
        "output": "Generates a random integer between two values. Example: `random.randint(1, 10)` returns a number between 1 and 10."
    },
    {
        "input": "What is the use of random.choice()?",
        "output": "Selects a random element from a list. Example: `random.choice([1, 2, 3])` returns one of the elements."
    },
    {
        "input": "What does os.listdir() do?",
        "output": "Lists the files and folders in a directory. Example: `os.listdir('.')` displays the contents of the current directory."
    },
    {
        "input": "How does os.makedirs() work?",
        "output": "Creates directories and subdirectories. Example: `os.makedirs('new/folder')` creates the specified structure."
    },
    {
        "input": "What does shutil.copy() do?",
        "output": "Copy a file from one location to another. Example: `shutil.copy('file.txt', 'copy.txt')`."
    },
    {
        "input": "How to use subprocess.run()?",
        "output": "Execute a system command. Example: `subprocess.run(['ls', '-l'])` lists files in Linux."
    },
    {
        "input": "How do I convert a date with datetime.strptime()?",
        "output": "Converts a string to a datetime object according to a format. Example: `datetime.strptime('2024-12-19', '%Y-%m-%d')`."
    },
    {
        "input": "What does timedelta do?",
        "output": "Allows you to add or subtract time intervals to datetime objects. Example: `datetime.now() + timedelta(days=1)` adds one day."
    },
    {
        "input": "How does pandas.read_csv() work?",
        "output": "Load data from a CSV file into a DataFrame. Example: `pd.read_csv('file.csv')`."
    },
    {
        "input": "What does plt.plot() return?",
        "output": "Creates a line graph. Example: `plt.plot([1, 2, 3], [4, 5, 6])` generates a graph with those points."
    },
    {
        "input": "How do I use plt.bar()?",
        "output": "Creates a bar chart. Example: `plt.bar(['A', 'B'], [10, 20])` generates a chart with two bars."
    },
    {
        "input": "What does zip() do?",
        "output": "Combines elements of multiple iterables into tuples. Example: `list(zip([1, 2], ['a', 'b']))` returns `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "How does hasattr() work?",
        "output": "Checks if an object has a specific attribute. Example: `hasattr(obj, 'attribute')` returns `True` if it exists."
    },
    {
        "input": "What does @property do?",
        "output": "Makes a method a read-only attribute. Example: `@property def name(self): return self._name`."
    },
    {
        "input": "How do I use @classmethod?",
        "output": "Defines a class method that takes `cls` as its first argument. Example: `@classmethod def example(cls): ...`."
    },
    {
        "input": "What does enumerate() do?",
        "output": "Returns indices and elements of an iterable. Example: `list(enumerate(['a', 'b']))` returns `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "What is the use of isinstance() in Python?",
        "output": "Checks whether an object belongs to a specific class or its subclass. Example: `isinstance(10, int)` returns `True`."
    },
    {
        "input": "What is hasattr() used for on an object?",
        "output": "Checks if an object has a given attribute. Example: `hasattr(object, 'age')` returns `True` if `age` is an attribute of the object."
    },
    {
        "input": "How does setattr work in Python?",
        "output": "Allows you to assign a value to an attribute of an object dynamically. Example: `setattr(person, 'name', 'John')` assigns the name `John`."
    },
    {
        "input": "What does keys() return in a dictionary?",
        "output": "Returns the dictionary keys as an iterable object. Example: `my_dictionary.keys()` returns `dict_keys(['key1', 'key2'])`."
    },
    {
        "input": "What does max() allow you to do?",
        "output": "Find the largest value in a list or iterable. Example: `max([5, 3, 9])` returns `9`."
    },
    {
        "input": "How do I use min() in Python?",
        "output": "Determines the smallest value in an iterable. Example: `min([10, 5, 7])` returns `5`."
    },
    {
        "input": "What operation does map() perform?",
        "output": "Applies a function to all elements of an iterable. Example: `list(map(lambda x: x+1, [1, 2, 3]))` returns `[2, 3, 4]`."
    },
    {
        "input": "How does filter() work?",
        "output": "Filters the elements of an iterable that meet a condition. Example: `list(filter(lambda x: x > 1, [0, 1, 2]))` returns `[2]`."
    },
    {
        "input": "What does zip() generate?",
        "output": "Combines iterables in pairs as tuples. Example: `list(zip([1, 2], ['a', 'b']))` returns `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "What does all() do in Python?",
        "output": "Returns `True` if all elements of an iterable are true. Example: `all([True, 1, 'Text'])` gives `True`."
    },
    {
        "input": "What is the use of any()?",
        "output": "Returns `True` if at least one element of an iterable is true. Example: `any([0, False, 3])` returns `True`."
    },
    {
        "input": "What does re.findall() do?",
        "output": "Finds and returns all matches of a pattern in a string. Example: `re.findall(r'\\d+', '12abc34')` returns `['12', '34']`."
    },
    {
        "input": "How does re.match() work?",
        "output": "Searches for matches at the beginning of a string. Example: `re.match(r'\\d+', '123abc')` returns an object containing `123`."
    },
    {
        "input": "What does round() return?",
        "output": "Rounds a number to an integer or the specified number of decimal places. Example: `round(2.71828, 2)` gives `2.72`."
    },
    {
        "input": "How do you use strip() with strings?",
        "output": "Removes leading and trailing whitespace from a string. Example: `'hello'.strip()` gives `'hello'`."
    },
    {
        "input": "What does split() allow?",
        "output": "Splits a string into parts based on a separator. Example: `'a,b,c'.split(',')` returns `['a', 'b', 'c']`."
    },
    {
        "input": "What is replace() used for in Python?",
        "output": "Replaces one substring with another in a string. Example: `'Python is easy'.replace('easy', 'awesome')` gives `'Python is awesome'`."
    },
    {
        "input": "How does math.sqrt() work?",
        "output": "Calculates the square root of a number. Example: `math.sqrt(25)` returns `5.0`."
    },
    {
        "input": "What does math.factorial() return?",
        "output": "Calculates the factorial of an integer. Example: `math.factorial(4)` gives `24`."
    },
    {
        "input": "What does random.randint() generate?",
        "output": "Returns a random integer within a range. Example: `random.randint(1, 100)`."
    },
    {
        "input": "How does random.choice() work?",
        "output": "Selects a random element from an iterable. Example: `random.choice(['red', 'blue', 'green'])` returns one of those colors."
    },
    {
        "input": "What does os.listdir() do?",
        "output": "Lists the files and folders in a directory. Example: `os.listdir('.')` returns the items in the current directory."
    },
    {
        "input": "What does os.makedirs() do?",
        "output": "Create directories, including intermediate ones if they do not exist. Example: `os.makedirs('new/folder/path')`."
    },
    {
        "input": "What is the use of shutil.copy()?",
        "output": "Copy a file from one location to another. Example: `shutil.copy('file.txt', 'backup.txt')`."
    },
    {
        "input": "What does subprocess.run() do?",
        "output": "Executes a system command and waits for its completion. Example: `subprocess.run(['echo', 'Hello'])` prints `Hello`."
    },
    {
        "input": "How does datetime.strptime() work?",
        "output": "Converts a string to a datetime object according to a format. Example: `datetime.strptime('2023-01-01', '%Y-%m-%d')`."
    },
    {
        "input": "What does timedelta allow?",
        "output": "Adds or subtracts time intervals to a datetime object. Example: `datetime.now() + timedelta(days=2)` adds two days."
    },
    {
        "input": "What does pandas.read_csv() do?",
        "output": "Load a CSV file as a Pandas DataFrame. Example: `pd.read_csv('data.csv')`."
    },
    {
        "input": "What does plt.plot() create?",
        "output": "Generates a line graph. Example: `plt.plot([1, 2, 3], [4, 5, 6])` creates a graph with those points."
    },
    {
        "input": "How does plt.bar() work?",
        "output": "Creates a bar chart. Example: `plt.bar(['apples', 'pears'], [5, 7])` generates a chart with those bars."
    },
    {
        "input": "What does enumerate() return?",
        "output": "Creates an iterable that generates index-element pairs. Example: `list(enumerate(['a', 'b']))` returns `[(0, 'a'), (1, 'b')]`."
    },
    {
        "input": "How does hasattr() work?",
        "output": "Checks if an object has an attribute. Example: `hasattr(obj, 'name')` returns `True` if `name` exists."
    },
    {
        "input": "What is the use of @property?",
        "output": "Converts a method to a read-only computed attribute. Example: `@property def full_name(self): return self.first_name + ' ' + self.last_name`."
    },
    {
        "input": "What does @classmethod achieve?",
        "output": "Defines a method that operates on the class rather than the instance. Example: `@classmethod def create(cls): return cls()`."
    },
    {
        "input": "How can I create a file in Python?",
        "output": "Use the `open()` function in write mode (`'w'`). Example: `with open('file.txt', 'w') as file: file.write('Hello, world')`."
    },
    {
        "input": "How do I read a file line by line?",
        "output": "Use a `for` loop with the file object. Example: `with open('file.txt', 'r') as file: for line in file: print(line.strip())`."
    },
    {
        "input": "What is the difference between lists and tuples in Python?",
        "output": "Lists are mutable and tuples are not. Example: `my_list[0] = 10` is valid, but `my_tuple[0] = 10` is not."
    },
    {
        "input": "What are exceptions in Python?",
        "output": "These are errors that occur during program execution. You can handle them with `try-except`. Example: `try: x = 1/0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "How do I handle errors in Python?",
        "output": "Use `try-except` blocks. Example: `try: result = 1 / 0 except ZeroDivisionError: print('Error: Division by zero')`."
    },
    {
        "input": "What is an iterator in Python?",
        "output": "It is an object that allows you to iterate through elements of a collection, one at a time. Example: `iterator = iter([1, 2, 3])`."
    },
    {
        "input": "What does a generator do in Python?",
        "output": "Creates an iterator that generates values ​​on demand using `yield`. Example: `def generator(): yield 1; yield 2`."
    },
    {
        "input": "How do you use a breakpoint?",
        "output": "Stops the program execution for debugging. Use `breakpoint()` or set breakpoints in your IDE."
    },
    {
        "input": "What is a JSON file?",
        "output": "It is a lightweight format for storing and transporting data in key-value pairs. Example: `{'name': 'John', 'age': 30}`."
    },
    {
        "input": "How do I load a JSON file in Python?",
        "output": "Use the `json` library with `json.load()`. Example: `import json; with open('data.json', 'r') as f: data = json.load(f)`."
    },
    {
        "input": "How do I write data to a JSON file?",
        "output": "Use `json.dump()`. Example: `with open('data.json', 'w') as f: json.dump({'name': 'Ana'}, f)`."
    },
    {
        "input": "What are regular expressions?",
        "output": "These are patterns used to search or manipulate text. Example: `re.search(r'\\d+', 'abc123')` searches for numbers."
    },
    {
        "input": "What is an API?",
        "output": "It is an interface that allows different applications to communicate with each other. Example: a REST API to obtain data from a server."
    },
    {
        "input": "How do I send an HTTP request in Python?",
        "output": "Use the `requests` library. Example: `import requests; response = requests.get('https://api.example.com')`."
    },
    {
        "input": "What is the difference between POST and GET in HTTP?",
        "output": "`GET` retrieves data and `POST` sends data to the server. Example: `requests.get('url')` and `requests.post('url', data={'key': 'value'})`."
    },
    {
        "input": "How to use Flask to build a web application?",
        "output": "Define routes and functions with Flask. Example: `from flask import Flask; app = Flask(__name__); @app.route('/') def home(): return 'Hello, world'`."
    },
    {
        "input": "How to create a SQLite database in Python?",
        "output": "Use the `sqlite3` library. Example: `import sqlite3; conn = sqlite3.connect('my_base.db')`."
    },
    {
        "input": "What does pandas.DataFrame() do?",
        "output": "Create a data table in Pandas. Example: `pd.DataFrame({'A': [1, 2], 'B': [3, 4]})`."
    },
    {
        "input": "How do I select rows in Pandas?",
        "output": "Use `.iloc` for indexes or `.loc` for labels. Example: `df.iloc[0]` or `df.loc['row1']`."
    },
    {
        "input": "What is the difference between print and logging?",
        "output": "`print` displays information to the console, while `logging` allows logging of messages at different levels such as `INFO`, `WARNING` and `ERROR`."
    },
    {
        "input": "What is a decorator in Python?",
        "output": "It is a function that modifies the behavior of another function. Example: `@decorator def my_function(): ...`."
    },
    {
        "input": "How to create graphs in Matplotlib?",
        "output": "Use functions like `plt.plot()` for line graphs or `plt.bar()` for bar graphs."
    },
    {
        "input": "What is a CSV file?",
        "output": "It is a text file where the data is separated by commas. Example: `name,age\\nJohn,30`."
    },
    {
        "input": "How do I read a CSV file in Python?",
        "output": "Use Pandas. Example: `import pandas as pd; df = pd.read_csv('file.csv')`."
    },
    {
        "input": "What is a with context in Python?",
        "output": "Automatically handles opening and closing of resources. Example: `with open('file.txt') as f: data = f.read()`."
    },
    {
        "input": "How do I create a virtual environment in Python?",
        "output": "Use `venv`. Example: `python -m venv my_environment` and activate it with `source my_environment/bin/activate`."
    },
    {
        "input": "What is a class in Python?",
        "output": "It is a template for creating objects. Example: `class Person: def __init__(self, name): self. name = name`."
    },
    {
        "input": "What is an object in Python?",
        "output": "It is an instance of a class that contains attributes and methods defined in that class."
    },
    {
        "input": "How does __init__ work in Python?",
        "output": "It is the constructor that initializes the attributes of an object. Example: `class Dog: def __init__(self, name): self.name = name`."
    },
    {
        "input": "How do I do unit testing in Python?",
        "output": "Use the `unittest` module. Example: `import unittest; class TestMyFunction(unittest. TestCase): def test_suma(self): self.assertEqual(1+1, 2)`."
    },
    {
        "input": "What is pytest?",
        "output": "It is a framework for testing in Python, more flexible and simpler than `unittest`. Example: `def test_suma(): assert 1+1 == 2`."
    },
    {
        "input": "How do I manipulate dates in Python?",
        "output": "Use the `datetime` module. Example: `from datetime import datetime; now = datetime.now()`."
    },
    {
        "input": "What is recursion?",
        "output": "It is a technique where a function calls itself to solve problems. Example: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "How do I sort a list in Python?",
        "output": "Use `.sort()` to modify the list or `sorted()` to return a new sorted list. Example: `my_list.sort()`."
    },
    {
        "input": "What is a lambda function?",
        "output": "It is a single-line anonymous function. Example: `lambda x: x + 1` is equivalent to `def add_one(x): return x + 1`."
    },
    {
        "input": "How to use recursion in Python?",
        "output": "Uses a function that calls itself. Example: `def factorial(n): return 1 if n == 0 else n * factorial(n-1)`."
    },
    {
        "input": "What is the difference between parameters and arguments?",
        "output": "Parameters are the variables defined in a function, and arguments are the values ​​passed to those parameters when the function is called."
    },
    {
        "input": "What is a module in Python?",
        "output": "It is a file that contains definitions and reusable functions. Example: `import math` to use math functions."
    },
    {
        "input": "How can I use import in Python?",
        "output": "Allows you to load modules to reuse their functions. Example: `import math; print(math.sqrt(16))`."
    },
    {
        "input": "What is a package in Python?",
        "output": "It is a collection of modules organized in a directory with an `__init__.py` file."
    },
    {
        "input": "How do I install libraries in Python?",
        "output": "Use the `pip install` command. Example: `pip install requests` installs the `requests` library."
    },
    {
        "input": "What is PEP 8?",
        "output": "It is a style guide for writing Python code in a readable and consistent manner."
    },
    {
        "input": "How to use logging in Python?",
        "output": "Allows you to log events in your application. Example: `import logging; logging.info('Informational message')`."
    },
    {
        "input": "What are list comprehensions?",
        "output": "They are a concise way of creating lists. Example: `[x**2 for x in range(5)]` generates `[0, 1, 4, 9, 16]`."
    },
    {
        "input": "How do I remove duplicates in a list?",
        "output": "Converts the list to a set and then back to a list. Example: `list(set([1, 2, 2, 3]))` returns `[1, 2, 3]`."
    },
    {
        "input": "What is the difference between `is` and `==`?",
        "output": "`is` compares whether two objects are the same in memory, while `==` compares whether the values ​​are equal."
    },
    {
        "input": "What is a `with` context?",
        "output": "Automatically handles opening and closing of resources. Example: `with open('file.txt') as f: data = f.read()`."
    },
    {
        "input": "What is the difference between `w` and `a` when opening a file?",
        "output": "`w` overwrites the file if it exists, and `a` appends content to the end without deleting what came before."
    },
    {
        "input": "How do I sort a dictionary by its keys?",
        "output": "Use `sorted()`. Example: `sorted(my_dictionary.items())` returns a list of sorted key-value pairs."
    },
    {
        "input": "How do I convert a list to a string?",
        "output": "Use the `join()` method. Example: `', '.join(['a', 'b', 'c'])` returns `'a, b, c'`."
    },
    {
        "input": "What does `del` do in Python?",
        "output": "Removes variables, list items, or dictionary keys. Example: `del my_list[0]`."
    },
    {
        "input": "How do I create a custom exception?",
        "output": "Create a new class that inherits from `Exception`. Example: `class MyException(Exception): pass`."
    },
    {
        "input": "What is a RESTful API?",
        "output": "It is an interface that allows systems to interact using HTTP following REST principles."
    },
    {
        "input": "How do I set up a virtual environment in Python?",
        "output": "Use `python -m venv`. Example: `python -m venv my_environment` creates a virtual environment called `my_environment`."
    },
    {
        "input": "How do I test an API with Python?",
        "output": "Use the `requests` library. Example: `import requests; response = requests.get('https://api.example.com'); print(response.json())`."
    },
    {
        "input": "How do I create a pie chart in Matplotlib?",
        "output": "Use `plt.pie()`. Example: `plt.pie([10, 20, 30]); plt.show()` generates a pie chart."
    },
    {
        "input": "What is the difference between `deepcopy` and `copy`?",
        "output": "`deepcopy` copies an object and all nested objects, while `copy` only copies the top-level object."
    },
    {
        "input": "What are promises in JavaScript?",
        "output": "They are objects that represent the eventual result of an asynchronous operation. Example: `fetch('url').then(response => response.json())`."
    },
    {
        "input": "What is a `callback`?",
        "output": "It is a function passed as an argument to another function, which is executed after a task is completed."
    },
    {
        "input": "What is the DOM in JavaScript?",
        "output": "It is a tree-like representation of the HTML elements on a web page."
    },
    {
        "input": "How do I select elements in the DOM?",
        "output": "Use methods like `document.querySelector()` or `document.getElementById()`. Example: `document.querySelector('h1')`."
    },
    {
        "input": "What is an environment variable?",
        "output": "It is a dynamic value that affects the behavior of processes in an operating system or program."
    },
    {
        "input": "How do I create an HTTP server in Node.js?",
        "output": "Use the `http` module. Example: `const http = require('http'); http.createServer((req, res) => res.end('Hello')).listen(3000);`."
    },
    {
        "input": "What is an event in JavaScript?",
        "output": "It is an action that occurs on a web page, such as a click or submitting a form."
    },
    {
        "input": "What is middleware in Express?",
        "output": "It is a function that has access to the request (`req`), response (`res`) object and the following middleware."
    },
    {
        "input": "How do I make SQL queries in Python?",
        "output": "Uses the `sqlite3` library. Example: `cursor.execute('SELECT * FROM table')`."
    },
    {
        "input": "What is a NoSQL database?",
        "output": "It is a type of database that does not use tables, like MongoDB, which stores data in JSON documents."
    },
    {
        "input": "What is functional programming?",
        "output": "It is a paradigm that treats functions as first-class citizens and encourages immutability and pure expressions. Example: using functions like `map` and `reduce`."
    },
    {
        "input": "What is a design pattern?",
        "output": "It is a general and reusable solution to common problems in software design. Example: Singleton, Observer and Factory."
    },
    {
        "input": "What is object-oriented programming?",
        "output": "It is a paradigm based on objects that contain data (attributes) and code (methods). Example: using classes like `class Vehicle`."
    },
    {
        "input": "What are microservices?",
        "output": "It is an architectural style where an application is built as a set of small, independent, individually deployable services."
    },
    {
        "input": "What is CI/CD?",
        "output": "It is a set of development practices that integrate changes frequently (CI) and deploy code automatically (CD)."
    },
    {
        "input": "What is a container in Kubernetes?",
        "output": "It is an executable unit that includes an application and its dependencies. Kubernetes orchestrates and manages these containers."
    },
    {
        "input": "What is a message queue?",
        "output": "It is a system that allows different parts of an application to communicate by sending and receiving messages asynchronously. Example: RabbitMQ, Kafka."
    },
    {
        "input": "How does a relational database work?",
        "output": "Organizes data in tables with relationships defined between them using primary and foreign keys. Example: MySQL, PostgreSQL."
    },
    {
        "input": "What is an index in a database?",
        "output": "It is a structure that improves the speed of searching for data in a table, although it can slow down inserts and updates."
    },
    {
        "input": "What is a distributed database?",
        "output": "It is a database whose storage and processing are distributed across multiple nodes. Example: Cassandra, DynamoDB."
    },
    {
        "input": "What is GraphQL?",
        "output": "It is a query language for APIs that allows you to request exactly the data you need, avoiding excess or lack of data."
    },
    {
        "input": "What is an endpoint in an API?",
        "output": "It is a specific URL in an API that performs an action or returns data. Example: `GET /users` to get a list of users."
    },
    {
        "input": "What are database migrations?",
        "output": "These are scripts that manage changes to the database schema, such as adding tables or modifying columns."
    },
    {
        "input": "What is an ORM?",
        "output": "It is a tool that maps application objects to database tables, simplifying SQL queries. Examples: SQLAlchemy, Hibernate."
    },
    {
        "input": "What is a proxy server?",
        "output": "It is an intermediary server that receives requests from clients and forwards them to the final server, providing control and security."
    },
    {
        "input": "What is a WebSocket?",
        "output": "It is a protocol that allows bidirectional and persistent communication between client and server. Example: real-time chat applications."
    },
    {
        "input": "What is hashing?",
        "output": "It is a process that converts data into a fixed string of characters using a hash function. Example: SHA-256 to encrypt passwords."
    },
    {
        "input": "What is reactive programming?",
        "output": "It is a paradigm in which systems respond to state changes and events in an asynchronous and non-blocking manner. Example: using RxJava or React."
    },
    {
        "input": "What is a load balancer?",
        "output": "It is a component that distributes incoming traffic between multiple servers to optimize availability and performance."
    },
    {
        "input": "What is an SSL certificate?",
        "output": "It is a file that ensures encrypted communication between a browser and a server. It is used to implement HTTPS."
    },
    {
        "input": "What is a monolithic architecture?",
        "output": "It is an approach where all the logic of an application is contained in a single deployable unit."
    },
    {
        "input": "What is a framework?",
        "output": "It is a collection of tools and libraries that simplify software development. Example: Django for web development."
    },
    {
        "input": "What is the difference between front-end and back-end?",
        "output": "The front-end is the user interface, while the back-end handles the logic, databases, and APIs on the server."
    },
    {
        "input": "What is concurrency?",
        "output": "It is the ability to execute multiple tasks at the same time, but not necessarily in parallel. Example: threads in Python."
    },
    {
        "input": "What is parallelization?",
        "output": "It is the simultaneous execution of multiple tasks using multiple CPU cores. Example: distributed processing in Spark."
    },
    {
        "input": "What are threads in programming?",
        "output": "They are the smallest processing units within a process. They allow the concurrent execution of tasks."
    },
    {
        "input": "What is asynchronous programming?",
        "output": "It is a model where tasks do not block the execution of the program. Example: `async` and `await` in Python."
    },
    {
        "input": "What are promises in programming?",
        "output": "They are objects that represent the eventual result of an asynchronous operation. Example: `fetch().then(res => ...)` in JavaScript."
    },
    {
        "input": "What is cache?",
        "output": "It is a temporary storage for frequently accessed data, in order to improve performance."
    },
    {
        "input": "What is Docker?",
        "output": "It is a platform that allows you to create, distribute and run applications in lightweight and portable containers."
    },
    {
        "input": "What is a virtual machine?",
        "output": "It is a software that emulates physical hardware, allowing multiple operating systems to run on a single computer."
    },
    {
        "input": "What is a DNS server?",
        "output": "It is a server that translates human-readable domain names (such as google.com) into IP addresses."
    },
    {
        "input": "What is a binary search algorithm?",
        "output": "It is a method for finding an element in an ordered list by successively dividing it into halves."
    },
    {
        "input": "What is a binary tree?",
        "output": "It is a data structure where each node has at most two children: left and right."
    },
    {
        "input": "What is a graph in programming?",
        "output": "It is a data structure composed of nodes (vertices) connected by links (edges)."
    },
    {
        "input": "What is the difference between a list and a set in Python?",
        "output": "A list allows duplicate elements and maintains order, while a set does not allow duplicates and has no order."
    },
    {
        "input": "What is a dictionary comprehension?",
        "output": "It is a concise way to create dictionaries. Example: `{x: x**2 for x in range(5)}` creates `{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}`."
    },
    {
        "input": "How to handle a large file in Python?",
        "output": "Use iterators or read the file line by line. Example: `with open('file.txt') as f: for line in f: print(line.strip())`."
    },
    {
        "input": "What does the get() method do on a dictionary?",
        "output": "Returns the value of a key or a default value if the key does not exist. Example: `my_dictionary.get('key', 'default')`."
    },
    {
        "input": "What is a decorator in Python?",
        "output": "It is a function that modifies the behavior of another function or method. Example: `@decorator` on a function."
    },
    {
        "input": "How can you run parallel code in Python?",
        "output": "Use the `concurrent.futures` or `multiprocessing` module. Example: `from concurrent.futures import ThreadPoolExecutor`."
    },
    {
        "input": "What is a magic method in Python?",
        "output": "They are special methods surrounded by double underscores, such as `__init__`, `__str__`, or `__len__`, that define specific behaviors."
    },
    {
        "input": "What is the difference between *args and **kwargs?",
        "output": "`*args` captures positional arguments, while `**kwargs` captures named arguments in dictionary form."
    },
    {
        "input": "What is context management with?",
        "output": "It is a way to automatically manage resources, ensuring their release. Example: `with open('file.txt') as f: data = f.read()`."
    },
    {
        "input": "What does the append() method do on a list?",
        "output": "Adds an item to the end of the list. Example: `my_list.append(5)`."
    },
    {
        "input": "How can you sort a list in Python?",
        "output": "Use `.sort()` to modify the list or `sorted()` for a new sorted list. Example: `sorted([3, 1, 2])` returns `[1, 2, 3]`."
    },
    {
        "input": "What does the zip() function do?",
        "output": "Combines iterables into tuples. Example: `list(zip([1, 2], ['a', 'b']))` returns `[(1, 'a'), (2, 'b')]`."
    },
    {
        "input": "How can you handle an error in Python?",
        "output": "Use a `try-except` block. Example: `try: x = 1/0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "What is a generating function?",
        "output": "It is a function that returns values ​​one by one using `yield`. Example: `def generator(): yield 1; yield 2`."
    },
    {
        "input": "What does the eval() function do in Python?",
        "output": "Executes a Python expression as a string. Example: `eval('2 + 2')` returns `4`."
    },
    {
        "input": "What is an abstract class in Python?",
        "output": "It is a class that defines methods that must be implemented in its subclasses. Use `abc` to define it."
    },
    {
        "input": "What are properties in Python?",
        "output": "These are attributes that behave like methods. Use `@property` to define them. Example: `@property def name(self): return self._name`."
    },
    {
        "input": "What is an iterator in Python?",
        "output": "It is an object that implements the `__iter__()` and `__next__()` methods, allowing elements to be traversed sequentially."
    },
    {
        "input": "How can you read a JSON file?",
        "output": "Use the `json` library. Example: `import json; with open('datos.json') as f: data = json.load(f)`."
    },
    {
        "input": "How can you convert a Python object to JSON?",
        "output": "Use `json.dumps()`. Example: `import json; json_data = json.dumps({'key': 'value'})`."
    },
    {
        "input": "What is a class decorator?",
        "output": "It is a function that modifies the behavior of a class. Example: `@my_decorator` before a class definition."
    },
    {
        "input": "What does the hasattr() function do?",
        "output": "Checks if an object has an attribute. Example: `hasattr(object, 'attribute')`."
    },
    {
        "input": "How to implement a Singleton in Python?",
        "output": "Use a pattern that ensures a single instance. Example: using the `__new__` method."
    },
    {
        "input": "What does the `is` operator do in Python?",
        "output": "Checks if two variables point to the same object in memory. Example: `a is b`."
    },
    {
        "input": "How does the `in` operator work?",
        "output": "Checks if an element is in a collection. Example: `'a' in ['a', 'b', 'c']` returns `True`."
    },
    {
        "input": "What are metaclasses in Python?",
        "output": "These are classes of classes that control how classes are created. Example: `class MyMeta(type): ...`."
    },
    {
        "input": "What is serialization in Python?",
        "output": "It is converting an object into a format that can be stored or transmitted, such as JSON or Pickle."
    },
    {
        "input": "What is the difference between deepcopy and copy?",
        "output": "`deepcopy` recursively copies all nested objects, while `copy` performs a shallow copy."
    },
    {
        "input": "What does the pop() method do on lists?",
        "output": "Removes and returns the last element from the list (or a specific index). Example: `my_list.pop()`."
    },
    {
        "input": "How do you define a static method?",
        "output": "Use the `@staticmethod` decorator. Example: `@staticmethod def method(): ...`."
    },
    {
        "input": "What is multiple inheritance?",
        "output": "It is when a class inherits from more than one base class. Example: `class Child(Parent1, Parent2): ...`."
    },
    {
        "input": "What is the `super()` method?",
        "output": "Allows calling methods of a base class from a subclass. Example: `super().metodo()`."
    },
    {
        "input": "What is the `__repr__` method?",
        "output": "It is a magic method that returns an unambiguous representation of an object. Example: `def __repr__(self): return f'Object({self.attribute})'`."
    },
    {
        "input": "How can I compare objects in Python?",
        "output": "Defines the `__eq__`, `__lt__`, and other comparison operators. Example: `def __eq__(self, other): return self.value == other.value`."
    },
    {
        "input": "What is a NamedTuple?",
        "output": "It is a class of tuples with names for the fields. Example: `from collections import namedtuple; Person = namedtuple('Person', 'name age')`."
    },
    {
        "input": "How can I measure the execution time of a function?",
        "output": "Use the `time` module. Example: `start = time.time(); function(); print(time.time() - start)`."
    },
    {
        "input": "What is a queue in Python?",
        "output": "It is a FIFO data structure. Use the `queue` module to implement it. Example: `from queue import Queue; queue = Queue()`."
    },
    {
        "input": "What is a stack in Python?",
        "output": "It is a LIFO structure. It uses a list or the `queue` module. Example: `stack.append(value); stack.pop()`."
    },
    {
        "input": "What does `collections.Counter` do?",
        "output": "Counts the frequency of elements in an iterable. Example: `from collections import Counter; Counter([1, 2, 2, 3])`."
    },
    {
        "input": "How to use `collections.deque`?",
        "output": "It is an efficient doubly linked queue. Example: `from collections import deque; d = deque(); d.append(1); d.appendleft(0)`."
    },
    {
        "input": "How to use itertools in Python?",
        "output": "Provides tools for advanced iterations. Example: `from itertools import permutations; print(list(permutations([1, 2, 3])))`."
    },
    {
        "input": "What is `functools.lru_cache`?",
        "output": "It is a decorator for caching function results. Example: `@lru_cache def fib(n): return n if n <= 1 else fib(n-1) + fib(n-2)`."
    },
    {
        "input": "How do I use `dataclasses`?",
        "output": "Provides a simplified way to define classes. Example: `from dataclasses import dataclass; @dataclass class Person: name: str; age: int`."
    },
    {
        "input": "What is the `__getattr__` descriptor?",
        "output": "It is a method called when an attribute is accessed that does not exist. Example: `def __getattr__(self, name): return 'Attribute not defined'`."
    },
    {
        "input": "How to handle multiple exceptions in Python?",
        "output": "Use an `except` block with a tuple of exceptions. Example: `except (TypeError, ValueError):`."
    },
    {
        "input": "What is a nested decorator?",
        "output": "It is a decorator that applies multiple layers of logic. Example: `@decorator1 @decorator2 def function(): ...`."
    },
    {
        "input": "How to run code in a thread?",
        "output": "Use the `threading` module. Example: `from threading import Thread; t = Thread(target=my_function); t.start()`."
    },
    {
        "input": "How to use processes in Python?",
        "output": "Use the `multiprocessing` module. Example: `from multiprocessing import Process; p = Process(target=my_function); p.start()`."
    },
    {
        "input": "What does the `asyncio` module do?",
        "output": "Allows you to write asynchronous code with `async` and `await`. Example: `async def my_function(): await another_function()`."
    },
    {
        "input": "How to implement a basic HTTP server?",
        "output": "Use `http.server`. Example: `from http.server import SimpleHTTPRequestHandler, HTTPServer; HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler).serve_forever()`."
    },
    {
        "input": "What is a signal handler in Python?",
        "output": "It is a function that handles system interrupts. It uses `signal`. Example: `import signal; signal.signal(signal.SIGINT, my_handler)`."
    },
    {
        "input": "What does the `join` method do in threads?",
        "output": "Waits for a thread to finish its execution. Example: `t = Thread(target=my_function); t.start(); t.join()`."
    },
    {
        "input": "How to handle compressed files in Python?",
        "output": "Use the `zipfile` or `gzip` module. Example: `import zipfile; with zipfile.ZipFile('file.zip', 'r') as z: z.extractall()`."
    },
    {
        "input": "What is the `__call__` method?",
        "output": "Allows an object to be called as a function. Example: `def __call__(self, *args): print('Object called')`."
    },
    {
        "input": "What are asynchronous contexts?",
        "output": "They allow you to manage asynchronous resources. Use `async with`. Example: `async with resource as r: await r.do_something()`."
    },
    {
        "input": "What does the `sched` module do?",
        "output": "It is a task scheduler. Example: `import sched, time; s = sched.scheduler(time.time, time.sleep); s.enter(5, 1, print, ('Hello',)); s.run()`."
    },
    {
        "input": "How to use the `argparse` module?",
        "output": "Allows you to define and parse command line arguments. Example: `import argparse; parser = argparse.ArgumentParser(); parser.add_argument('--opcion'); args = parser.parse_args()`."
    },
    {
        "input": "What is a middleware in Flask?",
        "output": "It is a function that is executed before or after handling a request. Example: `@app.before_request def before(): ...`."
    },
    {
        "input": "What does the `socket` module do?",
        "output": "Allows you to implement communication between networks. Example: `import socket; s = socket.socket(); s.bind(('localhost', 8080)); s.listen()`."
    },
    {
        "input": "How to connect to a SQLite database?",
        "output": "Use `sqlite3`. Example: `import sqlite3; conn = sqlite3.connect('my_base.db'); cursor = conn.cursor()`."
    },
    {
        "input": "What are `typing` data types in Python?",
        "output": "These are annotations to indicate types in functions and classes. Example: `from typing import List; def sum(nums: List[int]) -> int: return sum(nums)`."
    },
    {
        "input": "What does the `__del__` method do?",
        "output": "It is a magic method that is called when the object is destroyed. Example: `def __del__(self): print('Object destroyed')`."
    },
    {
        "input": "How do I implement a cache in Python?",
        "output": "Use `functools.lru_cache` or a dictionary. Example: `@lru_cache(maxsize=100)`."
    },
    {
        "input": "How does the `:=` operator work in Python?",
        "output": "It is the assignment operator in expressions known as 'walrus operator'. Example: `if (n := len(list)) > 5: print(f'The list has {n} elements')`."
    },
    {
        "input": "What is the `__getitem__` method?",
        "output": "Allows you to define how elements of an object are accessed. Example: `def __getitem__(self, index): return self.data[index]`."
    },
    {
        "input": "What does the `__setitem__` method do?",
        "output": "Defines how values ​​are assigned to elements of an object. Example: `def __setitem__(self, key, value): self.data[key] = value`."
    },
    {
        "input": "What is a view in a dictionary?",
        "output": "It is an object that reflects the current elements of the dictionary. Example: `my_dictionary.keys()` returns a view of the keys."
    },
    {
        "input": "How can I run system commands in Python?",
        "output": "Use the `subprocess` module. Example: `import subprocess; subprocess.run(['ls', '-l'])`."
    },
    {
        "input": "What is the difference between `os.system` and `subprocess.run`?",
        "output": "`os.system` executes commands directly, while `subprocess.run` is safer and more flexible in handling arguments."
    },
    {
        "input": "How to limit memory usage in Python?",
        "output": "Use efficient data structures such as generators or the `resource` module on supported systems."
    },
    {
        "input": "What is a `weakref` module in Python?",
        "output": "Allows you to create weak references to objects, preventing them from being counted towards garbage collection."
    },
    {
        "input": "What is an immutable object in Python?",
        "output": "It is an object whose state cannot change after it is created. Example: `tuples` or `strings`."
    },
    {
        "input": "What is Garbage Collector in Python?",
        "output": "It is a mechanism that frees memory by removing objects without active references. Use `gc` to control it."
    },
    {
        "input": "How can you disable the garbage collector?",
        "output": "Use the `gc` module. Example: `import gc; gc.disable()` to disable it."
    },
    {
        "input": "What is a `contextlib` in Python?",
        "output": "It is a module to simplify the creation of context handlers. Example: `from contextlib import contextmanager`."
    },
    {
        "input": "What does the `abc` module do?",
        "output": "Allows you to define abstract classes. Example: `from abc import ABC, abstractmethod` to create methods that must be implemented."
    },
    {
        "input": "How can I handle custom errors?",
        "output": "Create custom exceptions by inheriting from `Exception`. Example: `class MyError(Exception): pass`."
    },
    {
        "input": "What is an infinite iterator?",
        "output": "This is a never-ending iterator. Use `itertools.cycle` or `itertools.repeat` to create them."
    },
    {
        "input": "What does `itertools.combinations` do?",
        "output": "Generates all possible combinations of an iterable. Example: `itertools.combinations([1, 2, 3], 2)`."
    },
    {
        "input": "How does `os.environ` work?",
        "output": "Access and modify environment variables. Example: `os.environ['NEW_VAR'] = 'value'`."
    },
    {
        "input": "What is a signal handler?",
        "output": "It is a function that responds to signals from the operating system. It uses the `signal` module to define them."
    },
    {
        "input": "How to compress data in Python?",
        "output": "Use modules like `gzip` or `zlib`. Example: `gzip.compress(b'data')`."
    },
    {
        "input": "What is a .pyc file?",
        "output": "It is a compiled Python file containing generated bytecode to optimize program execution."
    },
    {
        "input": "What is a `pathlib` module?",
        "output": "It is a module to handle file paths in an object-oriented way. Example: `from pathlib import Path; Path('file.txt').exists()`."
    },
    {
        "input": "How to manage routes cross-platform?",
        "output": "Use the `os.path` or `pathlib` module to construct compatible paths. Example: `os.path.join('folder', 'file.txt')`."
    },
    {
        "input": "What is the `__slots__` method?",
        "output": "Specifies fixed attributes on a class to save memory. Example: `__slots__ = ['name', 'age']`."
    },
    {
        "input": "What is a `KeyError` exception?",
        "output": "Occurs when you try to access a non-existent key in a dictionary. Example: `my_dictionary['invalid_key']`."
    },
    {
        "input": "What does the `uuid` module do?",
        "output": "Generates universally unique identifiers. Example: `import uuid; uuid.uuid4()`."
    },
    {
        "input": "How to create a temporary file?",
        "output": "Use the `tempfile` module. Example: `import tempfile; with tempfile.TemporaryFile() as temp: temp.write(b'Temporary data')`."
    },
    {
        "input": "What does the `timeit` module do?",
        "output": "Allows you to measure the execution time of small code fragments. Example: `timeit.timeit('sum(range(100))', number=1000)`."
    },
    {
        "input": "What is a descriptor in Python?",
        "output": "It is an object that controls access to a class attribute using the `__get__`, `__set__`, and `__delete__` methods."
    },
    {
        "input": "How to schedule tasks in Python?",
        "output": "Use libraries like `sched` or `APScheduler`. Example: `from apscheduler.schedulers.background import BackgroundScheduler`."
    },
    {
        "input": "What is `pickle` in Python?",
        "output": "It is a module for serializing and deserializing Python objects. Example: `pickle.dump(object, file)`."
    },
    {
        "input": "What is a `for-else` loop?",
        "output": "It is a `for` loop with an `else` clause that is executed if the loop is not broken. Example: `for x in list: if x == value: break else: print('Value not found')`."
    },
    {
        "input": "What does the `**` operator do in Python?",
        "output": "Performs the power operation. Example: `2 ** 3` returns `8`."
    },
    {
        "input": "What is the difference between `isinstance` and `type`?",
        "output": "`isinstance` checks whether an object is of a class or subclass, while `type` only checks the exact class."
    },
    {
        "input": "What does the `secrets` module do?",
        "output": "Generates cryptographically secure numbers and tokens. Example: `secrets.token_hex(16)`."
    },
    {
        "input": "What does it mean that the `:=` operator is the walrus operator?",
        "output": "It is a way to assign values ​​within an expression and use it in the same context. Example: `if (n := len(list)) > 5: print(n)`."
    },
    {
        "input": "Why use `__getitem__` in a custom class?",
        "output": "Allows objects of the class to behave as containers, accessing elements with indexes as if they were lists or dictionaries."
    },
    {
        "input": "When to use `__setitem__` instead of traditional methods?",
        "output": "It is useful for defining custom behaviors when assigning values, especially in classes that act as containers."
    },
    {
        "input": "What is a view in a dictionary and why is it useful?",
        "output": "A view reflects the current data in the dictionary and is automatically updated if the dictionary changes. Example: `dict_keys` or `dict_values`."
    },
    {
        "input": "When should I prefer `subprocess.run` over `os.system`?",
        "output": "`subprocess.run` offers greater control, error handling, and security when executing system commands, while `os.system` is simpler but less secure."
    },
    {
        "input": "How can I reduce memory usage with large data structures?",
        "output": "Use generators instead of lists or sets, and consider techniques such as data compression or modules like `array` and `numpy`."
    },
    {
        "input": "What is the difference between a mutable and immutable object?",
        "output": "A mutable object, such as a list, can change its contents after creation, while an immutable one, such as a tuple, cannot."
    },
    {
        "input": "How can I free memory manually in Python?",
        "output": "Use the garbage collector with `import gc; gc.collect()`, although Python usually handles this automatically."
    },
    {
        "input": "What advantages does `contextlib` offer for creating context handlers?",
        "output": "Simplifies the creation of custom contexts without having to define methods like `__enter__` and `__exit__` directly."
    },
    {
        "input": "What is an abstract class and when should you use it?",
        "output": "It is a template for classes that share a base structure but must implement certain methods in their subclasses."
    },
    {
        "input": "Why use custom exceptions?",
        "output": "They allow you to handle specific errors in your application logic, making your code clearer and more controllable."
    },
    {
        "input": "How to use `itertools` to generate joins?",
        "output": "Use `itertools.combinations` to get all possible combinations of an iterable with a fixed size."
    },
    {
        "input": "Why use `os.environ` instead of passing configurations manually?",
        "output": "`os.environ` allows you to manage global settings, such as API keys or environment variables, without having to alter the source code."
    },
    {
        "input": "What does `gzip` do and when should you use it?",
        "output": "`gzip` compresses data to reduce storage usage or improve transmission speed over networks."
    },
    {
        "input": "Why does Python generate `.pyc` files automatically?",
        "output": "`.pyc` files contain compiled bytecode that speeds up the execution of Python programs by avoiding unnecessary recompilation."
    },
    {
        "input": "What are the benefits of using `pathlib` over `os.path`?",
        "output": "`pathlib` provides a cleaner, more object-oriented API for working with file paths."
    },
    {
        "input": "How to avoid `KeyError` errors in dictionaries?",
        "output": "Use the `.get()` method to provide a default value in case the key does not exist."
    },
    {
        "input": "When is it useful to use `uuid` for identifiers?",
        "output": "It is useful when you need to generate unique identifiers, such as in distributed databases or tracking systems."
    },
    {
        "input": "What is a temporary file and what is it used for?",
        "output": "It is a file created to store data temporarily during the execution of a program and is usually deleted after use."
    },
    {
        "input": "How can I measure the exact execution time of a piece of code?",
        "output": "Use the `timeit` module, which accurately measures execution time even for short code fragments."
    },
    {
        "input": "What does a descriptor do and when should you use it?",
        "output": "A descriptor controls access to class attributes through methods such as `__get__`, useful for validating or dynamically calculating values."
    },
    {
        "input": "How to implement an efficient caching system in Python?",
        "output": "Use `functools.lru_cache` to store results from functions or libraries like `redis` for more advanced systems."
    },
    {
        "input": "How does Python handle `for-else` loops?",
        "output": "The `else` clause is executed if the loop does not break, useful for searching for unsuccessful items."
    },
    {
        "input": "What is the difference between using `type` and `isinstance`?",
        "output": "`type` checks the exact class of an object, while `isinstance` includes inheritance and is more flexible."
    },
    {
        "input": "When should I use the `secrets` module instead of `random`?",
        "output": "`secrets` is ideal for operations that require cryptographic security, such as generating passwords or unique tokens."
    },
    {
        "input": "What are the advantages of using generators over lists?",
        "output": "Generators consume less memory because they produce items on demand instead of storing them all in memory."
    },
    {
        "input": "What does the `yield from` clause do?",
        "output": "Delegate the generation of values ​​to another generator or iterable, simplifying the structure of nested generators."
    },
    {
        "input": "What is the difference between `__str__` and `__repr__`?",
        "output": "`__str__` is used to return a human-readable representation of an object, while `__repr__` is for unambiguous representation."
    },
    {
        "input": "How to handle large files without loading them completely into memory?",
        "output": "Use iterators or read the file line by line with `with open('file') as f: for line in f: ...`."
    },
    {
        "input": "Why use nested decorators?",
        "output": "They allow multiple layers of logic to be applied in a function, combining functionalities such as authentication and registration."
    },
    {
        "input": "How can I read a file line by line in Python?",
        "output": "Use a `for` loop with the file object. Example: `with open('file.txt') as f: for line in f: print(line.strip())`."
    },
    {
        "input": "How do I write data to a new file?",
        "output": "Use `w` write mode. Example: `with open('new.txt', 'w') as file: file.write('Hello, world')`."
    },
    {
        "input": "How can I add all the numbers in a list?",
        "output": "Use the `sum()` function. Example: `my_list = [1, 2, 3]; total = sum(my_list)`."
    },
    {
        "input": "How do I sort a list of numbers in descending order?",
        "output": "Use `sorted()` or `.sort()`. Example: `sorted(list, reverse=True)`."
    },
    {
        "input": "How do I convert a string to a list of words?",
        "output": "Use the `split()` method. Example: `'Hello World'.split()` returns `['Hello', 'world']`."
    },
    {
        "input": "How can I concatenate two lists?",
        "output": "Use the `+` operator. Example: `list1 + list2`."
    },
    {
        "input": "How do I check if an item is in a list?",
        "output": "Use the `in` operator. Example: `if element in list: print('Is in the list')`."
    },
    {
        "input": "How do I remove duplicates from a list?",
        "output": "Converts the list to a set and then back to a list. Example: `list(set(my_list))`."
    },
    {
        "input": "How do I create a dictionary in Python?",
        "output": "Use `{}` braces or the `dict()` function. Example: `my_dictionary = {'key': 'value'}`."
    },
    {
        "input": "How do I access the value of a key in a dictionary?",
        "output": "Use the key name in square brackets. Example: `my_dictionary['key']`."
    },
    {
        "input": "How can I sum the values ​​in a dictionary?",
        "output": "Use the `sum()` function over `my_dictionary.values()`. Example: `sum(my_dictionary.values())`."
    },
    {
        "input": "How do I convert a dictionary to a JSON file?",
        "output": "Use `json.dump()`. Example: `import json; with open('data.json', 'w') as f: json.dump(my_dictionary, f)`."
    },
    {
        "input": "How do I find the largest item in a list?",
        "output": "Use the `max()` function. Example: `max(list)`."
    },
    {
        "input": "How do I get the length of a list or string?",
        "output": "Use the `len()` function. Example: `len(my_list)` or `len(my_string)`."
    },
    {
        "input": "How can I handle a division by zero error?",
        "output": "Use a `try-except` block. Example: `try: result = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "How do I run a function in parallel with another?",
        "output": "Use the `threading` or `concurrent.futures` module. Example: `from threading import Thread; t = Thread(target=my_function); t.start()`."
    },
    {
        "input": "How do I create a generator in Python?",
        "output": "Use the `yield` keyword. Example: `def generator(): yield 1; yield 2`."
    },
    {
        "input": "How can I filter a list with a condition?",
        "output": "Use the `filter()` function or a list comprehension. Example: `[x for x in list if x > 0]`."
    },
    {
        "input": "How do I convert a list to a comma separated string?",
        "output": "Use the `join()` method. Example: `', '.join(['a', 'b', 'c'])` returns `'a, b, c'`."
    },
    {
        "input": "How do I convert a string to lowercase?",
        "output": "Use the `.lower()` method. Example: `'Hello'.lower()` returns `'hello'`."
    },
    {
        "input": "How do I get only the keys from a dictionary?",
        "output": "Use the `.keys()` method. Example: `my_dictionary.keys()`."
    },
    {
        "input": "How do I copy a dictionary?",
        "output": "Use the `.copy()` method. Example: `copy = my_dictionary.copy()`."
    },
    {
        "input": "How can I create an infinite loop?",
        "output": "Use `while True:`. Example: `while True: print('This is an infinite loop')`."
    },
    {
        "input": "How can I stop a loop before it ends?",
        "output": "Use the `break` statement. Example: `for x in list: if x == 5: break`."
    },
    {
        "input": "How do I calculate the intersection of two sets?",
        "output": "Use the `&` operator. Example: `set1 & set2`."
    },
    {
        "input": "How do I get the difference between two sets?",
        "output": "Use the `-` operator. Example: `set1 - set2`."
    },
    {
        "input": "How do I create a class in Python?",
        "output": "Use the `class` keyword. Example: `class MyClass: pass`."
    },
    {
        "input": "How do I define a constructor in a class?",
        "output": "Use the `__init__` method. Example: `class MyClass: def __init__(self, attribute): self. attribute = attribute`."
    },
    {
        "input": "How do I get the current date and time?",
        "output": "Use the `datetime` module. Example: `from datetime import datetime; now = datetime.now()`."
    },
    {
        "input": "How do I check if a number is even or odd?",
        "output": "Use the `%` operator. Example: `if number % 2 == 0: print('Even') else: print('Odd')`."
    },
    {
        "input": "How do I generate a random number?",
        "output": "Use the `random` module. Example: `import random; number = random.randint(1, 10)`."
    },
    {
        "input": "How do I query a SQLite database?",
        "output": "Use the `sqlite3` module. Example: `cursor.execute('SELECT * FROM table')`."
    },
    {
        "input": "How can I handle arguments from the command line?",
        "output": "Use the `argparse` module. Example: `import argparse; parser = argparse.ArgumentParser(); parser.add_argument('--name')`."
    },
    {
        "input": "How do I create a variable in Python?",
        "output": "You just need to assign a value to a name. Example: `my_variable = 10`."
    },
    {
        "input": "How do I make a `for` loop in Python?",
        "output": "Use the `for` structure. Example: `for i in range(5): print(i)` prints the numbers from 0 to 4."
    },
    {
        "input": "How do I make a `while` loop?",
        "output": "Use the `while` structure. Example: `counter = 0; while counter < 5: print(counter); counter += 1`."
    },
    {
        "input": "How do I create a list in Python?",
        "output": "Use brackets to define it. Example: `my_list = [1, 2, 3]`."
    },
    {
        "input": "How do I create a dictionary in Python?",
        "output": "Use `{}` braces to define it. Example: `my_dictionary = {'name': 'John', 'age': 30}`."
    },
    {
        "input": "How do I print something on screen?",
        "output": "Use the `print()` function. Example: `print('Hello, world')`."
    },
    {
        "input": "How do I request data from the user?",
        "output": "Use the `input()` function. Example: `name = input('What is your name? ')`."
    },
    {
        "input": "How do I convert a string to a number?",
        "output": "Use the `int()` or `float()` functions. Example: `number = int('10')` or `decimal = float('3.14')`."
    },
    {
        "input": "How do I make an `if` condition in Python?",
        "output": "Use the `if` structure. Example: `if age > 18: print('You are of legal age')`."
    },
    {
        "input": "How do I make an `if-else` condition?",
        "output": "Add an `else` block. Example: `if number > 0: print('Positive') else: print('Negative or zero')`."
    },
    {
        "input": "How do I define a function in Python?",
        "output": "Use the `def` keyword. Example: `def greet(): print('Hello')`."
    },
    {
        "input": "How do I pass parameters to a function?",
        "output": "Include them in parentheses when defining the function. Example: `def add(a, b): return a + b`."
    },
    {
        "input": "How do I use a loop to iterate through a list?",
        "output": "Use a `for` loop. Example: `my_list = [1, 2, 3]; for item in my_list: print(item)`."
    },
    {
        "input": "How do I check if a number is positive?",
        "output": "Use an `if` condition. Example: `if number > 0: print('Is positive')`."
    },
    {
        "input": "How do I check if a number is even?",
        "output": "Use the `%` operator. Example: `if number % 2 == 0: print('Is even')`."
    },
    {
        "input": "How do I create a number range?",
        "output": "Use the `range()` function. Example: `for i in range(1, 6): print(i)` prints the numbers 1 through 5."
    },
    {
        "input": "How do I stop a cycle before it ends?",
        "output": "Use the `break` statement. Example: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "How do I jump to the next iteration in a loop?",
        "output": "Use the `continue` statement. Example: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "How do I add an item to a list?",
        "output": "Use the `.append()` method. Example: `my_list.append(4)`."
    },
    {
        "input": "How do I remove an item from a list?",
        "output": "Use the `.remove()` method. Example: `my_list.remove(2)` removes the value `2` from the list."
    },
    {
        "input": "How do I get the length of a list?",
        "output": "Use the `len()` function. Example: `len(my_list)`."
    },
    {
        "input": "How do I access an item in a list?",
        "output": "Use the index of the element in brackets. Example: `my_list[0]` returns the first element."
    },
    {
        "input": "How do I get the last item in a list?",
        "output": "Use index `-1`. Example: `my_list[-1]`."
    },
    {
        "input": "How do I sort a list?",
        "output": "Use the `.sort()` method or the `sorted()` function. Example: `my_list.sort()`."
    },
    {
        "input": "How do I convert a list to a string?",
        "output": "Use the `join()` method. Example: `', '.join(['a', 'b', 'c'])` returns `'a, b, c'`."
    },
    {
        "input": "How do I create a variable in Python?",
        "output": "You just need to assign a value to it. Example: `my_variable = 10`."
    },
    {
        "input": "How do you print something in Python?",
        "output": "Use the `print()` function. Example: `print('Hello, world')`."
    },
    {
        "input": "How do I make a `for` loop in Python?",
        "output": "Use `for` followed by an iterable. Example: `for i in range(5): print(i)` prints the numbers 0 through 4."
    },
    {
        "input": "How do I make a `while` loop in Python?",
        "output": "Use `while` with a condition. Example: `i = 0; while i < 5: print(i); i += 1`."
    },
    {
        "input": "How do I create a list in Python?",
        "output": "Use brackets. Example: `my_list = [1, 2, 3]`."
    },
    {
        "input": "How do I check if one number is greater than another?",
        "output": "Use operators like `>` or `<`. Example: `if x > y: print('x is greater than y')`."
    },
    {
        "input": "How do I make a function in Python?",
        "output": "Use the `def` keyword. Example: `def greet(): print('Hello')`."
    },
    {
        "input": "How do I add two numbers in Python?",
        "output": "Use the `+` operator. Example: `result = 5 + 3`."
    },
    {
        "input": "How do I concatenate text strings?",
        "output": "Use the `+` operator. Example: `greeting = 'Hello' + ' ' + 'world'`."
    },
    {
        "input": "How to use `if` in Python?",
        "output": "Defines a condition. Example: `if x > 0: print('x is positive')`."
    },
    {
        "input": "How do I add an item to a list?",
        "output": "Use the `.append()` method. Example: `my_list.append(4)`."
    },
    {
        "input": "How do I create a dictionary in Python?",
        "output": "Use `{}` braces. Example: `my_dictionary = {'key': 'value'}`."
    },
    {
        "input": "How do I check if a key is in a dictionary?",
        "output": "Use the `in` operator. Example: `if 'key' in my_dictionary: print('Key found')`."
    },
    {
        "input": "How do I create a loop that goes through a list?",
        "output": "Use a `for` loop. Example: `for item in my_list: print(item)`."
    },
    {
        "input": "How do I divide one number by another?",
        "output": "Use the `/` operator. Example: `result = 10 / 2`."
    },
    {
        "input": "How do I get the remainder of a division?",
        "output": "Use the `%` operator. Example: `remainder = 10 % 3`."
    },
    {
        "input": "How can I repeat something a specific number of times?",
        "output": "Use `for` with `range()`. Example: `for i in range(5): print('Hello')`."
    },
    {
        "input": "How do I generate a list of consecutive numbers?",
        "output": "Use `list()` and `range()`. Example: `list(range(5))` returns `[0, 1, 2, 3, 4]`."
    },
    {
        "input": "How do I convert a number to a string?",
        "output": "Use `str()`. Example: `str(123)` returns `'123'`."
    },
    {
        "input": "How do I convert a string to a number?",
        "output": "Use `int()` or `float()`. Example: `int('123')` returns `123`."
    },
    {
        "input": "How do I check if one string contains another?",
        "output": "Use the `in` operator. Example: `if 'world' in 'Hello world': print('Found')`."
    },
    {
        "input": "How do I create a tuple in Python?",
        "output": "Use parentheses. Example: `my_tuple = (1, 2, 3)`."
    },
    {
        "input": "How do I define a constant in Python?",
        "output": "There are no real constants in Python, but by convention it is capitalized. Example: `CONSTANT = 3.14`."
    },
    {
        "input": "How do I make a program wait a few seconds?",
        "output": "Use the `time` module. Example: `import time; time.sleep(2)` waits 2 seconds."
    },
    {
        "input": "How do I get user input?",
        "output": "Use the `input()` function. Example: `name = input('What is your name? ')`."
    },
    {
        "input": "How do I check if a number is odd?",
        "output": "Checks if the remainder of the division by 2 is not zero. Example: `if number % 2 != 0: print('Odd')`."
    },
    {
        "input": "How do I do a comparison with `elif`?",
        "output": "Use `elif` for additional conditions. Example: `if x > 0: print('Positive') elif x == 0: print('Zero') else: print('Negative')`."
    },
    {
        "input": "How do I use a variable inside a string?",
        "output": "Use an f-string. Example: `name = 'John'; print(f'Hello, {name}')`."
    },
    {
        "input": "How can I terminate a program in Python?",
        "output": "Use `exit()` or `sys.exit()`. Example: `import sys; sys.exit()`."
    },
    {
        "input": "How do I multiply strings?",
        "output": "Use the `*` operator. Example: `'Hello' * 3` returns `'HelloHelloHello'`."
    },
    {
        "input": "How do I check if a list is empty?",
        "output": "Check its length. Example: `if not my_list: print('Empty list')`."
    },
    {
        "input": "How to use `pass` in Python?",
        "output": "It is a placeholder that does nothing. Example: `if True: pass`."
    },
    {
        "input": "How can I round a number?",
        "output": "Use the `round()` function. Example: `round(3.14159, 2)` returns `3.14`."
    },
    {
        "input": "What is a computer?",
        "output": "A computer is an electronic machine that processes data and performs operations according to the instructions it receives, executing tasks quickly and accurately."
    },
    {
        "input": "How does a computer work?",
        "output": "A computer operates through the interaction of its hardware and software. The hardware performs the physical operations, while the software provides the instructions for those operations to be carried out."
    },
    {
        "input": "What is computer hardware?",
        "output": "A computer's hardware includes all the physical components, such as the CPU, memory, hard drive, monitor, and peripherals such as the keyboard and mouse."
    },
    {
        "input": "What is computer software?",
        "output": "Software is the set of programs and applications that allow the computer to perform specific tasks, such as word processors, web browsers, and operating systems."
    },
    {
        "input": "What is the difference between hardware and software?",
        "output": "Hardware is the physical components of the computer, while software is the programs and systems that control the hardware to perform tasks."
    },
    {
        "input": "What is a CPU?",
        "output": "The CPU (Central Processing Unit) is the brain of the computer, responsible for executing instructions and coordinating all operations within the system."
    },
    {
        "input": "What is RAM?",
        "output": "RAM (Random Access Memory) is a type of volatile memory that the computer uses to store temporary data while it is running."
    },
    {
        "input": "What is a hard drive?",
        "output": "The hard drive is a permanent storage device that saves the operating system, programs, and user data, even when the computer is turned off."
    },
    {
        "input": "What is an operating system?",
        "output": "An operating system is software that manages a computer's hardware and allows users to interact with the system by running applications and managing resources."
    },
    {
        "input": "What are the most common operating systems?",
        "output": "Common operating systems include Windows, macOS, Linux, and mobile systems like Android and iOS."
    },
    {
        "input": "What is a graphics card?",
        "output": "The graphics card is a hardware component that handles the processing of images, videos and graphics, allowing them to be displayed on the monitor."
    },
    {
        "input": "What is a motherboard?",
        "output": "The motherboard is the main card of the computer, where all the essential components such as the CPU, RAM, and peripherals are connected."
    },
    {
        "input": "What is a USB port?",
        "output": "A USB port is an interface that allows you to connect peripheral devices, such as keyboards, mice, and external memory, to your computer."
    },
    {
        "input": "What is a sound card?",
        "output": "A sound card is a device that allows the computer to process and output audio, managing the input and output of sound."
    },
    {
        "input": "What is a computer network?",
        "output": "A computer network is a set of computers and other devices connected to each other to share resources and information."
    },
    {
        "input": "What is a server?",
        "output": "A server is a computer or program that provides services, such as data storage or application access, to other computers on a network."
    },
    {
        "input": "What is the cloud?",
        "output": "The cloud is a service that allows you to store data and run applications over the Internet, without having to have them on a local physical device."
    },
    {
        "input": "What is a web browser?",
        "output": "A web browser is software that allows you to access and view websites on the Internet, such as Google Chrome, Firefox, and Safari."
    },
    {
        "input": "What is BIOS?",
        "output": "The BIOS (Basic Input Output System) is a basic software located on the computer's motherboard that manages the startup and initial configuration of the hardware."
    },
    {
        "input": "What is the motherboard?",
        "output": "The motherboard, or mainboard, is the central component of the computer that connects all other components, such as the CPU, RAM, and storage devices."
    },
    {
        "input": "What are computer peripherals?",
        "output": "Peripherals are external devices that connect to your computer to add functionality, such as printers, scanners, mice, and keyboards."
    },
    {
        "input": "What is a keyboard?",
        "output": "A keyboard is an input device that allows the user to interact with the computer by entering text and commands."
    },
    {
        "input": "What is a mouse?",
        "output": "A mouse is an input device that allows the user to move a pointer on the computer screen to select or interact with objects."
    },
    {
        "input": "What is a printer?",
        "output": "A printer is a peripheral device that allows you to print documents or images from your computer onto paper."
    },
    {
        "input": "What is a monitor?",
        "output": "A monitor is an output device that displays computer-generated visual information, such as text, images, and videos."
    },
    {
        "input": "What are expansion cards?",
        "output": "Expansion cards are additional components that can be inserted into the computer's motherboard to enhance or add functionality, such as graphics, sound, or network cards."
    },
    {
        "input": "What is 64-bit technology?",
        "output": "64-bit technology refers to a computer's ability to process data in 64-bit blocks, allowing for better performance and increased memory capacity."
    },
    {
        "input": "What is an IP address?",
        "output": "An IP (Internet Protocol) address is a numerical label that uniquely identifies a computer or device on a network."
    },
    {
        "input": "What is RAM?",
        "output": "RAM (Random Access Memory) is a type of volatile memory that allows the computer to temporarily store data that is used while running applications."
    },
    {
        "input": "What is SSD storage?",
        "output": "SSD (Solid State Drive) storage is a type of storage that uses flash memory to store data, providing much faster read and write speeds than traditional hard drives."
    },
    {
        "input": "What is a cooling system in a computer?",
        "output": "A cooling system is a set of components, such as fans or heat sinks, that keep the computer's temperature within a safe range to prevent overheating."
    },
    {
        "input": "What is computer architecture?",
        "output": "A computer's architecture refers to the design and organization of its components, including the CPU, memory, storage, and input/output systems."
    },
    {
        "input": "What is a byte?",
        "output": "A byte is a unit of information that represents 8 bits, and is the minimum amount of data that a computer can handle at one time."
    },
    {
        "input": "What is a bit?",
        "output": "A bit is the smallest unit of information in computing and can have a value of 0 or 1."
    },
    {
        "input": "What is a GPU?",
        "output": "The GPU (Graphics Processing Unit) is a specialized component that handles the computer's graphics processing, especially in tasks such as gaming and image rendering."
    },
    {
        "input": "What is overclocking?",
        "output": "Overclocking is the practice of increasing the operating speed of computer components, such as the CPU or GPU, beyond their standard specification to improve performance."
    },
    {
        "input": "What is Wi-Fi connectivity?",
        "output": "Wi-Fi connectivity is a technology that allows devices to connect to the Internet and other networks wirelessly using radio waves."
    },
    {
        "input": "What is a firewall?",
        "output": "A firewall is a security tool that controls network traffic, allowing or blocking communications according to a set of predefined rules."
    },
    {
        "input": "What is an antivirus?",
        "output": "An antivirus is a software designed to detect, prevent and remove viruses and other types of malware from a computer."
    },
    {
        "input": "What is virtualization?",
        "output": "Virtualization is a technology that allows multiple operating systems or software instances to run on a single computer, creating independent environments within the same machine."
    },
    {
        "input": "What is an external storage device?",
        "output": "An external storage device is a device that allows you to store data outside of your computer, such as external hard drives, USB flash drives, or SD cards."
    },
    {
        "input": "What is a word processor?",
        "output": "A word processor is software that allows you to create, edit, format, and save text documents, such as Microsoft Word or Google Docs."
    },
    {
        "input": "What is a file system?",
        "output": "A file system is the structure that organizes how data is stored and accessed on a storage device."
    },
    {
        "input": "What is cloud computing?",
        "output": "Cloud computing is a model that allows data to be stored and processed on remote servers, accessible via the Internet, instead of on the local computer."
    },
    {
        "input": "What is an input device?",
        "output": "An input device is any peripheral that allows the user to enter data into the computer, such as a keyboard, mouse, or scanner."
    },
    {
        "input": "What is an output device?",
        "output": "An output device is any peripheral that enables the computer to display data to the user, such as a monitor, printer, or speakers."
    },
    {
        "input": "What types of technological systems exist?",
        "output": "There are various types of technological systems, including: operating systems, communication systems, control systems, embedded systems, network systems, information systems, and software systems, among others."
    },
    {
        "input": "How many types of operating systems are there?",
        "output": "There are several types of operating systems, such as desktop operating systems (Windows, macOS, Linux), mobile operating systems (Android, iOS), and real-time operating systems, among others."
    },
    {
        "input": "What is a communication system in technology?",
        "output": "A communication system is a set of technological components that allows the transmission of data between devices, such as mobile networks, the Internet and local networks."
    },
    {
        "input": "What is an embedded system?",
        "output": "An embedded system is a computing system that is dedicated to performing a specific task and is integrated into devices such as home appliances, automobiles, and industrial systems."
    },
    {
        "input": "How many types of network systems exist?",
        "output": "There are different types of network systems, such as LAN (Local Area Network), WAN (Wide Area Network), MAN (Metropolitan Area Network), and wireless networks (Wi-Fi, Bluetooth, 5G), among others."
    },
    {
        "input": "What is an information system?",
        "output": "An information system is a set of technological components that allow the collection, storage, processing and distribution of information to support decision-making and business management."
    },
    {
        "input": "What are distributed systems?",
        "output": "A distributed system is a set of interconnected computers that work together to provide a service, sharing resources such as processing and storage, without depending on a central machine."
    },
    {
        "input": "What is a software system?",
        "output": "A software system is a set of programs and applications designed to perform specific tasks on a computer or device, such as word processors, web browsers, and operating systems."
    },
    {
        "input": "What is a control system?",
        "output": "A control system is a system that regulates and monitors the behavior of a process or device to keep it within certain limits, such as temperature or speed control systems."
    },
    {
        "input": "What is an expert system?",
        "output": "An expert system is a type of artificial intelligence-based system designed to simulate the decision-making process of an expert in a specific area, using knowledge bases and inference rules."
    },
    {
        "input": "What is a cloud storage system?",
        "output": "A cloud storage system is a service that allows you to store and access data over the Internet instead of relying on local storage, such as Google Drive, Dropbox, and OneDrive."
    },
    {
        "input": "What is a cybersecurity system?",
        "output": "A cybersecurity system is a set of technologies and practices designed to protect networks, devices, and data from unauthorized access, attacks, or damage."
    },
    {
        "input": "What is a business management system?",
        "output": "An enterprise resource planning (ERP) system is a technological solution that helps companies to manage different processes in an integrated manner, such as accounting, inventory, sales and human resources."
    },
    {
        "input": "How many types of database systems are there?",
        "output": "There are different types of database systems, such as relational, non-relational (NoSQL), distributed, hierarchical, object databases, among others."
    },
    {
        "input": "What is a wireless communication system?",
        "output": "A wireless communication system is a system that transmits data without cables, using radio frequency signals, as in the case of Wi-Fi, Bluetooth, and cellular networks."
    },
    {
        "input": "What is a content management system?",
        "output": "A content management system (CMS) is a platform that allows you to create, manage and modify digital content, such as text, images and videos, without requiring technical programming knowledge."
    },
    {
        "input": "What is a virtualization system?",
        "output": "A virtualization system allows multiple operating systems to run on a single physical machine, creating isolated virtual environments to maximize resource usage."
    },
    {
        "input": "What is a remote monitoring system?",
        "output": "A remote monitoring system is a system that allows devices or processes to be monitored and controlled remotely, using networks and communication technologies."
    },
    {
        "input": "What is a navigation system?",
        "output": "A navigation system is a set of devices and software that can determine the location of an object and guide it to a destination, such as GPS or vehicle navigation systems."
    },
    {
        "input": "What is a payment processing system?",
        "output": "A payment processing system is a system that facilitates the transaction of money between buyers and sellers, such as online payment systems or point-of-sale terminals."
    },
    {
        "input": "What is an artificial intelligence system?",
        "output": "An artificial intelligence system is a set of technologies that enable machines to perform tasks that normally require human intelligence, such as speech recognition, machine learning, and decision making."
    },
    {
        "input": "What is a help desk system?",
        "output": "A help desk system is a set of tools and services that help solve technical problems related to software, hardware or computer systems."
    },
    {
        "input": "What is an automation system?",
        "output": "An automation system is a system designed to perform tasks or processes without human intervention, using electronically controlled devices, such as in manufacturing and the smart home."
    },
    {
        "input": "What is an industrial control system?",
        "output": "An industrial control system is a technological system used to manage and monitor the operation of industrial machinery and processes, such as programmable logic controllers (PLC)."
    },
    {
        "input": "What is a recommendation system?",
        "output": "A recommendation system is an algorithm-based system that suggests products, services, or content to users based on their preferences and previous behavior, such as Amazon or Netflix."
    },
    {
        "input": "What is an instant messaging system?",
        "output": "An instant messaging system is an online communication service that allows you to send and receive messages in real time, such as WhatsApp, Telegram, and Slack."
    },
    {
        "input": "What is an intrusion detection system?",
        "output": "An intrusion detection system (IDS) is a security system that monitors networks and systems for suspicious or malicious activity that may indicate an attempt at unauthorized access."
    },
    {
        "input": "What is a real-time operating system?",
        "output": "A real-time operating system is an operating system designed to ensure that tasks are completed within a specific time, which is essential in applications such as aviation or medicine."
    },
    {
        "input": "What is a version control system?",
        "output": "A version control system is a software tool that helps manage changes to the source code of programs, such as Git, by allowing modifications to be tracked and reverted."
    },
    {
        "input": "What is a quantum computing system?",
        "output": "A quantum computing system is a technology that uses the principles of quantum mechanics to perform calculations, which could allow very complex problems to be solved at a much faster rate than traditional computers."
    },
    {
        "input": "What is a facial recognition system?",
        "output": "A facial recognition system is an artificial intelligence system that analyzes and compares facial patterns to identify or verify a person's identity."
    },
    {
        "input": "What is a business intelligence system?",
        "output": "A business intelligence (BI) system is a set of tools and technologies that help businesses collect, analyze, and interpret data to make informed decisions."
    },
    {
        "input": "What is a data analysis system?",
        "output": "A data analytics system is a platform or set of tools that allows you to collect, process, and analyze large amounts of data to obtain useful information and make data-driven decisions."
    },
    {
        "input": "What is a disaster protection system?",
        "output": "A disaster protection system is a technological system that enables the protection of data and infrastructure against unexpected events, such as natural disasters or system failures."
    },
    {
        "input": "What is a backup system?",
        "output": "A backup system is a solution that creates backup copies of data to ensure its recovery in case of loss or damage, such as cloud storage services or external hard drives."
    },
    {
        "input": "What is a traffic control system?",
        "output": "A traffic control system is a technological system used to manage the flow of vehicles and pedestrians, using traffic lights, cameras and sensors to improve safety and efficiency."
    },
    {
        "input": "What is a mobile payment system?",
        "output": "A mobile payment system is a system that enables financial transactions via mobile phones, such as Apple Pay, Google Pay and other digital payment services."
    },
    {
        "input": "What is a health monitoring system?",
        "output": "A health monitoring system is a system that collects and analyzes data about a person's health in real time, such as activity tracking devices or telemedicine systems."
    },
    {
        "input": "What is an inventory control system?",
        "output": "An inventory control system is a technological system that helps manage product stocks in a store or warehouse, optimizing the purchasing, storage and sales process."
    },
    {
        "input": "What is a predictive analytics system?",
        "output": "A predictive analytics system uses machine learning and big data algorithms to analyze historical data and make predictions about future events, such as in forecasting product demand."
    },
    {
        "input": "What is a home automation system?",
        "output": "A home automation system is a system that controls and automates household devices, such as lights, thermostats, and security cameras, allowing them to be managed through applications or virtual assistants."
    },
    {
        "input": "What is an identity verification system?",
        "output": "An identity verification system is a system that ensures that a person or entity is who they say they are, using methods such as passwords, fingerprints, facial recognition, or two-factor authentication."
    },
    {
        "input": "How do I create a variable in Python?",
        "output": "In Python, you create a variable by simply assigning a value to a name, for example: `my_variable = 10`."
    },
    {
        "input": "Can I create a variable without giving it a value?",
        "output": "No, in Python you must assign a value to the variable when you create it. If you try to use a variable without assigning a value to it, you will get an error."
    },
    {
        "input": "What type of values ​​can I assign to a variable?",
        "output": "You can assign various types of values ​​to a variable, such as integers, text strings, decimal numbers (floats), lists, tuples, dictionaries, and others."
    },
    {
        "input": "How do I create a variable with an integer value?",
        "output": "To create a variable with an integer value, you just need to assign a number without decimals, like: `age = 25`."
    },
    {
        "input": "How do I create a variable with a decimal value?",
        "output": "To create a variable with a decimal (float) value, assign a number with a decimal point, such as: `price = 19.99`."
    },
    {
        "input": "How do I assign a text value to a variable?",
        "output": "To assign a text (string of characters) to a variable, you must surround it with single or double quotes, such as: `name = 'John'` or `name = \"John\"`."
    },
    {
        "input": "How can I change the value of a variable?",
        "output": "You can change the value of a variable by simply assigning it a new value, such as: `age = 30` if you previously had `age = 25`."
    },
    {
        "input": "Can I create a variable without assigning an initial value?",
        "output": "In Python, you must always assign an initial value to a variable when you create it. You cannot declare a variable without a value."
    },
    {
        "input": "What happens if I assign an incorrect value to a variable?",
        "output": "If you try to assign a value that is not compatible with the variable's type, Python will generate an error. For example, assigning a string to a variable that expects a number will cause an error."
    },
    {
        "input": "How can I find out the type of a variable?",
        "output": "To find out the type of a variable, you can use the `type()` function, like this: `print(type(my_variable))`."
    },
    {
        "input": "Can I use spaces in variable names?",
        "output": "No, in Python variable names cannot contain spaces. If you need to separate words, you can use underscores, like: `my_variable`."
    },
    {
        "input": "Are variables in Python case sensitive?",
        "output": "Yes, variables in Python are case sensitive. For example, `age` and `Age` are two different variables."
    },
    {
        "input": "What are the rules for naming a variable in Python?",
        "output": "Variable names must start with a letter or an underscore (`_`), followed by letters, numbers, or underscores. They cannot start with a number or be reserved words in Python."
    },
    {
        "input": "How do I create a global variable in Python?",
        "output": "To create a global variable in Python, you just define it outside of any function, so that it is available throughout the program."
    },
    {
        "input": "What is a local variable in Python?",
        "output": "A local variable is one that is defined within a function and is only accessible within that function."
    },
    {
        "input": "Can I use variables inside text strings?",
        "output": "Yes, you can use variables inside text strings by string concatenation or interpolation. For example: `name = 'John'` and `greeting = 'Hello ' + name`."
    },
    {
        "input": "How do I interpolate variables within a string in Python?",
        "output": "To interpolate a variable within a string in Python, you can use f-strings, like: `greeting = f'Hello {name}'`."
    },
    {
        "input": "How to create a list of variables?",
        "output": "You can create a list of variables using brackets `[]`, for example: `numbers = [1, 2, 3, 4, 5]`."
    },
    {
        "input": "How do I assign a boolean value to a variable?",
        "output": "To assign a boolean value to a variable, you can use `True` or `False`, such as: `is_adult = True`."
    },
    {
        "input": "How do I assign an empty value to a variable?",
        "output": "You can assign an empty value to a variable using `None`, such as: `my_variable = None`."
    },
    {
        "input": "How do I use a variable inside a function?",
        "output": "You can use a variable inside a function as long as it is defined within the scope of the function or is global. For example, if `age` is a global variable, you can use it in the function without any problems."
    },
    {
        "input": "Can I change the type of a variable after I've created it?",
        "output": "Yes, in Python variables do not have a fixed type, so you can change the type of a variable. For example, you can assign an integer to a variable and then assign a string to it."
    },
    {
        "input": "What happens if I try to use a variable that I haven't defined?",
        "output": "If you try to use a variable that has not been defined, Python will throw a `NameError` error."
    },
    {
        "input": "How do I define a variable inside a class?",
        "output": "Inside a class, you can define a variable as a class attribute. You use `self` to access it, for example: `self.my_variable = 10`."
    },
    {
        "input": "How can I use variables inside a list?",
        "output": "You can use variables inside a list by assigning the values ​​of the variables as elements of the list. Example: `my_list = [my_variable, 5, 'text']`."
    },
    {
        "input": "What is a constant variable?",
        "output": "There is no specific type for constants in Python. However, it is a convention to use all uppercase letters to denote a constant variable, such as: `PI = 3.1416`."
    },
    {
        "input": "How can I assign multiple variables in one line?",
        "output": "You can assign multiple variables on a single line by separating the assignments with commas. For example: `a, b, c = 1, 2, 3`."
    },
    {
        "input": "How do I delete a variable?",
        "output": "You can delete a variable using the `del` keyword, for example: `del my_variable`."
    },
    {
        "input": "How do you create variables in a dictionary?",
        "output": "In a dictionary, variables are created as key-value pairs. For example: `my_dictionary = {'name': 'John', 'age': 25}`."
    },
    {
        "input": "Can I use reserved words as variable names?",
        "output": "No, you cannot use Python reserved words (such as `def`, `if`, `else`) as variable names."
    },
    {
        "input": "How do you create variables inside a loop?",
        "output": "Variables inside a loop are created in the same way as outside the loop, except their value can change at each iteration of the loop."
    },
    {
        "input": "How can I assign the value of one variable to another?",
        "output": "You can assign the value of one variable to another simply by using the assignment operator, for example: `another_variable = my_variable`."
    },
    {
        "input": "How can I check if a variable exists?",
        "output": "You can use the `locals()` or `globals()` function to check whether a variable is defined in the local or global scope, respectively."
    },
    {
        "input": "What is a dynamic variable?",
        "output": "A dynamic variable is one whose type can change at runtime. Python is a dynamically typed language, so variables can change type during program execution."
    },
    {
        "input": "Can I use a variable before declaring it?",
        "output": "No, in Python you must declare a variable before using it, or you will get a `NameError` error."
    },
    {
        "input": "What is an instance variable?",
        "output": "An instance variable is a variable that belongs to an instance of a class, and is usually defined inside the `__init__` method using `self`."
    },
    {
        "input": "What does `global` mean in a variable?",
        "output": "The `global` keyword is used within a function to indicate that the variable being modified is global, that is, it belongs to the global scope."
    },
    {
        "input": "Can I assign a variable from a function to a global variable?",
        "output": "Yes, to modify a global variable within a function, you must use the `global` keyword, such as: `global my_variable`."
    },
    {
        "input": "How can I concatenate text type variables?",
        "output": "You can concatenate text variables using the `+` operator, for example: `message = 'Hello ' + name`."
    },
    {
        "input": "How do I assign a value to a variable inside a function?",
        "output": "Inside a function, you can assign a value to a variable like this: `my_variable = 10`."
    },
    {
        "input": "How can I add two numeric variables?",
        "output": "You can add two numeric variables using the `+` operator, for example: `sum = num1 + num2`."
    },
    {
        "input": "How can I know the value of a variable?",
        "output": "You can see the value of a variable using the `print()` function, for example: `print(my_variable)`."
    },
    {
        "input": "What is a loop in Python?",
        "output": "A loop in Python is a control structure that allows a block of code to be executed repeatedly, as long as a specific condition is met."
    },
    {
        "input": "What are the types of loops in Python?",
        "output": "In Python, the main types of loops are the `for` loop and the `while` loop."
    },
    {
        "input": "How does a `for` loop work in Python?",
        "output": "The `for` loop in Python iterates over a sequence (such as a list, tuple, or range) and executes a block of code for each element in the sequence."
    },
    {
        "input": "How do you use a `for` loop to iterate over a list?",
        "output": "You can use a `for` loop to iterate over a list like this: `for item in list: print(item)`."
    },
    {
        "input": "What is the `range()` function in a `for` loop?",
        "output": "The `range()` function in Python generates a sequence of numbers, which can be used with a `for` loop to iterate a specified number of times. Example: `for i in range(5): print(i)`."
    },
    {
        "input": "How does a `while` loop work in Python?",
        "output": "A `while` loop executes a block of code repeatedly while a boolean condition is true."
    },
    {
        "input": "How do you end a loop in Python?",
        "output": "You can use the `break` keyword to exit a loop before the condition becomes false."
    },
    {
        "input": "What does the `continue` keyword do in a loop?",
        "output": "The `continue` keyword is used to jump to the next iteration of a loop, skipping the code that follows after it for the current iteration."
    },
    {
        "input": "Can I have an infinite loop in Python?",
        "output": "Yes, an infinite loop can occur if the condition of the `while` loop is always true. For example, `while True: pass`."
    },
    {
        "input": "What is a nested loop?",
        "output": "A nested loop is a loop inside another loop. You can have `for` or `while` loops inside other loops to perform multiple iterations."
    },
    {
        "input": "How to use nested loops in Python?",
        "output": "Nested loops are used when you need to perform iterations within each iteration of an outer loop. Example: `for i in range(3): for j in range(2): print(i, j)`."
    },
    {
        "input": "What is an iterator in Python?",
        "output": "An iterator is an object that allows you to iterate through a sequence (such as a list or range) one by one. `for` loops use iterators implicitly."
    },
    {
        "input": "Can I use a `break` inside a nested loop?",
        "output": "Yes, you can use `break` to break out of the loop you are in. If you use it in a nested loop, it will only break out of the innermost loop."
    },
    {
        "input": "How can I skip an iteration in a loop?",
        "output": "You can use `continue` to skip an iteration of a loop, which will cause the code following that iteration to be skipped and move on to the next iteration."
    },
    {
        "input": "How can I iterate through a list with its index in a `for` loop?",
        "output": "You can use the `enumerate()` function to iterate through a list by its index. Example: `for index, item in enumerate(list): print(index, item)`."
    },
    {
        "input": "Can a list be modified while looping through it?",
        "output": "Although it is possible to modify a list during iteration, it can cause errors if elements are changed while the loop is still running. It is best to avoid modifying the list during iteration or do so carefully."
    },
    {
        "input": "What is a `for` loop in Python?",
        "output": "A `for` loop in Python is used to iterate over a sequence of elements, such as a list, tuple, or range, and execute a block of code for each of the elements."
    },
    {
        "input": "How can you avoid an infinite loop in Python?",
        "output": "Make sure that the condition in the `while` loop can become false at some point. If you use a `while True` loop, be sure to include a `break` or exit condition."
    },
    {
        "input": "What is the `else` operator in a loop?",
        "output": "The `else` operator in a loop is executed when the loop terminates normally (i.e., not interrupted by a `break`). It is useful for performing actions after the loop completes."
    },
    {
        "input": "Can I use `else` with a `while` loop?",
        "output": "Yes, you can use `else` with a `while` loop. The code block in `else` will be executed if the loop ends without a `break` being used."
    },
    {
        "input": "How to create a loop that prints numbers from 1 to 10?",
        "output": "You can use a `for` loop with `range()`, like this: `for i in range(1, 11): print(i)`."
    },
    {
        "input": "How can I iterate over a string in Python?",
        "output": "You can iterate over a string of text using a `for` loop, for example: `for letter in 'hello': print(letter)`."
    },
    {
        "input": "What is a `while` loop in Python?",
        "output": "A `while` loop in Python executes a block of code repeatedly while a condition is true. Example: `while condition: do_something()`."
    },
    {
        "input": "How do I make a loop that runs 5 times?",
        "output": "You can use `range(5)` with a `for` loop, like this: `for i in range(5): print(i)`."
    },
    {
        "input": "How can I create a loop that does not print negative numbers?",
        "output": "You can use a `for` loop and an `if` statement to check if the number is negative, and only print non-negative numbers. Example: `for i in range(-5, 6): if i >= 0: print(i)`."
    },
    {
        "input": "What happens if `break` is used in a `for` loop?",
        "output": "When you use `break` in a `for` loop, the loop stops immediately and the program continues with the code that follows after the loop."
    },
    {
        "input": "Can you use a `continue` inside a `for` loop?",
        "output": "Yes, `continue` is used inside a `for` loop to skip the current iteration and move on to the next one."
    },
    {
        "input": "What happens if I forget the condition of a `while` loop?",
        "output": "If you forget the condition of a `while` loop, the loop will become an infinite loop, since it will always execute."
    },
    {
        "input": "How can I prevent a loop from printing something multiple times?",
        "output": "You can prevent a loop from printing something multiple times by using an `if` statement to check if that information has already been printed before."
    },
    {
        "input": "How can I break a loop if a condition is true?",
        "output": "You can use the `break` statement to exit the loop if a specific condition is true."
    },
    {
        "input": "How do I use a `for` loop with a list of dictionaries?",
        "output": "You can iterate over a list of dictionaries like this: `for dictionary in list: print(dictionary['key'])`."
    },
    {
        "input": "Can `else` be used in a `for` loop?",
        "output": "Yes, you can use `else` with a `for` loop. The `else` block will be executed if the loop is not terminated by a `break`."
    },
    {
        "input": "How do I print the index of each element in a `for` loop?",
        "output": "You can use `enumerate()` to get the index of each item, like this: `for index, item in enumerate(list): print(index, item)`."
    },
    {
        "input": "How can I make a loop run only once?",
        "output": "You can make a loop execute only once by using a `while` loop with a condition that becomes false after the first execution, or by using a `for` loop with a range of 1."
    },
    {
        "input": "Can I have a `for` loop inside a `while` loop?",
        "output": "Yes, you can nest a `for` loop inside a `while` loop or vice versa, allowing you to perform complex iterations."
    },
    {
        "input": "What is an infinite `while` loop?",
        "output": "An infinite `while` loop is a loop whose condition is always true, causing it to never terminate, such as: `while True:`."
    },
    {
        "input": "Can I use a `break` inside a `while` loop?",
        "output": "Yes, you can use `break` inside a `while` loop to exit the loop before the condition becomes false."
    },
    {
        "input": "How can I break out of a nested loop?",
        "output": "To exit a nested loop, you can use `break` in the innermost loop, or use a set of flags to control exiting outer loops."
    },
    {
        "input": "What can you do on Python?",
        "output": "I can help you with basic and advanced Python concepts, from writing simple scripts to developing applications and handling popular libraries."
    },
    {
        "input": "Can you explain something about Python to me?",
        "output": "I can explain everything from the basics, like variables and loops, to advanced topics like decorators, generators, and exception handling in Python."
    },
    {
        "input": "What can you do related to Guatemala?",
        "output": "I can offer information about the culture, history, geography and interesting facts of Guatemala."
    },
    {
        "input": "What can you do about Xela?",
        "output": "I can provide you with information about the city of Quetzaltenango, including its history, culture, tourist attractions and important events."
    },
    {
        "input": "What can you do about Artificial Intelligence Theory?",
        "output": "I can explain theoretical concepts of artificial intelligence, such as machine learning, neural networks and practical applications of AI."
    },
    {
        "input": "What do you know about the Systems Engineering career?",
        "output": "I can explain topics related to the career, such as algorithms, software design, networks, databases and systems development."
    },
    {
        "input": "What can you do related to programming?",
        "output": "I can help you understand fundamental concepts, solve problems, and write code in different languages, especially Python."
    },
    {
        "input": "What can you do about technology?",
        "output": "I can provide you with information on technological concepts, current trends and practical applications in areas such as computing and systems."
    },
    {
        "input": "What can you do about systems?",
        "output": "I can help you understand computer systems architecture, software design, and concepts related to networks and databases."
    },
    {
        "input": "What can you do about video games?",
        "output": "I can explain basic concepts of game development, engines like Unity, and help you plan the logic and mechanics of a game."
    },
    {
        "input": "What do you know about computers?",
        "output": "I can explain basic concepts about computer hardware and software, how they work, and how systems interact."
    },
    {
        "input": "What can you do related to adapters?",
        "output": "I can explain to you what adapters are, how they work, and their importance in connecting electronic devices or systems."
    },
    {
        "input": "What can you do about artificial intelligence?",
        "output": "I can explain theoretical foundations, basic algorithms, and how AI concepts are applied in real life or in systems."
    },
    {
        "input": "What can you do if I want to learn programming?",
        "output": "I can teach you the basics of programming, help you with practical exercises and explain the logic behind the algorithms."
    },
    {
        "input": "What can you do related to computers and systems?",
        "output": "I can explain how computers work, the interaction between hardware and software, and basic concepts of operating systems and networks."
    },
    {
        "input": "What can you do about adapters on computers?",
        "output": "I can explain the types of adapters that exist, such as network or graphics adapters, and their use in computer systems."
    },
    {
        "input": "What can you do related to video games and programming?",
        "output": "I can help you understand how to program video games, from logic design to using engines like Pygame or Unity."
    },
    {
        "input": "What can you do about technology in Guatemala?",
        "output": "I can offer information about technological development in Guatemala and how it relates to areas such as education and business."
    },
    {
        "input": "What can you do about systems programming?",
        "output": "I can explain how to program basic systems, interact with hardware and optimize resources in specific applications."
    },
    {
        "input": "How do I create a basic `for` loop in Python?",
        "output": "You can create a basic `for` loop in Python using the syntax: `for variable in sequence:`. Example: `for i in range(5): print(i)`."
    },
    {
        "input": "How do you create a `for` loop to iterate over a list?",
        "output": "You can iterate over a list using a `for` loop like this: `for item in list: print(item)`."
    },
    {
        "input": "How do you create a `for` loop with `range()`?",
        "output": "You can use `range()` to generate a sequence of numbers. Example: `for i in range(3): print(i)` will print the numbers 0 through 2."
    },
    {
        "input": "How do you create a `while` loop in Python?",
        "output": "You can create a `while` loop in Python with the syntax: `while condition: do_something()`. Example: `while i < 5: print(i); i += 1`."
    },
    {
        "input": "How to create a `while` loop that terminates when a condition is false?",
        "output": "Use the basic syntax of a `while` loop with a boolean condition. Example: `while x < 10: x += 1`."
    },
    {
        "input": "How to create a `while` loop with a counter?",
        "output": "You can use a counter in a `while` loop like this: `counter = 0; while counter < 5: print(counter); counter += 1`."
    },
    {
        "input": "How to create a `for` loop to iterate over a specific range?",
        "output": "Use `range(start, stop)` to specify a range. Example: `for i in range(2, 6): print(i)` will print the numbers 2, 3, 4, and 5."
    },
    {
        "input": "How to create a `for` loop to iterate over a dictionary?",
        "output": "You can iterate over a dictionary using `.items()`. Example: `for key, value in dictionary.items(): print(key, value)`."
    },
    {
        "input": "How to create a `for` loop with an `if` condition inside?",
        "output": "You can use an `if` inside a `for` loop to apply conditions to elements. Example: `for i in range(5): if i % 2 == 0: print(i)` will print only even numbers."
    },
    {
        "input": "How to create a `for` loop with a different step?",
        "output": "Use the `range(start, stop, step)` function to define a step. Example: `for i in range(0, 10, 2): print(i)` will print 0, 2, 4, 6, 8."
    },
    {
        "input": "How to use a `for` loop to print elements of a list in reverse order?",
        "output": "You can use the `reversed()` function or the negative index of the list. Example: `for item in reversed(list): print(item)` or `for i in range(len(list)-1, -1, -1): print(list[i])`."
    },
    {
        "input": "How to exit a loop in Python?",
        "output": "You can use the `break` keyword to exit a loop prematurely. Example: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "How to use a `while` loop to wait until a condition is true?",
        "output": "You can use a `while` loop with the desired condition. Example: `while x != 5: x = int(input('Enter 5: '))`."
    },
    {
        "input": "How to create an infinite loop in Python?",
        "output": "You can create an infinite loop using `while True:`. Example: `while True: print('This loop is infinite')`."
    },
    {
        "input": "How to prevent an infinite loop from causing problems?",
        "output": "Use an exit condition or a `break` inside the loop. Example: `while True: x = input('Type end to exit: '); if x == 'end': break`."
    },
    {
        "input": "How can I use `break` to exit a nested loop?",
        "output": "To exit a nested loop, use `break` in the innermost loop. Example: `for i in range(3): for j in range(3): if j == 2: break`."
    },
    {
        "input": "How can I use `continue` in a `for` loop?",
        "output": "The `continue` keyword is used to skip the rest of the iteration and move on to the next one. Example: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "How to use a `for` loop to iterate over characters in a string?",
        "output": "You can iterate over the characters of a text string directly in a `for` loop. Example: `for char in 'Hello': print(char)`."
    },
    {
        "input": "How to create a `for` loop that iterates over multiple lists at once?",
        "output": "You can use the `zip()` function to iterate over multiple lists at the same time. Example: `for a, b in zip(list1, list2): print(a, b)`."
    },
    {
        "input": "How to create a `while` loop that depends on user input?",
        "output": "You can use a `while` loop in conjunction with `input()` to depend on user input. Example: `while input('Type something: ') != 'exit': print('You made an input')`."
    },
    {
        "input": "How to create a `while` loop with a decrementing counter?",
        "output": "You can use a decrementing counter inside a `while` loop. Example: `counter = 5; while counter > 0: print(counter); counter -= 1`."
    },
    {
        "input": "How to use a nested loop with an `if` inside?",
        "output": "You can nest an `if` inside a nested loop. Example: `for i in range(3): for j in range(3): if j == 1: print(f'{i},{j}')`."
    },
    {
        "input": "How to avoid an infinite loop in a program?",
        "output": "Make sure that the condition of your `while` or `for` loop eventually becomes false, or use `break` to control this."
    },
    {
        "input": "How to use a loop to count how many numbers are greater than 5?",
        "output": "You can use a `for` loop with a counter. Example: `counter = 0; for i in range(10): if i > 5: counter += 1`."
    },
    {
        "input": "How to create a loop to multiply numbers in a list?",
        "output": "You can use a `for` loop to multiply numbers in a list. Example: `result = 1; for num in list: result *= num`."
    },
    {
        "input": "How to iterate with a `for` loop to print the keys of a dictionary?",
        "output": "You can use `for key in dictionary:` to iterate over the keys in a dictionary. Example: `for key in dictionary: print(key)`."
    },
    {
        "input": "How to use `else` with a `for` loop?",
        "output": "The `else` block of a `for` loop is executed if the loop is not interrupted by a `break`. Example: `for i in range(3): if i == 2: break; else: print('Loop completed')`."
    },
    {
        "input": "How to make a `while` loop depend on a condition that changes inside the loop?",
        "output": "You can change the condition inside the loop. Example: `while x < 10: x += 1; print(x)`."
    },
    {
        "input": "How to use a loop to print odd numbers from 1 to 10?",
        "output": "You can use a `for` loop with an `if` condition to check for odd numbers. Example: `for i in range(1, 11): if i % 2 != 0: print(i)`."
    },
    {
        "input": "How to print all numbers from 1 to 10, but skip the number 5?",
        "output": "Use `continue` to skip the number 5. Example: `for i in range(1, 11): if i == 5: continue; print(i)`."
    },
    {
        "input": "How to use a `for` loop to iterate through a list of dictionaries?",
        "output": "You can iterate through a list of dictionaries and access their values. Example: `for dic in list: print(dic['key'])`."
    },
    {
        "input": "How to use `break` to exit a loop if a value is found?",
        "output": "Use `break` to exit the loop when a condition is met. Example: `for i in range(10): if i == 5: break; print(i)`."
    },
    {
        "input": "How to make a `for` loop that prints the squares of numbers?",
        "output": "You can use `for` with a mathematical operation. Example: `for i in range(5): print(i**2)`."
    },
    {
        "input": "How to use `else` with a `while` loop?",
        "output": "The `else` block in a `while` loop is executed when the loop ends without a `break`. Example: `while x < 5: x += 1; else: print('End of loop')`."
    },
    {
        "input": "How to avoid an iteration in a `for` loop when a condition is met?",
        "output": "You can use `continue` to skip the current iteration. Example: `for i in range(10): if i == 5: continue; print(i)`."
    },
    {
        "input": "How to count the number of times a number appears in a list using a loop?",
        "output": "You can use a counter inside a loop. Example: `counter = 0; for num in list: if num == 5: counter += 1`."
    },
    {
        "input": "How to create a loop that does something on each iteration and ends when a condition is met?",
        "output": "You can use a `while` loop with a condition that changes inside the loop. Example: `while x < 10: x += 1; if x == 7: break`."
    },
    {
        "input": "What can you do?",
        "output": "I can help you with topics related to Python, programming, artificial intelligence, systems, technology, video games, and concepts about Guatemala, Xela, computers and adapters."
    },
    {
        "input": "How can you help me?",
        "output": "I can help you learn about programming, resolve technical questions, explain concepts related to systems, artificial intelligence, computers, video games, and more."
    },
    {
        "input": "How can you help me with Python?",
        "output": "I can teach you everything from the basics to advanced Python topics, help you debug code, implement features, or develop small projects."
    },
    {
        "input": "What can you explain to me about programming?",
        "output": "I can explain the fundamentals of programming, control structures, algorithms, and help you write efficient code in Python."
    },
    {
        "input": "How can you help me with artificial intelligence?",
        "output": "I can explain AI theories, how machine learning algorithms work, and give you practical examples to get started."
    },
    {
        "input": "What topics can you cover?",
        "output": "I can cover topics related to Python, programming, artificial intelligence, systems, technology, computers, adapters, video games, Guatemala and Xela."
    },
    {
        "input": "What can you do?",
        "output": "I can explain concepts, teach programming, guide you in solving technical problems and provide you with information on the topics mentioned."
    },
    {
        "input": "How can I use this AI?",
        "output": "You can use this AI to learn about Python, understand topics of technology, systems and video games, or to solve specific questions related to adapters and computers."
    },
    {
        "input": "What can you teach me?",
        "output": "I can teach you Python programming, artificial intelligence fundamentals, systems logic, and basic video game development."
    },
    {
        "input": "What kind of help can you offer me?",
        "output": "I can offer technical assistance in programming, explain concepts, teach you how to solve problems and guide you in basic projects related to systems and technology."
    },
    {
        "input": "How can you help me if I want to learn programming?",
        "output": "I can teach you everything from the basics, like variables and loops, to advanced logic and data structures in Python."
    },
    {
        "input": "What can you explain to me about computers?",
        "output": "I can explain to you how computers work, the main components, and how they interact with software and adapters."
    },
    {
        "input": "What kind of problems can you solve?",
        "output": "I can help you with problems related to Python programming, basic systems, video game logic and resolution of technical concepts."
    },
    {
        "input": "What topics are you an expert in?",
        "output": "I am an expert in Python, programming, systems, artificial intelligence, computers, adapters and topics related to Guatemala and Xela."
    },
    {
        "input": "Can you help me with systems?",
        "output": "I can help you understand basic concepts of systems, networks, software design and computer architecture."
    },
    {
        "input": "What do you know about video games?",
        "output": "I can explain game development concepts, basic engines like Pygame or Unity, and programming logic for games."
    },
    {
        "input": "Can you solve Python problems?",
        "output": "Yes, I can help you debug code, write functions, and solve common problems in Python."
    },
    {
        "input": "What can you do if I want to learn about adapters?",
        "output": "I can explain to you what adapters are, how they work, and how they are used in computers and electronic systems."
    },
    {
        "input": "What topics can you address related to Guatemala?",
        "output": "I can offer information about the history, culture, technology and important facts of Guatemala, including Xela."
    },
    {
        "input": "What can you do if I need to understand more about systems?",
        "output": "I can explain topics related to systems architecture, software design, databases and networks, tailored to your needs."
    },
    {
        "input": "How can you help me with video games?",
        "output": "I can help you get started programming video games, understand basic design concepts, and explore tools like development engines."
    },
    {
        "input": "What can you do if I want to learn about artificial intelligence?",
        "output": "I can explain AI theories, how basic algorithms work, and help you implement simple examples."
    },
    {
        "input": "How can you help me if I want to learn about technology?",
        "output": "I can explain technological concepts, current trends, and how to apply that knowledge in practical projects."
    },
    {
        "input": "What can you do if I want to get started in Python?",
        "output": "I can teach you from the basics, such as variables and cycles, to helping you develop your first projects."
    },
    {
        "input": "What areas do you cover in systems?",
        "output": "I can help you with concepts of operating systems, networks, databases and software design, applied to practical tasks."
    },
    {
        "input": "What is an `if` statement in Python?",
        "output": "An `if` statement in Python allows a block of code to be executed if a condition is met. Its syntax is: `if condition: do_something()`."
    },
    {
        "input": "How do you create an `if` statement in Python?",
        "output": "You can create an `if` statement like this: `if condition: do_something()`. Example: `if x > 5: print('Greater than 5')`."
    },
    {
        "input": "How can I use `else` with an `if` statement?",
        "output": "You can use `else` to execute a block of code if the condition in the `if` is not met. Example: `if x > 5: print('Greater than 5'); else: print('Less than or equal to 5')`."
    },
    {
        "input": "How to use `elif` in an `if` structure?",
        "output": "The `elif` allows you to check multiple conditions. Example: `if x > 5: print('Greater than 5'); elif x == 5: print('Equal to 5'); else: print('Less than 5')`."
    },
    {
        "input": "How to use an `if` statement to compare two numbers?",
        "output": "You can compare two numbers with operators like `>`, `<`, `==`, `!=`. Example: `if a > b: print('a is greater than b')`."
    },
    {
        "input": "What happens if the condition in an `if` is false?",
        "output": "If the condition is false, the code block inside the `if` is not executed and the program continues with the next code."
    },
    {
        "input": "How to make an `if` with more than one condition?",
        "output": "You can combine conditions with logical operators like `and`, `or`. Example: `if x > 5 and x < 10: print('Between 5 and 10')`."
    },
    {
        "input": "How to create a ternary operator in Python?",
        "output": "A ternary operator is a compact way of doing an `if`-`else`. The syntax is: `value_if_true if condition else value_if_false`. Example: `result = 'Greater than' if x > 5 else 'Less than or equal to'`."
    },
    {
        "input": "How to use a ternary operator to assign a value?",
        "output": "You can use a ternary operator to assign a value depending on a condition. Example: `message = 'Positive' if number > 0 else 'Negative'`."
    },
    {
        "input": "Is it possible to nest an `if` inside another one in Python?",
        "output": "Yes, you can nest `if` inside another one. Example: `if x > 5: if x < 10: print('Between 5 and 10')`."
    },
    {
        "input": "How to use `and` in an `if` condition?",
        "output": "You can use `and` to check that both conditions are true. Example: `if x > 5 and y < 10: print('x > 5 and y < 10')`."
    },
    {
        "input": "What is a ternary operator and when should you use it?",
        "output": "A ternary operator is a compact form of an `if`-`else` statement. It is useful for simple assignments. Example: `x = 10 if a > 5 else 5`."
    },
    {
        "input": "Can I use ternary operators on multiple lines?",
        "output": "Yes, you can use ternary operators on multiple lines if needed, although they are typically used on a single line. Example: `result = 'Positive' if x > 0 else 'Negative' if x < 0 else 'Zero'`."
    },
    {
        "input": "How to use an `if` to check if a number is even?",
        "output": "You can use the `%` operator to check if a number is divisible by 2. Example: `if x % 2 == 0: print('Even')`."
    },
    {
        "input": "How to use `if` and `elif` to check multiple conditions?",
        "output": "You can use `if` for the first condition and `elif` for subsequent conditions. Example: `if x > 10: print('Greater than 10'); elif x == 10: print('Equal to 10')`."
    },
    {
        "input": "How to use a ternary operator with nested `if`?",
        "output": "You can nest ternary operators within one another. Example: `result = 'Greater than' if x > 5 else 'Less than' if x < 5 else 'Equal to 5'`."
    },
    {
        "input": "Can a ternary operator be used to check for equality?",
        "output": "Yes, you can use a ternary operator to check if two values ​​are equal. Example: `result = 'Equal' if a == b else 'Different'`."
    },
    {
        "input": "How to check if a variable is empty using `if`?",
        "output": "You can check if a variable is empty using `if not variable`. Example: `if not list: print('Empty list')`."
    },
    {
        "input": "How to use an `if` to check if a number is negative?",
        "output": "You can check if a number is negative with the condition `x < 0`. Example: `if x < 0: print('Negative')`."
    },
    {
        "input": "How to use `else` to handle condition when the `if` is false?",
        "output": "The `else` block is executed when the condition in `if` is false. Example: `if x > 0: print('Positive'); else: print('Not positive')`."
    },
    {
        "input": "How to make an `if` with multiple conditions and `or`?",
        "output": "You can use `or` to have the block execute if at least one of the conditions is true. Example: `if x == 0 or y == 0: print('At least one is zero')`."
    },
    {
        "input": "How to do an `if` with a boolean value?",
        "output": "You can use a boolean value directly in an `if`. Example: `if is_true: print('Is true')`."
    },
    {
        "input": "How to use a ternary operator to assign a value based on a comparison?",
        "output": "A ternary operator can be used to assign values ​​based on a comparison. Example: `result = 'Adult' if age >= 18 else 'Minor'`."
    },
    {
        "input": "How to make an `if` with more than two conditions?",
        "output": "You can combine multiple conditions using `elif`. Example: `if x > 10: print('Greater than 10'); elif x == 10: print('Equal to 10'); else: print('Less than 10')`."
    },
    {
        "input": "How to make an `if` with complex conditions?",
        "output": "You can use logical operators to make conditions more complex. Example: `if (x > 5 and x < 10) or (y == 2): print('Condition met')`."
    },
    {
        "input": "How can I nest a ternary operator in an `if`?",
        "output": "You can use a ternary operator inside another operator to get multiple options. Example: `result = 'Positive' if x > 0 else 'Negative' if x < 0 else 'Zero'`."
    },
    {
        "input": "How to make an `if` that executes something when a number is greater than or equal to 5?",
        "output": "Use the condition `if x >= 5:`. Example: `if x >= 5: print('Greater than or equal to 5')`."
    },
    {
        "input": "How to check if a number is within a range using `if`?",
        "output": "You can use the `and` operator to check if a number is within a range. Example: `if 5 <= x <= 10: print('Within range')`."
    },
    {
        "input": "What is the difference between `if` and `elif`?",
        "output": "`if` is used for the first condition, while `elif` is used for additional conditions. Example: `if x > 5: print('Greater than 5'); elif x == 5: print('Equal to 5')`."
    },
    {
        "input": "How to use an `if` to check if a number is divisible by 3?",
        "output": "You can use the `%` operator to check for divisibility. Example: `if x % 3 == 0: print('Divisible by 3')`."
    },
    {
        "input": "How to use a ternary operator to check if a number is positive or negative?",
        "output": "You can use a ternary operator to check the sign of a number. Example: `result = 'Positive' if x > 0 else 'Negative'`."
    },
    {
        "input": "How to check if a string is empty using `if`?",
        "output": "You can check if a string is empty with `if not string:`. Example: `if not name: print('Empty string')`."
    },
    {
        "input": "How to do an `if` with a list?",
        "output": "You can check if a list is empty with `if not list:`. Example: `if not list: print('Empty list')`."
    },
    {
        "input": "How to make an `if` that prints a message if a number is odd?",
        "output": "You can use the `%` operator to check if the number is odd. Example: `if x % 2 != 0: print('Odd')`."
    },
    {
        "input": "How to combine multiple conditions into a single `if`?",
        "output": "You can use `and`, `or`, or `not` to combine conditions. Example: `if x > 0 and y > 0: print('Both are positive')`."
    },
    {
        "input": "What is a ternary operator in Python?",
        "output": "A ternary operator is a compact way to perform an `if-else` condition on a single line. Example: `x = 10 if a > 5 else 5`."
    },
    {
        "input": "How to use `elif` to handle more than two conditions?",
        "output": "`elif` is used to handle additional conditions after the first `if`. Example: `if x > 10: print('Greater than 10'); elif x == 10: print('Equal to 10')`."
    },
    {
        "input": "How to make an `if` to check if a variable is `None`?",
        "output": "You can use `if variable is None:` to check if a variable is `None`. Example: `if value is None: print('Is None')`."
    },
    {
        "input": "How to perform a ternary operator with more than two options?",
        "output": "You can use a nested ternary operator for multiple options. Example: `result = 'Positive' if x > 0 else 'Negative' if x < 0 else 'Zero'`."
    },
    {
        "input": "Can I use ternary operators inside a loop?",
        "output": "Yes, you can use ternary operators inside loops for fast assignments. Example: `for i in range(5): result = 'Even' if i % 2 == 0 else 'Odd'; print(result)`."
    },
    {
        "input": "How to check if a list contains a value using `if`?",
        "output": "You can use `if value in list:`. Example: `if 3 in list: print('3 is in the list')`."
    },
    {
        "input": "How to use `if` to check if one string is greater than another?",
        "output": "You can compare strings alphabetically using the comparison operators. Example: `if string1 > string2: print('string1 is greater than')`."
    },
    {
        "input": "How to use `else` to execute a block of code if a number is less than 5?",
        "output": "You can use `else` to handle the case where the condition is not met. Example: `if x >= 5: print('Greater than or equal to 5'); else: print('Less than 5')`."
    },
    {
        "input": "What is a library in Python?",
        "output": "A library in Python is a set of predefined modules that make it easier to perform common tasks, such as file manipulation, math, and more."
    },
    {
        "input": "How to install a library in Python?",
        "output": "You can install a library in Python using the `pip` package manager. Example: `pip install library_name`."
    },
    {
        "input": "What is `pip`?",
        "output": "`pip` is the official Python package manager, used to install and manage Python libraries or packages."
    },
    {
        "input": "What is the `math` library in Python?",
        "output": "The `math` library provides mathematical functions, such as `sqrt()`, `sin()`, `cos()`, and others, to perform mathematical operations."
    },
    {
        "input": "How to import a library in Python?",
        "output": "You can import a library in Python using the `import` keyword. Example: `import math`."
    },
    {
        "input": "What is the `os` library in Python?",
        "output": "The `os` library provides functions for interacting with the operating system, such as manipulating files and directories."
    },
    {
        "input": "What is the `datetime` library used for?",
        "output": "The `datetime` library is used to work with dates and times. It allows you to create, manipulate, and format date and time objects."
    },
    {
        "input": "How can I read a file with the `os` library?",
        "output": "With the `os` library you can use functions like `os.open()` or `os.read()` to work with files at the operating system level."
    },
    {
        "input": "What is the `requests` library in Python?",
        "output": "The `requests` library makes it easy to make HTTP requests in Python, allowing you to interact with APIs and websites."
    },
    {
        "input": "How to install `requests` in Python?",
        "output": "To install the `requests` library, use the `pip install requests` command in the terminal."
    },
    {
        "input": "What does the `numpy` library do?",
        "output": "The `numpy` library provides support for working with multidimensional arrays, as well as tools for performing mathematical and scientific calculations."
    },
    {
        "input": "What is `pandas` in Python?",
        "output": "`pandas` is a library for data analysis and manipulation. It offers data structures such as `DataFrame` for working with tables and series."
    },
    {
        "input": "How can I read a CSV file with `pandas`?",
        "output": "You can read a CSV file with `pandas` using the `pd.read_csv('file.csv')` method."
    },
    {
        "input": "What does the `matplotlib` library do?",
        "output": "The `matplotlib` library is used to create static, animated and interactive plots in Python."
    },
    {
        "input": "How to create a graph with `matplotlib`?",
        "output": "To create a graph with `matplotlib`, use the following basic code: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()`."
    },
    {
        "input": "What is `seaborn`?",
        "output": "`seaborn` is a library based on `matplotlib` that makes it easy to create complex statistical plots with a simpler syntax."
    },
    {
        "input": "What is the `json` library used for?",
        "output": "The `json` library is used to work with data in JSON format, allowing conversion between JSON strings and Python objects."
    },
    {
        "input": "How to read a JSON file in Python?",
        "output": "You can read a JSON file with `json.load()`. Example: `import json; with open('file.json', 'r') as f: data = json.load(f)`."
    },
    {
        "input": "What is `tkinter`?",
        "output": "`tkinter` is a Python standard library that provides tools for creating simple graphical user interfaces (GUIs)."
    },
    {
        "input": "How to create a window with `tkinter`?",
        "output": "You can create a window with `tkinter` using the following code: `import tkinter as tk; root = tk.Tk(); root.mainloop()`."
    },
    {
        "input": "How do I install `matplotlib`?",
        "output": "You can install `matplotlib` using `pip install matplotlib`."
    },
    {
        "input": "What does the `scikit-learn` library do?",
        "output": "`scikit-learn` is a Python library for machine learning. It provides tools for classification, regression, clustering, and more."
    },
    {
        "input": "How to import `scikit-learn`?",
        "output": "You can import `scikit-learn` with `import sklearn` or by importing specific modules, such as `from sklearn.model_selection import train_test_split`."
    },
    {
        "input": "What is `flask`?",
        "output": "`flask` ​​is a micro-framework for building web applications in Python, providing tools for managing routes, forms, and databases."
    },
    {
        "input": "How to install `flask`?",
        "output": "You can install `flask` ​​using the `pip install flask` ​​command."
    },
    {
        "input": "What does the `sqlalchemy` library do?",
        "output": "`sqlalchemy` is a library for working with databases in Python. It provides an abstraction layer for SQL and ORM (Object Relational Mapper)."
    },
    {
        "input": "How to connect to a database with `sqlalchemy`?",
        "output": "You can connect to a database with `sqlalchemy` using: `from sqlalchemy import create_engine; engine = create_engine('sqlite:///my_database.db')`."
    },
    {
        "input": "What is `beautifulsoup4`?",
        "output": "`beautifulsoup4` is a library for parsing and extracting information from web pages in HTML and XML format."
    },
    {
        "input": "How to extract data from a web page with `beautifulsoup4`?",
        "output": "You can extract data using `beautifulsoup4` like this: `from bs4 import BeautifulSoup; soup = BeautifulSoup(html, 'html.parser'); title = soup.title.text`."
    },
    {
        "input": "How to install `beautifulsoup4`?",
        "output": "You can install `beautifulsoup4` using the command `pip install beautifulsoup4`."
    },
    {
        "input": "What is `pytest`?",
        "output": "`pytest` is a Python library for unit testing, making it easy to write and run unit testing code."
    },
    {
        "input": "How to write a test with `pytest`?",
        "output": "You can write a test with `pytest` by creating a function that starts with `test_`. Example: `def test_sum(): assert sum(2, 3) == 5`."
    },
    {
        "input": "How to install `pytest`?",
        "output": "You can install `pytest` using the `pip install pytest` command."
    },
    {
        "input": "What does the `nltk` library do?",
        "output": "`nltk` (Natural Language Toolkit) is a library for working with natural language processing (NLP), including text analysis, tokenization, and more."
    },
    {
        "input": "How to install `nltk`?",
        "output": "You can install `nltk` using `pip install nltk`."
    },
    {
        "input": "What is `openpyxl`?",
        "output": "`openpyxl` is a library for reading, writing and manipulating Excel (XLSX) files in Python."
    },
    {
        "input": "How to read an Excel file with `openpyxl`?",
        "output": "You can read an Excel file with `openpyxl` like this: `from openpyxl import load_workbook; wb = load_workbook('file.xlsx'); sheet = wb.active`."
    },
    {
        "input": "What is `pyqt`?",
        "output": "`pyqt` is a set of libraries that allow you to create graphical user interfaces (GUI) using the Qt framework with Python."
    },
    {
        "input": "How to install `pyqt`?",
        "output": "You can install `pyqt` using the command `pip install pyqt5`."
    },
    {
        "input": "What is `requests`?",
        "output": "`requests` is a library that allows making HTTP requests simply and efficiently in Python."
    },
    {
        "input": "How to make a GET request with `requests`?",
        "output": "You can make a GET request with `requests` using: `import requests; response = requests.get('http://example.com')`."
    },
    {
        "input": "What is `pytest`?",
        "output": "`pytest` is a software testing tool in Python. It allows you to easily write tests and perform automated checks."
    },
    {
        "input": "How to use `numpy` to create an array?",
        "output": "You can create an array with `numpy` using `numpy.array()`. Example: `import numpy as np; array = np.array([[1, 2], [3, 4]])`."
    },
    {
        "input": "What is `pillow`?",
        "output": "`pillow` is a Python image processing library that allows you to open, edit and save images."
    },
    {
        "input": "How to open an image with `pillow`?",
        "output": "You can open an image with `pillow` using: `from PIL import Image; img = Image.open('image.jpg')`."
    },
    {
        "input": "What is `scipy`?",
        "output": "`scipy` is a Python library that provides advanced algorithms and functions for scientific and technical computations, such as optimization and linear algebra."
    },
    {
        "input": "How to install `scipy`?",
        "output": "You can install `scipy` using the `pip install scipy` command."
    },
    {
        "input": "What is `statsmodels`?",
        "output": "`statsmodels` is a Python library for statistical model estimation, testing, and data exploration."
    },
    {
        "input": "How to perform linear regression with `statsmodels`?",
        "output": "You can perform linear regression with `statsmodels` using: `import statsmodels.api as sm; X = sm.add_constant(X); model = sm.OLS(y, X).fit()`."
    },
    {
        "input": "What is `pyinstaller`?",
        "output": "`pyinstaller` is a tool for converting Python programs into standalone executables."
    },
    {
        "input": "How to install `pyinstaller`?",
        "output": "You can install `pyinstaller` using the `pip install pyinstaller` command."
    },
    {
        "input": "How to create an executable with `pyinstaller`?",
        "output": "You can create an executable with `pyinstaller` using: `pyinstaller my_program.py`."
    },
    {
        "input": "In what areas can you help me?",
        "output": "I can help you with Python, programming, systems, artificial intelligence, technology, video games, computers, adapters, and topics related to Guatemala and Xela."
    },
    {
        "input": "What skills do you have?",
        "output": "I have skills in explaining concepts, solving technical problems, teaching Python programming, and providing information about systems and technology."
    },
    {
        "input": "What topics can you cover?",
        "output": "I can discuss topics related to Python, programming, systems, artificial intelligence, computers, adapters, technology, video games, Guatemala and Xela."
    },
    {
        "input": "What knowledge do you have?",
        "output": "I have knowledge in Python, systems development, programming, artificial intelligence, video game design, computers and adapters."
    },
    {
        "input": "What kind of support can you offer?",
        "output": "I can offer technical support in programming, answer theoretical questions about artificial intelligence and systems, and guide you in practical projects."
    },
    {
        "input": "What can you do if I want to learn something new?",
        "output": "I can teach you from the basics to advanced topics in programming, technology, systems, and more, adapting to your needs."
    },
    {
        "input": "How can you help me with my questions?",
        "output": "I can answer your questions about Python, systems, technology, artificial intelligence and related topics in a clear and practical way."
    },
    {
        "input": "How can you help me?",
        "output": "I can be useful for learning, solving technical problems, understanding theoretical concepts, and exploring areas such as programming and technology."
    },
    {
        "input": "What can you do in the field of programming?",
        "output": "I can help you understand fundamentals, troubleshoot code issues, implement features, and guide you through Python project development."
    },
    {
        "input": "What can you do if I want to learn about systems?",
        "output": "I can explain system architecture, networking concepts, databases, and how they interact with programming and hardware."
    },
    {
        "input": "What can you do about video games and technology?",
        "output": "I can teach you how to program video games, explain engines like Unity or Pygame, and how they apply technological concepts in development."
    },
    {
        "input": "How can you help me with my projects?",
        "output": "I can guide you in planning, problem solving and developing projects related to programming, systems and video games."
    },
    {
        "input": "What could you teach me if I want to learn something new?",
        "output": "I can teach you Python programming, artificial intelligence concepts, video game design, or fundamentals of systems and technology."
    },
    {
        "input": "What can you do if I want to solve a problem?",
        "output": "I can analyze the problem, offer you clear solutions and explain how to implement them, especially in Python, systems or technology."
    },
    {
        "input": "What can you do if I want to better understand a concept?",
        "output": "I can explain the concept in detail, provide practical examples, and answer your questions to ensure you fully understand it."
    },
    {
        "input": "How can you support me in learning?",
        "output": "I can teach you step by step, adapt to your level of knowledge and provide you with clear examples and practical exercises."
    },
    {
        "input": "In what ways can you be helpful?",
        "output": "I can answer questions, explain topics, help with projects and teach you about Python, systems, technology and video games."
    },
    {
        "input": "What kind of tasks can you perform?",
        "output": "I can perform tasks related to solving code problems, explaining technical concepts, and guiding you in learning and projects."
    },
    {
        "input": "What do you know how to do specifically?",
        "output": "I can explain Python concepts, teach programming, solve technical problems, and offer information about systems, technology, and video games."
    },
    {
        "input": "How could you help me if I am learning?",
        "output": "I can provide you with clear explanations, practical examples, and help you solve problems while you learn."
    },
    {
        "input": "How can you help me with complicated concepts?",
        "output": "I can break down complicated concepts into simple steps, give you clear examples, and guide you until you fully understand them."
    },
    {
        "input": "What kind of questions can you answer?",
        "output": "I can answer questions about Python, programming, systems, technology, video games, artificial intelligence, computers and adapters."
    },
    {
        "input": "What can you do related to computers and adapters?",
        "output": "I can explain to you how adapters work, how they interact with computers, and what they are used for in different systems."
    },
    {
        "input": "What can you do about applied artificial intelligence?",
        "output": "I can explain how to implement basic algorithms, what practical applications it has, and how it integrates with real systems."
    },
    {
        "input": "What can you do about practical projects?",
        "output": "I can help you plan, develop and solve problems in practical projects related to programming, systems and technology."
    },
    {
        "input": "What kind of projects can you help me with?",
        "output": "I can help you with programming projects, systems, video games, development of artificial intelligence algorithms, and technology management."
    },
    {
        "input": "How can you support me on a topic I don't understand?",
        "output": "I can explain the topic to you step by step, give you clear examples and help you understand it through practical exercises."
    },
    {
        "input": "What can you do if I want to know more about technology?",
        "output": "I can provide you with information on technology trends, practical applications, and how they relate to systems and programming."
    },
    {
        "input": "What is an array in Python?",
        "output": "In Python, an array commonly refers to a list, which is an ordered, mutable collection of elements."
    },
    {
        "input": "How to create an array in Python?",
        "output": "You can create an array (list) in Python using square brackets. Example: `my_list = [1, 2, 3, 4]`."
    },
    {
        "input": "Can I have different types of data in an array?",
        "output": "Yes, in Python arrays (lists) can contain elements of different data types, such as integers, strings, and more."
    },
    {
        "input": "How to access an element of an array in Python?",
        "output": "You can access an element of an array using its index. Example: `my_list[0]` accesses the first element."
    },
    {
        "input": "How to change a value in an array?",
        "output": "You can change the value of an array by assigning a new value to the specific index. Example: `my_list[0] = 10`."
    },
    {
        "input": "How to add an element to an array?",
        "output": "You can add an element to an array using the `append()` method. Example: `my_list.append(5)`."
    },
    {
        "input": "How to insert an element at a specific position?",
        "output": "You can insert an element at a specific position using the `insert()` method. Example: `my_list.insert(2, 10)`."
    },
    {
        "input": "How to remove an element from an array?",
        "output": "You can remove an element from an array using the `remove()` method. Example: `my_list.remove(10)`."
    },
    {
        "input": "How to remove an element by index?",
        "output": "You can remove an element by index using the `pop()` method. Example: `my_list.pop(1)` removes the second element."
    },
    {
        "input": "How to get the length of an array?",
        "output": "You can get the length of an array using the `len()` function. Example: `len(my_list)`."
    },
    {
        "input": "How to order an arrangement?",
        "output": "You can sort an array using the `sort()` method. Example: `my_list.sort()` will sort the elements in ascending order."
    },
    {
        "input": "How to sort an array in descending order?",
        "output": "You can sort an array in descending order using `sort(reverse=True)`. Example: `my_list.sort(reverse=True)`."
    },
    {
        "input": "How to reverse the order of an array?",
        "output": "You can reverse the order of an array using the `reverse()` method. Example: `my_list.reverse()`."
    },
    {
        "input": "How to check if an element is in an array?",
        "output": "You can check if an element is in an array using the `in` operator. Example: `10 in my_list`."
    },
    {
        "input": "How to concatenate two arrays?",
        "output": "You can concatenate two arrays using the `+` operator. Example: `my_list + another_array`."
    },
    {
        "input": "How to repeat an arrangement several times?",
        "output": "You can repeat an array using the `*` operator. Example: `my_list * 3` will repeat the elements three times."
    },
    {
        "input": "How to cut an arrangement?",
        "output": "You can slice an array using the slice operator `[:]`. Example: `my_list[1:4]` gets a sublist of the elements from index 1 to 3."
    },
    {
        "input": "What happens if I access an index outside the range of the array?",
        "output": "If you access an index outside the range, you will get an `IndexError` error."
    },
    {
        "input": "How to check if an array is empty?",
        "output": "You can check if an array is empty using the `len()` function. Example: `len(my_list) == 0`."
    },
    {
        "input": "How to copy an arrangement?",
        "output": "You can copy an array using the `copy()` method or the `[:]` slice operator. Example: `my_list_copy = my_list.copy()`."
    },
    {
        "input": "How to add multiple elements to an array?",
        "output": "You can add multiple elements to an array using the `extend()` method. Example: `my_list.extend([5, 6, 7])`."
    },
    {
        "input": "How to find the index of an element?",
        "output": "You can find the index of an item using the `index()` method. Example: `my_list.index(10)`."
    },
    {
        "input": "How to count how many times an element appears in an array?",
        "output": "You can count the occurrences of an item using the `count()` method. Example: `my_list.count(10)`."
    },
    {
        "input": "How to remove all elements from an array?",
        "output": "You can remove all elements from an array using the `clear()` method. Example: `my_list.clear()`."
    },
    {
        "input": "How to create a list of numbers from 0 to 9?",
        "output": "You can create a list of numbers from 0 to 9 using the `range()` function. Example: `list(range(10))`."
    },
    {
        "input": "How to multiply each element of an array by 2?",
        "output": "You can multiply each element of an array using a list comprehension. Example: `[x * 2 for x in my_list]`."
    },
    {
        "input": "How to convert a string array to an integer array?",
        "output": "You can convert an array of strings to integers using a list comprehension. Example: `[int(x) for x in my_list]`."
    },
    {
        "input": "What is a list comprehension?",
        "output": "A list comprehension is a concise way of creating lists from other lists or iterables. Example: `[x for x in range(5)]` creates a list from 0 to 4."
    },
    {
        "input": "How do I add the elements of an array?",
        "output": "You can sum the elements of an array using the `sum()` function. Example: `sum(my_list)`."
    },
    {
        "input": "How to check the type of an array?",
        "output": "You can check the type of an array using the `type()` function. Example: `type(my_list)`."
    },
    {
        "input": "How to make an array immutable?",
        "output": "To make an array immutable, you can use a tuple instead of a list. Example: `my_tuple = (1, 2, 3)`."
    },
    {
        "input": "How can I split an array into equal parts?",
        "output": "You can split an array into equal parts using a list comprehension and the slice operator. Example: `my_list[i:i+size]`."
    },
    {
        "input": "How to find the maximum value of an array?",
        "output": "You can find the maximum value of an array using the `max()` function. Example: `max(my_list)`."
    },
    {
        "input": "How to find the minimum value of an array?",
        "output": "You can find the minimum value of an array using the `min()` function. Example: `min(my_list)`."
    },
    {
        "input": "What is a two-dimensional array?",
        "output": "A two-dimensional array is a list of lists, i.e. a table or matrix. Example: `my_array = [[1, 2], [3, 4]]`."
    },
    {
        "input": "How to access an element of a two-dimensional array?",
        "output": "You can access an element of a two-dimensional array using two indices. Example: `my_array[0][1]` accesses the second element of the first row."
    },
    {
        "input": "How to loop through all the elements of an array?",
        "output": "You can iterate through all the elements of an array using a `for` loop. Example: `for x in my_list: print(x)`."
    },
    {
        "input": "How to check if an array contains another array?",
        "output": "You can check if an array contains another array using the `in` operator. Example: `[1, 2] in my_list`."
    },
    {
        "input": "How to convert an array to a string?",
        "output": "You can convert an array to a string using the `join()` method. Example: `','.join([str(x) for x in my_list])`."
    },
    {
        "input": "How to add an array inside another?",
        "output": "You can add an array inside another array using the `append()` or `extend()` method. Example: `my_list.append([5, 6])`."
    },
    {
        "input": "How to remove an array from a list of lists?",
        "output": "You can remove an array from a list of lists using `remove()`. Example: `my_list.remove([5, 6])`."
    },
    {
        "input": "How to check if an array is sorted?",
        "output": "You can check if an array is sorted by comparing it to its sorted version. Example: `my_list == sorted(my_list)`."
    },
    {
        "input": "How to remove duplicates from an array?",
        "output": "You can remove duplicates from an array by converting it to a set. Example: `list(set(my_list))`."
    },
    {
        "input": "How to make an array have only unique elements?",
        "output": "You can make an array have only unique elements by converting it to a set and then back to a list. Example: `my_list = list(set(my_list))`."
    },
    {
        "input": "How to group array elements by type?",
        "output": "You can group array elements by type using a dictionary and a loop. Example: `{type(x): [x for x in my_list if type(x) == type]}`."
    },
    {
        "input": "How to check if two arrays are equal?",
        "output": "You can check if two arrays are equal by using the `==` operator. Example: `my_list == another_array`."
    },
    {
        "input": "How to convert an array to a tuple?",
        "output": "You can convert an array to a tuple using the `tuple()` function. Example: `tuple(my_list)`."
    },
    {
        "input": "How to convert a tuple to an array?",
        "output": "You can convert a tuple to an array using the `list()` function. Example: `list(my_tuple)`."
    },
    {
        "input": "How does the for loop work in Python?",
        "output": "The `for` loop in Python is used to iterate over sequences such as lists, tuples, strings, or ranges. Example: `for i in range(5): print(i)` will print numbers from 0 to 4."
    },
    {
        "input": "What is a for loop?",
        "output": "A `for` loop is a structure that allows you to iterate through the elements of a sequence one by one."
    },
    {
        "input": "How do you use the for loop with lists?",
        "output": "You can iterate over the elements of a list using `for`. Example: `my_list = [1, 2, 3]; for element in my_list: print(element)`."
    },
    {
        "input": "How to make a for loop that iterates through a range of numbers?",
        "output": "Use the `range()` function. Example: `for i in range(1, 6): print(i)` will print the numbers 1 through 5."
    },
    {
        "input": "How to break a for loop before it ends?",
        "output": "Use the `break` statement. Example: `for i in range(10): if i == 5: break`."
    },
    {
        "input": "How can I use the for loop with strings?",
        "output": "You can iterate over each character in a string. Example: `for letter in 'Python': print(letter)` will print each letter in the word 'Python'."
    },
    {
        "input": "What does the for-else loop do?",
        "output": "The `else` clause of a `for` loop is executed if the loop terminates normally, without using `break`. Example: `for i in range(5): if i == 3: break else: print('Terminated without interruption')`."
    },
    {
        "input": "How to iterate with indexes in a for loop?",
        "output": "Use `enumerate()` to get both the indices and the values. Example: `for index, value in enumerate(['a', 'b', 'c']): print(index, value)`."
    },
    {
        "input": "How to make a for loop that iterates through a tuple?",
        "output": "Iterates over elements directly. Example: `my_tuple = (1, 2, 3); for element in my_tuple: print(element)`."
    },
    {
        "input": "How to use the for loop with a dictionary?",
        "output": "You can iterate over keys, values, or both. Example: `my_dec = {'a': 1, 'b': 2}; for key, value in my_dec.items(): print(key, value)`."
    },
    {
        "input": "How can I make a for loop skip an iteration?",
        "output": "Use the `continue` statement. Example: `for i in range(5): if i == 3: continue; print(i)`."
    },
    {
        "input": "How to make a for loop that counts backwards?",
        "output": "Use `range()` with decreasing values. Example: `for i in range(5, 0, -1): print(i)` will print from 5 to 1."
    },
    {
        "input": "Can I use multiple variables in a for loop?",
        "output": "Yes, you can use unpacking. Example: `pairs = [(1, 2), (3, 4)]; for x, y in pairs: print(x, y)`."
    },
    {
        "input": "What happens if the for loop has no elements to iterate through?",
        "output": "The loop will not execute. Example: `for i in []: print(i)` will not print anything."
    },
    {
        "input": "How to print only even numbers using a for loop?",
        "output": "Use a condition inside the loop. Example: `for i in range(10): if i % 2 == 0: print(i)`."
    },
    {
        "input": "How can I nest for loops?",
        "output": "Places a `for` loop inside another `for` loop. Example: `for i in range(2): for j in range(3): print(i, j)`."
    },
    {
        "input": "How do I use a for loop to calculate the sum of numbers in a list?",
        "output": "Use an accumulator. Example: `my_list = [1, 2, 3]; sum = 0; for num in my_list: sum += num; print(sum)`."
    },
    {
        "input": "What is an iterator and how does it relate to the for loop?",
        "output": "An iterator is an object that returns its elements one by one. The `for` loop uses iterators internally to traverse sequences."
    },
    {
        "input": "How can I use a for loop to create a new list?",
        "output": "Uses a list comprehension. Example: `[x**2 for x in range(5)]` creates a list with the squares from 0 to 4."
    },
    {
        "input": "How to iterate through two lists at the same time with a for loop?",
        "output": "Use the `zip()` function. Example: `for x, y in zip([1, 2], ['a', 'b']): print(x, y)`."
    },
    {
        "input": "What does the range() function do in a for loop?",
        "output": "`range()` generates a sequence of numbers to iterate over. Example: `for i in range(5): print(i)` prints 0 through 4."
    },
    {
        "input": "Can I use a for loop without a body?",
        "output": "Yes, but you need `pass` for it to be syntactically valid. Example: `for i in range(5): pass`."
    },
    {
        "input": "How to handle large amounts of data in a for loop?",
        "output": "Use generators to handle large data without loading everything into memory. Example: `for x in (i for i in range(10**6) if i % 2 == 0): print(x)`."
    },
    {
        "input": "Can I modify a list while looping through it with a for loop?",
        "output": "It is best not to do this directly. Instead, use a copy of the list or an explicit index."
    },
    {
        "input": "How do I make a for loop in Python?",
        "output": "Use the `for` keyword followed by a variable and an iterable. Example: `for i in range(5): print(i)`."
    },
    {
        "input": "What is a for loop and what is it used for?",
        "output": "A `for` loop is used to repeat an action by iterating over a sequence such as lists, strings, or ranges."
    },
    {
        "input": "How can I iterate through a list with a for loop?",
        "output": "Use `for` to iterate over the list. Example: `my_list = [1, 2, 3]; for element in my_list: print(element)`."
    },
    {
        "input": "What should I put inside a for loop?",
        "output": "Inside a `for` loop you can put any code that you want to run repeatedly, such as printing or performing calculations."
    },
    {
        "input": "How do I repeat something 10 times with a for loop?",
        "output": "Use `range()`. Example: `for i in range(10): print('This is repeated 10 times')`."
    },
    {
        "input": "What does `in` mean in a for loop?",
        "output": "`in` is used to iterate through elements of a sequence, such as lists or strings, in a `for` loop."
    },
    {
        "input": "Can I use a for loop to count numbers?",
        "output": "Yes, use `range()`. Example: `for i in range(1, 6): print(i)` will print the numbers 1 through 5."
    },
    {
        "input": "How do you use the for loop with strings?",
        "output": "You can iterate over each character in a string. Example: `for letter in 'hello': print(letter)`."
    },
    {
        "input": "What if my for loop has no elements to iterate through?",
        "output": "If there are no elements in the sequence, the loop will not execute. Example: `for i in []: print(i)` will not print anything."
    },
    {
        "input": "How do I make a for loop that goes through a list of words?",
        "output": "Use `for` with the list. Example: `words = ['hello', 'world']; for word in words: print(word)`."
    },
    {
        "input": "How to use a for loop to add numbers in a list?",
        "output": "Use an accumulator variable. Example: `sum = 0; for num in [1, 2, 3]: sum += num; print(sum)`."
    },
    {
        "input": "How to know how many times a for loop is executed?",
        "output": "The loop will run once for each element in the sequence you are traversing."
    },
    {
        "input": "How to make a for loop that starts at 5 and ends at 10?",
        "output": "Use `range()`. Example: `for i in range(5, 11): print(i)`."
    },
    {
        "input": "Which variable should I use in a for loop?",
        "output": "You can use any variable name. Example: `for number in range(3): print(number)`."
    },
    {
        "input": "How does `range()` work in a for loop?",
        "output": "`range()` generates numbers to iterate over. Example: `range(3)` generates the numbers 0, 1, and 2."
    },
    {
        "input": "Can I use negative numbers in a for loop?",
        "output": "Yes, use `range()` with negative values. Example: `for i in range(-5, 0): print(i)`."
    },
    {
        "input": "How to print numbers 1 to 10 with a for loop?",
        "output": "Use `range(1, 11)`. Example: `for i in range(1, 11): print(i)`."
    },
    {
        "input": "What is an iterable in a for loop?",
        "output": "An iterable is an object such as a list, string, or range that can be traversed by a `for` loop."
    },
    {
        "input": "What does the for loop do when it encounters `break`?",
        "output": "`break` stops the loop immediately, no matter how many iterations remain."
    },
    {
        "input": "How to make a for loop skip a number?",
        "output": "Use `continue` to move to the next iteration. Example: `for i in range(5): if i == 2: continue; print(i)`."
    },
    {
        "input": "How can I print a list in a for loop?",
        "output": "Iterate over the list and use `print()`. Example: `my_list = [1, 2, 3]; for element in my_list: print(element)`."
    },
    {
        "input": "Is it necessary to use a range in a for loop?",
        "output": "No, you can also iterate over lists, strings, or other iterable objects directly."
    },
    {
        "input": "What happens if I don't put anything inside a for loop?",
        "output": "You need to use `pass` to avoid a syntax error. Example: `for i in range(5): pass`."
    },
    {
        "input": "How do I use a for loop with even numbers?",
        "output": "Use `range()` with a step of 2. Example: `for i in range(0, 11, 2): print(i)`."
    },
    {
        "input": "How do I make a while loop in Python?",
        "output": "Use the `while` keyword followed by a condition. Example: `x = 0; while x < 5: print(x); x += 1`."
    },
    {
        "input": "What is a while loop and what is it used for?",
        "output": "A `while` loop repeats a block of code as long as a condition is true."
    },
    {
        "input": "How does the while loop work?",
        "output": "The `while` loop executes the associated block of code until the condition becomes false."
    },
    {
        "input": "What if the condition in the while is always true?",
        "output": "The loop will run indefinitely, creating an infinite loop. You must ensure that the condition eventually becomes false."
    },
    {
        "input": "How can I stop a while loop manually?",
        "output": "Use the `break` statement. Example: `while True: if x > 10: break`."
    },
    {
        "input": "How to make a while loop that counts from 1 to 10?",
        "output": "Defines a counter. Example: `x = 1; while x <= 10: print(x); x += 1`."
    },
    {
        "input": "How do you use `continue` in a while loop?",
        "output": "`continue` skips the rest of the current block and goes to the next iteration. Example: `x = 0; while x < 5: x += 1; if x == 3: continue; print(x)`."
    },
    {
        "input": "How do I avoid an infinite loop in a while loop?",
        "output": "Ensure that the `while` condition eventually becomes false by modifying the variables involved."
    },
    {
        "input": "Can I use a compound condition in a while loop?",
        "output": "Yes, it uses logical operators like `and` or `or`. Example: `x = 0; while x < 5 and x != 3: print(x); x += 1`."
    },
    {
        "input": "What is the difference between a for loop and a while loop?",
        "output": "A `for` is used to iterate over known sequences, while a `while` is used when you don't know how many iterations will be needed, but you have a condition."
    },
    {
        "input": "How do I use a while loop to add numbers?",
        "output": "Use an accumulator. Example: `x = 1; sum = 0; while x <= 5: sum += x; x += 1; print(sum)`."
    },
    {
        "input": "What happens if I put `True` as a condition in a while?",
        "output": "The loop will be infinite unless you stop it manually with `break`."
    },
    {
        "input": "How to make a while loop that stops when a condition is met?",
        "output": "Use a `break` inside the loop. Example: `x = 0; while True: if x == 5: break; x += 1; print(x)`."
    },
    {
        "input": "What is a condition in a while loop?",
        "output": "It is a logical expression that is evaluated before each iteration to determine whether the loop should continue."
    },
    {
        "input": "Can I use the while loop with a list?",
        "output": "Yes, you can loop through a list checking its elements. Example: `my_list = [1, 2, 3]; while my_list: print(my_list.pop())`."
    },
    {
        "input": "How to use a while loop to print even numbers?",
        "output": "Use a counter and a condition. Example: `x = 0; while x <= 10: print(x); x += 2`."
    },
    {
        "input": "How to use a while loop with a decrementing counter?",
        "output": "Subtracts the counter at each iteration. Example: `x = 10; while x > 0: print(x); x -= 1`."
    },
    {
        "input": "What happens if I forget to increment a variable inside a while?",
        "output": "If the variable is part of the condition, the loop could become infinite."
    },
    {
        "input": "Can I use `else` in a while loop?",
        "output": "Yes, the `else` clause is executed if the loop terminates normally, without using `break`. Example: `x = 0; while x < 5: x += 1; else: print('Terminated')`."
    },
    {
        "input": "How do I use a while loop to prompt the user for input until it is valid?",
        "output": "Use a loop with a condition. Example: `while True: input = input('Enter something: '); if input == 'ok': break`."
    },
    {
        "input": "How to make an infinite loop with while?",
        "output": "Use `while True:`. Example: `while True: print('Infinite loop')`."
    },
    {
        "input": "What should I do if my while loop runs infinitely by mistake?",
        "output": "Make sure to check the condition and that the variables change within the loop to avoid infinite loop."
    },
    {
        "input": "How to print numbers from 1 to 100 with a while loop?",
        "output": "Use a counter. Example: `x = 1; while x <= 100: print(x); x += 1`."
    },
    {
        "input": "What does the `pass` keyword mean in a while loop?",
        "output": "`pass` is used as a placeholder that does nothing. Example: `while True: pass`."
    },
    {
        "input": "What does the for loop do?",
        "output": "The `for` loop iterates over the elements of a sequence, such as lists, strings, or ranges, and executes a block of code for each element."
    },
    {
        "input": "What does the while loop do?",
        "output": "The `while` loop executes a block of code while a specified condition is true."
    },
    {
        "input": "What does the print function do?",
        "output": "The `print()` function displays information to the console or standard output."
    },
    {
        "input": "What does the break keyword do?",
        "output": "`break` immediately stops the execution of a loop, either `for` or `while`."
    },
    {
        "input": "What does the continue keyword do?",
        "output": "`continue` skips the rest of the code in the current iteration and moves on to the next iteration of the loop."
    },
    {
        "input": "What does the range function do?",
        "output": "`range()` generates a sequence of numbers, useful for iterating with a `for` loop."
    },
    {
        "input": "What does the input function do?",
        "output": "`input()` allows the user to enter data from the keyboard and returns the input as a string."
    },
    {
        "input": "What does the pass statement do?",
        "output": "`pass` does not perform any action; it is used as a placeholder where syntactically valid code is required."
    },
    {
        "input": "What does the len function do?",
        "output": "`len()` returns the length of an object, such as a list, string, or tuple."
    },
    {
        "input": "What does the str function do?",
        "output": "`str()` converts a value to a text string."
    },
    {
        "input": "What does the int function do?",
        "output": "`int()` converts a value to an integer, if possible."
    },
    {
        "input": "What does the float function do?",
        "output": "`float()` converts a value to a decimal (float) number."
    },
    {
        "input": "What does the in operator do?",
        "output": "The `in` operator checks whether an element is present in a sequence, such as a list, string, or tuple."
    },
    {
        "input": "What does the not operator do?",
        "output": "The `not` operator inverts the value of a boolean expression, converting `True` to `False` and vice versa."
    },
    {
        "input": "What does the type function do?",
        "output": "`type()` returns the type of an object. Example: `type(5)` returns `<class 'int'>`."
    },
    {
        "input": "What does the enumerate function do?",
        "output": "`enumerate()` returns an object containing index-value pairs when iterating over a sequence."
    },
    {
        "input": "What does an infinite loop do?",
        "output": "An infinite loop repeats its block of code without stopping because the condition never becomes false."
    },
    {
        "input": "What does an iterable do?",
        "output": "An iterable is an object that can be traversed element by element in a loop, such as lists, strings, or dictionaries."
    },
    {
        "input": "What does an index do in Python?",
        "output": "An index specifies the position of an element in a sequence, such as in a list or string."
    },
    {
        "input": "What does the zip function do?",
        "output": "`zip()` combines two or more iterables, returning an iterator of pairs of elements."
    },
    {
        "input": "What does the % operator do?",
        "output": "The `%` operator calculates the remainder of the division between two numbers."
    },
    {
        "input": "What does the //? operator do?",
        "output": "The `//` operator performs integer division, returning only the integer portion of the result."
    },
    {
        "input": "What does the map function do?",
        "output": "`map()` applies a function to each element of an iterable and returns a map object."
    },
    {
        "input": "What does the filter function do?",
        "output": "`filter()` returns an iterable containing the elements that match a specified condition."
    },
    {
        "input": "What does the ** operator do?",
        "output": "The `**` operator raises one number to the power of another."
    },
    {
        "input": "What does the return keyword do?",
        "output": "`return` terminates the execution of a function and returns an optional value."
    },
    {
        "input": "What does the def keyword do?",
        "output": "`def` is used to define a new function in Python."
    },
    {
        "input": "What does the append method do?",
        "output": "`append()` adds an element to the end of a list."
    },
    {
        "input": "What does the pop method do?",
        "output": "`pop()` removes and returns the last element from a list or one at a specified index."
    },
    {
        "input": "What does the split method do?",
        "output": "`split()` splits a string into a list of substrings, using a specified delimiter."
    },
    {
        "input": "What does the join method do?",
        "output": "`join()` joins the elements of a list or iterable into a string, separated by a delimiter."
    },
    {
        "input": "What does the upper method do?",
        "output": "`upper()` converts all characters in a string to uppercase."
    },
    {
        "input": "What does the lower method do?",
        "output": "`lower()` converts all characters in a string to lowercase."
    },
    {
        "input": "How do I start programming in Python?",
        "output": "You can start by installing Python from its official site, opening a text editor or IDE like VS Code, and writing your first script. Example: `print('Hello, world!')`."
    },
    {
        "input": "What is a variable in Python?",
        "output": "It is a container for storing data. It is created by assigning a value to a name. Example: `x = 5`."
    },
    {
        "input": "How to use for loop in Python?",
        "output": "The `for` loop iterates through elements of a sequence. Example: `for i in range(3): print(i)`."
    },
    {
        "input": "What is the difference between for and while?",
        "output": "The `for` loop is used to iterate over a known sequence, while `while` loops as long as a condition is true."
    },
    {
        "input": "What is a string in Python?",
        "output": "It is a string of characters, like text. It is defined between single or double quotes. Example: `'Hello'` or `\"Hello\"`."
    },
    {
        "input": "How do I convert a string to a number?",
        "output": "Use `int()` for integers or `float()` for decimals. Example: `number = int('5')`."
    },
    {
        "input": "What is a list in Python?",
        "output": "A list is an ordered, mutable collection of elements. Example: `my_list = [1, 2, 3]`."
    },
    {
        "input": "How do I remove an item from a list?",
        "output": "Use `remove()` to remove by value or `pop()` to remove by index. Example: `my_list.remove(2)`."
    },
    {
        "input": "How do I add numbers in a list?",
        "output": "Use the `sum()` function. Example: `my_list = [1, 2, 3]; total = sum(my_list)`."
    },
    {
        "input": "What is a dictionary in Python?",
        "output": "It is a collection of key-value pairs. Example: `my_dictionary = {'key': 'value'}`."
    },
    {
        "input": "How do I access a value in a dictionary?",
        "output": "Use the key in brackets. Example: `value = my_dictionary['key']`."
    },
    {
        "input": "What does the input function do?",
        "output": "Allows you to receive data from the user. Example: `name = input('What is your name? ')`."
    },
    {
        "input": "How do I make my program wait a few seconds?",
        "output": "Use `time.sleep()`. Example: `import time; time.sleep(2)` waits 2 seconds."
    },
    {
        "input": "How do I divide a number in Python?",
        "output": "Use `/` for normal division or `//` for integer division. Example: `result = 10 / 3`."
    },
    {
        "input": "What is an infinite loop?",
        "output": "It is a loop that never stops because the condition is always true. Example: `while True: print('Infinite')`."
    },
    {
        "input": "How do I terminate a program in Python?",
        "output": "Use `exit()` or `sys.exit()`. Example: `import sys; sys.exit()`."
    },
    {
        "input": "What is the difference between lists and tuples?",
        "output": "Lists are mutable, while tuples are immutable. Example: `my_list = [1, 2]`, `my_tuple = (1, 2)`."
    },
    {
        "input": "What does the len function do?",
        "output": "Returns the length of an object, such as a list or string. Example: `len('hello')` returns `4`."
    },
    {
        "input": "How do I make a function in Python?",
        "output": "Use the `def` keyword. Example: `def greet(): print('Hello')`."
    },
    {
        "input": "How do I find the largest value in a list?",
        "output": "Use the `max()` function. Example: `max([1, 2, 3])` returns `3`."
    },
    {
        "input": "How do I know what type of data a variable is?",
        "output": "Use the `type()` function. Example: `type(5)` returns `<class 'int'>`."
    },
    {
        "input": "How do I use the print function with multiple lines?",
        "output": "Use a multiline string or multiple calls to `print`. Example: `print('First line\\nSecond line')`."
    },
    {
        "input": "What is a logical operator in Python?",
        "output": "A logical operator, such as `and`, `or`, or `not`, evaluates boolean expressions."
    },
    {
        "input": "How do I make a program repeat an action multiple times?",
        "output": "Use loops like `for` or `while`. Example: `for i in range(5): print('Hello')`."
    },
    {
        "input": "How do I use Python to perform calculations?",
        "output": "Use mathematical operators such as `+`, `-`, `*`, `/` to add, subtract, multiply or divide."
    },
    {
        "input": "What is a .py file?",
        "output": "It is a file that contains Python code and is executed with the Python interpreter."
    },
    {
        "input": "How do I write to a file with Python?",
        "output": "Use the `open()` function with write mode. Example: `with open('file.txt', 'w') as f: f.write('Hello')`."
    },
    {
        "input": "What is an exception in Python?",
        "output": "An exception is an error during program execution that can be handled with `try-except`."
    },
    {
        "input": "How do I handle errors in Python?",
        "output": "Use a `try-except` block. Example: `try: x = 1 / 0 except ZeroDivisionError: print('Error')`."
    },
    {
        "input": "What is a module in Python?",
        "output": "A module is a file containing reusable Python code. You can import it with `import module_name`."
    },
    {
        "input": "What does the dir function do?",
        "output": "Displays a list of an object's attributes and methods. Example: `dir([])` displays the methods in a list."
    },
    {
        "input": "How do I install a library in Python?",
        "output": "Use the `pip install` command. Example: `pip install requests`."
    },
    {
        "input": "What is a decorator in Python?",
        "output": "A decorator is a function that modifies the behavior of another function. Example: `@decorator`."
    },
    {
        "input": "How can I automate a task in Python?",
        "output": "You can use libraries like `os`, `shutil` or `subprocess` to automate tasks, depending on what you need to do."
    },
    {
        "input": "What tourist places do you recommend visiting in Xela?",
        "output": "In Xela you can visit the Central Park, the Georgian Fountains, the Santa Maria Volcano and the Cathedral of the Holy Spirit."
    },
    {
        "input": "What algorithms are common in artificial intelligence?",
        "output": "Algorithms such as decision trees, neural networks, logistic regression, and SVM are common in artificial intelligence."
    },
    {
        "input": "What subjects can I expect in a Systems Engineering degree?",
        "output": "In the Systems Engineering degree you will study programming, databases, networks, artificial intelligence, operating systems and software development."
    },
    {
        "input": "How can I learn to program video games?",
        "output": "You can start with engines like Unity or Pygame, learn programming logic and practice with small projects."
    },
    {
        "input": "How does a computer power adapter work?",
        "output": "A power adapter converts electrical power from the wall outlet to a voltage suitable for your laptop."
    },
    {
        "input": "What technology is common in modern video game systems?",
        "output": "Technologies such as advanced graphics engines (Unreal Engine, Unity), ray tracing, and support for virtual reality are common in modern video games."
    },
    {
        "input": "What is the difference between hardware and software in computers?",
        "output": "Hardware refers to the physical components, such as the processor and memory, while software is the programs and operating systems that execute tasks."
    },
    {
        "input": "How do I develop a basic system in Python?",
        "output": "You can use frameworks like Flask or Django to develop basic web systems or write scripts that handle specific data and processes."
    },
    {
        "input": "What impact does technology have in Guatemala?",
        "output": "Technology is transforming sectors such as education, commerce and communication in Guatemala, helping to close the digital divide."
    },
    {
        "input": "Which language is better for artificial intelligence, Python or another?",
        "output": "Python is widely preferred for AI due to its ecosystem of libraries like TensorFlow, PyTorch, and scikit-learn."
    },
    {
        "input": "What components do I need to build a computer?",
        "output": "You need a processor, motherboard, RAM, storage (HDD or SSD), graphics card (if necessary), power supply, and a case."
    },
    {
        "input": "What applications do systems have in daily life?",
        "output": "Systems are present in banking, transportation, communication, healthcare and any area that depends on technology."
    },
    {
        "input": "How do I optimize a video game for better performance?",
        "output": "You can optimize by reducing texture resolution, using less complex 3D models, and adjusting lighting and physics settings."
    },
    {
        "input": "What do you need to know to design a database?",
        "output": "You should understand normalization, table relationships, data types, and how to optimize queries for performance."
    },
    {
        "input": "What adapters are essential for modern computers?",
        "output": "Network adapters (Wi-Fi or Ethernet), USB-C to HDMI, and power adapters are common in modern computers."
    },
    {
        "input": "How to start an artificial intelligence project in Python?",
        "output": "Start by installing libraries like NumPy, pandas, and scikit-learn. Define your problem, collect data, and train a model on that data."
    },
    {
        "input": "What is the difference between an operating system and a program?",
        "output": "An operating system manages the computer's hardware and software resources, while a program performs specific tasks for the user."
    },
    {
        "input": "How do I learn about cybersecurity in systems?",
        "output": "You can start with basic concepts like cryptography, networking, and vulnerability scanning, using tools like Wireshark and Metasploit."
    },
    {
        "input": "What frameworks are useful for rapid development in Python?",
        "output": "Frameworks like Flask, Django, and FastAPI are useful for developing web applications quickly."
    },
    {
        "input": "What characteristics make Xela a good place to study technology?",
        "output": "Xela has renowned universities, a peaceful atmosphere and a growing community interested in technology and programming."
    },
    {
        "input": "What devices use artificial intelligence?",
        "output": "Virtual assistants like Alexa or Siri, smart security cameras and self-driving cars are examples of devices that use AI."
    },
    {
        "input": "How do I prepare for a job in Systems Engineering?",
        "output": "Learn programming languages, strengthen your database, networking, and software development skills, and participate in hands-on projects."
    },
    {
        "input": "What languages ​​are common in video game development?",
        "output": "C++, C#, Python, and JavaScript are common in game development, depending on the engine used."
    },
    {
        "input": "What should I consider when purchasing a network adapter?",
        "output": "Make sure it is compatible with your device, supports the necessary speeds, and is suitable for the type of connection (Wi-Fi or Ethernet)."
    },
    {
        "input": "What impact do systems have on modern society?",
        "output": "Systems facilitate automation, improve communication and increase efficiency in almost every aspect of modern life."
    },
    {
        "input": "How is Python used in education in Guatemala?",
        "output": "Python is used in Guatemala to teach basic programming and application development in schools and universities due to its simplicity."
    },
    {
        "input": "What technology events take place in Xela?",
        "output": "Xela organizes hackathons, programming workshops and technology-related events, especially at local universities."
    },
    {
        "input": "How is artificial intelligence applied in video games?",
        "output": "Artificial intelligence is used in video games to create NPCs, adjust difficulty automatically, and improve the player experience."
    },
    {
        "input": "What kind of projects can I do in the Systems Engineering degree?",
        "output": "You can develop web applications, management systems, data analysis, mobile applications and artificial intelligence projects."
    },
    {
        "input": "What is the difference between a distributed system and a centralized one?",
        "output": "A distributed system divides tasks across multiple nodes, while a centralized system relies on a single main server."
    },
    {
        "input": "What languages ​​should I learn for modern systems?",
        "output": "Languages ​​like Python, Java, C++, and JavaScript are essential for modern systems because of their versatility and support across multiple platforms."
    },
    {
        "input": "How does technology influence Guatemala's economy?",
        "output": "Technology is driving sectors such as e-commerce, banking and startups, helping the country's economic growth."
    },
    {
        "input": "Which game engines are best for beginners?",
        "output": "Engines like Unity and Godot are ideal for beginners because of their documentation and ease of use."
    },
    {
        "input": "What adapters do I need to connect two monitors to a laptop?",
        "output": "You'll need HDMI, USB-C to HDMI, or DisplayPort adapters, depending on the outputs available on your laptop."
    },
    {
        "input": "How can I use Python to create a chatbot?",
        "output": "You can use libraries like `ChatterBot` or `NLTK` to process text and develop a basic chatbot."
    },
    {
        "input": "What tools are used in artificial intelligence to process images?",
        "output": "Tools like OpenCV, TensorFlow, and PyTorch are popular for image processing and analysis in AI."
    },
    {
        "input": "What technology is driving video game development?",
        "output": "Technologies such as ray tracing, virtual reality, artificial intelligence and advanced graphics engines are driving video game development."
    },
    {
        "input": "How to create a basic login system?",
        "output": "You can use Python with Flask or Django to create a basic system that validates users and passwords stored in a database."
    },
    {
        "input": "What technologies are revolutionizing healthcare systems?",
        "output": "Artificial intelligence, telemedicine and big data analytics are revolutionizing healthcare systems by improving diagnoses and treatments."
    },
    {
        "input": "What impact do video games have on education?",
        "output": "Video games can improve skills such as problem solving, teamwork, and interactive learning in educational settings."
    },
    {
        "input": "How to choose a good power adapter for a laptop?",
        "output": "Make sure it is compatible with your laptop's voltage and amperage, and that it is from a reputable manufacturer."
    },
    {
        "input": "What frameworks are useful for real-time systems?",
        "output": "Frameworks like Node.js, Flask, and FastAPI are useful for developing systems that require fast, real-time responses."
    },
    {
        "input": "How do I optimize a distributed system?",
        "output": "You can optimize a distributed system by load balancing, reducing network latency, and using efficient distributed storage."
    },
    {
        "input": "What supervised learning methods exist in artificial intelligence?",
        "output": "Methods such as linear regression, decision trees, SVM, and neural networks are common examples of supervised learning."
    },
    {
        "input": "What do you need to start programming video games?",
        "output": "You need to learn a programming language like Python or C#, choose a development engine like Unity, and practice with small projects."
    },
    {
        "input": "What practical applications does Python have in Guatemala?",
        "output": "In Guatemala, Python is used in data analysis projects, educational software development, and business process automation."
    },
    {
        "input": "What techniques are used to teach technology in Xela?",
        "output": "In Xela, workshops, online courses, and practical projects are used to teach technology at local universities and academies."
    },
    {
        "input": "How to integrate artificial intelligence into an existing system?",
        "output": "You can integrate AI using pre-trained APIs or by developing custom models with libraries like TensorFlow or PyTorch."
    },
    {
        "input": "What kind of practical projects can I do in Systems Engineering?",
        "output": "You can develop web applications, manage databases, create mobile applications or implement artificial intelligence models."
    },
    {
        "input": "How can I improve the energy efficiency of my computer?",
        "output": "Adjust power settings, reduce screen brightness, and close programs you are not using."
    },
    {
        "input": "Which languages ​​are best for building enterprise systems?",
        "output": "Java, Python, and C# are great for enterprise systems because of their stability, scalability, and enterprise support."
    },
    {
        "input": "How do video games contribute to social development?",
        "output": "Video games foster creativity, teamwork and problem-solving skills, and connect global communities."
    },
    {
        "input": "What adapters are ideal for connecting laptops to older projectors?",
        "output": "A VGA to HDMI or USB-C to VGA adapter would be ideal for connecting modern laptops to older projectors."
    },
    {
        "input": "What challenges does Guatemala face in technological development?",
        "output": "Challenges such as limited internet access, lack of infrastructure and educational inequality hinder technological development in Guatemala."
    },
    {
        "input": "What Python libraries are useful for analyzing data?",
        "output": "Libraries like pandas, NumPy, and Matplotlib are essential for data analysis and visualization in Python."
    },
    {
        "input": "What is pandas?",
        "output": "Pandas is a Python library for data manipulation and analysis. It allows you to work with data structures such as DataFrames efficiently."
    },
    {
        "input": "What is a VGA adapter?",
        "output": "VGA is a standard for connecting video devices such as monitors and projectors. A VGA adapter enables compatibility with devices that use this technology."
    },
    {
        "input": "What is Java?",
        "output": "Java is an object-oriented programming language, widely used in enterprise applications, mobile development, and distributed systems."
    },
    {
        "input": "What is a framework?",
        "output": "A framework is a predefined code structure that facilitates application development by providing common tools and functionality."
    },
    {
        "input": "What is TensorFlow?",
        "output": "TensorFlow is an open-source library for machine learning and neural networks, widely used in artificial intelligence projects."
    },
    {
        "input": "What is a DataFrame in pandas?",
        "output": "A DataFrame is a two-dimensional data structure in pandas, similar to a table, that allows you to organize data into rows and columns."
    },
    {
        "input": "What is an API?",
        "output": "An API (Application Programming Interface) is a set of rules that allow different applications to communicate with each other."
    },
    {
        "input": "What is Python Flask?",
        "output": "Flask is a Python microframework for developing web applications. It is lightweight and easy to use, making it ideal for small projects."
    },
    {
        "input": "What is a game engine?",
        "output": "A game engine is a software that provides tools for game development, such as graphics engines, physics, and animation systems."
    },
    {
        "input": "What is Unity?",
        "output": "Unity is a popular game engine for creating 2D and 3D games, used by developers of all skill levels."
    },
    {
        "input": "What is ray tracing?",
        "output": "Ray tracing is a rendering technique that simulates the realistic behavior of light to create highly detailed graphics in video games and simulations."
    },
    {
        "input": "What is artificial intelligence?",
        "output": "Artificial intelligence is a branch of computer science that seeks to create systems capable of performing tasks that require human intelligence, such as learning and decision-making."
    },
    {
        "input": "What is NumPy?",
        "output": "NumPy is a Python library used for numerical computations, especially with multidimensional arrays and matrices."
    },
    {
        "input": "What is supervised learning?",
        "output": "Supervised learning is a type of machine learning where a model is trained with labeled data to make predictions or classifications."
    },
    {
        "input": "What is a distributed system?",
        "output": "A distributed system is a set of independent computers that work together to solve problems as if they were a single system."
    },
    {
        "input": "What is a graphics engine?",
        "output": "A graphics engine is a software that allows rendering graphics in real time, commonly used in video games and simulations."
    },
    {
        "input": "What is a .py file?",
        "output": "A `.py` file is a file containing code written in Python. You can run it using a Python interpreter."
    },
    {
        "input": "What is Pygame?",
        "output": "Pygame is a Python library designed for 2D video game development, providing tools for graphics, sound, and user events."
    },
    {
        "input": "What is a neural network?",
        "output": "A neural network is a computational model inspired by the human brain, used in artificial intelligence for tasks such as pattern recognition."
    },
    {
        "input": "What is a Data Lake?",
        "output": "A Data Lake is a data repository where large volumes of information are stored in their original format, ready for future analysis."
    },
    {
        "input": "What is a USB-C adapter?",
        "output": "A USB-C adapter allows you to connect USB-C devices to other types of ports, such as HDMI, VGA, or USB-A."
    },
    {
        "input": "What is FastAPI?",
        "output": "FastAPI is a Python framework for building fast and efficient APIs, known for its performance and support for static typing."
    },
    {
        "input": "What is an IDE?",
        "output": "An IDE (Integrated Development Environment) is a tool that combines a code editor, debugger and other functionalities to facilitate programming."
    },
    {
        "input": "What is scikit-learn?",
        "output": "Scikit-learn is a Python library for machine learning, including tools for classification, regression, and clustering."
    },
    {
        "input": "What is an operating system?",
        "output": "An operating system is the software that manages a computer's hardware and software, allowing programs to run."
    },
    {
        "input": "What is a machine learning model?",
        "output": "It is an algorithm trained with data that can make predictions or classifications based on new information."
    },
    {
        "input": "What is an iterable object in Python?",
        "output": "An iterable object is any object that can be traversed using a loop, such as lists, tuples, or strings."
    },
    {
        "input": "What is OpenCV?",
        "output": "OpenCV is an open-source library for image processing and computer vision, used in artificial intelligence projects."
    },
    {
        "input": "What is a SQL query?",
        "output": "An SQL query is a statement that is executed in a database to retrieve, insert, update, or delete data."
    },
    {
        "input": "What is a pre-trained model in AI?",
        "output": "It is an artificial intelligence model that has already been trained with a large data set and can be reused or fine-tuned for specific tasks."
    },
    {
        "input": "What is Git?",
        "output": "Git is a version control system that allows developers to track changes to their code and collaborate with others on projects."
    },
    {
        "input": "What is a REST API?",
        "output": "A REST API is a type of interface that allows communication between systems using HTTP operations such as GET, POST, PUT, and DELETE."
    },
    {
        "input": "What is the difference between a list and a dictionary in Python?",
        "output": "A list is an ordered collection of elements accessible by indexes, while a dictionary stores key-value pairs and values ​​are accessed using keys."
    },
    {
        "input": "How do I use pandas to read a CSV file?",
        "output": "Use the `pd.read_csv('file.csv')` method to load a CSV file as a DataFrame in pandas."
    },
    {
        "input": "What does it mean for Python to be high-level?",
        "output": "It means that Python is designed to be easy to read and write, it abstracts away complex hardware details and focuses on the logic of the problem."
    },
    {
        "input": "What is an infinite loop and how can I avoid it?",
        "output": "An infinite loop occurs when the condition of a loop never becomes false. You can avoid this by making sure that the condition changes within the loop."
    },
    {
        "input": "How does a DataFrame work in pandas?",
        "output": "A DataFrame is like a two-dimensional table where you can manipulate data using rows and columns similar to Excel or SQL."
    },
    {
        "input": "What can I do with a dictionary in Python?",
        "output": "You can add, remove, and update key-value pairs, access values ​​using keys, and iterate through their elements with a `for` loop."
    },
    {
        "input": "What is the difference between artificial intelligence and machine learning?",
        "output": "Artificial intelligence is the general field that seeks to create intelligent systems, while machine learning is a subdiscipline that focuses on training models with data."
    },
    {
        "input": "What advantages does Unity have over other game engines?",
        "output": "Unity is easy to use, has a large community, supports multiple platforms, and offers built-in tools for 2D and 3D."
    },
    {
        "input": "What does it mean for a system to be distributed?",
        "output": "A distributed system divides tasks between multiple connected computers, allowing for greater scalability and availability."
    },
    {
        "input": "How do I know if an adapter is compatible with my laptop?",
        "output": "You must verify that the adapter has the connection type and specifications (voltage, amperage) compatible with your device."
    },
    {
        "input": "What supervised learning methods exist?",
        "output": "Common methods include linear regression, decision trees, neural networks, support vector machines (SVM), and random forests."
    },
    {
        "input": "What is a while loop and when should you use it?",
        "output": "A `while` loop executes a block of code as long as a condition is true. This is useful when you don't know how many iterations you need."
    },
    {
        "input": "How do I use Python to analyze data?",
        "output": "Use libraries like pandas for data manipulation, NumPy for numerical calculations, and Matplotlib for data visualization."
    },
    {
        "input": "What types of artificial intelligence exist?",
        "output": "There are three types: narrow AI (specialized in one task), general AI (capable of performing tasks like a human) and superintelligent AI (theoretical)."
    },
    {
        "input": "How do I start a project with Flask?",
        "output": "Install Flask with `pip install flask`, create a Python file with the basic structure of a server and run it with `flask run`."
    },
    {
        "input": "What is OpenCV and what is it used for?",
        "output": "OpenCV is a library for image processing and computer vision. It is used in face recognition, video analysis, and more."
    },
    {
        "input": "How can I optimize a program in Python?",
        "output": "Identify bottlenecks, use efficient data structures, avoid unnecessary loops, and take advantage of optimized libraries like NumPy."
    },
    {
        "input": "What is the difference between Python and Java for systems?",
        "output": "Python is easier to learn and quick to prototype, while Java is more suitable for large, enterprise systems due to its robustness."
    },
    {
        "input": "What does it mean for a video game to use ray tracing?",
        "output": "It means that the video game uses an advanced rendering technique to simulate light realistically, improving the graphics."
    },
    {
        "input": "What advantages does Python offer for artificial intelligence?",
        "output": "Python offers specialized libraries such as TensorFlow, PyTorch, and scikit-learn, along with simple syntax and an active community."
    },
    {
        "input": "How is artificial intelligence used in business systems?",
        "output": "It is used for data analysis, trend prediction, process automation, and customer service improvements."
    },
    {
        "input": "What steps should I follow to learn how to program video games?",
        "output": "Start by learning a language like Python or C#, choose a development engine like Unity, and practice with small projects."
    },
    {
        "input": "What is the difference between operating systems and applications?",
        "output": "An operating system manages the computer's hardware and software, while an application performs specific tasks for the user."
    },
    {
        "input": "What is an unsupervised learning model?",
        "output": "It is a model that finds patterns in unlabeled data, such as clustering or dimensionality reduction."
    },
    {
        "input": "How do I connect two monitors to my laptop?",
        "output": "Use available ports like HDMI or USB-C, and if necessary, adapters to connect both monitors."
    },
    {
        "input": "What is an AI-trained model?",
        "output": "It is an algorithm that has learned to perform a specific task using a set of data during the training process."
    },
    {
        "input": "How do I know if a system is distributed or centralized?",
        "output": "A distributed system has multiple nodes working together, while a centralized system relies on a single server or node."
    },
    {
        "input": "What can I do with a DataFrame in pandas?",
        "output": "You can filter, sort, add columns, perform calculations, and convert data to other formats, such as CSV or JSON."
    },
    {
        "input": "What is the difference between supervised and unsupervised learning?",
        "output": "Supervised learning uses labeled data to train a model, while unsupervised learning finds patterns in unlabeled data."
    },
    {
        "input": "What are the uses of computer vision?",
        "output": "It is used in facial recognition, quality control in factories, autonomous driving and medical image analysis."
    },
    {
        "input": "How to filter a DataFrame in pandas?",
        "output": "You can filter using conditions. Example: `df_filter = df[df['column'] > 10]` filters rows where the value of 'column' is greater than 10."
    },
    {
        "input": "What is a node in a distributed system?",
        "output": "A node is a computer or device in a distributed system that performs specific tasks such as processing or storage."
    },
    {
        "input": "What is a labeled dataset?",
        "output": "It is a dataset where each entry has an associated label that indicates the expected result, such as images with their category."
    },
    {
        "input": "What are the advantages of using unsupervised learning?",
        "output": "Unsupervised learning is useful for discovering hidden patterns or performing clustering on data that is not labeled."
    },
    {
        "input": "What is a graphics engine and how does it work?",
        "output": "A graphics engine is a software that renders graphics in real time. It works by transforming data into images visible on the screen."
    },
    {
        "input": "What is a convolutional neural network?",
        "output": "It is a type of neural network designed to process data with a grid structure, such as images. It is common in computer vision."
    },
    {
        "input": "How can I optimize a DataFrame in pandas?",
        "output": "Use more efficient data types like `category` for categorical columns, remove unnecessary columns, and filter out irrelevant rows."
    },
    {
        "input": "How are video games classified according to their technology?",
        "output": "They can be classified as 2D, 3D, virtual reality or ray tracing games, depending on the technologies used in their development."
    },
    {
        "input": "What is a trained model in machine learning?",
        "output": "It is a model that has learned patterns from training data to make predictions or classifications."
    },
    {
        "input": "What are the advantages of using Flask instead of Django?",
        "output": "Flask is lighter and more flexible, ideal for small projects. Django is more complete, suitable for large and complex projects."
    },
    {
        "input": "What types of adapters are there for video connections?",
        "output": "There are VGA, HDMI, DisplayPort, and USB-C adapters, which convert signals between different types of devices and standards."
    },
    {
        "input": "What applications do distributed systems have?",
        "output": "They are used in social networks, cloud storage, banking systems and streaming platforms to handle large volumes of data."
    },
    {
        "input": "What is a SQL query and how is it used?",
        "output": "A SQL query is a statement to interact with a database, such as selecting, inserting, or updating data. Example: `SELECT * FROM table`."
    },
    {
        "input": "How can I train a model in scikit-learn?",
        "output": "First define the model, then use `fit()` with the training data. Example: `model.fit(X_train, y_train)`."
    },
    {
        "input": "What is a classification model in machine learning?",
        "output": "It is a model that assigns labels to input data based on patterns learned during training."
    },
    {
        "input": "How can I check if my operating system is compatible with a program?",
        "output": "Check the program requirements, such as operating system version, RAM and disk space required."
    },
    {
        "input": "What is the difference between TensorFlow and PyTorch?",
        "output": "TensorFlow is more commonly used in production for its enterprise support, while PyTorch is preferred for research for its flexibility."
    },
    {
        "input": "What is a relational database?",
        "output": "It is a database that organizes information into related tables using primary and foreign keys."
    },
    {
        "input": "How do you create a basic server with Flask?",
        "output": "Define an application with `Flask(__name__)` and use routes to handle requests. Example: `@app.route('/')` defines a home page."
    },
    {
        "input": "What is a clustering algorithm?",
        "output": "It is an algorithm that organizes data into groups based on similarities. Example: k-means to group points in space."
    },
    {
        "input": "What is the difference between HDMI and DisplayPort?",
        "output": "HDMI is more common in TVs and projectors, while DisplayPort is used more in high-resolution, high-performance monitors."
    },
    {
        "input": "How can I integrate an AI model into a web application?",
        "output": "Use frameworks like Flask or Django to create an API that calls the model and returns predictions via HTTP requests."
    },
    {
        "input": "What does it mean for Python to be interpreted?",
        "output": "It means that the code is executed line by line without the need to compile it first, which makes debugging and development easier."
    },
    {
        "input": "What is a recurrent neural network?",
        "output": "It is a type of neural network designed to process sequential data, such as text or time series, remembering previous information."
    },
    {
        "input": "What are the advantages of game engines like Unity?",
        "output": "They offer integrated tools for graphics, physics, animation and cross-platform support, simplifying game development."
    },
    {
        "input": "How can I render 3D graphics in a video game?",
        "output": "It uses engines like Unity or Unreal Engine that provide tools for designing and rendering 3D graphics."
    },
    {
        "input": "What are the differences between supervised learning and reinforcement learning?",
        "output": "Supervised learning uses labeled data, while reinforcement learning trains an agent based on rewards and punishments."
    },
    {
        "input": "What is a primary key in a database?",
        "output": "It is a unique field in a table that uniquely identifies each record."
    },
    {
        "input": "What are libraries in Python?",
        "output": "They are collections of predefined modules that contain functions and classes to facilitate the development of specific applications."
    },
    {
        "input": "What is k-means and how does it work?",
        "output": "K-means is a clustering algorithm that divides data into k groups based on similarities. It works by assigning points to the nearest centroid and adjusting the centroids iteratively."
    },
    {
        "input": "What is the difference between relational and non-relational databases?",
        "output": "Relational databases organize data into tables with relationships between them, while non-relational databases (like MongoDB) store data in flexible formats like JSON."
    },
    {
        "input": "How do I implement a basic API with Flask?",
        "output": "Define routes using `@app.route()` and handle requests with functions. Example: `@app.route('/api', methods=['GET'])`."
    },
    {
        "input": "What advantages does DisplayPort have over HDMI?",
        "output": "DisplayPort offers higher bandwidth, support for multiple displays, and better quality at high resolutions."
    },
    {
        "input": "What does it mean for an algorithm to be supervised?",
        "output": "A supervised algorithm uses labeled data to learn patterns that allow it to make predictions or classifications."
    },
    {
        "input": "How does a server built with Flask work?",
        "output": "A Flask server handles HTTP requests and returns responses configured by the routes defined in the application."
    },
    {
        "input": "What is a centroid in the k-means algorithm?",
        "output": "A centroid is the point that represents the center of a cluster in the feature space of the k-means algorithm."
    },
    {
        "input": "What is a feedforward neural network?",
        "output": "It is a type of neural network where information flows in one direction, from inputs to outputs, without cycles."
    },
    {
        "input": "How do I use a DataFrame for grouping?",
        "output": "Use the `groupby()` method. Example: `df.groupby('column')['other_column'].sum()` groups by 'column' and sums values ​​from 'other_column'."
    },
    {
        "input": "What is a non-relational database?",
        "output": "It is a database that stores data in flexible formats, such as documents, key-value, or graphs, and does not require strict schemas."
    },
    {
        "input": "How do I train a classification model with scikit-learn?",
        "output": "Define the model, split it into training and test sets, and train it using `fit()`. Example: `model.fit(X_train, y_train)`."
    },
    {
        "input": "What does it mean for a SQL query to be optimized?",
        "output": "It means that the query is designed to run efficiently, using indexes and limiting unnecessary operations."
    },
    {
        "input": "What is a foreign key in databases?",
        "output": "It is a field in a table that references the primary key of another table to establish a relationship between them."
    },
    {
        "input": "How do I fine-tune learning in an AI model?",
        "output": "You can tune the learning by changing parameters such as the learning rate, the number of epochs, or the batch size."
    },
    {
        "input": "What is a convolutional neural network and what is it used for?",
        "output": "It is a neural network specialized in image processing, used for tasks such as facial recognition and object classification."
    },
    {
        "input": "What is the difference between Flask and FastAPI?",
        "output": "FastAPI is faster and offers support for validation and typing, while Flask is lighter and more flexible for small projects."
    },
    {
        "input": "How do I convert a DataFrame to a CSV file?",
        "output": "Use the `to_csv()` method. Example: `df.to_csv('file.csv', index=False)` saves the DataFrame as a CSV file without indexes."
    },
    {
        "input": "What steps should be followed to optimize a SQL query?",
        "output": "Be sure to use indexes, avoid unnecessary selects with `SELECT *`, and reduce the number of joins and subqueries where possible."
    },
    {
        "input": "How can I implement unsupervised learning with scikit-learn?",
        "output": "Use algorithms like `KMeans` for clustering. Example: `kmeans = KMeans(n_clusters=3); kmeans.fit(data)`."
    },
    {
        "input": "What is a recurrent neural network and what is it used for?",
        "output": "It is a type of neural network that processes sequential data and maintains memory of previous inputs, used in text translation and time series."
    },
    {
        "input": "What are the differences between HDMI and VGA?",
        "output": "HDMI transmits digital video and audio, while VGA only transmits analog video and is less efficient for high resolutions."
    },
    {
        "input": "How do I validate data in a Flask API?",
        "output": "Use libraries like `marshmallow` or manually validate data within functions that handle routes."
    },
    {
        "input": "What is a client-server architecture?",
        "output": "It is a model where a client requests services or data from a server, which provides them as requested."
    },
    {
        "input": "What is a pre-trained model in deep learning?",
        "output": "It is a model that has already been trained on a large dataset and can be fine-tuned for specific tasks through fine-tuning."
    },
    {
        "input": "How can I visualize data in pandas?",
        "output": "Use libraries like Matplotlib or Seaborn. Example: `df['column'].plot(kind='bar')` generates a bar chart."
    },
    {
        "input": "What is regularization in machine learning?",
        "output": "It is a technique that adds a penalty term to the loss function to avoid overfitting and improve the generalization of the model."
    },
    {
        "input": "What is a regression model?",
        "output": "It is a machine learning model that predicts continuous values ​​based on relationships between independent and dependent variables."
    },
    {
        "input": "How can I join multiple tables in SQL?",
        "output": "Use commands like `JOIN`. Example: `SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id`."
    },
    {
        "input": "What is the difference between overfitting and underfitting?",
        "output": "Overfitting occurs when a model fits too tightly to the training data, while underfitting does not sufficiently capture patterns in the data."
    },
    {
        "input": "How can I test an API built with Flask?",
        "output": "Use tools like Postman, Curl, or Python testing libraries like `requests` to send requests to the API."
    },
    {
        "input": "How do I choose between Flask and Django for my project?",
        "output": "Choose Flask for small, flexible projects, and Django for larger, more structured projects that require a lot of built-in functionality."
    },
    {
        "input": "What is fine-tuning in deep learning?",
        "output": "Fine-tuning adjusts a pre-trained model to perform a specific task, using a smaller, more specific data set."
    },
    {
        "input": "How does a `JOIN` work in SQL?",
        "output": "`JOIN` combines rows from two or more tables based on a common condition, such as primary and foreign keys."
    },
    {
        "input": "What types of regularization exist in machine learning?",
        "output": "There are regularizations like L1 (Lasso), L2 (Ridge), and Elastic Net, which add different penalties to the loss function."
    },
    {
        "input": "What is Matplotlib and how to use it?",
        "output": "Matplotlib is a Python library for creating graphs. Example: `import matplotlib.pyplot as plt; plt.plot([1, 2, 3])`."
    },
    {
        "input": "What is a bar chart and when is it used?",
        "output": "A bar chart represents categorical data with rectangular bars. It is used to compare different categories or groups."
    },
    {
        "input": "What is overfitting and how do I avoid it?",
        "output": "Overfitting occurs when a model fits too tightly to the training data. It can be avoided with regularization, cross-validation, or more data."
    },
    {
        "input": "How do I make a chart in Seaborn?",
        "output": "Use functions like `sns.barplot()` for bar graphs or `sns.lineplot()` for line graphs. Example: `sns.barplot(x='col1', y='col2', data=df)`."
    },
    {
        "input": "What is a `LEFT JOIN` and how is it different from an `INNER JOIN`?",
        "output": "A `LEFT JOIN` includes all rows from the left table and any matching rows from the right table, while an `INNER JOIN` only includes rows with matches in both tables."
    },
    {
        "input": "What is a hyperparameter in machine learning?",
        "output": "It is a parameter that is set before training the model, such as the learning rate or the number of trees in a random forest."
    },
    {
        "input": "What is Seaborn and why use it?",
        "output": "Seaborn is a Python data visualization library that makes it easy to create attractive and easy-to-understand statistical graphs."
    },
    {
        "input": "How do I compare two machine learning models?",
        "output": "Use evaluation metrics such as accuracy, F1-score or AUC-ROC, and compare their results on a test set."
    },
    {
        "input": "How do I do cross validation in scikit-learn?",
        "output": "Use `cross_val_score()` to split the data into multiple subsets and evaluate the model on each. Example: `cross_val_score(model, X, y, cv=5)`."
    },
    {
        "input": "What is the difference between L1 and L2 in regularization?",
        "output": "L1 adds a penalty based on the absolute value of the coefficients, favoring sparsity. L2 penalizes the square of the coefficients, reducing large magnitudes."
    },
    {
        "input": "What is Elastic Net in Machine Learning?",
        "output": "Elastic Net combines L1 and L2 regularizations, balancing sparsity and large coefficient reduction."
    },
    {
        "input": "How do I make a scatter plot with Matplotlib?",
        "output": "Use `plt.scatter(x, y)` to create a scatter plot. Example: `plt.scatter([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "How do I train a linear regression model in scikit-learn?",
        "output": "Import `LinearRegression`, fit the model with `fit()` and make predictions with `predict()`. Example: `model = LinearRegression(); model.fit(X, y)`."
    },
    {
        "input": "What is AUC-ROC and how is it interpreted?",
        "output": "AUC-ROC measures a model's ability to differentiate between classes. A value close to 1 indicates good performance."
    },
    {
        "input": "What is an evaluation metric in machine learning?",
        "output": "It is a measure to evaluate the performance of a model, such as precision, recall, F1-score or mean square error."
    },
    {
        "input": "What is cross-validation and why is it used?",
        "output": "Cross-validation divides the data into subsets to train and validate the model in different combinations, reducing the risk of overfitting."
    },
    {
        "input": "How do I integrate Seaborn with pandas?",
        "output": "You can use a DataFrame directly as input in Seaborn charts. Example: `sns.barplot(x='col1', y='col2', data=df)`."
    },
    {
        "input": "What is logistic regression?",
        "output": "It is a machine learning model that predicts probabilities for binary or multinomial categorical variables."
    },
    {
        "input": "How do I optimize the performance of a classification model?",
        "output": "Tune hyperparameters, use regularization techniques, and apply cross-validation to improve model generalization."
    },
    {
        "input": "What is the difference between precision and recall?",
        "output": "Precision measures the proportion of correct positive predictions, while recall measures the proportion of true positives detected."
    },
    {
        "input": "How can I interpret a heat graph in Seaborn?",
        "output": "A heat chart displays tabular data with colors representing values. It is useful for identifying patterns and relationships between variables."
    },
    {
        "input": "What is a box and whisker plot?",
        "output": "A graph that shows the distribution of data, highlighting quartiles and outliers. It is used for exploratory analysis."
    },
    {
        "input": "What steps should I follow to create a classification model?",
        "output": "Collect data, preprocess it, split the data into training and testing, fit a model, evaluate it, and tune hyperparameters if necessary."
    },
    {
        "input": "What does sparsity mean in machine learning?",
        "output": "Sparsity refers to matrices or models with many zero values, which can improve computational efficiency."
    },
    {
        "input": "How do I create a line graph with Matplotlib?",
        "output": "Use `plt.plot(x, y)` to create a line graph. Example: `plt.plot([1, 2, 3], [4, 5, 6])`."
    },
    {
        "input": "What is a confusion matrix and how is it used?",
        "output": "It is a table that shows the performance of a classification model by comparing predictions with actual values ​​across all classes."
    },
    {
        "input": "How do I tune hyperparameters in scikit-learn?",
        "output": "Use `GridSearchCV` or `RandomizedSearchCV` to search for the best hyperparameters based on validation metrics."
    },
    {
        "input": "How do I interpret a confusion matrix?",
        "output": "In a confusion matrix, diagonal values ​​indicate correct predictions, while off-diagonal values ​​are classification errors."
    },
    {
        "input": "What is the difference between GridSearchCV and RandomizedSearchCV?",
        "output": "GridSearchCV tests all hyperparameter combinations, while RandomizedSearchCV selects a random subset for faster searching."
    },
    {
        "input": "What is a heat chart and how do I create one with Seaborn?",
        "output": "A heat chart represents tabular data with colors. In Seaborn, use `sns.heatmap(data)` to create one."
    },
    {
        "input": "How do I identify outliers in a box and whisker plot?",
        "output": "Values ​​outside the ends of the whisker (horizontal lines) are considered outliers in a box-and-whisker plot."
    },
    {
        "input": "What steps should I take to avoid overfitting a model?",
        "output": "Use regularization, increase the dataset, apply cross-validation, and reduce model complexity."
    },
    {
        "input": "What metrics can I use to evaluate a regression model?",
        "output": "You can use mean square error (MSE), mean absolute error (MAE), and coefficient of determination (R²)."
    },
    {
        "input": "How can I improve my model's recall?",
        "output": "Adjust the classification threshold, collect more positive data, or modify the model to prioritize false negatives."
    },
    {
        "input": "What is a scatter chart and what is it used for?",
        "output": "A scatter plot shows the relationship between two continuous variables, useful for identifying patterns and correlations."
    },
    {
        "input": "What are the advantages of using L1 regularization over L2?",
        "output": "L1 encourages sparsity by removing irrelevant features by assigning exact coefficients of 0, which improves the interpretability of the model."
    },
    {
        "input": "How do I interpret a line graph?",
        "output": "A line graph shows how one variable changes relative to another. It is useful for observing trends in sequential data."
    },
    {
        "input": "What is a quartile in a box and whisker plot?",
        "output": "A quartile divides a data set into four equal parts. Box-and-whisker plots show the first, second, and third quartiles."
    },
    {
        "input": "How do I compare precision and recall to evaluate a model?",
        "output": "Precision is useful when false positives are critical, while recall is more important when false negatives are costly."
    },
    {
        "input": "What is a mean square error (MSE) and how is it calculated?",
        "output": "MSE measures the mean square of the differences between predicted and actual values. It is calculated as `mean((y_pred - y_true)^2)`."
    },
    {
        "input": "What is the difference between linear and logistic regression?",
        "output": "Linear regression predicts continuous values, while logistic regression predicts probabilities of discrete categories."
    },
    {
        "input": "What is the coefficient of determination R²?",
        "output": "R² measures how well a model explains the variability in the data. A value close to 1 indicates a good fit."
    },
    {
        "input": "What are false positives and false negatives?",
        "output": "False positives occur when a model incorrectly predicts a positive, and false negatives occur when it fails to detect a true positive."
    },
    {
        "input": "How do I adjust the classification threshold in a model?",
        "output": "You can adjust the threshold by changing the default value for deciding between classes, for example using `model.decision_function()` or `model.predict_proba()`."
    },
    {
        "input": "What does sparsity mean in a regularized model?",
        "output": "It means that many coefficients of the model are zero, which reduces complexity and improves interpretability."
    },
    {
        "input": "What is the difference between accuracy and F1-score?",
        "output": "Precision measures the proportion of correct predictions, while the F1-score balances precision and recall into a single value."
    },
    {
        "input": "How do I evaluate a model using a confusion matrix?",
        "output": "Calculates metrics such as precision, recall, and F1-score from the true positive, false positive, true negative, and false negative values."
    },
    {
        "input": "What is stratified cross-validation?",
        "output": "It is a type of cross-validation that maintains the proportion of classes in each fold, useful for imbalanced data sets."
    },
    {
        "input": "How can I interpret a heat graph?",
        "output": "Look at color intensities to identify patterns and relationships between variables in a data matrix."
    },
    {
        "input": "How do I optimize a linear regression model?",
        "output": "It uses regularization, removes irrelevant features, and tunes hyperparameters like learning rate in the optimizer."
    },
    {
        "input": "What is a Scatter Chart with Seaborn?",
        "output": "It is a graph that shows the relationship between two variables. Use `sns.scatterplot(x='var1', y='var2', data=df)` to create it."
    },
    {
        "input": "How do I determine feature importance in a model?",
        "output": "Examine the model coefficients (in linear regression) or use methods like `feature_importances_` in decision trees."
    },
    {
        "input": "What is an outlier and how do I identify one?",
        "output": "An outlier is an atypical value that deviates significantly from the rest of the data. You can use box-and-whisker plots to spot them."
    },
    {
        "input": "What is a residual plot?",
        "output": "It is a graph that shows the differences between predicted and actual values, useful for diagnosing problems in regression models."
    },
    {
        "input": "How can I calculate MAE in Python?",
        "output": "Use `mean_absolute_error` from scikit-learn. Example: `from sklearn.metrics import mean_absolute_error; mae = mean_absolute_error(y_true, y_pred)`."
    },
    {
        "input": "What is a pipeline in machine learning?",
        "output": "A pipeline organizes sequential steps such as preprocessing and training, ensuring that transformations are applied consistently."
    },
    {
        "input": "How do I make a stacked bar chart with Seaborn?",
        "output": "Use `sns.barplot()` and organize the data so that the categories are stacked on each bar. Use colors to differentiate them."
    },
    {
        "input": "What is a ROC curve?",
        "output": "It is a graph showing the relationship between the true positive and false positive rate at different classification thresholds."
    },
    {
        "input": "What are the main volcanoes in Guatemala?",
        "output": "Some of the main volcanoes in Guatemala are the Fuego Volcano, the Acatenango Volcano, the Pacaya Volcano and the Tajumulco Volcano."
    },
    {
        "input": "What traditions stand out in Xela?",
        "output": "In Xela, traditions such as the Independence Fair, the Day of the Dead with fiambre and visits to the General Cemetery stand out."
    },
    {
        "input": "What impact does technology have in Guatemala?",
        "output": "Technology is driving e-commerce, distance education and startup development in Guatemala."
    },
    {
        "input": "How can I learn to program video games?",
        "output": "You can start with languages ​​like Python or C#, using engines like Unity or Godot, and practicing with small projects."
    },
    {
        "input": "What is an operating system and what is it used for?",
        "output": "An operating system manages a computer's hardware and software, allowing interaction between the user and programs."
    },
    {
        "input": "What adapters do I need to connect my laptop to an older projector?",
        "output": "You will need adapters such as USB-C to VGA or HDMI to VGA, depending on the outputs available on your laptop."
    },
    {
        "input": "What tourist places can I visit in Xela?",
        "output": "You can visit the Georginas Fountains, El Baúl Hill, Central Park and the Cathedral of the Holy Spirit."
    },
    {
        "input": "How has the video game industry advanced in recent years?",
        "output": "The industry has evolved with technologies such as ray tracing, virtual reality, artificial intelligence and cloud-based gaming."
    },
    {
        "input": "What elements are essential in a computing system?",
        "output": "Essential elements include CPU, RAM, storage (HDD/SSD), motherboard, power supply, and input/output devices."
    },
    {
        "input": "What advantages does a USB-C adapter have over HDMI?",
        "output": "USB-C supports video, data, and charging in a single port, while HDMI only transmits audio and video."
    },
    {
        "input": "What programming languages ​​are popular for systems?",
        "output": "Python, Java, C++, and C# are popular for systems because of their versatility and broad support across different platforms."
    },
    {
        "input": "What technology do modern video games use for realistic graphics?",
        "output": "They use techniques such as ray tracing, advanced shading, and graphics engines such as Unreal Engine and Unity."
    },
    {
        "input": "What cultural traditions are unique to Guatemala?",
        "output": "Guatemala is known for traditions such as Easter carpets, fiambre for the Day of the Dead and the celebration of the Burning of the Devil."
    },
    {
        "input": "What types of adapters are available for modern laptops?",
        "output": "There are USB-C to HDMI, USB-C to VGA, USB-A to USB-C, and Ethernet to USB adapters, among others."
    },
    {
        "input": "What does it mean for a video game to be cross-platform?",
        "output": "It means that it is designed to run on different operating systems or consoles, such as PC, PlayStation, and Xbox."
    },
    {
        "input": "How can I optimize my computer's performance for gaming?",
        "output": "Update your drivers, adjust your game's graphics settings, and make sure you have enough RAM and disk space."
    },
    {
        "input": "How important is Xela in Guatemala's education?",
        "output": "Xela is an important educational center, with universities such as USAC and technical training centers that promote academic development in the region."
    },
    {
        "input": "What is a server in a computer system?",
        "output": "A server is a computer that provides services to other computers or devices, such as storage, data, or applications."
    },
    {
        "input": "What applications do distributed systems have?",
        "output": "They are used in social networks, banking systems, streaming platforms, and cloud services such as Google Drive or Dropbox."
    },
    {
        "input": "What is virtual reality in video games?",
        "output": "It is a technology that allows the player to immerse themselves in an interactive virtual environment using devices such as VR glasses and motion controllers."
    },
    {
        "input": "How are adapters used in the technology industry?",
        "output": "Adapters connect devices with incompatible ports, making it easy to integrate legacy and modern technologies."
    },
    {
        "input": "What technological resources are used in education in Guatemala?",
        "output": "Resources such as online learning platforms, mobile devices, and interactive applications are increasingly common in Guatemalan education."
    },
    {
        "input": "What components does a computer need for graphic design?",
        "output": "You need a powerful GPU, high-end processor, 16GB of RAM or more, SSD storage, and a monitor with good resolution."
    },
    {
        "input": "How does artificial intelligence relate to video games?",
        "output": "Artificial intelligence is used to create more realistic NPCs, dynamically adjust difficulty, and generate interactive environments and dialogues."
    },
    {
        "input": "What technological services are growing in Xela?",
        "output": "Services such as coworking, software development, programming workshops and online education are gaining popularity in Xela."
    },
    {
        "input": "What is a database management system?",
        "output": "It is a software that allows you to store, organize and manage data, such as MySQL, PostgreSQL or MongoDB."
    },
    {
        "input": "What technological advances stand out in Guatemala?",
        "output": "They highlight the growth of technology startups, the development of online educational platforms and the increase in internet access."
    },
    {
        "input": "What technologies facilitate remote work?",
        "output": "Tools like Zoom, Google Workspace, Slack, and collaboration platforms like Notion and Trello are key to remote work."
    },
    {
        "input": "How are mobile games developed?",
        "output": "Engines such as Unity or Unreal Engine are used, with specific tools to optimize graphics and performance on mobile devices."
    },
    {
        "input": "What benefits does the cloud have for business systems?",
        "output": "The cloud offers scalability, cost reduction, global accessibility, and services such as storage, databases, and data analytics."
    },
    {
        "input": "What other volcanoes can I visit in Guatemala besides Tajumulco?",
        "output": "In addition to Tajumulco, you can visit the Fuego Volcano, the Acatenango Volcano, the Pacaya Volcano and the Atitlán Volcano."
    },
    {
        "input": "How do technology startups affect development in Guatemala?",
        "output": "Startups drive innovation, create jobs and improve access to modern technologies in sectors such as education, health and commerce."
    },
    {
        "input": "What tools can I use to create a mobile game?",
        "output": "Engines like Unity, Unreal Engine, and Construct 3 are great options for developing mobile games."
    },
    {
        "input": "How does virtual reality influence education?",
        "output": "Virtual reality enables immersive experiences such as laboratory simulations, virtual tours of historical sites, and interactive learning."
    },
    {
        "input": "What is the difference between a physical server and a cloud server?",
        "output": "A physical server is located on your own premises, while a cloud server is managed by an external provider and is accessible from anywhere."
    },
    {
        "input": "What online learning platforms are popular in Guatemala?",
        "output": "Platforms such as Duolingo, Khan Academy, Platzi and Coursera are popular for online learning in Guatemala."
    },
    {
        "input": "How do I choose a good monitor for graphic design?",
        "output": "Look for a monitor with high resolution (at least 4K), wide color gamut (AdobeRGB or sRGB), and calibrated color accuracy."
    },
    {
        "input": "Which games use advanced artificial intelligence?",
        "output": "Games like The Last of Us, Red Dead Redemption 2, and Shadow of Mordor stand out for their advanced artificial intelligence in NPCs and environments."
    },
    {
        "input": "What is the difference between Zoom and Google Meet?",
        "output": "Zoom offers advanced features for mass meetings, while Google Meet is integrated with Google Workspace tools, ideal for collaboration."
    },
    {
        "input": "What type of coworking exists in Xela?",
        "output": "In Xela there are coworking spaces that offer high-speed internet, shared work areas and networking events for entrepreneurs."
    },
    {
        "input": "What advantages does MongoDB have over MySQL?",
        "output": "MongoDB is a non-relational database that offers greater flexibility for unstructured data, while MySQL is relational and follows strict schemas."
    },
    {
        "input": "What technology events usually take place in Guatemala?",
        "output": "Hackathons, technology fairs and programming workshops are common events in Guatemala to promote technological development."
    },
    {
        "input": "How do I optimize the performance of a video game on my PC?",
        "output": "Close background applications, adjust your game's graphics settings, and make sure your drivers are up to date."
    },
    {
        "input": "What is a distributed computing system?",
        "output": "It is a system where multiple computers work together to perform tasks as if they were a single unit."
    },
    {
        "input": "What adapter do I need to connect a MacBook to an HDMI monitor?",
        "output": "You need a USB-C to HDMI adapter compatible with your MacBook."
    },
    {
        "input": "What is a game engine and what are some examples?",
        "output": "A game engine is a software for creating games. Examples: Unity, Unreal Engine, and Godot."
    },
    {
        "input": "What technological traditions have developed in Guatemala?",
        "output": "Hackathons and technological training sessions are held in Guatemala as part of initiatives to promote local innovation."
    },
    {
        "input": "What factors to consider when choosing a database for a system?",
        "output": "Consider data type, scalability, query speed, and support for structured or unstructured data."
    },
    {
        "input": "How is the cloud transforming business in Guatemala?",
        "output": "The cloud allows businesses in Guatemala to access advanced tools such as CRM, data analytics and flexible storage without large initial investments."
    },
    {
        "input": "What does ray tracing mean in video games?",
        "output": "It is a rendering technique that simulates the realistic behavior of light to improve visual quality in video games."
    },
    {
        "input": "How is technology applied in educational systems in Xela?",
        "output": "It is used for virtual classes, educational management platforms and programming workshops for students."
    },
    {
        "input": "What is an Ethernet adapter and when do I need one?",
        "output": "An Ethernet adapter allows you to connect your device to the Internet via cable, ideal when Wi-Fi is not available or a more stable connection is needed."
    },
    {
        "input": "What specifications should a gaming computer have?",
        "output": "You should have a powerful graphics card, a fast processor, at least 16GB of RAM, and SSD storage."
    },
    {
        "input": "What graphics engines do the most popular video games use?",
        "output": "Engines like Unreal Engine, Unity and CryEngine are used in popular video games for their power and flexibility."
    },
    {
        "input": "What technologies are key to the development of technology startups?",
        "output": "Technologies such as cloud computing, artificial intelligence, data analysis and mobile application development are key for technology startups."
    },
    {
        "input": "What impact do technology fairs have in Guatemala?",
        "output": "They promote innovation, connect entrepreneurs with investors and encourage learning about new technologies."
    },
    {
        "input": "How does coworking work and what are its benefits?",
        "output": "It is a shared workspace with resources such as fast internet and meeting rooms, ideal for networking and productivity."
    },
    {
        "input": "What tools can I use to learn programming online?",
        "output": "Platforms like Codecademy, freeCodeCamp, and Khan Academy are great for learning programming from scratch."
    },
    {
        "input": "How is the graphic quality of a video game measured?",
        "output": "It is measured by factors such as resolution, lighting, textures, shading, and special effects like ray tracing."
    },
    {
        "input": "What is the difference between a coworking space and a traditional office?",
        "output": "A coworking space is a shared space with common resources, while a traditional office is usually private and dedicated to a single company."
    },
    {
        "input": "Which graphics engines are best for beginners?",
        "output": "Engines like Unity and Godot are ideal for beginners due to their ease of use and extensive documentation."
    },
    {
        "input": "What impact do hackathons have on the tech community?",
        "output": "Hackathons foster innovation, enable team problem-solving, and help participants learn new technological skills."
    },
    {
        "input": "What are the advantages of a non-relational database like MongoDB?",
        "output": "MongoDB is flexible, storing data in JSON format and easily handling dynamic or unstructured structures."
    },
    {
        "input": "What does it mean for a video game to have 4K resolution?",
        "output": "It means that the video game has a resolution of 3840x2160 pixels, offering more detailed and sharper graphics."
    },
    {
        "input": "What technologies are needed to develop mobile applications?",
        "output": "Technologies such as Swift for iOS, Kotlin for Android, or cross-platform frameworks such as Flutter or React Native are ideal."
    },
    {
        "input": "What factors affect the connection quality of an Ethernet adapter?",
        "output": "Factors such as adapter speed, cable quality, and router capacity affect the quality of the connection."
    },
    {
        "input": "How can I improve my work experience in a coworking space?",
        "output": "Maintain a routine, use available resources, participate in networking events and organize your workspace."
    },
    {
        "input": "What specifications does a gaming monitor need?",
        "output": "A gaming monitor should have a high refresh rate (144Hz or higher), low latency, and G-Sync or FreeSync compatibility."
    },
    {
        "input": "How to choose the best graphics engine for my project?",
        "output": "Consider the complexity of your project, your level of experience, and your target platforms. Unity is beginner-friendly and cross-platform."
    },
    {
        "input": "What is a hackathon and how can I participate?",
        "output": "A hackathon is an event where programmers work together to solve problems. You can participate by registering at local or online events."
    },
    {
        "input": "What is the difference between Flutter and React Native?",
        "output": "Flutter uses Dart and provides its own widgets, while React Native uses JavaScript and allows you to use native OS components."
    },
    {
        "input": "How do I connect multiple displays to my laptop?",
        "output": "Use available ports such as HDMI or USB-C, and if necessary, adapters to connect additional displays."
    },
    {
        "input": "What skills are needed to participate in a hackathon?",
        "output": "Skills such as programming, UX/UI design, problem-solving and teamwork are essential to participate in a hackathon."
    },
    {
        "input": "What is the difference between a startup and a traditional company?",
        "output": "A startup is a young company focused on innovation and rapid growth, while a traditional company usually has more established structures."
    },
    {
        "input": "How important are technology fairs in innovation?",
        "output": "Technology fairs allow new ideas to be presented, connect entrepreneurs with investors and foster collaborations on innovative projects."
    },
    {
        "input": "What factors to consider when purchasing a computer for graphic design?",
        "output": "Consider the processor power, the quality of the graphics card, the amount of RAM (at least 16 GB), and the screen resolution."
    },
    {
        "input": "What applications does ray tracing have beyond video games?",
        "output": "Ray tracing is used in architectural simulations, visual effects in films, and product design to depict realistic lighting."
    },
    {
        "input": "What collaboration tools are popular in coworking?",
        "output": "Tools like Slack, Trello, Google Workspace, and Notion are common for collaboration in coworking environments."
    },
    {
        "input": "What are the advantages of remote work for technology companies?",
        "output": "Remote work reduces operational costs, enables global talent recruitment and improves flexibility for employees."
    },
    {
        "input": "What technology is key for startups in Guatemala?",
        "output": "Technologies such as cloud platforms, artificial intelligence and mobile application development are key for startups in Guatemala."
    },
    {
        "input": "How do I optimize my computer's storage for gaming?",
        "output": "Use an SSD to load games faster, uninstall games you don't use, and organize files into specific folders."
    },
    {
        "input": "What are the differences between coworking and home office?",
        "output": "Coworking offers a collaborative and professional environment, while home office provides convenience but can be more lonely."
    },
    {
        "input": "What impact does ray tracing have on the performance of a video game?",
        "output": "Ray tracing may slow down performance due to its high resource demands, but modern graphics cards mitigate this impact."
    },
    {
        "input": "What online platforms teach game development?",
        "output": "Platforms like Unity Learn, Udemy, and Coursera offer in-depth courses on game development."
    },
    {
        "input": "What technological events are notable in Xela?",
        "output": "Hackathons, programming workshops and networking events for technology entrepreneurs are the highlights of Xela."
    },
    {
        "input": "What factors affect the graphic quality of a video game?",
        "output": "Factors such as resolution, textures, lighting, shading and special effects affect the graphical quality of a video game."
    },
    {
        "input": "How do I choose a laptop for software development?",
        "output": "Look for a laptop with a good processor (i5 or higher), at least 16 GB of RAM, SSD and long-lasting battery."
    },
    {
        "input": "What impact does coworking have on productivity?",
        "output": "Coworking fosters collaboration, provides a professional environment and reduces home distractions, improving productivity."
    },
    {
        "input": "Which Guatemalan traditions are most internationally recognized?",
        "output": "The carpets for Holy Week, the fiambre for the Day of the Dead and traditional dances such as the Rabinal Achí are widely recognized."
    },
    {
        "input": "What languages ​​are spoken in Guatemala besides Spanish?",
        "output": "In Guatemala, 22 Mayan languages ​​are spoken, in addition to Spanish. Some examples are K'iche', Q'eqchi' and Mam."
    },
    {
        "input": "What are the most important archaeological destinations in Guatemala?",
        "output": "Tikal, El Mirador and Yaxhá are some of the most important archaeological destinations in Guatemala."
    },
    {
        "input": "What impact does tourism have in Guatemala?",
        "output": "Tourism is a key source of income, fostering economic development and promoting Guatemalan culture internationally."
    },
    {
        "input": "What typical dishes stand out in Guatemalan gastronomy?",
        "output": "Dishes such as pepián, tamales, kak'ik and jocón are some of the most representative of Guatemalan cuisine."
    },
    {
        "input": "Which universities stand out in Xela?",
        "output": "The University of San Carlos of Guatemala (USAC) and the Mariano Gálvez University are some of the main educational institutions in Xela."
    },
    {
        "input": "What festivals are celebrated in Xela?",
        "output": "The Independence Fair, held in September, is one of the most important festivities in Xela."
    },
    {
        "input": "What natural attractions are there near Xela?",
        "output": "Attractions such as the Georginas Springs, the Santa María Volcano and El Baúl Hill are close to Xela."
    },
    {
        "input": "What is the weather like in Xela?",
        "output": "Xela has a temperate climate, with cool temperatures throughout the year and a rainy season from May to October."
    },
    {
        "input": "What importance does Xela have in the history of Guatemala?",
        "output": "Xela, or Quetzaltenango, was a key city during the colonial era and is known for its role in the independence of Central America."
    },
    {
        "input": "What technological advances are being promoted in Guatemala?",
        "output": "Startups are developing in fintech, online educational platforms and technological solutions for e-commerce."
    },
    {
        "input": "What opportunities does technology offer in the education sector?",
        "output": "Technology facilitates online learning, access to educational materials and training in digital skills."
    },
    {
        "input": "How does artificial intelligence affect modern technology?",
        "output": "Artificial intelligence improves automation, enables advanced data analysis and facilitates the personalization of services."
    },
    {
        "input": "What challenges does Guatemala face in its technological development?",
        "output": "Challenges such as lack of internet access in rural areas and inequality in technological education limit technological progress."
    },
    {
        "input": "What technological tools are key for entrepreneurs?",
        "output": "Tools like Google Workspace, Slack, Trello, and e-commerce platforms like Shopify are essential for entrepreneurs."
    },
    {
        "input": "What video game genres are most popular?",
        "output": "Genres such as action, adventure, RPG, shooters and simulation are very popular among gamers."
    },
    {
        "input": "What platforms are ideal for developing video games?",
        "output": "Platforms like Unity, Unreal Engine, and Godot are ideal for developing video games due to their integrated tools."
    },
    {
        "input": "What role does narrative play in video games?",
        "output": "Narrative in video games enhances player immersion and creates an emotional connection with the characters and story."
    },
    {
        "input": "What educational benefits do video games have?",
        "output": "Video games can improve skills such as problem-solving, memory, and teamwork, and can be used to teach complex concepts."
    },
    {
        "input": "What emerging technologies are transforming gaming?",
        "output": "Technologies such as virtual reality, ray tracing and artificial intelligence are transforming the gaming experience."
    },
    {
        "input": "What is an embedded system?",
        "output": "An embedded system is a computing system designed to perform specific tasks within a device, such as microcontrollers in home appliances."
    },
    {
        "input": "What types of distributed systems exist?",
        "output": "There are distributed systems such as storage networks, distributed computing systems, and distributed file systems."
    },
    {
        "input": "What is client-server architecture?",
        "output": "It is a model where clients send requests to a server, which processes them and returns the requested information or service."
    },
    {
        "input": "What are the advantages of virtualization in business systems?",
        "output": "Virtualization helps reduce hardware costs, improve scalability, and facilitate disaster recovery."
    },
    {
        "input": "What role does cybersecurity play in modern systems?",
        "output": "Cybersecurity protects systems against threats such as malware, phishing attacks and unauthorized access, ensuring data integrity."
    },
    {
        "input": "What features should I look for in a video editing computer?",
        "output": "Look for a fast processor, a powerful GPU, at least 16GB of RAM, and an SSD for fast storage."
    },
    {
        "input": "What types of video adapters are common?",
        "output": "HDMI, DisplayPort, VGA, and USB-C adapters are the most common for connecting devices to monitors or projectors."
    },
    {
        "input": "What is a multiport adapter and what is it used for?",
        "output": "It is a device that allows you to connect multiple types of peripherals to one port, such as USB-C to HDMI, Ethernet, and USB-A simultaneously."
    },
    {
        "input": "How to choose a power adapter for my laptop?",
        "output": "Make sure it is compatible with the voltage and amperage required by your laptop and, if possible, buy one from the original manufacturer."
    },
    {
        "input": "What is the difference between HDMI and DisplayPort?",
        "output": "HDMI is more common in TVs and projectors, while DisplayPort is used more in PC monitors due to its higher bandwidth."
    }
]